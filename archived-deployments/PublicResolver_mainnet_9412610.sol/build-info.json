{
  "id": "be2cc904c7e896082e3b628f897d5e7e",
  "_format": "hh-sol-build-info-1",
  "solcVersion": "0.5.17",
  "solcLongVersion": "0.5.17+commit.d19bba13",
  "input": {
    "language": "Solidity",
    "sources": {
      "contracts/legacy/PublicResolver_mainnet_9412610.sol": {
        "content": "/**\n *Submitted for verification at Etherscan.io on 2020-02-03\n */\n\n// File: @ensdomains/ens/contracts/ENS.sol\n\npragma solidity >=0.4.24;\n\ninterface ENS {\n  // Logged when the owner of a node assigns a new owner to a subnode.\n  event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\n\n  // Logged when the owner of a node transfers ownership to a new account.\n  event Transfer(bytes32 indexed node, address owner);\n\n  // Logged when the resolver for a node changes.\n  event NewResolver(bytes32 indexed node, address resolver);\n\n  // Logged when the TTL of a node changes\n  event NewTTL(bytes32 indexed node, uint64 ttl);\n\n  function setSubnodeOwner(\n    bytes32 node,\n    bytes32 label,\n    address owner\n  ) external;\n\n  function setResolver(bytes32 node, address resolver) external;\n\n  function setOwner(bytes32 node, address owner) external;\n\n  function setTTL(bytes32 node, uint64 ttl) external;\n\n  function owner(bytes32 node) external view returns (address);\n\n  function resolver(bytes32 node) external view returns (address);\n\n  function ttl(bytes32 node) external view returns (uint64);\n}\n\n// File: contracts/ResolverBase.sol\n\npragma solidity ^0.5.0;\n\ncontract ResolverBase {\n  bytes4 private constant INTERFACE_META_ID = 0x01ffc9a7;\n\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\n    return interfaceID == INTERFACE_META_ID;\n  }\n\n  function isAuthorised(bytes32 node) internal view returns (bool);\n\n  modifier authorised(bytes32 node) {\n    require(isAuthorised(node));\n    _;\n  }\n\n  function bytesToAddress(bytes memory b)\n    internal\n    pure\n    returns (address payable a)\n  {\n    require(b.length == 20);\n    assembly {\n      a := div(mload(add(b, 32)), exp(256, 12))\n    }\n  }\n\n  function addressToBytes(address a) internal pure returns (bytes memory b) {\n    b = new bytes(20);\n    assembly {\n      mstore(add(b, 32), mul(a, exp(256, 12)))\n    }\n  }\n}\n\n// File: contracts/profiles/ABIResolver.sol\n\npragma solidity ^0.5.0;\n\ncontract ABIResolver is ResolverBase {\n  bytes4 private constant ABI_INTERFACE_ID = 0x2203ab56;\n\n  event ABIChanged(bytes32 indexed node, uint256 indexed contentType);\n\n  mapping(bytes32 => mapping(uint256 => bytes)) abis;\n\n  /**\n   * Sets the ABI associated with an ENS node.\n   * Nodes may have one ABI of each content type. To remove an ABI, set it to\n   * the empty string.\n   * @param node The node to update.\n   * @param contentType The content type of the ABI\n   * @param data The ABI data.\n   */\n  function setABI(\n    bytes32 node,\n    uint256 contentType,\n    bytes calldata data\n  ) external authorised(node) {\n    // Content types must be powers of 2\n    require(((contentType - 1) & contentType) == 0);\n\n    abis[node][contentType] = data;\n    emit ABIChanged(node, contentType);\n  }\n\n  /**\n   * Returns the ABI associated with an ENS node.\n   * Defined in EIP205.\n   * @param node The ENS node to query\n   * @param contentTypes A bitwise OR of the ABI formats accepted by the caller.\n   * @return contentType The content type of the return value\n   * @return data The ABI data\n   */\n  function ABI(bytes32 node, uint256 contentTypes)\n    external\n    view\n    returns (uint256, bytes memory)\n  {\n    mapping(uint256 => bytes) storage abiset = abis[node];\n\n    for (\n      uint256 contentType = 1;\n      contentType <= contentTypes;\n      contentType <<= 1\n    ) {\n      if ((contentType & contentTypes) != 0 && abiset[contentType].length > 0) {\n        return (contentType, abiset[contentType]);\n      }\n    }\n\n    return (0, bytes(''));\n  }\n\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\n    return\n      interfaceID == ABI_INTERFACE_ID || super.supportsInterface(interfaceID);\n  }\n}\n\n// File: contracts/profiles/AddrResolver.sol\n\npragma solidity ^0.5.0;\n\ncontract AddrResolver is ResolverBase {\n  bytes4 private constant ADDR_INTERFACE_ID = 0x3b3b57de;\n  bytes4 private constant ADDRESS_INTERFACE_ID = 0xf1cb7e06;\n  uint256 private constant COIN_TYPE_ETH = 60;\n\n  event AddrChanged(bytes32 indexed node, address a);\n  event AddressChanged(\n    bytes32 indexed node,\n    uint256 coinType,\n    bytes newAddress\n  );\n\n  mapping(bytes32 => mapping(uint256 => bytes)) _addresses;\n\n  /**\n   * Sets the address associated with an ENS node.\n   * May only be called by the owner of that node in the ENS registry.\n   * @param node The node to update.\n   * @param a The address to set.\n   */\n  function setAddr(bytes32 node, address a) external authorised(node) {\n    setAddr(node, COIN_TYPE_ETH, addressToBytes(a));\n  }\n\n  /**\n   * Returns the address associated with an ENS node.\n   * @param node The ENS node to query.\n   * @return The associated address.\n   */\n  function addr(bytes32 node) public view returns (address payable) {\n    bytes memory a = addr(node, COIN_TYPE_ETH);\n    if (a.length == 0) {\n      return address(0);\n    }\n    return bytesToAddress(a);\n  }\n\n  function setAddr(\n    bytes32 node,\n    uint256 coinType,\n    bytes memory a\n  ) public authorised(node) {\n    emit AddressChanged(node, coinType, a);\n    if (coinType == COIN_TYPE_ETH) {\n      emit AddrChanged(node, bytesToAddress(a));\n    }\n    _addresses[node][coinType] = a;\n  }\n\n  function addr(bytes32 node, uint256 coinType)\n    public\n    view\n    returns (bytes memory)\n  {\n    return _addresses[node][coinType];\n  }\n\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\n    return\n      interfaceID == ADDR_INTERFACE_ID ||\n      interfaceID == ADDRESS_INTERFACE_ID ||\n      super.supportsInterface(interfaceID);\n  }\n}\n\n// File: contracts/profiles/ContentHashResolver.sol\n\npragma solidity ^0.5.0;\n\ncontract ContentHashResolver is ResolverBase {\n  bytes4 private constant CONTENT_HASH_INTERFACE_ID = 0xbc1c58d1;\n\n  event ContenthashChanged(bytes32 indexed node, bytes hash);\n\n  mapping(bytes32 => bytes) hashes;\n\n  /**\n   * Sets the contenthash associated with an ENS node.\n   * May only be called by the owner of that node in the ENS registry.\n   * @param node The node to update.\n   * @param hash The contenthash to set\n   */\n  function setContenthash(bytes32 node, bytes calldata hash)\n    external\n    authorised(node)\n  {\n    hashes[node] = hash;\n    emit ContenthashChanged(node, hash);\n  }\n\n  /**\n   * Returns the contenthash associated with an ENS node.\n   * @param node The ENS node to query.\n   * @return The associated contenthash.\n   */\n  function contenthash(bytes32 node) external view returns (bytes memory) {\n    return hashes[node];\n  }\n\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\n    return\n      interfaceID == CONTENT_HASH_INTERFACE_ID ||\n      super.supportsInterface(interfaceID);\n  }\n}\n\n// File: @ensdomains/dnssec-oracle/contracts/BytesUtils.sol\n\npragma solidity >0.4.23;\n\nlibrary BytesUtils {\n  /*\n   * @dev Returns the keccak-256 hash of a byte range.\n   * @param self The byte string to hash.\n   * @param offset The position to start hashing at.\n   * @param len The number of bytes to hash.\n   * @return The hash of the byte range.\n   */\n  function keccak(\n    bytes memory self,\n    uint256 offset,\n    uint256 len\n  ) internal pure returns (bytes32 ret) {\n    require(offset + len <= self.length);\n    assembly {\n      ret := keccak256(add(add(self, 32), offset), len)\n    }\n  }\n\n  /*\n   * @dev Returns a positive number if `other` comes lexicographically after\n   *      `self`, a negative number if it comes before, or zero if the\n   *      contents of the two bytes are equal.\n   * @param self The first bytes to compare.\n   * @param other The second bytes to compare.\n   * @return The result of the comparison.\n   */\n  function compare(bytes memory self, bytes memory other)\n    internal\n    pure\n    returns (int256)\n  {\n    return compare(self, 0, self.length, other, 0, other.length);\n  }\n\n  /*\n   * @dev Returns a positive number if `other` comes lexicographically after\n   *      `self`, a negative number if it comes before, or zero if the\n   *      contents of the two bytes are equal. Comparison is done per-rune,\n   *      on unicode codepoints.\n   * @param self The first bytes to compare.\n   * @param offset The offset of self.\n   * @param len    The length of self.\n   * @param other The second bytes to compare.\n   * @param otheroffset The offset of the other string.\n   * @param otherlen    The length of the other string.\n   * @return The result of the comparison.\n   */\n  function compare(\n    bytes memory self,\n    uint256 offset,\n    uint256 len,\n    bytes memory other,\n    uint256 otheroffset,\n    uint256 otherlen\n  ) internal pure returns (int256) {\n    uint256 shortest = len;\n    if (otherlen < len) shortest = otherlen;\n\n    uint256 selfptr;\n    uint256 otherptr;\n\n    assembly {\n      selfptr := add(self, add(offset, 32))\n      otherptr := add(other, add(otheroffset, 32))\n    }\n    for (uint256 idx = 0; idx < shortest; idx += 32) {\n      uint256 a;\n      uint256 b;\n      assembly {\n        a := mload(selfptr)\n        b := mload(otherptr)\n      }\n      if (a != b) {\n        // Mask out irrelevant bytes and check again\n        uint256 mask;\n        if (shortest > 32) {\n          mask = uint256(-1); // aka 0xffffff....\n        } else {\n          mask = ~(2**(8 * (32 - shortest + idx)) - 1);\n        }\n        uint256 diff = (a & mask) - (b & mask);\n        if (diff != 0) return int256(diff);\n      }\n      selfptr += 32;\n      otherptr += 32;\n    }\n\n    return int256(len) - int256(otherlen);\n  }\n\n  /*\n   * @dev Returns true if the two byte ranges are equal.\n   * @param self The first byte range to compare.\n   * @param offset The offset into the first byte range.\n   * @param other The second byte range to compare.\n   * @param otherOffset The offset into the second byte range.\n   * @param len The number of bytes to compare\n   * @return True if the byte ranges are equal, false otherwise.\n   */\n  function equals(\n    bytes memory self,\n    uint256 offset,\n    bytes memory other,\n    uint256 otherOffset,\n    uint256 len\n  ) internal pure returns (bool) {\n    return keccak(self, offset, len) == keccak(other, otherOffset, len);\n  }\n\n  /*\n   * @dev Returns true if the two byte ranges are equal with offsets.\n   * @param self The first byte range to compare.\n   * @param offset The offset into the first byte range.\n   * @param other The second byte range to compare.\n   * @param otherOffset The offset into the second byte range.\n   * @return True if the byte ranges are equal, false otherwise.\n   */\n  function equals(\n    bytes memory self,\n    uint256 offset,\n    bytes memory other,\n    uint256 otherOffset\n  ) internal pure returns (bool) {\n    return\n      keccak(self, offset, self.length - offset) ==\n      keccak(other, otherOffset, other.length - otherOffset);\n  }\n\n  /*\n   * @dev Compares a range of 'self' to all of 'other' and returns True iff\n   *      they are equal.\n   * @param self The first byte range to compare.\n   * @param offset The offset into the first byte range.\n   * @param other The second byte range to compare.\n   * @return True if the byte ranges are equal, false otherwise.\n   */\n  function equals(\n    bytes memory self,\n    uint256 offset,\n    bytes memory other\n  ) internal pure returns (bool) {\n    return\n      self.length >= offset + other.length &&\n      equals(self, offset, other, 0, other.length);\n  }\n\n  /*\n   * @dev Returns true if the two byte ranges are equal.\n   * @param self The first byte range to compare.\n   * @param other The second byte range to compare.\n   * @return True if the byte ranges are equal, false otherwise.\n   */\n  function equals(bytes memory self, bytes memory other)\n    internal\n    pure\n    returns (bool)\n  {\n    return\n      self.length == other.length && equals(self, 0, other, 0, self.length);\n  }\n\n  /*\n   * @dev Returns the 8-bit number at the specified index of self.\n   * @param self The byte string.\n   * @param idx The index into the bytes\n   * @return The specified 8 bits of the string, interpreted as an integer.\n   */\n  function readUint8(bytes memory self, uint256 idx)\n    internal\n    pure\n    returns (uint8 ret)\n  {\n    return uint8(self[idx]);\n  }\n\n  /*\n   * @dev Returns the 16-bit number at the specified index of self.\n   * @param self The byte string.\n   * @param idx The index into the bytes\n   * @return The specified 16 bits of the string, interpreted as an integer.\n   */\n  function readUint16(bytes memory self, uint256 idx)\n    internal\n    pure\n    returns (uint16 ret)\n  {\n    require(idx + 2 <= self.length);\n    assembly {\n      ret := and(mload(add(add(self, 2), idx)), 0xFFFF)\n    }\n  }\n\n  /*\n   * @dev Returns the 32-bit number at the specified index of self.\n   * @param self The byte string.\n   * @param idx The index into the bytes\n   * @return The specified 32 bits of the string, interpreted as an integer.\n   */\n  function readUint32(bytes memory self, uint256 idx)\n    internal\n    pure\n    returns (uint32 ret)\n  {\n    require(idx + 4 <= self.length);\n    assembly {\n      ret := and(mload(add(add(self, 4), idx)), 0xFFFFFFFF)\n    }\n  }\n\n  /*\n   * @dev Returns the 32 byte value at the specified index of self.\n   * @param self The byte string.\n   * @param idx The index into the bytes\n   * @return The specified 32 bytes of the string.\n   */\n  function readBytes32(bytes memory self, uint256 idx)\n    internal\n    pure\n    returns (bytes32 ret)\n  {\n    require(idx + 32 <= self.length);\n    assembly {\n      ret := mload(add(add(self, 32), idx))\n    }\n  }\n\n  /*\n   * @dev Returns the 32 byte value at the specified index of self.\n   * @param self The byte string.\n   * @param idx The index into the bytes\n   * @return The specified 32 bytes of the string.\n   */\n  function readBytes20(bytes memory self, uint256 idx)\n    internal\n    pure\n    returns (bytes20 ret)\n  {\n    require(idx + 20 <= self.length);\n    assembly {\n      ret := and(\n        mload(add(add(self, 32), idx)),\n        0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000\n      )\n    }\n  }\n\n  /*\n   * @dev Returns the n byte value at the specified index of self.\n   * @param self The byte string.\n   * @param idx The index into the bytes.\n   * @param len The number of bytes.\n   * @return The specified 32 bytes of the string.\n   */\n  function readBytesN(\n    bytes memory self,\n    uint256 idx,\n    uint256 len\n  ) internal pure returns (bytes32 ret) {\n    require(len <= 32);\n    require(idx + len <= self.length);\n    assembly {\n      let mask := not(sub(exp(256, sub(32, len)), 1))\n      ret := and(mload(add(add(self, 32), idx)), mask)\n    }\n  }\n\n  function memcpy(\n    uint256 dest,\n    uint256 src,\n    uint256 len\n  ) private pure {\n    // Copy word-length chunks while possible\n    for (; len >= 32; len -= 32) {\n      assembly {\n        mstore(dest, mload(src))\n      }\n      dest += 32;\n      src += 32;\n    }\n\n    // Copy remaining bytes\n    uint256 mask = 256**(32 - len) - 1;\n    assembly {\n      let srcpart := and(mload(src), not(mask))\n      let destpart := and(mload(dest), mask)\n      mstore(dest, or(destpart, srcpart))\n    }\n  }\n\n  /*\n   * @dev Copies a substring into a new byte string.\n   * @param self The byte string to copy from.\n   * @param offset The offset to start copying at.\n   * @param len The number of bytes to copy.\n   */\n  function substring(\n    bytes memory self,\n    uint256 offset,\n    uint256 len\n  ) internal pure returns (bytes memory) {\n    require(offset + len <= self.length);\n\n    bytes memory ret = new bytes(len);\n    uint256 dest;\n    uint256 src;\n\n    assembly {\n      dest := add(ret, 32)\n      src := add(add(self, 32), offset)\n    }\n    memcpy(dest, src, len);\n\n    return ret;\n  }\n\n  // Maps characters from 0x30 to 0x7A to their base32 values.\n  // 0xFF represents invalid characters in that range.\n  bytes constant base32HexTable =\n    hex'00010203040506070809FFFFFFFFFFFFFF0A0B0C0D0E0F101112131415161718191A1B1C1D1E1FFFFFFFFFFFFFFFFFFFFF0A0B0C0D0E0F101112131415161718191A1B1C1D1E1F';\n\n  /**\n   * @dev Decodes unpadded base32 data of up to one word in length.\n   * @param self The data to decode.\n   * @param off Offset into the string to start at.\n   * @param len Number of characters to decode.\n   * @return The decoded data, left aligned.\n   */\n  function base32HexDecodeWord(\n    bytes memory self,\n    uint256 off,\n    uint256 len\n  ) internal pure returns (bytes32) {\n    require(len <= 52);\n\n    uint256 ret = 0;\n    uint8 decoded;\n    for (uint256 i = 0; i < len; i++) {\n      bytes1 char = self[off + i];\n      require(char >= 0x30 && char <= 0x7A);\n      decoded = uint8(base32HexTable[uint256(uint8(char)) - 0x30]);\n      require(decoded <= 0x20);\n      if (i == len - 1) {\n        break;\n      }\n      ret = (ret << 5) | decoded;\n    }\n\n    uint256 bitlen = len * 5;\n    if (len % 8 == 0) {\n      // Multiple of 8 characters, no padding\n      ret = (ret << 5) | decoded;\n    } else if (len % 8 == 2) {\n      // Two extra characters - 1 byte\n      ret = (ret << 3) | (decoded >> 2);\n      bitlen -= 2;\n    } else if (len % 8 == 4) {\n      // Four extra characters - 2 bytes\n      ret = (ret << 1) | (decoded >> 4);\n      bitlen -= 4;\n    } else if (len % 8 == 5) {\n      // Five extra characters - 3 bytes\n      ret = (ret << 4) | (decoded >> 1);\n      bitlen -= 1;\n    } else if (len % 8 == 7) {\n      // Seven extra characters - 4 bytes\n      ret = (ret << 2) | (decoded >> 3);\n      bitlen -= 3;\n    } else {\n      revert();\n    }\n\n    return bytes32(ret << (256 - bitlen));\n  }\n}\n\n// File: @ensdomains/buffer/contracts/Buffer.sol\n\npragma solidity >0.4.18;\n\n/**\n * @dev A library for working with mutable byte buffers in Solidity.\n *\n * Byte buffers are mutable and expandable, and provide a variety of primitives\n * for writing to them. At any time you can fetch a bytes object containing the\n * current contents of the buffer. The bytes object should not be stored between\n * operations, as it may change due to resizing of the buffer.\n */\nlibrary Buffer {\n  /**\n   * @dev Represents a mutable buffer. Buffers have a current value (buf) and\n   *      a capacity. The capacity may be longer than the current value, in\n   *      which case it can be extended without the need to allocate more memory.\n   */\n  struct buffer {\n    bytes buf;\n    uint256 capacity;\n  }\n\n  /**\n   * @dev Initializes a buffer with an initial capacity.\n   * @param buf The buffer to initialize.\n   * @param capacity The number of bytes of space to allocate the buffer.\n   * @return The buffer, for chaining.\n   */\n  function init(buffer memory buf, uint256 capacity)\n    internal\n    pure\n    returns (buffer memory)\n  {\n    if (capacity % 32 != 0) {\n      capacity += 32 - (capacity % 32);\n    }\n    // Allocate space for the buffer data\n    buf.capacity = capacity;\n    assembly {\n      let ptr := mload(0x40)\n      mstore(buf, ptr)\n      mstore(ptr, 0)\n      mstore(0x40, add(32, add(ptr, capacity)))\n    }\n    return buf;\n  }\n\n  /**\n   * @dev Initializes a new buffer from an existing bytes object.\n   *      Changes to the buffer may mutate the original value.\n   * @param b The bytes object to initialize the buffer with.\n   * @return A new buffer.\n   */\n  function fromBytes(bytes memory b) internal pure returns (buffer memory) {\n    buffer memory buf;\n    buf.buf = b;\n    buf.capacity = b.length;\n    return buf;\n  }\n\n  function resize(buffer memory buf, uint256 capacity) private pure {\n    bytes memory oldbuf = buf.buf;\n    init(buf, capacity);\n    append(buf, oldbuf);\n  }\n\n  function max(uint256 a, uint256 b) private pure returns (uint256) {\n    if (a > b) {\n      return a;\n    }\n    return b;\n  }\n\n  /**\n   * @dev Sets buffer length to 0.\n   * @param buf The buffer to truncate.\n   * @return The original buffer, for chaining..\n   */\n  function truncate(buffer memory buf) internal pure returns (buffer memory) {\n    assembly {\n      let bufptr := mload(buf)\n      mstore(bufptr, 0)\n    }\n    return buf;\n  }\n\n  /**\n   * @dev Writes a byte string to a buffer. Resizes if doing so would exceed\n   *      the capacity of the buffer.\n   * @param buf The buffer to append to.\n   * @param off The start offset to write to.\n   * @param data The data to append.\n   * @param len The number of bytes to copy.\n   * @return The original buffer, for chaining.\n   */\n  function write(\n    buffer memory buf,\n    uint256 off,\n    bytes memory data,\n    uint256 len\n  ) internal pure returns (buffer memory) {\n    require(len <= data.length);\n\n    if (off + len > buf.capacity) {\n      resize(buf, max(buf.capacity, len + off) * 2);\n    }\n\n    uint256 dest;\n    uint256 src;\n    assembly {\n      // Memory address of the buffer data\n      let bufptr := mload(buf)\n      // Length of existing buffer data\n      let buflen := mload(bufptr)\n      // Start address = buffer address + offset + sizeof(buffer length)\n      dest := add(add(bufptr, 32), off)\n      // Update buffer length if we're extending it\n      if gt(add(len, off), buflen) {\n        mstore(bufptr, add(len, off))\n      }\n      src := add(data, 32)\n    }\n\n    // Copy word-length chunks while possible\n    for (; len >= 32; len -= 32) {\n      assembly {\n        mstore(dest, mload(src))\n      }\n      dest += 32;\n      src += 32;\n    }\n\n    // Copy remaining bytes\n    uint256 mask = 256**(32 - len) - 1;\n    assembly {\n      let srcpart := and(mload(src), not(mask))\n      let destpart := and(mload(dest), mask)\n      mstore(dest, or(destpart, srcpart))\n    }\n\n    return buf;\n  }\n\n  /**\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\n   *      the capacity of the buffer.\n   * @param buf The buffer to append to.\n   * @param data The data to append.\n   * @param len The number of bytes to copy.\n   * @return The original buffer, for chaining.\n   */\n  function append(\n    buffer memory buf,\n    bytes memory data,\n    uint256 len\n  ) internal pure returns (buffer memory) {\n    return write(buf, buf.buf.length, data, len);\n  }\n\n  /**\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\n   *      the capacity of the buffer.\n   * @param buf The buffer to append to.\n   * @param data The data to append.\n   * @return The original buffer, for chaining.\n   */\n  function append(buffer memory buf, bytes memory data)\n    internal\n    pure\n    returns (buffer memory)\n  {\n    return write(buf, buf.buf.length, data, data.length);\n  }\n\n  /**\n   * @dev Writes a byte to the buffer. Resizes if doing so would exceed the\n   *      capacity of the buffer.\n   * @param buf The buffer to append to.\n   * @param off The offset to write the byte at.\n   * @param data The data to append.\n   * @return The original buffer, for chaining.\n   */\n  function writeUint8(\n    buffer memory buf,\n    uint256 off,\n    uint8 data\n  ) internal pure returns (buffer memory) {\n    if (off >= buf.capacity) {\n      resize(buf, buf.capacity * 2);\n    }\n\n    assembly {\n      // Memory address of the buffer data\n      let bufptr := mload(buf)\n      // Length of existing buffer data\n      let buflen := mload(bufptr)\n      // Address = buffer address + sizeof(buffer length) + off\n      let dest := add(add(bufptr, off), 32)\n      mstore8(dest, data)\n      // Update buffer length if we extended it\n      if eq(off, buflen) {\n        mstore(bufptr, add(buflen, 1))\n      }\n    }\n    return buf;\n  }\n\n  /**\n   * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\n   *      capacity of the buffer.\n   * @param buf The buffer to append to.\n   * @param data The data to append.\n   * @return The original buffer, for chaining.\n   */\n  function appendUint8(buffer memory buf, uint8 data)\n    internal\n    pure\n    returns (buffer memory)\n  {\n    return writeUint8(buf, buf.buf.length, data);\n  }\n\n  /**\n   * @dev Writes up to 32 bytes to the buffer. Resizes if doing so would\n   *      exceed the capacity of the buffer.\n   * @param buf The buffer to append to.\n   * @param off The offset to write at.\n   * @param data The data to append.\n   * @param len The number of bytes to write (left-aligned).\n   * @return The original buffer, for chaining.\n   */\n  function write(\n    buffer memory buf,\n    uint256 off,\n    bytes32 data,\n    uint256 len\n  ) private pure returns (buffer memory) {\n    if (len + off > buf.capacity) {\n      resize(buf, (len + off) * 2);\n    }\n\n    uint256 mask = 256**len - 1;\n    // Right-align data\n    data = data >> (8 * (32 - len));\n    assembly {\n      // Memory address of the buffer data\n      let bufptr := mload(buf)\n      // Address = buffer address + sizeof(buffer length) + off + len\n      let dest := add(add(bufptr, off), len)\n      mstore(dest, or(and(mload(dest), not(mask)), data))\n      // Update buffer length if we extended it\n      if gt(add(off, len), mload(bufptr)) {\n        mstore(bufptr, add(off, len))\n      }\n    }\n    return buf;\n  }\n\n  /**\n   * @dev Writes a bytes20 to the buffer. Resizes if doing so would exceed the\n   *      capacity of the buffer.\n   * @param buf The buffer to append to.\n   * @param off The offset to write at.\n   * @param data The data to append.\n   * @return The original buffer, for chaining.\n   */\n  function writeBytes20(\n    buffer memory buf,\n    uint256 off,\n    bytes20 data\n  ) internal pure returns (buffer memory) {\n    return write(buf, off, bytes32(data), 20);\n  }\n\n  /**\n   * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\n   *      the capacity of the buffer.\n   * @param buf The buffer to append to.\n   * @param data The data to append.\n   * @return The original buffer, for chhaining.\n   */\n  function appendBytes20(buffer memory buf, bytes20 data)\n    internal\n    pure\n    returns (buffer memory)\n  {\n    return write(buf, buf.buf.length, bytes32(data), 20);\n  }\n\n  /**\n   * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\n   *      the capacity of the buffer.\n   * @param buf The buffer to append to.\n   * @param data The data to append.\n   * @return The original buffer, for chaining.\n   */\n  function appendBytes32(buffer memory buf, bytes32 data)\n    internal\n    pure\n    returns (buffer memory)\n  {\n    return write(buf, buf.buf.length, data, 32);\n  }\n\n  /**\n   * @dev Writes an integer to the buffer. Resizes if doing so would exceed\n   *      the capacity of the buffer.\n   * @param buf The buffer to append to.\n   * @param off The offset to write at.\n   * @param data The data to append.\n   * @param len The number of bytes to write (right-aligned).\n   * @return The original buffer, for chaining.\n   */\n  function writeInt(\n    buffer memory buf,\n    uint256 off,\n    uint256 data,\n    uint256 len\n  ) private pure returns (buffer memory) {\n    if (len + off > buf.capacity) {\n      resize(buf, (len + off) * 2);\n    }\n\n    uint256 mask = 256**len - 1;\n    assembly {\n      // Memory address of the buffer data\n      let bufptr := mload(buf)\n      // Address = buffer address + off + sizeof(buffer length) + len\n      let dest := add(add(bufptr, off), len)\n      mstore(dest, or(and(mload(dest), not(mask)), data))\n      // Update buffer length if we extended it\n      if gt(add(off, len), mload(bufptr)) {\n        mstore(bufptr, add(off, len))\n      }\n    }\n    return buf;\n  }\n\n  /**\n   * @dev Appends a byte to the end of the buffer. Resizes if doing so would\n   * exceed the capacity of the buffer.\n   * @param buf The buffer to append to.\n   * @param data The data to append.\n   * @return The original buffer.\n   */\n  function appendInt(\n    buffer memory buf,\n    uint256 data,\n    uint256 len\n  ) internal pure returns (buffer memory) {\n    return writeInt(buf, buf.buf.length, data, len);\n  }\n}\n\n// File: @ensdomains/dnssec-oracle/contracts/RRUtils.sol\n\npragma solidity >0.4.23;\n\n/**\n * @dev RRUtils is a library that provides utilities for parsing DNS resource records.\n */\nlibrary RRUtils {\n  using BytesUtils for *;\n  using Buffer for *;\n\n  /**\n   * @dev Returns the number of bytes in the DNS name at 'offset' in 'self'.\n   * @param self The byte array to read a name from.\n   * @param offset The offset to start reading at.\n   * @return The length of the DNS name at 'offset', in bytes.\n   */\n  function nameLength(bytes memory self, uint256 offset)\n    internal\n    pure\n    returns (uint256)\n  {\n    uint256 idx = offset;\n    while (true) {\n      assert(idx < self.length);\n      uint256 labelLen = self.readUint8(idx);\n      idx += labelLen + 1;\n      if (labelLen == 0) {\n        break;\n      }\n    }\n    return idx - offset;\n  }\n\n  /**\n   * @dev Returns a DNS format name at the specified offset of self.\n   * @param self The byte array to read a name from.\n   * @param offset The offset to start reading at.\n   * @return The name.\n   */\n  function readName(bytes memory self, uint256 offset)\n    internal\n    pure\n    returns (bytes memory ret)\n  {\n    uint256 len = nameLength(self, offset);\n    return self.substring(offset, len);\n  }\n\n  /**\n   * @dev Returns the number of labels in the DNS name at 'offset' in 'self'.\n   * @param self The byte array to read a name from.\n   * @param offset The offset to start reading at.\n   * @return The number of labels in the DNS name at 'offset', in bytes.\n   */\n  function labelCount(bytes memory self, uint256 offset)\n    internal\n    pure\n    returns (uint256)\n  {\n    uint256 count = 0;\n    while (true) {\n      assert(offset < self.length);\n      uint256 labelLen = self.readUint8(offset);\n      offset += labelLen + 1;\n      if (labelLen == 0) {\n        break;\n      }\n      count += 1;\n    }\n    return count;\n  }\n\n  /**\n   * @dev An iterator over resource records.\n   */\n  struct RRIterator {\n    bytes data;\n    uint256 offset;\n    uint16 dnstype;\n    uint16 class;\n    uint32 ttl;\n    uint256 rdataOffset;\n    uint256 nextOffset;\n  }\n\n  /**\n   * @dev Begins iterating over resource records.\n   * @param self The byte string to read from.\n   * @param offset The offset to start reading at.\n   * @return An iterator object.\n   */\n  function iterateRRs(bytes memory self, uint256 offset)\n    internal\n    pure\n    returns (RRIterator memory ret)\n  {\n    ret.data = self;\n    ret.nextOffset = offset;\n    next(ret);\n  }\n\n  /**\n   * @dev Returns true iff there are more RRs to iterate.\n   * @param iter The iterator to check.\n   * @return True iff the iterator has finished.\n   */\n  function done(RRIterator memory iter) internal pure returns (bool) {\n    return iter.offset >= iter.data.length;\n  }\n\n  /**\n   * @dev Moves the iterator to the next resource record.\n   * @param iter The iterator to advance.\n   */\n  function next(RRIterator memory iter) internal pure {\n    iter.offset = iter.nextOffset;\n    if (iter.offset >= iter.data.length) {\n      return;\n    }\n\n    // Skip the name\n    uint256 off = iter.offset + nameLength(iter.data, iter.offset);\n\n    // Read type, class, and ttl\n    iter.dnstype = iter.data.readUint16(off);\n    off += 2;\n    iter.class = iter.data.readUint16(off);\n    off += 2;\n    iter.ttl = iter.data.readUint32(off);\n    off += 4;\n\n    // Read the rdata\n    uint256 rdataLength = iter.data.readUint16(off);\n    off += 2;\n    iter.rdataOffset = off;\n    iter.nextOffset = off + rdataLength;\n  }\n\n  /**\n   * @dev Returns the name of the current record.\n   * @param iter The iterator.\n   * @return A new bytes object containing the owner name from the RR.\n   */\n  function name(RRIterator memory iter) internal pure returns (bytes memory) {\n    return iter.data.substring(iter.offset, nameLength(iter.data, iter.offset));\n  }\n\n  /**\n   * @dev Returns the rdata portion of the current record.\n   * @param iter The iterator.\n   * @return A new bytes object containing the RR's RDATA.\n   */\n  function rdata(RRIterator memory iter) internal pure returns (bytes memory) {\n    return\n      iter.data.substring(iter.rdataOffset, iter.nextOffset - iter.rdataOffset);\n  }\n\n  /**\n   * @dev Checks if a given RR type exists in a type bitmap.\n   * @param self The byte string to read the type bitmap from.\n   * @param offset The offset to start reading at.\n   * @param rrtype The RR type to check for.\n   * @return True if the type is found in the bitmap, false otherwise.\n   */\n  function checkTypeBitmap(\n    bytes memory self,\n    uint256 offset,\n    uint16 rrtype\n  ) internal pure returns (bool) {\n    uint8 typeWindow = uint8(rrtype >> 8);\n    uint8 windowByte = uint8((rrtype & 0xff) / 8);\n    uint8 windowBitmask = uint8(uint8(1) << (uint8(7) - uint8(rrtype & 0x7)));\n    for (uint256 off = offset; off < self.length; ) {\n      uint8 window = self.readUint8(off);\n      uint8 len = self.readUint8(off + 1);\n      if (typeWindow < window) {\n        // We've gone past our window; it's not here.\n        return false;\n      } else if (typeWindow == window) {\n        // Check this type bitmap\n        if (len * 8 <= windowByte) {\n          // Our type is past the end of the bitmap\n          return false;\n        }\n        return (self.readUint8(off + windowByte + 2) & windowBitmask) != 0;\n      } else {\n        // Skip this type bitmap\n        off += len + 2;\n      }\n    }\n\n    return false;\n  }\n\n  function compareNames(bytes memory self, bytes memory other)\n    internal\n    pure\n    returns (int256)\n  {\n    if (self.equals(other)) {\n      return 0;\n    }\n\n    uint256 off;\n    uint256 otheroff;\n    uint256 prevoff;\n    uint256 otherprevoff;\n    uint256 counts = labelCount(self, 0);\n    uint256 othercounts = labelCount(other, 0);\n\n    // Keep removing labels from the front of the name until both names are equal length\n    while (counts > othercounts) {\n      prevoff = off;\n      off = progress(self, off);\n      counts--;\n    }\n\n    while (othercounts > counts) {\n      otherprevoff = otheroff;\n      otheroff = progress(other, otheroff);\n      othercounts--;\n    }\n\n    // Compare the last nonequal labels to each other\n    while (counts > 0 && !self.equals(off, other, otheroff)) {\n      prevoff = off;\n      off = progress(self, off);\n      otherprevoff = otheroff;\n      otheroff = progress(other, otheroff);\n      counts -= 1;\n    }\n\n    if (off == 0) {\n      return -1;\n    }\n    if (otheroff == 0) {\n      return 1;\n    }\n\n    return\n      self.compare(\n        prevoff + 1,\n        self.readUint8(prevoff),\n        other,\n        otherprevoff + 1,\n        other.readUint8(otherprevoff)\n      );\n  }\n\n  function progress(bytes memory body, uint256 off)\n    internal\n    pure\n    returns (uint256)\n  {\n    return off + 1 + body.readUint8(off);\n  }\n}\n\n// File: contracts/profiles/DNSResolver.sol\n\npragma solidity ^0.5.0;\n\ncontract DNSResolver is ResolverBase {\n  using RRUtils for *;\n  using BytesUtils for bytes;\n\n  bytes4 private constant DNS_RECORD_INTERFACE_ID = 0xa8fa5682;\n\n  // DNSRecordChanged is emitted whenever a given node/name/resource's RRSET is updated.\n  event DNSRecordChanged(\n    bytes32 indexed node,\n    bytes name,\n    uint16 resource,\n    bytes record\n  );\n  // DNSRecordDeleted is emitted whenever a given node/name/resource's RRSET is deleted.\n  event DNSRecordDeleted(bytes32 indexed node, bytes name, uint16 resource);\n  // DNSZoneCleared is emitted whenever a given node's zone information is cleared.\n  event DNSZoneCleared(bytes32 indexed node);\n\n  // Version the mapping for each zone.  This allows users who have lost\n  // track of their entries to effectively delete an entire zone by bumping\n  // the version number.\n  // node => version\n  mapping(bytes32 => uint256) private versions;\n\n  // The records themselves.  Stored as binary RRSETs\n  // node => version => name => resource => data\n  mapping(bytes32 => mapping(uint256 => mapping(bytes32 => mapping(uint16 => bytes))))\n    private records;\n\n  // Count of number of entries for a given name.  Required for DNS resolvers\n  // when resolving wildcards.\n  // node => version => name => number of records\n  mapping(bytes32 => mapping(uint256 => mapping(bytes32 => uint16)))\n    private nameEntriesCount;\n\n  /**\n   * Set one or more DNS records.  Records are supplied in wire-format.\n   * Records with the same node/name/resource must be supplied one after the\n   * other to ensure the data is updated correctly. For example, if the data\n   * was supplied:\n   *     a.example.com IN A 1.2.3.4\n   *     a.example.com IN A 5.6.7.8\n   *     www.example.com IN CNAME a.example.com.\n   * then this would store the two A records for a.example.com correctly as a\n   * single RRSET, however if the data was supplied:\n   *     a.example.com IN A 1.2.3.4\n   *     www.example.com IN CNAME a.example.com.\n   *     a.example.com IN A 5.6.7.8\n   * then this would store the first A record, the CNAME, then the second A\n   * record which would overwrite the first.\n   *\n   * @param node the namehash of the node for which to set the records\n   * @param data the DNS wire format records to set\n   */\n  function setDNSRecords(bytes32 node, bytes calldata data)\n    external\n    authorised(node)\n  {\n    uint16 resource = 0;\n    uint256 offset = 0;\n    bytes memory name;\n    bytes memory value;\n    bytes32 nameHash;\n    // Iterate over the data to add the resource records\n    for (\n      RRUtils.RRIterator memory iter = data.iterateRRs(0);\n      !iter.done();\n      iter.next()\n    ) {\n      if (resource == 0) {\n        resource = iter.dnstype;\n        name = iter.name();\n        nameHash = keccak256(abi.encodePacked(name));\n        value = bytes(iter.rdata());\n      } else {\n        bytes memory newName = iter.name();\n        if (resource != iter.dnstype || !name.equals(newName)) {\n          setDNSRRSet(\n            node,\n            name,\n            resource,\n            data,\n            offset,\n            iter.offset - offset,\n            value.length == 0\n          );\n          resource = iter.dnstype;\n          offset = iter.offset;\n          name = newName;\n          nameHash = keccak256(name);\n          value = bytes(iter.rdata());\n        }\n      }\n    }\n    if (name.length > 0) {\n      setDNSRRSet(\n        node,\n        name,\n        resource,\n        data,\n        offset,\n        data.length - offset,\n        value.length == 0\n      );\n    }\n  }\n\n  /**\n   * Obtain a DNS record.\n   * @param node the namehash of the node for which to fetch the record\n   * @param name the keccak-256 hash of the fully-qualified name for which to fetch the record\n   * @param resource the ID of the resource as per https://en.wikipedia.org/wiki/List_of_DNS_record_types\n   * @return the DNS record in wire format if present, otherwise empty\n   */\n  function dnsRecord(\n    bytes32 node,\n    bytes32 name,\n    uint16 resource\n  ) public view returns (bytes memory) {\n    return records[node][versions[node]][name][resource];\n  }\n\n  /**\n   * Check if a given node has records.\n   * @param node the namehash of the node for which to check the records\n   * @param name the namehash of the node for which to check the records\n   */\n  function hasDNSRecords(bytes32 node, bytes32 name)\n    public\n    view\n    returns (bool)\n  {\n    return (nameEntriesCount[node][versions[node]][name] != 0);\n  }\n\n  /**\n   * Clear all information for a DNS zone.\n   * @param node the namehash of the node for which to clear the zone\n   */\n  function clearDNSZone(bytes32 node) public authorised(node) {\n    versions[node]++;\n    emit DNSZoneCleared(node);\n  }\n\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\n    return\n      interfaceID == DNS_RECORD_INTERFACE_ID ||\n      super.supportsInterface(interfaceID);\n  }\n\n  function setDNSRRSet(\n    bytes32 node,\n    bytes memory name,\n    uint16 resource,\n    bytes memory data,\n    uint256 offset,\n    uint256 size,\n    bool deleteRecord\n  ) private {\n    uint256 version = versions[node];\n    bytes32 nameHash = keccak256(name);\n    bytes memory rrData = data.substring(offset, size);\n    if (deleteRecord) {\n      if (records[node][version][nameHash][resource].length != 0) {\n        nameEntriesCount[node][version][nameHash]--;\n      }\n      delete (records[node][version][nameHash][resource]);\n      emit DNSRecordDeleted(node, name, resource);\n    } else {\n      if (records[node][version][nameHash][resource].length == 0) {\n        nameEntriesCount[node][version][nameHash]++;\n      }\n      records[node][version][nameHash][resource] = rrData;\n      emit DNSRecordChanged(node, name, resource, rrData);\n    }\n  }\n}\n\n// File: contracts/profiles/InterfaceResolver.sol\n\npragma solidity ^0.5.0;\n\ncontract InterfaceResolver is ResolverBase, AddrResolver {\n  bytes4 private constant INTERFACE_INTERFACE_ID =\n    bytes4(keccak256('interfaceImplementer(bytes32,bytes4)'));\n  bytes4 private constant INTERFACE_META_ID = 0x01ffc9a7;\n\n  event InterfaceChanged(\n    bytes32 indexed node,\n    bytes4 indexed interfaceID,\n    address implementer\n  );\n\n  mapping(bytes32 => mapping(bytes4 => address)) interfaces;\n\n  /**\n   * Sets an interface associated with a name.\n   * Setting the address to 0 restores the default behaviour of querying the contract at `addr()` for interface support.\n   * @param node The node to update.\n   * @param interfaceID The EIP 168 interface ID.\n   * @param implementer The address of a contract that implements this interface for this node.\n   */\n  function setInterface(\n    bytes32 node,\n    bytes4 interfaceID,\n    address implementer\n  ) external authorised(node) {\n    interfaces[node][interfaceID] = implementer;\n    emit InterfaceChanged(node, interfaceID, implementer);\n  }\n\n  /**\n   * Returns the address of a contract that implements the specified interface for this name.\n   * If an implementer has not been set for this interfaceID and name, the resolver will query\n   * the contract at `addr()`. If `addr()` is set, a contract exists at that address, and that\n   * contract implements EIP168 and returns `true` for the specified interfaceID, its address\n   * will be returned.\n   * @param node The ENS node to query.\n   * @param interfaceID The EIP 168 interface ID to check for.\n   * @return The address that implements this interface, or 0 if the interface is unsupported.\n   */\n  function interfaceImplementer(bytes32 node, bytes4 interfaceID)\n    external\n    view\n    returns (address)\n  {\n    address implementer = interfaces[node][interfaceID];\n    if (implementer != address(0)) {\n      return implementer;\n    }\n\n    address a = addr(node);\n    if (a == address(0)) {\n      return address(0);\n    }\n\n    (bool success, bytes memory returnData) = a.staticcall(\n      abi.encodeWithSignature('supportsInterface(bytes4)', INTERFACE_META_ID)\n    );\n    if (!success || returnData.length < 32 || returnData[31] == 0) {\n      // EIP 168 not supported by target\n      return address(0);\n    }\n\n    (success, returnData) = a.staticcall(\n      abi.encodeWithSignature('supportsInterface(bytes4)', interfaceID)\n    );\n    if (!success || returnData.length < 32 || returnData[31] == 0) {\n      // Specified interface not supported by target\n      return address(0);\n    }\n\n    return a;\n  }\n\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\n    return\n      interfaceID == INTERFACE_INTERFACE_ID ||\n      super.supportsInterface(interfaceID);\n  }\n}\n\n// File: contracts/profiles/NameResolver.sol\n\npragma solidity ^0.5.0;\n\ncontract NameResolver is ResolverBase {\n  bytes4 private constant NAME_INTERFACE_ID = 0x691f3431;\n\n  event NameChanged(bytes32 indexed node, string name);\n\n  mapping(bytes32 => string) names;\n\n  /**\n   * Sets the name associated with an ENS node, for reverse records.\n   * May only be called by the owner of that node in the ENS registry.\n   * @param node The node to update.\n   * @param name The name to set.\n   */\n  function setName(bytes32 node, string calldata name)\n    external\n    authorised(node)\n  {\n    names[node] = name;\n    emit NameChanged(node, name);\n  }\n\n  /**\n   * Returns the name associated with an ENS node, for reverse records.\n   * Defined in EIP181.\n   * @param node The ENS node to query.\n   * @return The associated name.\n   */\n  function name(bytes32 node) external view returns (string memory) {\n    return names[node];\n  }\n\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\n    return\n      interfaceID == NAME_INTERFACE_ID || super.supportsInterface(interfaceID);\n  }\n}\n\n// File: contracts/profiles/PubkeyResolver.sol\n\npragma solidity ^0.5.0;\n\ncontract PubkeyResolver is ResolverBase {\n  bytes4 private constant PUBKEY_INTERFACE_ID = 0xc8690233;\n\n  event PubkeyChanged(bytes32 indexed node, bytes32 x, bytes32 y);\n\n  struct PublicKey {\n    bytes32 x;\n    bytes32 y;\n  }\n\n  mapping(bytes32 => PublicKey) pubkeys;\n\n  /**\n   * Sets the SECP256k1 public key associated with an ENS node.\n   * @param node The ENS node to query\n   * @param x the X coordinate of the curve point for the public key.\n   * @param y the Y coordinate of the curve point for the public key.\n   */\n  function setPubkey(\n    bytes32 node,\n    bytes32 x,\n    bytes32 y\n  ) external authorised(node) {\n    pubkeys[node] = PublicKey(x, y);\n    emit PubkeyChanged(node, x, y);\n  }\n\n  /**\n   * Returns the SECP256k1 public key associated with an ENS node.\n   * Defined in EIP 619.\n   * @param node The ENS node to query\n   * @return x, y the X and Y coordinates of the curve point for the public key.\n   */\n  function pubkey(bytes32 node) external view returns (bytes32 x, bytes32 y) {\n    return (pubkeys[node].x, pubkeys[node].y);\n  }\n\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\n    return\n      interfaceID == PUBKEY_INTERFACE_ID ||\n      super.supportsInterface(interfaceID);\n  }\n}\n\n// File: contracts/profiles/TextResolver.sol\n\npragma solidity ^0.5.0;\n\ncontract TextResolver is ResolverBase {\n  bytes4 private constant TEXT_INTERFACE_ID = 0x59d1d43c;\n\n  event TextChanged(\n    bytes32 indexed node,\n    string indexed indexedKey,\n    string key\n  );\n\n  mapping(bytes32 => mapping(string => string)) texts;\n\n  /**\n   * Sets the text data associated with an ENS node and key.\n   * May only be called by the owner of that node in the ENS registry.\n   * @param node The node to update.\n   * @param key The key to set.\n   * @param value The text data value to set.\n   */\n  function setText(\n    bytes32 node,\n    string calldata key,\n    string calldata value\n  ) external authorised(node) {\n    texts[node][key] = value;\n    emit TextChanged(node, key, key);\n  }\n\n  /**\n   * Returns the text data associated with an ENS node and key.\n   * @param node The ENS node to query.\n   * @param key The text data key to query.\n   * @return The associated text data.\n   */\n  function text(bytes32 node, string calldata key)\n    external\n    view\n    returns (string memory)\n  {\n    return texts[node][key];\n  }\n\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\n    return\n      interfaceID == TEXT_INTERFACE_ID || super.supportsInterface(interfaceID);\n  }\n}\n\n// File: contracts/PublicResolver.sol\n\npragma solidity ^0.5.0;\npragma experimental ABIEncoderV2;\n\n/**\n * A simple resolver anyone can use; only allows the owner of a node to set its\n * address.\n */\ncontract PublicResolver_mainnet_9412610 is\n  ABIResolver,\n  AddrResolver,\n  ContentHashResolver,\n  DNSResolver,\n  InterfaceResolver,\n  NameResolver,\n  PubkeyResolver,\n  TextResolver\n{\n  ENS ens;\n\n  /**\n   * A mapping of authorisations. An address that is authorised for a name\n   * may make any changes to the name that the owner could, but may not update\n   * the set of authorisations.\n   * (node, owner, caller) => isAuthorised\n   */\n  mapping(bytes32 => mapping(address => mapping(address => bool)))\n    public authorisations;\n\n  event AuthorisationChanged(\n    bytes32 indexed node,\n    address indexed owner,\n    address indexed target,\n    bool isAuthorised\n  );\n\n  constructor(ENS _ens) public {\n    ens = _ens;\n  }\n\n  /**\n   * @dev Sets or clears an authorisation.\n   * Authorisations are specific to the caller. Any account can set an authorisation\n   * for any name, but the authorisation that is checked will be that of the\n   * current owner of a name. Thus, transferring a name effectively clears any\n   * existing authorisations, and new authorisations can be set in advance of\n   * an ownership transfer if desired.\n   *\n   * @param node The name to change the authorisation on.\n   * @param target The address that is to be authorised or deauthorised.\n   * @param isAuthorised True if the address should be authorised, or false if it should be deauthorised.\n   */\n  function setAuthorisation(\n    bytes32 node,\n    address target,\n    bool isAuthorised\n  ) external {\n    authorisations[node][msg.sender][target] = isAuthorised;\n    emit AuthorisationChanged(node, msg.sender, target, isAuthorised);\n  }\n\n  function isAuthorised(bytes32 node) internal view returns (bool) {\n    address owner = ens.owner(node);\n    return owner == msg.sender || authorisations[node][owner][msg.sender];\n  }\n\n  function multicall(bytes[] calldata data)\n    external\n    returns (bytes[] memory results)\n  {\n    results = new bytes[](data.length);\n    for (uint256 i = 0; i < data.length; i++) {\n      (bool success, bytes memory result) = address(this).delegatecall(data[i]);\n      require(success);\n      results[i] = result;\n    }\n    return results;\n  }\n}\n"
      }
    },
    "settings": {
      "optimizer": {
        "enabled": true,
        "runs": 10000
      },
      "outputSelection": {
        "*": {
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata",
            "devdoc",
            "userdoc",
            "storageLayout",
            "evm.gasEstimates"
          ],
          "": [
            "ast"
          ]
        }
      },
      "metadata": {
        "useLiteralContent": true
      }
    }
  },
  "output": {
    "contracts": {
      "contracts/legacy/PublicResolver_mainnet_9412610.sol": {
        "ABIResolver": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "node",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "uint256",
                  "name": "contentType",
                  "type": "uint256"
                }
              ],
              "name": "ABIChanged",
              "type": "event"
            },
            {
              "constant": true,
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "node",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "contentTypes",
                  "type": "uint256"
                }
              ],
              "name": "ABI",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "",
                  "type": "bytes"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "node",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "contentType",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ],
              "name": "setABI",
              "outputs": [],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [
                {
                  "internalType": "bytes4",
                  "name": "interfaceID",
                  "type": "bytes4"
                }
              ],
              "name": "supportsInterface",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "payable": false,
              "stateMutability": "pure",
              "type": "function"
            }
          ],
          "devdoc": {
            "methods": {
              "ABI(bytes32,uint256)": {
                "params": {
                  "contentTypes": "A bitwise OR of the ABI formats accepted by the caller.",
                  "node": "The ENS node to query"
                },
                "return": "contentType The content type of the return valuedata The ABI data"
              },
              "setABI(bytes32,uint256,bytes)": {
                "params": {
                  "contentType": "The content type of the ABI",
                  "data": "The ABI data.",
                  "node": "The node to update."
                }
              }
            }
          },
          "evm": {
            "bytecode": {
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "gasEstimates": null,
            "methodIdentifiers": {
              "ABI(bytes32,uint256)": "2203ab56",
              "setABI(bytes32,uint256,bytes)": "623195b0",
              "supportsInterface(bytes4)": "01ffc9a7"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.5.17+commit.d19bba13\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"contentType\",\"type\":\"uint256\"}],\"name\":\"ABIChanged\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"contentTypes\",\"type\":\"uint256\"}],\"name\":\"ABI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"contentType\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"setABI\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"ABI(bytes32,uint256)\":{\"params\":{\"contentTypes\":\"A bitwise OR of the ABI formats accepted by the caller.\",\"node\":\"The ENS node to query\"},\"return\":\"contentType The content type of the return valuedata The ABI data\"},\"setABI(bytes32,uint256,bytes)\":{\"params\":{\"contentType\":\"The content type of the ABI\",\"data\":\"The ABI data.\",\"node\":\"The node to update.\"}}}},\"userdoc\":{\"methods\":{\"ABI(bytes32,uint256)\":{\"notice\":\"Returns the ABI associated with an ENS node. Defined in EIP205.\"},\"setABI(bytes32,uint256,bytes)\":{\"notice\":\"Sets the ABI associated with an ENS node. Nodes may have one ABI of each content type. To remove an ABI, set it to the empty string.\"}}}},\"settings\":{\"compilationTarget\":{\"contracts/legacy/PublicResolver_mainnet_9412610.sol\":\"ABIResolver\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"contracts/legacy/PublicResolver_mainnet_9412610.sol\":{\"content\":\"/**\\n *Submitted for verification at Etherscan.io on 2020-02-03\\n */\\n\\n// File: @ensdomains/ens/contracts/ENS.sol\\n\\npragma solidity >=0.4.24;\\n\\ninterface ENS {\\n  // Logged when the owner of a node assigns a new owner to a subnode.\\n  event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n  // Logged when the owner of a node transfers ownership to a new account.\\n  event Transfer(bytes32 indexed node, address owner);\\n\\n  // Logged when the resolver for a node changes.\\n  event NewResolver(bytes32 indexed node, address resolver);\\n\\n  // Logged when the TTL of a node changes\\n  event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n  function setSubnodeOwner(\\n    bytes32 node,\\n    bytes32 label,\\n    address owner\\n  ) external;\\n\\n  function setResolver(bytes32 node, address resolver) external;\\n\\n  function setOwner(bytes32 node, address owner) external;\\n\\n  function setTTL(bytes32 node, uint64 ttl) external;\\n\\n  function owner(bytes32 node) external view returns (address);\\n\\n  function resolver(bytes32 node) external view returns (address);\\n\\n  function ttl(bytes32 node) external view returns (uint64);\\n}\\n\\n// File: contracts/ResolverBase.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract ResolverBase {\\n  bytes4 private constant INTERFACE_META_ID = 0x01ffc9a7;\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return interfaceID == INTERFACE_META_ID;\\n  }\\n\\n  function isAuthorised(bytes32 node) internal view returns (bool);\\n\\n  modifier authorised(bytes32 node) {\\n    require(isAuthorised(node));\\n    _;\\n  }\\n\\n  function bytesToAddress(bytes memory b)\\n    internal\\n    pure\\n    returns (address payable a)\\n  {\\n    require(b.length == 20);\\n    assembly {\\n      a := div(mload(add(b, 32)), exp(256, 12))\\n    }\\n  }\\n\\n  function addressToBytes(address a) internal pure returns (bytes memory b) {\\n    b = new bytes(20);\\n    assembly {\\n      mstore(add(b, 32), mul(a, exp(256, 12)))\\n    }\\n  }\\n}\\n\\n// File: contracts/profiles/ABIResolver.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract ABIResolver is ResolverBase {\\n  bytes4 private constant ABI_INTERFACE_ID = 0x2203ab56;\\n\\n  event ABIChanged(bytes32 indexed node, uint256 indexed contentType);\\n\\n  mapping(bytes32 => mapping(uint256 => bytes)) abis;\\n\\n  /**\\n   * Sets the ABI associated with an ENS node.\\n   * Nodes may have one ABI of each content type. To remove an ABI, set it to\\n   * the empty string.\\n   * @param node The node to update.\\n   * @param contentType The content type of the ABI\\n   * @param data The ABI data.\\n   */\\n  function setABI(\\n    bytes32 node,\\n    uint256 contentType,\\n    bytes calldata data\\n  ) external authorised(node) {\\n    // Content types must be powers of 2\\n    require(((contentType - 1) & contentType) == 0);\\n\\n    abis[node][contentType] = data;\\n    emit ABIChanged(node, contentType);\\n  }\\n\\n  /**\\n   * Returns the ABI associated with an ENS node.\\n   * Defined in EIP205.\\n   * @param node The ENS node to query\\n   * @param contentTypes A bitwise OR of the ABI formats accepted by the caller.\\n   * @return contentType The content type of the return value\\n   * @return data The ABI data\\n   */\\n  function ABI(bytes32 node, uint256 contentTypes)\\n    external\\n    view\\n    returns (uint256, bytes memory)\\n  {\\n    mapping(uint256 => bytes) storage abiset = abis[node];\\n\\n    for (\\n      uint256 contentType = 1;\\n      contentType <= contentTypes;\\n      contentType <<= 1\\n    ) {\\n      if ((contentType & contentTypes) != 0 && abiset[contentType].length > 0) {\\n        return (contentType, abiset[contentType]);\\n      }\\n    }\\n\\n    return (0, bytes(''));\\n  }\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return\\n      interfaceID == ABI_INTERFACE_ID || super.supportsInterface(interfaceID);\\n  }\\n}\\n\\n// File: contracts/profiles/AddrResolver.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract AddrResolver is ResolverBase {\\n  bytes4 private constant ADDR_INTERFACE_ID = 0x3b3b57de;\\n  bytes4 private constant ADDRESS_INTERFACE_ID = 0xf1cb7e06;\\n  uint256 private constant COIN_TYPE_ETH = 60;\\n\\n  event AddrChanged(bytes32 indexed node, address a);\\n  event AddressChanged(\\n    bytes32 indexed node,\\n    uint256 coinType,\\n    bytes newAddress\\n  );\\n\\n  mapping(bytes32 => mapping(uint256 => bytes)) _addresses;\\n\\n  /**\\n   * Sets the address associated with an ENS node.\\n   * May only be called by the owner of that node in the ENS registry.\\n   * @param node The node to update.\\n   * @param a The address to set.\\n   */\\n  function setAddr(bytes32 node, address a) external authorised(node) {\\n    setAddr(node, COIN_TYPE_ETH, addressToBytes(a));\\n  }\\n\\n  /**\\n   * Returns the address associated with an ENS node.\\n   * @param node The ENS node to query.\\n   * @return The associated address.\\n   */\\n  function addr(bytes32 node) public view returns (address payable) {\\n    bytes memory a = addr(node, COIN_TYPE_ETH);\\n    if (a.length == 0) {\\n      return address(0);\\n    }\\n    return bytesToAddress(a);\\n  }\\n\\n  function setAddr(\\n    bytes32 node,\\n    uint256 coinType,\\n    bytes memory a\\n  ) public authorised(node) {\\n    emit AddressChanged(node, coinType, a);\\n    if (coinType == COIN_TYPE_ETH) {\\n      emit AddrChanged(node, bytesToAddress(a));\\n    }\\n    _addresses[node][coinType] = a;\\n  }\\n\\n  function addr(bytes32 node, uint256 coinType)\\n    public\\n    view\\n    returns (bytes memory)\\n  {\\n    return _addresses[node][coinType];\\n  }\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return\\n      interfaceID == ADDR_INTERFACE_ID ||\\n      interfaceID == ADDRESS_INTERFACE_ID ||\\n      super.supportsInterface(interfaceID);\\n  }\\n}\\n\\n// File: contracts/profiles/ContentHashResolver.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract ContentHashResolver is ResolverBase {\\n  bytes4 private constant CONTENT_HASH_INTERFACE_ID = 0xbc1c58d1;\\n\\n  event ContenthashChanged(bytes32 indexed node, bytes hash);\\n\\n  mapping(bytes32 => bytes) hashes;\\n\\n  /**\\n   * Sets the contenthash associated with an ENS node.\\n   * May only be called by the owner of that node in the ENS registry.\\n   * @param node The node to update.\\n   * @param hash The contenthash to set\\n   */\\n  function setContenthash(bytes32 node, bytes calldata hash)\\n    external\\n    authorised(node)\\n  {\\n    hashes[node] = hash;\\n    emit ContenthashChanged(node, hash);\\n  }\\n\\n  /**\\n   * Returns the contenthash associated with an ENS node.\\n   * @param node The ENS node to query.\\n   * @return The associated contenthash.\\n   */\\n  function contenthash(bytes32 node) external view returns (bytes memory) {\\n    return hashes[node];\\n  }\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return\\n      interfaceID == CONTENT_HASH_INTERFACE_ID ||\\n      super.supportsInterface(interfaceID);\\n  }\\n}\\n\\n// File: @ensdomains/dnssec-oracle/contracts/BytesUtils.sol\\n\\npragma solidity >0.4.23;\\n\\nlibrary BytesUtils {\\n  /*\\n   * @dev Returns the keccak-256 hash of a byte range.\\n   * @param self The byte string to hash.\\n   * @param offset The position to start hashing at.\\n   * @param len The number of bytes to hash.\\n   * @return The hash of the byte range.\\n   */\\n  function keccak(\\n    bytes memory self,\\n    uint256 offset,\\n    uint256 len\\n  ) internal pure returns (bytes32 ret) {\\n    require(offset + len <= self.length);\\n    assembly {\\n      ret := keccak256(add(add(self, 32), offset), len)\\n    }\\n  }\\n\\n  /*\\n   * @dev Returns a positive number if `other` comes lexicographically after\\n   *      `self`, a negative number if it comes before, or zero if the\\n   *      contents of the two bytes are equal.\\n   * @param self The first bytes to compare.\\n   * @param other The second bytes to compare.\\n   * @return The result of the comparison.\\n   */\\n  function compare(bytes memory self, bytes memory other)\\n    internal\\n    pure\\n    returns (int256)\\n  {\\n    return compare(self, 0, self.length, other, 0, other.length);\\n  }\\n\\n  /*\\n   * @dev Returns a positive number if `other` comes lexicographically after\\n   *      `self`, a negative number if it comes before, or zero if the\\n   *      contents of the two bytes are equal. Comparison is done per-rune,\\n   *      on unicode codepoints.\\n   * @param self The first bytes to compare.\\n   * @param offset The offset of self.\\n   * @param len    The length of self.\\n   * @param other The second bytes to compare.\\n   * @param otheroffset The offset of the other string.\\n   * @param otherlen    The length of the other string.\\n   * @return The result of the comparison.\\n   */\\n  function compare(\\n    bytes memory self,\\n    uint256 offset,\\n    uint256 len,\\n    bytes memory other,\\n    uint256 otheroffset,\\n    uint256 otherlen\\n  ) internal pure returns (int256) {\\n    uint256 shortest = len;\\n    if (otherlen < len) shortest = otherlen;\\n\\n    uint256 selfptr;\\n    uint256 otherptr;\\n\\n    assembly {\\n      selfptr := add(self, add(offset, 32))\\n      otherptr := add(other, add(otheroffset, 32))\\n    }\\n    for (uint256 idx = 0; idx < shortest; idx += 32) {\\n      uint256 a;\\n      uint256 b;\\n      assembly {\\n        a := mload(selfptr)\\n        b := mload(otherptr)\\n      }\\n      if (a != b) {\\n        // Mask out irrelevant bytes and check again\\n        uint256 mask;\\n        if (shortest > 32) {\\n          mask = uint256(-1); // aka 0xffffff....\\n        } else {\\n          mask = ~(2**(8 * (32 - shortest + idx)) - 1);\\n        }\\n        uint256 diff = (a & mask) - (b & mask);\\n        if (diff != 0) return int256(diff);\\n      }\\n      selfptr += 32;\\n      otherptr += 32;\\n    }\\n\\n    return int256(len) - int256(otherlen);\\n  }\\n\\n  /*\\n   * @dev Returns true if the two byte ranges are equal.\\n   * @param self The first byte range to compare.\\n   * @param offset The offset into the first byte range.\\n   * @param other The second byte range to compare.\\n   * @param otherOffset The offset into the second byte range.\\n   * @param len The number of bytes to compare\\n   * @return True if the byte ranges are equal, false otherwise.\\n   */\\n  function equals(\\n    bytes memory self,\\n    uint256 offset,\\n    bytes memory other,\\n    uint256 otherOffset,\\n    uint256 len\\n  ) internal pure returns (bool) {\\n    return keccak(self, offset, len) == keccak(other, otherOffset, len);\\n  }\\n\\n  /*\\n   * @dev Returns true if the two byte ranges are equal with offsets.\\n   * @param self The first byte range to compare.\\n   * @param offset The offset into the first byte range.\\n   * @param other The second byte range to compare.\\n   * @param otherOffset The offset into the second byte range.\\n   * @return True if the byte ranges are equal, false otherwise.\\n   */\\n  function equals(\\n    bytes memory self,\\n    uint256 offset,\\n    bytes memory other,\\n    uint256 otherOffset\\n  ) internal pure returns (bool) {\\n    return\\n      keccak(self, offset, self.length - offset) ==\\n      keccak(other, otherOffset, other.length - otherOffset);\\n  }\\n\\n  /*\\n   * @dev Compares a range of 'self' to all of 'other' and returns True iff\\n   *      they are equal.\\n   * @param self The first byte range to compare.\\n   * @param offset The offset into the first byte range.\\n   * @param other The second byte range to compare.\\n   * @return True if the byte ranges are equal, false otherwise.\\n   */\\n  function equals(\\n    bytes memory self,\\n    uint256 offset,\\n    bytes memory other\\n  ) internal pure returns (bool) {\\n    return\\n      self.length >= offset + other.length &&\\n      equals(self, offset, other, 0, other.length);\\n  }\\n\\n  /*\\n   * @dev Returns true if the two byte ranges are equal.\\n   * @param self The first byte range to compare.\\n   * @param other The second byte range to compare.\\n   * @return True if the byte ranges are equal, false otherwise.\\n   */\\n  function equals(bytes memory self, bytes memory other)\\n    internal\\n    pure\\n    returns (bool)\\n  {\\n    return\\n      self.length == other.length && equals(self, 0, other, 0, self.length);\\n  }\\n\\n  /*\\n   * @dev Returns the 8-bit number at the specified index of self.\\n   * @param self The byte string.\\n   * @param idx The index into the bytes\\n   * @return The specified 8 bits of the string, interpreted as an integer.\\n   */\\n  function readUint8(bytes memory self, uint256 idx)\\n    internal\\n    pure\\n    returns (uint8 ret)\\n  {\\n    return uint8(self[idx]);\\n  }\\n\\n  /*\\n   * @dev Returns the 16-bit number at the specified index of self.\\n   * @param self The byte string.\\n   * @param idx The index into the bytes\\n   * @return The specified 16 bits of the string, interpreted as an integer.\\n   */\\n  function readUint16(bytes memory self, uint256 idx)\\n    internal\\n    pure\\n    returns (uint16 ret)\\n  {\\n    require(idx + 2 <= self.length);\\n    assembly {\\n      ret := and(mload(add(add(self, 2), idx)), 0xFFFF)\\n    }\\n  }\\n\\n  /*\\n   * @dev Returns the 32-bit number at the specified index of self.\\n   * @param self The byte string.\\n   * @param idx The index into the bytes\\n   * @return The specified 32 bits of the string, interpreted as an integer.\\n   */\\n  function readUint32(bytes memory self, uint256 idx)\\n    internal\\n    pure\\n    returns (uint32 ret)\\n  {\\n    require(idx + 4 <= self.length);\\n    assembly {\\n      ret := and(mload(add(add(self, 4), idx)), 0xFFFFFFFF)\\n    }\\n  }\\n\\n  /*\\n   * @dev Returns the 32 byte value at the specified index of self.\\n   * @param self The byte string.\\n   * @param idx The index into the bytes\\n   * @return The specified 32 bytes of the string.\\n   */\\n  function readBytes32(bytes memory self, uint256 idx)\\n    internal\\n    pure\\n    returns (bytes32 ret)\\n  {\\n    require(idx + 32 <= self.length);\\n    assembly {\\n      ret := mload(add(add(self, 32), idx))\\n    }\\n  }\\n\\n  /*\\n   * @dev Returns the 32 byte value at the specified index of self.\\n   * @param self The byte string.\\n   * @param idx The index into the bytes\\n   * @return The specified 32 bytes of the string.\\n   */\\n  function readBytes20(bytes memory self, uint256 idx)\\n    internal\\n    pure\\n    returns (bytes20 ret)\\n  {\\n    require(idx + 20 <= self.length);\\n    assembly {\\n      ret := and(\\n        mload(add(add(self, 32), idx)),\\n        0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000\\n      )\\n    }\\n  }\\n\\n  /*\\n   * @dev Returns the n byte value at the specified index of self.\\n   * @param self The byte string.\\n   * @param idx The index into the bytes.\\n   * @param len The number of bytes.\\n   * @return The specified 32 bytes of the string.\\n   */\\n  function readBytesN(\\n    bytes memory self,\\n    uint256 idx,\\n    uint256 len\\n  ) internal pure returns (bytes32 ret) {\\n    require(len <= 32);\\n    require(idx + len <= self.length);\\n    assembly {\\n      let mask := not(sub(exp(256, sub(32, len)), 1))\\n      ret := and(mload(add(add(self, 32), idx)), mask)\\n    }\\n  }\\n\\n  function memcpy(\\n    uint256 dest,\\n    uint256 src,\\n    uint256 len\\n  ) private pure {\\n    // Copy word-length chunks while possible\\n    for (; len >= 32; len -= 32) {\\n      assembly {\\n        mstore(dest, mload(src))\\n      }\\n      dest += 32;\\n      src += 32;\\n    }\\n\\n    // Copy remaining bytes\\n    uint256 mask = 256**(32 - len) - 1;\\n    assembly {\\n      let srcpart := and(mload(src), not(mask))\\n      let destpart := and(mload(dest), mask)\\n      mstore(dest, or(destpart, srcpart))\\n    }\\n  }\\n\\n  /*\\n   * @dev Copies a substring into a new byte string.\\n   * @param self The byte string to copy from.\\n   * @param offset The offset to start copying at.\\n   * @param len The number of bytes to copy.\\n   */\\n  function substring(\\n    bytes memory self,\\n    uint256 offset,\\n    uint256 len\\n  ) internal pure returns (bytes memory) {\\n    require(offset + len <= self.length);\\n\\n    bytes memory ret = new bytes(len);\\n    uint256 dest;\\n    uint256 src;\\n\\n    assembly {\\n      dest := add(ret, 32)\\n      src := add(add(self, 32), offset)\\n    }\\n    memcpy(dest, src, len);\\n\\n    return ret;\\n  }\\n\\n  // Maps characters from 0x30 to 0x7A to their base32 values.\\n  // 0xFF represents invalid characters in that range.\\n  bytes constant base32HexTable =\\n    hex'00010203040506070809FFFFFFFFFFFFFF0A0B0C0D0E0F101112131415161718191A1B1C1D1E1FFFFFFFFFFFFFFFFFFFFF0A0B0C0D0E0F101112131415161718191A1B1C1D1E1F';\\n\\n  /**\\n   * @dev Decodes unpadded base32 data of up to one word in length.\\n   * @param self The data to decode.\\n   * @param off Offset into the string to start at.\\n   * @param len Number of characters to decode.\\n   * @return The decoded data, left aligned.\\n   */\\n  function base32HexDecodeWord(\\n    bytes memory self,\\n    uint256 off,\\n    uint256 len\\n  ) internal pure returns (bytes32) {\\n    require(len <= 52);\\n\\n    uint256 ret = 0;\\n    uint8 decoded;\\n    for (uint256 i = 0; i < len; i++) {\\n      bytes1 char = self[off + i];\\n      require(char >= 0x30 && char <= 0x7A);\\n      decoded = uint8(base32HexTable[uint256(uint8(char)) - 0x30]);\\n      require(decoded <= 0x20);\\n      if (i == len - 1) {\\n        break;\\n      }\\n      ret = (ret << 5) | decoded;\\n    }\\n\\n    uint256 bitlen = len * 5;\\n    if (len % 8 == 0) {\\n      // Multiple of 8 characters, no padding\\n      ret = (ret << 5) | decoded;\\n    } else if (len % 8 == 2) {\\n      // Two extra characters - 1 byte\\n      ret = (ret << 3) | (decoded >> 2);\\n      bitlen -= 2;\\n    } else if (len % 8 == 4) {\\n      // Four extra characters - 2 bytes\\n      ret = (ret << 1) | (decoded >> 4);\\n      bitlen -= 4;\\n    } else if (len % 8 == 5) {\\n      // Five extra characters - 3 bytes\\n      ret = (ret << 4) | (decoded >> 1);\\n      bitlen -= 1;\\n    } else if (len % 8 == 7) {\\n      // Seven extra characters - 4 bytes\\n      ret = (ret << 2) | (decoded >> 3);\\n      bitlen -= 3;\\n    } else {\\n      revert();\\n    }\\n\\n    return bytes32(ret << (256 - bitlen));\\n  }\\n}\\n\\n// File: @ensdomains/buffer/contracts/Buffer.sol\\n\\npragma solidity >0.4.18;\\n\\n/**\\n * @dev A library for working with mutable byte buffers in Solidity.\\n *\\n * Byte buffers are mutable and expandable, and provide a variety of primitives\\n * for writing to them. At any time you can fetch a bytes object containing the\\n * current contents of the buffer. The bytes object should not be stored between\\n * operations, as it may change due to resizing of the buffer.\\n */\\nlibrary Buffer {\\n  /**\\n   * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n   *      a capacity. The capacity may be longer than the current value, in\\n   *      which case it can be extended without the need to allocate more memory.\\n   */\\n  struct buffer {\\n    bytes buf;\\n    uint256 capacity;\\n  }\\n\\n  /**\\n   * @dev Initializes a buffer with an initial capacity.\\n   * @param buf The buffer to initialize.\\n   * @param capacity The number of bytes of space to allocate the buffer.\\n   * @return The buffer, for chaining.\\n   */\\n  function init(buffer memory buf, uint256 capacity)\\n    internal\\n    pure\\n    returns (buffer memory)\\n  {\\n    if (capacity % 32 != 0) {\\n      capacity += 32 - (capacity % 32);\\n    }\\n    // Allocate space for the buffer data\\n    buf.capacity = capacity;\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(buf, ptr)\\n      mstore(ptr, 0)\\n      mstore(0x40, add(32, add(ptr, capacity)))\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Initializes a new buffer from an existing bytes object.\\n   *      Changes to the buffer may mutate the original value.\\n   * @param b The bytes object to initialize the buffer with.\\n   * @return A new buffer.\\n   */\\n  function fromBytes(bytes memory b) internal pure returns (buffer memory) {\\n    buffer memory buf;\\n    buf.buf = b;\\n    buf.capacity = b.length;\\n    return buf;\\n  }\\n\\n  function resize(buffer memory buf, uint256 capacity) private pure {\\n    bytes memory oldbuf = buf.buf;\\n    init(buf, capacity);\\n    append(buf, oldbuf);\\n  }\\n\\n  function max(uint256 a, uint256 b) private pure returns (uint256) {\\n    if (a > b) {\\n      return a;\\n    }\\n    return b;\\n  }\\n\\n  /**\\n   * @dev Sets buffer length to 0.\\n   * @param buf The buffer to truncate.\\n   * @return The original buffer, for chaining..\\n   */\\n  function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n    assembly {\\n      let bufptr := mload(buf)\\n      mstore(bufptr, 0)\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Writes a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The start offset to write to.\\n   * @param data The data to append.\\n   * @param len The number of bytes to copy.\\n   * @return The original buffer, for chaining.\\n   */\\n  function write(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes memory data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    require(len <= data.length);\\n\\n    if (off + len > buf.capacity) {\\n      resize(buf, max(buf.capacity, len + off) * 2);\\n    }\\n\\n    uint256 dest;\\n    uint256 src;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Start address = buffer address + offset + sizeof(buffer length)\\n      dest := add(add(bufptr, 32), off)\\n      // Update buffer length if we're extending it\\n      if gt(add(len, off), buflen) {\\n        mstore(bufptr, add(len, off))\\n      }\\n      src := add(data, 32)\\n    }\\n\\n    // Copy word-length chunks while possible\\n    for (; len >= 32; len -= 32) {\\n      assembly {\\n        mstore(dest, mload(src))\\n      }\\n      dest += 32;\\n      src += 32;\\n    }\\n\\n    // Copy remaining bytes\\n    uint256 mask = 256**(32 - len) - 1;\\n    assembly {\\n      let srcpart := and(mload(src), not(mask))\\n      let destpart := and(mload(dest), mask)\\n      mstore(dest, or(destpart, srcpart))\\n    }\\n\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @param len The number of bytes to copy.\\n   * @return The original buffer, for chaining.\\n   */\\n  function append(\\n    buffer memory buf,\\n    bytes memory data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, len);\\n  }\\n\\n  /**\\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function append(buffer memory buf, bytes memory data)\\n    internal\\n    pure\\n    returns (buffer memory)\\n  {\\n    return write(buf, buf.buf.length, data, data.length);\\n  }\\n\\n  /**\\n   * @dev Writes a byte to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write the byte at.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeUint8(\\n    buffer memory buf,\\n    uint256 off,\\n    uint8 data\\n  ) internal pure returns (buffer memory) {\\n    if (off >= buf.capacity) {\\n      resize(buf, buf.capacity * 2);\\n    }\\n\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Address = buffer address + sizeof(buffer length) + off\\n      let dest := add(add(bufptr, off), 32)\\n      mstore8(dest, data)\\n      // Update buffer length if we extended it\\n      if eq(off, buflen) {\\n        mstore(bufptr, add(buflen, 1))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function appendUint8(buffer memory buf, uint8 data)\\n    internal\\n    pure\\n    returns (buffer memory)\\n  {\\n    return writeUint8(buf, buf.buf.length, data);\\n  }\\n\\n  /**\\n   * @dev Writes up to 32 bytes to the buffer. Resizes if doing so would\\n   *      exceed the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @param len The number of bytes to write (left-aligned).\\n   * @return The original buffer, for chaining.\\n   */\\n  function write(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes32 data,\\n    uint256 len\\n  ) private pure returns (buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    uint256 mask = 256**len - 1;\\n    // Right-align data\\n    data = data >> (8 * (32 - len));\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Address = buffer address + sizeof(buffer length) + off + len\\n      let dest := add(add(bufptr, off), len)\\n      mstore(dest, or(and(mload(dest), not(mask)), data))\\n      // Update buffer length if we extended it\\n      if gt(add(off, len), mload(bufptr)) {\\n        mstore(bufptr, add(off, len))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Writes a bytes20 to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeBytes20(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes20 data\\n  ) internal pure returns (buffer memory) {\\n    return write(buf, off, bytes32(data), 20);\\n  }\\n\\n  /**\\n   * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chhaining.\\n   */\\n  function appendBytes20(buffer memory buf, bytes20 data)\\n    internal\\n    pure\\n    returns (buffer memory)\\n  {\\n    return write(buf, buf.buf.length, bytes32(data), 20);\\n  }\\n\\n  /**\\n   * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function appendBytes32(buffer memory buf, bytes32 data)\\n    internal\\n    pure\\n    returns (buffer memory)\\n  {\\n    return write(buf, buf.buf.length, data, 32);\\n  }\\n\\n  /**\\n   * @dev Writes an integer to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @param len The number of bytes to write (right-aligned).\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeInt(\\n    buffer memory buf,\\n    uint256 off,\\n    uint256 data,\\n    uint256 len\\n  ) private pure returns (buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    uint256 mask = 256**len - 1;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Address = buffer address + off + sizeof(buffer length) + len\\n      let dest := add(add(bufptr, off), len)\\n      mstore(dest, or(and(mload(dest), not(mask)), data))\\n      // Update buffer length if we extended it\\n      if gt(add(off, len), mload(bufptr)) {\\n        mstore(bufptr, add(off, len))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n   * exceed the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer.\\n   */\\n  function appendInt(\\n    buffer memory buf,\\n    uint256 data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    return writeInt(buf, buf.buf.length, data, len);\\n  }\\n}\\n\\n// File: @ensdomains/dnssec-oracle/contracts/RRUtils.sol\\n\\npragma solidity >0.4.23;\\n\\n/**\\n * @dev RRUtils is a library that provides utilities for parsing DNS resource records.\\n */\\nlibrary RRUtils {\\n  using BytesUtils for *;\\n  using Buffer for *;\\n\\n  /**\\n   * @dev Returns the number of bytes in the DNS name at 'offset' in 'self'.\\n   * @param self The byte array to read a name from.\\n   * @param offset The offset to start reading at.\\n   * @return The length of the DNS name at 'offset', in bytes.\\n   */\\n  function nameLength(bytes memory self, uint256 offset)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    uint256 idx = offset;\\n    while (true) {\\n      assert(idx < self.length);\\n      uint256 labelLen = self.readUint8(idx);\\n      idx += labelLen + 1;\\n      if (labelLen == 0) {\\n        break;\\n      }\\n    }\\n    return idx - offset;\\n  }\\n\\n  /**\\n   * @dev Returns a DNS format name at the specified offset of self.\\n   * @param self The byte array to read a name from.\\n   * @param offset The offset to start reading at.\\n   * @return The name.\\n   */\\n  function readName(bytes memory self, uint256 offset)\\n    internal\\n    pure\\n    returns (bytes memory ret)\\n  {\\n    uint256 len = nameLength(self, offset);\\n    return self.substring(offset, len);\\n  }\\n\\n  /**\\n   * @dev Returns the number of labels in the DNS name at 'offset' in 'self'.\\n   * @param self The byte array to read a name from.\\n   * @param offset The offset to start reading at.\\n   * @return The number of labels in the DNS name at 'offset', in bytes.\\n   */\\n  function labelCount(bytes memory self, uint256 offset)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    uint256 count = 0;\\n    while (true) {\\n      assert(offset < self.length);\\n      uint256 labelLen = self.readUint8(offset);\\n      offset += labelLen + 1;\\n      if (labelLen == 0) {\\n        break;\\n      }\\n      count += 1;\\n    }\\n    return count;\\n  }\\n\\n  /**\\n   * @dev An iterator over resource records.\\n   */\\n  struct RRIterator {\\n    bytes data;\\n    uint256 offset;\\n    uint16 dnstype;\\n    uint16 class;\\n    uint32 ttl;\\n    uint256 rdataOffset;\\n    uint256 nextOffset;\\n  }\\n\\n  /**\\n   * @dev Begins iterating over resource records.\\n   * @param self The byte string to read from.\\n   * @param offset The offset to start reading at.\\n   * @return An iterator object.\\n   */\\n  function iterateRRs(bytes memory self, uint256 offset)\\n    internal\\n    pure\\n    returns (RRIterator memory ret)\\n  {\\n    ret.data = self;\\n    ret.nextOffset = offset;\\n    next(ret);\\n  }\\n\\n  /**\\n   * @dev Returns true iff there are more RRs to iterate.\\n   * @param iter The iterator to check.\\n   * @return True iff the iterator has finished.\\n   */\\n  function done(RRIterator memory iter) internal pure returns (bool) {\\n    return iter.offset >= iter.data.length;\\n  }\\n\\n  /**\\n   * @dev Moves the iterator to the next resource record.\\n   * @param iter The iterator to advance.\\n   */\\n  function next(RRIterator memory iter) internal pure {\\n    iter.offset = iter.nextOffset;\\n    if (iter.offset >= iter.data.length) {\\n      return;\\n    }\\n\\n    // Skip the name\\n    uint256 off = iter.offset + nameLength(iter.data, iter.offset);\\n\\n    // Read type, class, and ttl\\n    iter.dnstype = iter.data.readUint16(off);\\n    off += 2;\\n    iter.class = iter.data.readUint16(off);\\n    off += 2;\\n    iter.ttl = iter.data.readUint32(off);\\n    off += 4;\\n\\n    // Read the rdata\\n    uint256 rdataLength = iter.data.readUint16(off);\\n    off += 2;\\n    iter.rdataOffset = off;\\n    iter.nextOffset = off + rdataLength;\\n  }\\n\\n  /**\\n   * @dev Returns the name of the current record.\\n   * @param iter The iterator.\\n   * @return A new bytes object containing the owner name from the RR.\\n   */\\n  function name(RRIterator memory iter) internal pure returns (bytes memory) {\\n    return iter.data.substring(iter.offset, nameLength(iter.data, iter.offset));\\n  }\\n\\n  /**\\n   * @dev Returns the rdata portion of the current record.\\n   * @param iter The iterator.\\n   * @return A new bytes object containing the RR's RDATA.\\n   */\\n  function rdata(RRIterator memory iter) internal pure returns (bytes memory) {\\n    return\\n      iter.data.substring(iter.rdataOffset, iter.nextOffset - iter.rdataOffset);\\n  }\\n\\n  /**\\n   * @dev Checks if a given RR type exists in a type bitmap.\\n   * @param self The byte string to read the type bitmap from.\\n   * @param offset The offset to start reading at.\\n   * @param rrtype The RR type to check for.\\n   * @return True if the type is found in the bitmap, false otherwise.\\n   */\\n  function checkTypeBitmap(\\n    bytes memory self,\\n    uint256 offset,\\n    uint16 rrtype\\n  ) internal pure returns (bool) {\\n    uint8 typeWindow = uint8(rrtype >> 8);\\n    uint8 windowByte = uint8((rrtype & 0xff) / 8);\\n    uint8 windowBitmask = uint8(uint8(1) << (uint8(7) - uint8(rrtype & 0x7)));\\n    for (uint256 off = offset; off < self.length; ) {\\n      uint8 window = self.readUint8(off);\\n      uint8 len = self.readUint8(off + 1);\\n      if (typeWindow < window) {\\n        // We've gone past our window; it's not here.\\n        return false;\\n      } else if (typeWindow == window) {\\n        // Check this type bitmap\\n        if (len * 8 <= windowByte) {\\n          // Our type is past the end of the bitmap\\n          return false;\\n        }\\n        return (self.readUint8(off + windowByte + 2) & windowBitmask) != 0;\\n      } else {\\n        // Skip this type bitmap\\n        off += len + 2;\\n      }\\n    }\\n\\n    return false;\\n  }\\n\\n  function compareNames(bytes memory self, bytes memory other)\\n    internal\\n    pure\\n    returns (int256)\\n  {\\n    if (self.equals(other)) {\\n      return 0;\\n    }\\n\\n    uint256 off;\\n    uint256 otheroff;\\n    uint256 prevoff;\\n    uint256 otherprevoff;\\n    uint256 counts = labelCount(self, 0);\\n    uint256 othercounts = labelCount(other, 0);\\n\\n    // Keep removing labels from the front of the name until both names are equal length\\n    while (counts > othercounts) {\\n      prevoff = off;\\n      off = progress(self, off);\\n      counts--;\\n    }\\n\\n    while (othercounts > counts) {\\n      otherprevoff = otheroff;\\n      otheroff = progress(other, otheroff);\\n      othercounts--;\\n    }\\n\\n    // Compare the last nonequal labels to each other\\n    while (counts > 0 && !self.equals(off, other, otheroff)) {\\n      prevoff = off;\\n      off = progress(self, off);\\n      otherprevoff = otheroff;\\n      otheroff = progress(other, otheroff);\\n      counts -= 1;\\n    }\\n\\n    if (off == 0) {\\n      return -1;\\n    }\\n    if (otheroff == 0) {\\n      return 1;\\n    }\\n\\n    return\\n      self.compare(\\n        prevoff + 1,\\n        self.readUint8(prevoff),\\n        other,\\n        otherprevoff + 1,\\n        other.readUint8(otherprevoff)\\n      );\\n  }\\n\\n  function progress(bytes memory body, uint256 off)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    return off + 1 + body.readUint8(off);\\n  }\\n}\\n\\n// File: contracts/profiles/DNSResolver.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract DNSResolver is ResolverBase {\\n  using RRUtils for *;\\n  using BytesUtils for bytes;\\n\\n  bytes4 private constant DNS_RECORD_INTERFACE_ID = 0xa8fa5682;\\n\\n  // DNSRecordChanged is emitted whenever a given node/name/resource's RRSET is updated.\\n  event DNSRecordChanged(\\n    bytes32 indexed node,\\n    bytes name,\\n    uint16 resource,\\n    bytes record\\n  );\\n  // DNSRecordDeleted is emitted whenever a given node/name/resource's RRSET is deleted.\\n  event DNSRecordDeleted(bytes32 indexed node, bytes name, uint16 resource);\\n  // DNSZoneCleared is emitted whenever a given node's zone information is cleared.\\n  event DNSZoneCleared(bytes32 indexed node);\\n\\n  // Version the mapping for each zone.  This allows users who have lost\\n  // track of their entries to effectively delete an entire zone by bumping\\n  // the version number.\\n  // node => version\\n  mapping(bytes32 => uint256) private versions;\\n\\n  // The records themselves.  Stored as binary RRSETs\\n  // node => version => name => resource => data\\n  mapping(bytes32 => mapping(uint256 => mapping(bytes32 => mapping(uint16 => bytes))))\\n    private records;\\n\\n  // Count of number of entries for a given name.  Required for DNS resolvers\\n  // when resolving wildcards.\\n  // node => version => name => number of records\\n  mapping(bytes32 => mapping(uint256 => mapping(bytes32 => uint16)))\\n    private nameEntriesCount;\\n\\n  /**\\n   * Set one or more DNS records.  Records are supplied in wire-format.\\n   * Records with the same node/name/resource must be supplied one after the\\n   * other to ensure the data is updated correctly. For example, if the data\\n   * was supplied:\\n   *     a.example.com IN A 1.2.3.4\\n   *     a.example.com IN A 5.6.7.8\\n   *     www.example.com IN CNAME a.example.com.\\n   * then this would store the two A records for a.example.com correctly as a\\n   * single RRSET, however if the data was supplied:\\n   *     a.example.com IN A 1.2.3.4\\n   *     www.example.com IN CNAME a.example.com.\\n   *     a.example.com IN A 5.6.7.8\\n   * then this would store the first A record, the CNAME, then the second A\\n   * record which would overwrite the first.\\n   *\\n   * @param node the namehash of the node for which to set the records\\n   * @param data the DNS wire format records to set\\n   */\\n  function setDNSRecords(bytes32 node, bytes calldata data)\\n    external\\n    authorised(node)\\n  {\\n    uint16 resource = 0;\\n    uint256 offset = 0;\\n    bytes memory name;\\n    bytes memory value;\\n    bytes32 nameHash;\\n    // Iterate over the data to add the resource records\\n    for (\\n      RRUtils.RRIterator memory iter = data.iterateRRs(0);\\n      !iter.done();\\n      iter.next()\\n    ) {\\n      if (resource == 0) {\\n        resource = iter.dnstype;\\n        name = iter.name();\\n        nameHash = keccak256(abi.encodePacked(name));\\n        value = bytes(iter.rdata());\\n      } else {\\n        bytes memory newName = iter.name();\\n        if (resource != iter.dnstype || !name.equals(newName)) {\\n          setDNSRRSet(\\n            node,\\n            name,\\n            resource,\\n            data,\\n            offset,\\n            iter.offset - offset,\\n            value.length == 0\\n          );\\n          resource = iter.dnstype;\\n          offset = iter.offset;\\n          name = newName;\\n          nameHash = keccak256(name);\\n          value = bytes(iter.rdata());\\n        }\\n      }\\n    }\\n    if (name.length > 0) {\\n      setDNSRRSet(\\n        node,\\n        name,\\n        resource,\\n        data,\\n        offset,\\n        data.length - offset,\\n        value.length == 0\\n      );\\n    }\\n  }\\n\\n  /**\\n   * Obtain a DNS record.\\n   * @param node the namehash of the node for which to fetch the record\\n   * @param name the keccak-256 hash of the fully-qualified name for which to fetch the record\\n   * @param resource the ID of the resource as per https://en.wikipedia.org/wiki/List_of_DNS_record_types\\n   * @return the DNS record in wire format if present, otherwise empty\\n   */\\n  function dnsRecord(\\n    bytes32 node,\\n    bytes32 name,\\n    uint16 resource\\n  ) public view returns (bytes memory) {\\n    return records[node][versions[node]][name][resource];\\n  }\\n\\n  /**\\n   * Check if a given node has records.\\n   * @param node the namehash of the node for which to check the records\\n   * @param name the namehash of the node for which to check the records\\n   */\\n  function hasDNSRecords(bytes32 node, bytes32 name)\\n    public\\n    view\\n    returns (bool)\\n  {\\n    return (nameEntriesCount[node][versions[node]][name] != 0);\\n  }\\n\\n  /**\\n   * Clear all information for a DNS zone.\\n   * @param node the namehash of the node for which to clear the zone\\n   */\\n  function clearDNSZone(bytes32 node) public authorised(node) {\\n    versions[node]++;\\n    emit DNSZoneCleared(node);\\n  }\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return\\n      interfaceID == DNS_RECORD_INTERFACE_ID ||\\n      super.supportsInterface(interfaceID);\\n  }\\n\\n  function setDNSRRSet(\\n    bytes32 node,\\n    bytes memory name,\\n    uint16 resource,\\n    bytes memory data,\\n    uint256 offset,\\n    uint256 size,\\n    bool deleteRecord\\n  ) private {\\n    uint256 version = versions[node];\\n    bytes32 nameHash = keccak256(name);\\n    bytes memory rrData = data.substring(offset, size);\\n    if (deleteRecord) {\\n      if (records[node][version][nameHash][resource].length != 0) {\\n        nameEntriesCount[node][version][nameHash]--;\\n      }\\n      delete (records[node][version][nameHash][resource]);\\n      emit DNSRecordDeleted(node, name, resource);\\n    } else {\\n      if (records[node][version][nameHash][resource].length == 0) {\\n        nameEntriesCount[node][version][nameHash]++;\\n      }\\n      records[node][version][nameHash][resource] = rrData;\\n      emit DNSRecordChanged(node, name, resource, rrData);\\n    }\\n  }\\n}\\n\\n// File: contracts/profiles/InterfaceResolver.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract InterfaceResolver is ResolverBase, AddrResolver {\\n  bytes4 private constant INTERFACE_INTERFACE_ID =\\n    bytes4(keccak256('interfaceImplementer(bytes32,bytes4)'));\\n  bytes4 private constant INTERFACE_META_ID = 0x01ffc9a7;\\n\\n  event InterfaceChanged(\\n    bytes32 indexed node,\\n    bytes4 indexed interfaceID,\\n    address implementer\\n  );\\n\\n  mapping(bytes32 => mapping(bytes4 => address)) interfaces;\\n\\n  /**\\n   * Sets an interface associated with a name.\\n   * Setting the address to 0 restores the default behaviour of querying the contract at `addr()` for interface support.\\n   * @param node The node to update.\\n   * @param interfaceID The EIP 168 interface ID.\\n   * @param implementer The address of a contract that implements this interface for this node.\\n   */\\n  function setInterface(\\n    bytes32 node,\\n    bytes4 interfaceID,\\n    address implementer\\n  ) external authorised(node) {\\n    interfaces[node][interfaceID] = implementer;\\n    emit InterfaceChanged(node, interfaceID, implementer);\\n  }\\n\\n  /**\\n   * Returns the address of a contract that implements the specified interface for this name.\\n   * If an implementer has not been set for this interfaceID and name, the resolver will query\\n   * the contract at `addr()`. If `addr()` is set, a contract exists at that address, and that\\n   * contract implements EIP168 and returns `true` for the specified interfaceID, its address\\n   * will be returned.\\n   * @param node The ENS node to query.\\n   * @param interfaceID The EIP 168 interface ID to check for.\\n   * @return The address that implements this interface, or 0 if the interface is unsupported.\\n   */\\n  function interfaceImplementer(bytes32 node, bytes4 interfaceID)\\n    external\\n    view\\n    returns (address)\\n  {\\n    address implementer = interfaces[node][interfaceID];\\n    if (implementer != address(0)) {\\n      return implementer;\\n    }\\n\\n    address a = addr(node);\\n    if (a == address(0)) {\\n      return address(0);\\n    }\\n\\n    (bool success, bytes memory returnData) = a.staticcall(\\n      abi.encodeWithSignature('supportsInterface(bytes4)', INTERFACE_META_ID)\\n    );\\n    if (!success || returnData.length < 32 || returnData[31] == 0) {\\n      // EIP 168 not supported by target\\n      return address(0);\\n    }\\n\\n    (success, returnData) = a.staticcall(\\n      abi.encodeWithSignature('supportsInterface(bytes4)', interfaceID)\\n    );\\n    if (!success || returnData.length < 32 || returnData[31] == 0) {\\n      // Specified interface not supported by target\\n      return address(0);\\n    }\\n\\n    return a;\\n  }\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return\\n      interfaceID == INTERFACE_INTERFACE_ID ||\\n      super.supportsInterface(interfaceID);\\n  }\\n}\\n\\n// File: contracts/profiles/NameResolver.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract NameResolver is ResolverBase {\\n  bytes4 private constant NAME_INTERFACE_ID = 0x691f3431;\\n\\n  event NameChanged(bytes32 indexed node, string name);\\n\\n  mapping(bytes32 => string) names;\\n\\n  /**\\n   * Sets the name associated with an ENS node, for reverse records.\\n   * May only be called by the owner of that node in the ENS registry.\\n   * @param node The node to update.\\n   * @param name The name to set.\\n   */\\n  function setName(bytes32 node, string calldata name)\\n    external\\n    authorised(node)\\n  {\\n    names[node] = name;\\n    emit NameChanged(node, name);\\n  }\\n\\n  /**\\n   * Returns the name associated with an ENS node, for reverse records.\\n   * Defined in EIP181.\\n   * @param node The ENS node to query.\\n   * @return The associated name.\\n   */\\n  function name(bytes32 node) external view returns (string memory) {\\n    return names[node];\\n  }\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return\\n      interfaceID == NAME_INTERFACE_ID || super.supportsInterface(interfaceID);\\n  }\\n}\\n\\n// File: contracts/profiles/PubkeyResolver.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract PubkeyResolver is ResolverBase {\\n  bytes4 private constant PUBKEY_INTERFACE_ID = 0xc8690233;\\n\\n  event PubkeyChanged(bytes32 indexed node, bytes32 x, bytes32 y);\\n\\n  struct PublicKey {\\n    bytes32 x;\\n    bytes32 y;\\n  }\\n\\n  mapping(bytes32 => PublicKey) pubkeys;\\n\\n  /**\\n   * Sets the SECP256k1 public key associated with an ENS node.\\n   * @param node The ENS node to query\\n   * @param x the X coordinate of the curve point for the public key.\\n   * @param y the Y coordinate of the curve point for the public key.\\n   */\\n  function setPubkey(\\n    bytes32 node,\\n    bytes32 x,\\n    bytes32 y\\n  ) external authorised(node) {\\n    pubkeys[node] = PublicKey(x, y);\\n    emit PubkeyChanged(node, x, y);\\n  }\\n\\n  /**\\n   * Returns the SECP256k1 public key associated with an ENS node.\\n   * Defined in EIP 619.\\n   * @param node The ENS node to query\\n   * @return x, y the X and Y coordinates of the curve point for the public key.\\n   */\\n  function pubkey(bytes32 node) external view returns (bytes32 x, bytes32 y) {\\n    return (pubkeys[node].x, pubkeys[node].y);\\n  }\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return\\n      interfaceID == PUBKEY_INTERFACE_ID ||\\n      super.supportsInterface(interfaceID);\\n  }\\n}\\n\\n// File: contracts/profiles/TextResolver.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract TextResolver is ResolverBase {\\n  bytes4 private constant TEXT_INTERFACE_ID = 0x59d1d43c;\\n\\n  event TextChanged(\\n    bytes32 indexed node,\\n    string indexed indexedKey,\\n    string key\\n  );\\n\\n  mapping(bytes32 => mapping(string => string)) texts;\\n\\n  /**\\n   * Sets the text data associated with an ENS node and key.\\n   * May only be called by the owner of that node in the ENS registry.\\n   * @param node The node to update.\\n   * @param key The key to set.\\n   * @param value The text data value to set.\\n   */\\n  function setText(\\n    bytes32 node,\\n    string calldata key,\\n    string calldata value\\n  ) external authorised(node) {\\n    texts[node][key] = value;\\n    emit TextChanged(node, key, key);\\n  }\\n\\n  /**\\n   * Returns the text data associated with an ENS node and key.\\n   * @param node The ENS node to query.\\n   * @param key The text data key to query.\\n   * @return The associated text data.\\n   */\\n  function text(bytes32 node, string calldata key)\\n    external\\n    view\\n    returns (string memory)\\n  {\\n    return texts[node][key];\\n  }\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return\\n      interfaceID == TEXT_INTERFACE_ID || super.supportsInterface(interfaceID);\\n  }\\n}\\n\\n// File: contracts/PublicResolver.sol\\n\\npragma solidity ^0.5.0;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * A simple resolver anyone can use; only allows the owner of a node to set its\\n * address.\\n */\\ncontract PublicResolver_mainnet_9412610 is\\n  ABIResolver,\\n  AddrResolver,\\n  ContentHashResolver,\\n  DNSResolver,\\n  InterfaceResolver,\\n  NameResolver,\\n  PubkeyResolver,\\n  TextResolver\\n{\\n  ENS ens;\\n\\n  /**\\n   * A mapping of authorisations. An address that is authorised for a name\\n   * may make any changes to the name that the owner could, but may not update\\n   * the set of authorisations.\\n   * (node, owner, caller) => isAuthorised\\n   */\\n  mapping(bytes32 => mapping(address => mapping(address => bool)))\\n    public authorisations;\\n\\n  event AuthorisationChanged(\\n    bytes32 indexed node,\\n    address indexed owner,\\n    address indexed target,\\n    bool isAuthorised\\n  );\\n\\n  constructor(ENS _ens) public {\\n    ens = _ens;\\n  }\\n\\n  /**\\n   * @dev Sets or clears an authorisation.\\n   * Authorisations are specific to the caller. Any account can set an authorisation\\n   * for any name, but the authorisation that is checked will be that of the\\n   * current owner of a name. Thus, transferring a name effectively clears any\\n   * existing authorisations, and new authorisations can be set in advance of\\n   * an ownership transfer if desired.\\n   *\\n   * @param node The name to change the authorisation on.\\n   * @param target The address that is to be authorised or deauthorised.\\n   * @param isAuthorised True if the address should be authorised, or false if it should be deauthorised.\\n   */\\n  function setAuthorisation(\\n    bytes32 node,\\n    address target,\\n    bool isAuthorised\\n  ) external {\\n    authorisations[node][msg.sender][target] = isAuthorised;\\n    emit AuthorisationChanged(node, msg.sender, target, isAuthorised);\\n  }\\n\\n  function isAuthorised(bytes32 node) internal view returns (bool) {\\n    address owner = ens.owner(node);\\n    return owner == msg.sender || authorisations[node][owner][msg.sender];\\n  }\\n\\n  function multicall(bytes[] calldata data)\\n    external\\n    returns (bytes[] memory results)\\n  {\\n    results = new bytes[](data.length);\\n    for (uint256 i = 0; i < data.length; i++) {\\n      (bool success, bytes memory result) = address(this).delegatecall(data[i]);\\n      require(success);\\n      results[i] = result;\\n    }\\n    return results;\\n  }\\n}\\n\",\"keccak256\":\"0x29ca7d322ab7177f187f9bfc310e6dfc94049e9beaaafe958bead081fd90ad76\"}},\"version\":1}",
          "storageLayout": {
            "storage": [
              {
                "astId": 165,
                "contract": "contracts/legacy/PublicResolver_mainnet_9412610.sol:ABIResolver",
                "label": "abis",
                "offset": 0,
                "slot": "0",
                "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_bytes_storage))"
              }
            ],
            "types": {
              "t_bytes32": {
                "encoding": "inplace",
                "label": "bytes32",
                "numberOfBytes": "32"
              },
              "t_bytes_storage": {
                "encoding": "bytes",
                "label": "bytes",
                "numberOfBytes": "32"
              },
              "t_mapping(t_bytes32,t_mapping(t_uint256,t_bytes_storage))": {
                "encoding": "mapping",
                "key": "t_bytes32",
                "label": "mapping(bytes32 => mapping(uint256 => bytes))",
                "numberOfBytes": "32",
                "value": "t_mapping(t_uint256,t_bytes_storage)"
              },
              "t_mapping(t_uint256,t_bytes_storage)": {
                "encoding": "mapping",
                "key": "t_uint256",
                "label": "mapping(uint256 => bytes)",
                "numberOfBytes": "32",
                "value": "t_bytes_storage"
              },
              "t_uint256": {
                "encoding": "inplace",
                "label": "uint256",
                "numberOfBytes": "32"
              }
            }
          },
          "userdoc": {
            "methods": {
              "ABI(bytes32,uint256)": {
                "notice": "Returns the ABI associated with an ENS node. Defined in EIP205."
              },
              "setABI(bytes32,uint256,bytes)": {
                "notice": "Sets the ABI associated with an ENS node. Nodes may have one ABI of each content type. To remove an ABI, set it to the empty string."
              }
            }
          }
        },
        "AddrResolver": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "node",
                  "type": "bytes32"
                },
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "a",
                  "type": "address"
                }
              ],
              "name": "AddrChanged",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "node",
                  "type": "bytes32"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "coinType",
                  "type": "uint256"
                },
                {
                  "indexed": false,
                  "internalType": "bytes",
                  "name": "newAddress",
                  "type": "bytes"
                }
              ],
              "name": "AddressChanged",
              "type": "event"
            },
            {
              "constant": true,
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "node",
                  "type": "bytes32"
                }
              ],
              "name": "addr",
              "outputs": [
                {
                  "internalType": "address payable",
                  "name": "",
                  "type": "address"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "node",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "coinType",
                  "type": "uint256"
                }
              ],
              "name": "addr",
              "outputs": [
                {
                  "internalType": "bytes",
                  "name": "",
                  "type": "bytes"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "node",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "coinType",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "a",
                  "type": "bytes"
                }
              ],
              "name": "setAddr",
              "outputs": [],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "node",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "a",
                  "type": "address"
                }
              ],
              "name": "setAddr",
              "outputs": [],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [
                {
                  "internalType": "bytes4",
                  "name": "interfaceID",
                  "type": "bytes4"
                }
              ],
              "name": "supportsInterface",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "payable": false,
              "stateMutability": "pure",
              "type": "function"
            }
          ],
          "devdoc": {
            "methods": {
              "addr(bytes32)": {
                "params": {
                  "node": "The ENS node to query."
                },
                "return": "The associated address."
              },
              "setAddr(bytes32,address)": {
                "params": {
                  "a": "The address to set.",
                  "node": "The node to update."
                }
              }
            }
          },
          "evm": {
            "bytecode": {
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "gasEstimates": null,
            "methodIdentifiers": {
              "addr(bytes32)": "3b3b57de",
              "addr(bytes32,uint256)": "f1cb7e06",
              "setAddr(bytes32,address)": "d5fa2b00",
              "setAddr(bytes32,uint256,bytes)": "8b95dd71",
              "supportsInterface(bytes4)": "01ffc9a7"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.5.17+commit.d19bba13\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"AddrChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"coinType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"newAddress\",\"type\":\"bytes\"}],\"name\":\"AddressChanged\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"addr\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"coinType\",\"type\":\"uint256\"}],\"name\":\"addr\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"coinType\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"a\",\"type\":\"bytes\"}],\"name\":\"setAddr\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"setAddr\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"addr(bytes32)\":{\"params\":{\"node\":\"The ENS node to query.\"},\"return\":\"The associated address.\"},\"setAddr(bytes32,address)\":{\"params\":{\"a\":\"The address to set.\",\"node\":\"The node to update.\"}}}},\"userdoc\":{\"methods\":{\"addr(bytes32)\":{\"notice\":\"Returns the address associated with an ENS node.\"},\"setAddr(bytes32,address)\":{\"notice\":\"Sets the address associated with an ENS node. May only be called by the owner of that node in the ENS registry.\"}}}},\"settings\":{\"compilationTarget\":{\"contracts/legacy/PublicResolver_mainnet_9412610.sol\":\"AddrResolver\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"contracts/legacy/PublicResolver_mainnet_9412610.sol\":{\"content\":\"/**\\n *Submitted for verification at Etherscan.io on 2020-02-03\\n */\\n\\n// File: @ensdomains/ens/contracts/ENS.sol\\n\\npragma solidity >=0.4.24;\\n\\ninterface ENS {\\n  // Logged when the owner of a node assigns a new owner to a subnode.\\n  event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n  // Logged when the owner of a node transfers ownership to a new account.\\n  event Transfer(bytes32 indexed node, address owner);\\n\\n  // Logged when the resolver for a node changes.\\n  event NewResolver(bytes32 indexed node, address resolver);\\n\\n  // Logged when the TTL of a node changes\\n  event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n  function setSubnodeOwner(\\n    bytes32 node,\\n    bytes32 label,\\n    address owner\\n  ) external;\\n\\n  function setResolver(bytes32 node, address resolver) external;\\n\\n  function setOwner(bytes32 node, address owner) external;\\n\\n  function setTTL(bytes32 node, uint64 ttl) external;\\n\\n  function owner(bytes32 node) external view returns (address);\\n\\n  function resolver(bytes32 node) external view returns (address);\\n\\n  function ttl(bytes32 node) external view returns (uint64);\\n}\\n\\n// File: contracts/ResolverBase.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract ResolverBase {\\n  bytes4 private constant INTERFACE_META_ID = 0x01ffc9a7;\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return interfaceID == INTERFACE_META_ID;\\n  }\\n\\n  function isAuthorised(bytes32 node) internal view returns (bool);\\n\\n  modifier authorised(bytes32 node) {\\n    require(isAuthorised(node));\\n    _;\\n  }\\n\\n  function bytesToAddress(bytes memory b)\\n    internal\\n    pure\\n    returns (address payable a)\\n  {\\n    require(b.length == 20);\\n    assembly {\\n      a := div(mload(add(b, 32)), exp(256, 12))\\n    }\\n  }\\n\\n  function addressToBytes(address a) internal pure returns (bytes memory b) {\\n    b = new bytes(20);\\n    assembly {\\n      mstore(add(b, 32), mul(a, exp(256, 12)))\\n    }\\n  }\\n}\\n\\n// File: contracts/profiles/ABIResolver.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract ABIResolver is ResolverBase {\\n  bytes4 private constant ABI_INTERFACE_ID = 0x2203ab56;\\n\\n  event ABIChanged(bytes32 indexed node, uint256 indexed contentType);\\n\\n  mapping(bytes32 => mapping(uint256 => bytes)) abis;\\n\\n  /**\\n   * Sets the ABI associated with an ENS node.\\n   * Nodes may have one ABI of each content type. To remove an ABI, set it to\\n   * the empty string.\\n   * @param node The node to update.\\n   * @param contentType The content type of the ABI\\n   * @param data The ABI data.\\n   */\\n  function setABI(\\n    bytes32 node,\\n    uint256 contentType,\\n    bytes calldata data\\n  ) external authorised(node) {\\n    // Content types must be powers of 2\\n    require(((contentType - 1) & contentType) == 0);\\n\\n    abis[node][contentType] = data;\\n    emit ABIChanged(node, contentType);\\n  }\\n\\n  /**\\n   * Returns the ABI associated with an ENS node.\\n   * Defined in EIP205.\\n   * @param node The ENS node to query\\n   * @param contentTypes A bitwise OR of the ABI formats accepted by the caller.\\n   * @return contentType The content type of the return value\\n   * @return data The ABI data\\n   */\\n  function ABI(bytes32 node, uint256 contentTypes)\\n    external\\n    view\\n    returns (uint256, bytes memory)\\n  {\\n    mapping(uint256 => bytes) storage abiset = abis[node];\\n\\n    for (\\n      uint256 contentType = 1;\\n      contentType <= contentTypes;\\n      contentType <<= 1\\n    ) {\\n      if ((contentType & contentTypes) != 0 && abiset[contentType].length > 0) {\\n        return (contentType, abiset[contentType]);\\n      }\\n    }\\n\\n    return (0, bytes(''));\\n  }\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return\\n      interfaceID == ABI_INTERFACE_ID || super.supportsInterface(interfaceID);\\n  }\\n}\\n\\n// File: contracts/profiles/AddrResolver.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract AddrResolver is ResolverBase {\\n  bytes4 private constant ADDR_INTERFACE_ID = 0x3b3b57de;\\n  bytes4 private constant ADDRESS_INTERFACE_ID = 0xf1cb7e06;\\n  uint256 private constant COIN_TYPE_ETH = 60;\\n\\n  event AddrChanged(bytes32 indexed node, address a);\\n  event AddressChanged(\\n    bytes32 indexed node,\\n    uint256 coinType,\\n    bytes newAddress\\n  );\\n\\n  mapping(bytes32 => mapping(uint256 => bytes)) _addresses;\\n\\n  /**\\n   * Sets the address associated with an ENS node.\\n   * May only be called by the owner of that node in the ENS registry.\\n   * @param node The node to update.\\n   * @param a The address to set.\\n   */\\n  function setAddr(bytes32 node, address a) external authorised(node) {\\n    setAddr(node, COIN_TYPE_ETH, addressToBytes(a));\\n  }\\n\\n  /**\\n   * Returns the address associated with an ENS node.\\n   * @param node The ENS node to query.\\n   * @return The associated address.\\n   */\\n  function addr(bytes32 node) public view returns (address payable) {\\n    bytes memory a = addr(node, COIN_TYPE_ETH);\\n    if (a.length == 0) {\\n      return address(0);\\n    }\\n    return bytesToAddress(a);\\n  }\\n\\n  function setAddr(\\n    bytes32 node,\\n    uint256 coinType,\\n    bytes memory a\\n  ) public authorised(node) {\\n    emit AddressChanged(node, coinType, a);\\n    if (coinType == COIN_TYPE_ETH) {\\n      emit AddrChanged(node, bytesToAddress(a));\\n    }\\n    _addresses[node][coinType] = a;\\n  }\\n\\n  function addr(bytes32 node, uint256 coinType)\\n    public\\n    view\\n    returns (bytes memory)\\n  {\\n    return _addresses[node][coinType];\\n  }\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return\\n      interfaceID == ADDR_INTERFACE_ID ||\\n      interfaceID == ADDRESS_INTERFACE_ID ||\\n      super.supportsInterface(interfaceID);\\n  }\\n}\\n\\n// File: contracts/profiles/ContentHashResolver.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract ContentHashResolver is ResolverBase {\\n  bytes4 private constant CONTENT_HASH_INTERFACE_ID = 0xbc1c58d1;\\n\\n  event ContenthashChanged(bytes32 indexed node, bytes hash);\\n\\n  mapping(bytes32 => bytes) hashes;\\n\\n  /**\\n   * Sets the contenthash associated with an ENS node.\\n   * May only be called by the owner of that node in the ENS registry.\\n   * @param node The node to update.\\n   * @param hash The contenthash to set\\n   */\\n  function setContenthash(bytes32 node, bytes calldata hash)\\n    external\\n    authorised(node)\\n  {\\n    hashes[node] = hash;\\n    emit ContenthashChanged(node, hash);\\n  }\\n\\n  /**\\n   * Returns the contenthash associated with an ENS node.\\n   * @param node The ENS node to query.\\n   * @return The associated contenthash.\\n   */\\n  function contenthash(bytes32 node) external view returns (bytes memory) {\\n    return hashes[node];\\n  }\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return\\n      interfaceID == CONTENT_HASH_INTERFACE_ID ||\\n      super.supportsInterface(interfaceID);\\n  }\\n}\\n\\n// File: @ensdomains/dnssec-oracle/contracts/BytesUtils.sol\\n\\npragma solidity >0.4.23;\\n\\nlibrary BytesUtils {\\n  /*\\n   * @dev Returns the keccak-256 hash of a byte range.\\n   * @param self The byte string to hash.\\n   * @param offset The position to start hashing at.\\n   * @param len The number of bytes to hash.\\n   * @return The hash of the byte range.\\n   */\\n  function keccak(\\n    bytes memory self,\\n    uint256 offset,\\n    uint256 len\\n  ) internal pure returns (bytes32 ret) {\\n    require(offset + len <= self.length);\\n    assembly {\\n      ret := keccak256(add(add(self, 32), offset), len)\\n    }\\n  }\\n\\n  /*\\n   * @dev Returns a positive number if `other` comes lexicographically after\\n   *      `self`, a negative number if it comes before, or zero if the\\n   *      contents of the two bytes are equal.\\n   * @param self The first bytes to compare.\\n   * @param other The second bytes to compare.\\n   * @return The result of the comparison.\\n   */\\n  function compare(bytes memory self, bytes memory other)\\n    internal\\n    pure\\n    returns (int256)\\n  {\\n    return compare(self, 0, self.length, other, 0, other.length);\\n  }\\n\\n  /*\\n   * @dev Returns a positive number if `other` comes lexicographically after\\n   *      `self`, a negative number if it comes before, or zero if the\\n   *      contents of the two bytes are equal. Comparison is done per-rune,\\n   *      on unicode codepoints.\\n   * @param self The first bytes to compare.\\n   * @param offset The offset of self.\\n   * @param len    The length of self.\\n   * @param other The second bytes to compare.\\n   * @param otheroffset The offset of the other string.\\n   * @param otherlen    The length of the other string.\\n   * @return The result of the comparison.\\n   */\\n  function compare(\\n    bytes memory self,\\n    uint256 offset,\\n    uint256 len,\\n    bytes memory other,\\n    uint256 otheroffset,\\n    uint256 otherlen\\n  ) internal pure returns (int256) {\\n    uint256 shortest = len;\\n    if (otherlen < len) shortest = otherlen;\\n\\n    uint256 selfptr;\\n    uint256 otherptr;\\n\\n    assembly {\\n      selfptr := add(self, add(offset, 32))\\n      otherptr := add(other, add(otheroffset, 32))\\n    }\\n    for (uint256 idx = 0; idx < shortest; idx += 32) {\\n      uint256 a;\\n      uint256 b;\\n      assembly {\\n        a := mload(selfptr)\\n        b := mload(otherptr)\\n      }\\n      if (a != b) {\\n        // Mask out irrelevant bytes and check again\\n        uint256 mask;\\n        if (shortest > 32) {\\n          mask = uint256(-1); // aka 0xffffff....\\n        } else {\\n          mask = ~(2**(8 * (32 - shortest + idx)) - 1);\\n        }\\n        uint256 diff = (a & mask) - (b & mask);\\n        if (diff != 0) return int256(diff);\\n      }\\n      selfptr += 32;\\n      otherptr += 32;\\n    }\\n\\n    return int256(len) - int256(otherlen);\\n  }\\n\\n  /*\\n   * @dev Returns true if the two byte ranges are equal.\\n   * @param self The first byte range to compare.\\n   * @param offset The offset into the first byte range.\\n   * @param other The second byte range to compare.\\n   * @param otherOffset The offset into the second byte range.\\n   * @param len The number of bytes to compare\\n   * @return True if the byte ranges are equal, false otherwise.\\n   */\\n  function equals(\\n    bytes memory self,\\n    uint256 offset,\\n    bytes memory other,\\n    uint256 otherOffset,\\n    uint256 len\\n  ) internal pure returns (bool) {\\n    return keccak(self, offset, len) == keccak(other, otherOffset, len);\\n  }\\n\\n  /*\\n   * @dev Returns true if the two byte ranges are equal with offsets.\\n   * @param self The first byte range to compare.\\n   * @param offset The offset into the first byte range.\\n   * @param other The second byte range to compare.\\n   * @param otherOffset The offset into the second byte range.\\n   * @return True if the byte ranges are equal, false otherwise.\\n   */\\n  function equals(\\n    bytes memory self,\\n    uint256 offset,\\n    bytes memory other,\\n    uint256 otherOffset\\n  ) internal pure returns (bool) {\\n    return\\n      keccak(self, offset, self.length - offset) ==\\n      keccak(other, otherOffset, other.length - otherOffset);\\n  }\\n\\n  /*\\n   * @dev Compares a range of 'self' to all of 'other' and returns True iff\\n   *      they are equal.\\n   * @param self The first byte range to compare.\\n   * @param offset The offset into the first byte range.\\n   * @param other The second byte range to compare.\\n   * @return True if the byte ranges are equal, false otherwise.\\n   */\\n  function equals(\\n    bytes memory self,\\n    uint256 offset,\\n    bytes memory other\\n  ) internal pure returns (bool) {\\n    return\\n      self.length >= offset + other.length &&\\n      equals(self, offset, other, 0, other.length);\\n  }\\n\\n  /*\\n   * @dev Returns true if the two byte ranges are equal.\\n   * @param self The first byte range to compare.\\n   * @param other The second byte range to compare.\\n   * @return True if the byte ranges are equal, false otherwise.\\n   */\\n  function equals(bytes memory self, bytes memory other)\\n    internal\\n    pure\\n    returns (bool)\\n  {\\n    return\\n      self.length == other.length && equals(self, 0, other, 0, self.length);\\n  }\\n\\n  /*\\n   * @dev Returns the 8-bit number at the specified index of self.\\n   * @param self The byte string.\\n   * @param idx The index into the bytes\\n   * @return The specified 8 bits of the string, interpreted as an integer.\\n   */\\n  function readUint8(bytes memory self, uint256 idx)\\n    internal\\n    pure\\n    returns (uint8 ret)\\n  {\\n    return uint8(self[idx]);\\n  }\\n\\n  /*\\n   * @dev Returns the 16-bit number at the specified index of self.\\n   * @param self The byte string.\\n   * @param idx The index into the bytes\\n   * @return The specified 16 bits of the string, interpreted as an integer.\\n   */\\n  function readUint16(bytes memory self, uint256 idx)\\n    internal\\n    pure\\n    returns (uint16 ret)\\n  {\\n    require(idx + 2 <= self.length);\\n    assembly {\\n      ret := and(mload(add(add(self, 2), idx)), 0xFFFF)\\n    }\\n  }\\n\\n  /*\\n   * @dev Returns the 32-bit number at the specified index of self.\\n   * @param self The byte string.\\n   * @param idx The index into the bytes\\n   * @return The specified 32 bits of the string, interpreted as an integer.\\n   */\\n  function readUint32(bytes memory self, uint256 idx)\\n    internal\\n    pure\\n    returns (uint32 ret)\\n  {\\n    require(idx + 4 <= self.length);\\n    assembly {\\n      ret := and(mload(add(add(self, 4), idx)), 0xFFFFFFFF)\\n    }\\n  }\\n\\n  /*\\n   * @dev Returns the 32 byte value at the specified index of self.\\n   * @param self The byte string.\\n   * @param idx The index into the bytes\\n   * @return The specified 32 bytes of the string.\\n   */\\n  function readBytes32(bytes memory self, uint256 idx)\\n    internal\\n    pure\\n    returns (bytes32 ret)\\n  {\\n    require(idx + 32 <= self.length);\\n    assembly {\\n      ret := mload(add(add(self, 32), idx))\\n    }\\n  }\\n\\n  /*\\n   * @dev Returns the 32 byte value at the specified index of self.\\n   * @param self The byte string.\\n   * @param idx The index into the bytes\\n   * @return The specified 32 bytes of the string.\\n   */\\n  function readBytes20(bytes memory self, uint256 idx)\\n    internal\\n    pure\\n    returns (bytes20 ret)\\n  {\\n    require(idx + 20 <= self.length);\\n    assembly {\\n      ret := and(\\n        mload(add(add(self, 32), idx)),\\n        0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000\\n      )\\n    }\\n  }\\n\\n  /*\\n   * @dev Returns the n byte value at the specified index of self.\\n   * @param self The byte string.\\n   * @param idx The index into the bytes.\\n   * @param len The number of bytes.\\n   * @return The specified 32 bytes of the string.\\n   */\\n  function readBytesN(\\n    bytes memory self,\\n    uint256 idx,\\n    uint256 len\\n  ) internal pure returns (bytes32 ret) {\\n    require(len <= 32);\\n    require(idx + len <= self.length);\\n    assembly {\\n      let mask := not(sub(exp(256, sub(32, len)), 1))\\n      ret := and(mload(add(add(self, 32), idx)), mask)\\n    }\\n  }\\n\\n  function memcpy(\\n    uint256 dest,\\n    uint256 src,\\n    uint256 len\\n  ) private pure {\\n    // Copy word-length chunks while possible\\n    for (; len >= 32; len -= 32) {\\n      assembly {\\n        mstore(dest, mload(src))\\n      }\\n      dest += 32;\\n      src += 32;\\n    }\\n\\n    // Copy remaining bytes\\n    uint256 mask = 256**(32 - len) - 1;\\n    assembly {\\n      let srcpart := and(mload(src), not(mask))\\n      let destpart := and(mload(dest), mask)\\n      mstore(dest, or(destpart, srcpart))\\n    }\\n  }\\n\\n  /*\\n   * @dev Copies a substring into a new byte string.\\n   * @param self The byte string to copy from.\\n   * @param offset The offset to start copying at.\\n   * @param len The number of bytes to copy.\\n   */\\n  function substring(\\n    bytes memory self,\\n    uint256 offset,\\n    uint256 len\\n  ) internal pure returns (bytes memory) {\\n    require(offset + len <= self.length);\\n\\n    bytes memory ret = new bytes(len);\\n    uint256 dest;\\n    uint256 src;\\n\\n    assembly {\\n      dest := add(ret, 32)\\n      src := add(add(self, 32), offset)\\n    }\\n    memcpy(dest, src, len);\\n\\n    return ret;\\n  }\\n\\n  // Maps characters from 0x30 to 0x7A to their base32 values.\\n  // 0xFF represents invalid characters in that range.\\n  bytes constant base32HexTable =\\n    hex'00010203040506070809FFFFFFFFFFFFFF0A0B0C0D0E0F101112131415161718191A1B1C1D1E1FFFFFFFFFFFFFFFFFFFFF0A0B0C0D0E0F101112131415161718191A1B1C1D1E1F';\\n\\n  /**\\n   * @dev Decodes unpadded base32 data of up to one word in length.\\n   * @param self The data to decode.\\n   * @param off Offset into the string to start at.\\n   * @param len Number of characters to decode.\\n   * @return The decoded data, left aligned.\\n   */\\n  function base32HexDecodeWord(\\n    bytes memory self,\\n    uint256 off,\\n    uint256 len\\n  ) internal pure returns (bytes32) {\\n    require(len <= 52);\\n\\n    uint256 ret = 0;\\n    uint8 decoded;\\n    for (uint256 i = 0; i < len; i++) {\\n      bytes1 char = self[off + i];\\n      require(char >= 0x30 && char <= 0x7A);\\n      decoded = uint8(base32HexTable[uint256(uint8(char)) - 0x30]);\\n      require(decoded <= 0x20);\\n      if (i == len - 1) {\\n        break;\\n      }\\n      ret = (ret << 5) | decoded;\\n    }\\n\\n    uint256 bitlen = len * 5;\\n    if (len % 8 == 0) {\\n      // Multiple of 8 characters, no padding\\n      ret = (ret << 5) | decoded;\\n    } else if (len % 8 == 2) {\\n      // Two extra characters - 1 byte\\n      ret = (ret << 3) | (decoded >> 2);\\n      bitlen -= 2;\\n    } else if (len % 8 == 4) {\\n      // Four extra characters - 2 bytes\\n      ret = (ret << 1) | (decoded >> 4);\\n      bitlen -= 4;\\n    } else if (len % 8 == 5) {\\n      // Five extra characters - 3 bytes\\n      ret = (ret << 4) | (decoded >> 1);\\n      bitlen -= 1;\\n    } else if (len % 8 == 7) {\\n      // Seven extra characters - 4 bytes\\n      ret = (ret << 2) | (decoded >> 3);\\n      bitlen -= 3;\\n    } else {\\n      revert();\\n    }\\n\\n    return bytes32(ret << (256 - bitlen));\\n  }\\n}\\n\\n// File: @ensdomains/buffer/contracts/Buffer.sol\\n\\npragma solidity >0.4.18;\\n\\n/**\\n * @dev A library for working with mutable byte buffers in Solidity.\\n *\\n * Byte buffers are mutable and expandable, and provide a variety of primitives\\n * for writing to them. At any time you can fetch a bytes object containing the\\n * current contents of the buffer. The bytes object should not be stored between\\n * operations, as it may change due to resizing of the buffer.\\n */\\nlibrary Buffer {\\n  /**\\n   * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n   *      a capacity. The capacity may be longer than the current value, in\\n   *      which case it can be extended without the need to allocate more memory.\\n   */\\n  struct buffer {\\n    bytes buf;\\n    uint256 capacity;\\n  }\\n\\n  /**\\n   * @dev Initializes a buffer with an initial capacity.\\n   * @param buf The buffer to initialize.\\n   * @param capacity The number of bytes of space to allocate the buffer.\\n   * @return The buffer, for chaining.\\n   */\\n  function init(buffer memory buf, uint256 capacity)\\n    internal\\n    pure\\n    returns (buffer memory)\\n  {\\n    if (capacity % 32 != 0) {\\n      capacity += 32 - (capacity % 32);\\n    }\\n    // Allocate space for the buffer data\\n    buf.capacity = capacity;\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(buf, ptr)\\n      mstore(ptr, 0)\\n      mstore(0x40, add(32, add(ptr, capacity)))\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Initializes a new buffer from an existing bytes object.\\n   *      Changes to the buffer may mutate the original value.\\n   * @param b The bytes object to initialize the buffer with.\\n   * @return A new buffer.\\n   */\\n  function fromBytes(bytes memory b) internal pure returns (buffer memory) {\\n    buffer memory buf;\\n    buf.buf = b;\\n    buf.capacity = b.length;\\n    return buf;\\n  }\\n\\n  function resize(buffer memory buf, uint256 capacity) private pure {\\n    bytes memory oldbuf = buf.buf;\\n    init(buf, capacity);\\n    append(buf, oldbuf);\\n  }\\n\\n  function max(uint256 a, uint256 b) private pure returns (uint256) {\\n    if (a > b) {\\n      return a;\\n    }\\n    return b;\\n  }\\n\\n  /**\\n   * @dev Sets buffer length to 0.\\n   * @param buf The buffer to truncate.\\n   * @return The original buffer, for chaining..\\n   */\\n  function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n    assembly {\\n      let bufptr := mload(buf)\\n      mstore(bufptr, 0)\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Writes a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The start offset to write to.\\n   * @param data The data to append.\\n   * @param len The number of bytes to copy.\\n   * @return The original buffer, for chaining.\\n   */\\n  function write(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes memory data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    require(len <= data.length);\\n\\n    if (off + len > buf.capacity) {\\n      resize(buf, max(buf.capacity, len + off) * 2);\\n    }\\n\\n    uint256 dest;\\n    uint256 src;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Start address = buffer address + offset + sizeof(buffer length)\\n      dest := add(add(bufptr, 32), off)\\n      // Update buffer length if we're extending it\\n      if gt(add(len, off), buflen) {\\n        mstore(bufptr, add(len, off))\\n      }\\n      src := add(data, 32)\\n    }\\n\\n    // Copy word-length chunks while possible\\n    for (; len >= 32; len -= 32) {\\n      assembly {\\n        mstore(dest, mload(src))\\n      }\\n      dest += 32;\\n      src += 32;\\n    }\\n\\n    // Copy remaining bytes\\n    uint256 mask = 256**(32 - len) - 1;\\n    assembly {\\n      let srcpart := and(mload(src), not(mask))\\n      let destpart := and(mload(dest), mask)\\n      mstore(dest, or(destpart, srcpart))\\n    }\\n\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @param len The number of bytes to copy.\\n   * @return The original buffer, for chaining.\\n   */\\n  function append(\\n    buffer memory buf,\\n    bytes memory data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, len);\\n  }\\n\\n  /**\\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function append(buffer memory buf, bytes memory data)\\n    internal\\n    pure\\n    returns (buffer memory)\\n  {\\n    return write(buf, buf.buf.length, data, data.length);\\n  }\\n\\n  /**\\n   * @dev Writes a byte to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write the byte at.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeUint8(\\n    buffer memory buf,\\n    uint256 off,\\n    uint8 data\\n  ) internal pure returns (buffer memory) {\\n    if (off >= buf.capacity) {\\n      resize(buf, buf.capacity * 2);\\n    }\\n\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Address = buffer address + sizeof(buffer length) + off\\n      let dest := add(add(bufptr, off), 32)\\n      mstore8(dest, data)\\n      // Update buffer length if we extended it\\n      if eq(off, buflen) {\\n        mstore(bufptr, add(buflen, 1))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function appendUint8(buffer memory buf, uint8 data)\\n    internal\\n    pure\\n    returns (buffer memory)\\n  {\\n    return writeUint8(buf, buf.buf.length, data);\\n  }\\n\\n  /**\\n   * @dev Writes up to 32 bytes to the buffer. Resizes if doing so would\\n   *      exceed the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @param len The number of bytes to write (left-aligned).\\n   * @return The original buffer, for chaining.\\n   */\\n  function write(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes32 data,\\n    uint256 len\\n  ) private pure returns (buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    uint256 mask = 256**len - 1;\\n    // Right-align data\\n    data = data >> (8 * (32 - len));\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Address = buffer address + sizeof(buffer length) + off + len\\n      let dest := add(add(bufptr, off), len)\\n      mstore(dest, or(and(mload(dest), not(mask)), data))\\n      // Update buffer length if we extended it\\n      if gt(add(off, len), mload(bufptr)) {\\n        mstore(bufptr, add(off, len))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Writes a bytes20 to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeBytes20(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes20 data\\n  ) internal pure returns (buffer memory) {\\n    return write(buf, off, bytes32(data), 20);\\n  }\\n\\n  /**\\n   * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chhaining.\\n   */\\n  function appendBytes20(buffer memory buf, bytes20 data)\\n    internal\\n    pure\\n    returns (buffer memory)\\n  {\\n    return write(buf, buf.buf.length, bytes32(data), 20);\\n  }\\n\\n  /**\\n   * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function appendBytes32(buffer memory buf, bytes32 data)\\n    internal\\n    pure\\n    returns (buffer memory)\\n  {\\n    return write(buf, buf.buf.length, data, 32);\\n  }\\n\\n  /**\\n   * @dev Writes an integer to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @param len The number of bytes to write (right-aligned).\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeInt(\\n    buffer memory buf,\\n    uint256 off,\\n    uint256 data,\\n    uint256 len\\n  ) private pure returns (buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    uint256 mask = 256**len - 1;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Address = buffer address + off + sizeof(buffer length) + len\\n      let dest := add(add(bufptr, off), len)\\n      mstore(dest, or(and(mload(dest), not(mask)), data))\\n      // Update buffer length if we extended it\\n      if gt(add(off, len), mload(bufptr)) {\\n        mstore(bufptr, add(off, len))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n   * exceed the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer.\\n   */\\n  function appendInt(\\n    buffer memory buf,\\n    uint256 data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    return writeInt(buf, buf.buf.length, data, len);\\n  }\\n}\\n\\n// File: @ensdomains/dnssec-oracle/contracts/RRUtils.sol\\n\\npragma solidity >0.4.23;\\n\\n/**\\n * @dev RRUtils is a library that provides utilities for parsing DNS resource records.\\n */\\nlibrary RRUtils {\\n  using BytesUtils for *;\\n  using Buffer for *;\\n\\n  /**\\n   * @dev Returns the number of bytes in the DNS name at 'offset' in 'self'.\\n   * @param self The byte array to read a name from.\\n   * @param offset The offset to start reading at.\\n   * @return The length of the DNS name at 'offset', in bytes.\\n   */\\n  function nameLength(bytes memory self, uint256 offset)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    uint256 idx = offset;\\n    while (true) {\\n      assert(idx < self.length);\\n      uint256 labelLen = self.readUint8(idx);\\n      idx += labelLen + 1;\\n      if (labelLen == 0) {\\n        break;\\n      }\\n    }\\n    return idx - offset;\\n  }\\n\\n  /**\\n   * @dev Returns a DNS format name at the specified offset of self.\\n   * @param self The byte array to read a name from.\\n   * @param offset The offset to start reading at.\\n   * @return The name.\\n   */\\n  function readName(bytes memory self, uint256 offset)\\n    internal\\n    pure\\n    returns (bytes memory ret)\\n  {\\n    uint256 len = nameLength(self, offset);\\n    return self.substring(offset, len);\\n  }\\n\\n  /**\\n   * @dev Returns the number of labels in the DNS name at 'offset' in 'self'.\\n   * @param self The byte array to read a name from.\\n   * @param offset The offset to start reading at.\\n   * @return The number of labels in the DNS name at 'offset', in bytes.\\n   */\\n  function labelCount(bytes memory self, uint256 offset)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    uint256 count = 0;\\n    while (true) {\\n      assert(offset < self.length);\\n      uint256 labelLen = self.readUint8(offset);\\n      offset += labelLen + 1;\\n      if (labelLen == 0) {\\n        break;\\n      }\\n      count += 1;\\n    }\\n    return count;\\n  }\\n\\n  /**\\n   * @dev An iterator over resource records.\\n   */\\n  struct RRIterator {\\n    bytes data;\\n    uint256 offset;\\n    uint16 dnstype;\\n    uint16 class;\\n    uint32 ttl;\\n    uint256 rdataOffset;\\n    uint256 nextOffset;\\n  }\\n\\n  /**\\n   * @dev Begins iterating over resource records.\\n   * @param self The byte string to read from.\\n   * @param offset The offset to start reading at.\\n   * @return An iterator object.\\n   */\\n  function iterateRRs(bytes memory self, uint256 offset)\\n    internal\\n    pure\\n    returns (RRIterator memory ret)\\n  {\\n    ret.data = self;\\n    ret.nextOffset = offset;\\n    next(ret);\\n  }\\n\\n  /**\\n   * @dev Returns true iff there are more RRs to iterate.\\n   * @param iter The iterator to check.\\n   * @return True iff the iterator has finished.\\n   */\\n  function done(RRIterator memory iter) internal pure returns (bool) {\\n    return iter.offset >= iter.data.length;\\n  }\\n\\n  /**\\n   * @dev Moves the iterator to the next resource record.\\n   * @param iter The iterator to advance.\\n   */\\n  function next(RRIterator memory iter) internal pure {\\n    iter.offset = iter.nextOffset;\\n    if (iter.offset >= iter.data.length) {\\n      return;\\n    }\\n\\n    // Skip the name\\n    uint256 off = iter.offset + nameLength(iter.data, iter.offset);\\n\\n    // Read type, class, and ttl\\n    iter.dnstype = iter.data.readUint16(off);\\n    off += 2;\\n    iter.class = iter.data.readUint16(off);\\n    off += 2;\\n    iter.ttl = iter.data.readUint32(off);\\n    off += 4;\\n\\n    // Read the rdata\\n    uint256 rdataLength = iter.data.readUint16(off);\\n    off += 2;\\n    iter.rdataOffset = off;\\n    iter.nextOffset = off + rdataLength;\\n  }\\n\\n  /**\\n   * @dev Returns the name of the current record.\\n   * @param iter The iterator.\\n   * @return A new bytes object containing the owner name from the RR.\\n   */\\n  function name(RRIterator memory iter) internal pure returns (bytes memory) {\\n    return iter.data.substring(iter.offset, nameLength(iter.data, iter.offset));\\n  }\\n\\n  /**\\n   * @dev Returns the rdata portion of the current record.\\n   * @param iter The iterator.\\n   * @return A new bytes object containing the RR's RDATA.\\n   */\\n  function rdata(RRIterator memory iter) internal pure returns (bytes memory) {\\n    return\\n      iter.data.substring(iter.rdataOffset, iter.nextOffset - iter.rdataOffset);\\n  }\\n\\n  /**\\n   * @dev Checks if a given RR type exists in a type bitmap.\\n   * @param self The byte string to read the type bitmap from.\\n   * @param offset The offset to start reading at.\\n   * @param rrtype The RR type to check for.\\n   * @return True if the type is found in the bitmap, false otherwise.\\n   */\\n  function checkTypeBitmap(\\n    bytes memory self,\\n    uint256 offset,\\n    uint16 rrtype\\n  ) internal pure returns (bool) {\\n    uint8 typeWindow = uint8(rrtype >> 8);\\n    uint8 windowByte = uint8((rrtype & 0xff) / 8);\\n    uint8 windowBitmask = uint8(uint8(1) << (uint8(7) - uint8(rrtype & 0x7)));\\n    for (uint256 off = offset; off < self.length; ) {\\n      uint8 window = self.readUint8(off);\\n      uint8 len = self.readUint8(off + 1);\\n      if (typeWindow < window) {\\n        // We've gone past our window; it's not here.\\n        return false;\\n      } else if (typeWindow == window) {\\n        // Check this type bitmap\\n        if (len * 8 <= windowByte) {\\n          // Our type is past the end of the bitmap\\n          return false;\\n        }\\n        return (self.readUint8(off + windowByte + 2) & windowBitmask) != 0;\\n      } else {\\n        // Skip this type bitmap\\n        off += len + 2;\\n      }\\n    }\\n\\n    return false;\\n  }\\n\\n  function compareNames(bytes memory self, bytes memory other)\\n    internal\\n    pure\\n    returns (int256)\\n  {\\n    if (self.equals(other)) {\\n      return 0;\\n    }\\n\\n    uint256 off;\\n    uint256 otheroff;\\n    uint256 prevoff;\\n    uint256 otherprevoff;\\n    uint256 counts = labelCount(self, 0);\\n    uint256 othercounts = labelCount(other, 0);\\n\\n    // Keep removing labels from the front of the name until both names are equal length\\n    while (counts > othercounts) {\\n      prevoff = off;\\n      off = progress(self, off);\\n      counts--;\\n    }\\n\\n    while (othercounts > counts) {\\n      otherprevoff = otheroff;\\n      otheroff = progress(other, otheroff);\\n      othercounts--;\\n    }\\n\\n    // Compare the last nonequal labels to each other\\n    while (counts > 0 && !self.equals(off, other, otheroff)) {\\n      prevoff = off;\\n      off = progress(self, off);\\n      otherprevoff = otheroff;\\n      otheroff = progress(other, otheroff);\\n      counts -= 1;\\n    }\\n\\n    if (off == 0) {\\n      return -1;\\n    }\\n    if (otheroff == 0) {\\n      return 1;\\n    }\\n\\n    return\\n      self.compare(\\n        prevoff + 1,\\n        self.readUint8(prevoff),\\n        other,\\n        otherprevoff + 1,\\n        other.readUint8(otherprevoff)\\n      );\\n  }\\n\\n  function progress(bytes memory body, uint256 off)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    return off + 1 + body.readUint8(off);\\n  }\\n}\\n\\n// File: contracts/profiles/DNSResolver.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract DNSResolver is ResolverBase {\\n  using RRUtils for *;\\n  using BytesUtils for bytes;\\n\\n  bytes4 private constant DNS_RECORD_INTERFACE_ID = 0xa8fa5682;\\n\\n  // DNSRecordChanged is emitted whenever a given node/name/resource's RRSET is updated.\\n  event DNSRecordChanged(\\n    bytes32 indexed node,\\n    bytes name,\\n    uint16 resource,\\n    bytes record\\n  );\\n  // DNSRecordDeleted is emitted whenever a given node/name/resource's RRSET is deleted.\\n  event DNSRecordDeleted(bytes32 indexed node, bytes name, uint16 resource);\\n  // DNSZoneCleared is emitted whenever a given node's zone information is cleared.\\n  event DNSZoneCleared(bytes32 indexed node);\\n\\n  // Version the mapping for each zone.  This allows users who have lost\\n  // track of their entries to effectively delete an entire zone by bumping\\n  // the version number.\\n  // node => version\\n  mapping(bytes32 => uint256) private versions;\\n\\n  // The records themselves.  Stored as binary RRSETs\\n  // node => version => name => resource => data\\n  mapping(bytes32 => mapping(uint256 => mapping(bytes32 => mapping(uint16 => bytes))))\\n    private records;\\n\\n  // Count of number of entries for a given name.  Required for DNS resolvers\\n  // when resolving wildcards.\\n  // node => version => name => number of records\\n  mapping(bytes32 => mapping(uint256 => mapping(bytes32 => uint16)))\\n    private nameEntriesCount;\\n\\n  /**\\n   * Set one or more DNS records.  Records are supplied in wire-format.\\n   * Records with the same node/name/resource must be supplied one after the\\n   * other to ensure the data is updated correctly. For example, if the data\\n   * was supplied:\\n   *     a.example.com IN A 1.2.3.4\\n   *     a.example.com IN A 5.6.7.8\\n   *     www.example.com IN CNAME a.example.com.\\n   * then this would store the two A records for a.example.com correctly as a\\n   * single RRSET, however if the data was supplied:\\n   *     a.example.com IN A 1.2.3.4\\n   *     www.example.com IN CNAME a.example.com.\\n   *     a.example.com IN A 5.6.7.8\\n   * then this would store the first A record, the CNAME, then the second A\\n   * record which would overwrite the first.\\n   *\\n   * @param node the namehash of the node for which to set the records\\n   * @param data the DNS wire format records to set\\n   */\\n  function setDNSRecords(bytes32 node, bytes calldata data)\\n    external\\n    authorised(node)\\n  {\\n    uint16 resource = 0;\\n    uint256 offset = 0;\\n    bytes memory name;\\n    bytes memory value;\\n    bytes32 nameHash;\\n    // Iterate over the data to add the resource records\\n    for (\\n      RRUtils.RRIterator memory iter = data.iterateRRs(0);\\n      !iter.done();\\n      iter.next()\\n    ) {\\n      if (resource == 0) {\\n        resource = iter.dnstype;\\n        name = iter.name();\\n        nameHash = keccak256(abi.encodePacked(name));\\n        value = bytes(iter.rdata());\\n      } else {\\n        bytes memory newName = iter.name();\\n        if (resource != iter.dnstype || !name.equals(newName)) {\\n          setDNSRRSet(\\n            node,\\n            name,\\n            resource,\\n            data,\\n            offset,\\n            iter.offset - offset,\\n            value.length == 0\\n          );\\n          resource = iter.dnstype;\\n          offset = iter.offset;\\n          name = newName;\\n          nameHash = keccak256(name);\\n          value = bytes(iter.rdata());\\n        }\\n      }\\n    }\\n    if (name.length > 0) {\\n      setDNSRRSet(\\n        node,\\n        name,\\n        resource,\\n        data,\\n        offset,\\n        data.length - offset,\\n        value.length == 0\\n      );\\n    }\\n  }\\n\\n  /**\\n   * Obtain a DNS record.\\n   * @param node the namehash of the node for which to fetch the record\\n   * @param name the keccak-256 hash of the fully-qualified name for which to fetch the record\\n   * @param resource the ID of the resource as per https://en.wikipedia.org/wiki/List_of_DNS_record_types\\n   * @return the DNS record in wire format if present, otherwise empty\\n   */\\n  function dnsRecord(\\n    bytes32 node,\\n    bytes32 name,\\n    uint16 resource\\n  ) public view returns (bytes memory) {\\n    return records[node][versions[node]][name][resource];\\n  }\\n\\n  /**\\n   * Check if a given node has records.\\n   * @param node the namehash of the node for which to check the records\\n   * @param name the namehash of the node for which to check the records\\n   */\\n  function hasDNSRecords(bytes32 node, bytes32 name)\\n    public\\n    view\\n    returns (bool)\\n  {\\n    return (nameEntriesCount[node][versions[node]][name] != 0);\\n  }\\n\\n  /**\\n   * Clear all information for a DNS zone.\\n   * @param node the namehash of the node for which to clear the zone\\n   */\\n  function clearDNSZone(bytes32 node) public authorised(node) {\\n    versions[node]++;\\n    emit DNSZoneCleared(node);\\n  }\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return\\n      interfaceID == DNS_RECORD_INTERFACE_ID ||\\n      super.supportsInterface(interfaceID);\\n  }\\n\\n  function setDNSRRSet(\\n    bytes32 node,\\n    bytes memory name,\\n    uint16 resource,\\n    bytes memory data,\\n    uint256 offset,\\n    uint256 size,\\n    bool deleteRecord\\n  ) private {\\n    uint256 version = versions[node];\\n    bytes32 nameHash = keccak256(name);\\n    bytes memory rrData = data.substring(offset, size);\\n    if (deleteRecord) {\\n      if (records[node][version][nameHash][resource].length != 0) {\\n        nameEntriesCount[node][version][nameHash]--;\\n      }\\n      delete (records[node][version][nameHash][resource]);\\n      emit DNSRecordDeleted(node, name, resource);\\n    } else {\\n      if (records[node][version][nameHash][resource].length == 0) {\\n        nameEntriesCount[node][version][nameHash]++;\\n      }\\n      records[node][version][nameHash][resource] = rrData;\\n      emit DNSRecordChanged(node, name, resource, rrData);\\n    }\\n  }\\n}\\n\\n// File: contracts/profiles/InterfaceResolver.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract InterfaceResolver is ResolverBase, AddrResolver {\\n  bytes4 private constant INTERFACE_INTERFACE_ID =\\n    bytes4(keccak256('interfaceImplementer(bytes32,bytes4)'));\\n  bytes4 private constant INTERFACE_META_ID = 0x01ffc9a7;\\n\\n  event InterfaceChanged(\\n    bytes32 indexed node,\\n    bytes4 indexed interfaceID,\\n    address implementer\\n  );\\n\\n  mapping(bytes32 => mapping(bytes4 => address)) interfaces;\\n\\n  /**\\n   * Sets an interface associated with a name.\\n   * Setting the address to 0 restores the default behaviour of querying the contract at `addr()` for interface support.\\n   * @param node The node to update.\\n   * @param interfaceID The EIP 168 interface ID.\\n   * @param implementer The address of a contract that implements this interface for this node.\\n   */\\n  function setInterface(\\n    bytes32 node,\\n    bytes4 interfaceID,\\n    address implementer\\n  ) external authorised(node) {\\n    interfaces[node][interfaceID] = implementer;\\n    emit InterfaceChanged(node, interfaceID, implementer);\\n  }\\n\\n  /**\\n   * Returns the address of a contract that implements the specified interface for this name.\\n   * If an implementer has not been set for this interfaceID and name, the resolver will query\\n   * the contract at `addr()`. If `addr()` is set, a contract exists at that address, and that\\n   * contract implements EIP168 and returns `true` for the specified interfaceID, its address\\n   * will be returned.\\n   * @param node The ENS node to query.\\n   * @param interfaceID The EIP 168 interface ID to check for.\\n   * @return The address that implements this interface, or 0 if the interface is unsupported.\\n   */\\n  function interfaceImplementer(bytes32 node, bytes4 interfaceID)\\n    external\\n    view\\n    returns (address)\\n  {\\n    address implementer = interfaces[node][interfaceID];\\n    if (implementer != address(0)) {\\n      return implementer;\\n    }\\n\\n    address a = addr(node);\\n    if (a == address(0)) {\\n      return address(0);\\n    }\\n\\n    (bool success, bytes memory returnData) = a.staticcall(\\n      abi.encodeWithSignature('supportsInterface(bytes4)', INTERFACE_META_ID)\\n    );\\n    if (!success || returnData.length < 32 || returnData[31] == 0) {\\n      // EIP 168 not supported by target\\n      return address(0);\\n    }\\n\\n    (success, returnData) = a.staticcall(\\n      abi.encodeWithSignature('supportsInterface(bytes4)', interfaceID)\\n    );\\n    if (!success || returnData.length < 32 || returnData[31] == 0) {\\n      // Specified interface not supported by target\\n      return address(0);\\n    }\\n\\n    return a;\\n  }\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return\\n      interfaceID == INTERFACE_INTERFACE_ID ||\\n      super.supportsInterface(interfaceID);\\n  }\\n}\\n\\n// File: contracts/profiles/NameResolver.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract NameResolver is ResolverBase {\\n  bytes4 private constant NAME_INTERFACE_ID = 0x691f3431;\\n\\n  event NameChanged(bytes32 indexed node, string name);\\n\\n  mapping(bytes32 => string) names;\\n\\n  /**\\n   * Sets the name associated with an ENS node, for reverse records.\\n   * May only be called by the owner of that node in the ENS registry.\\n   * @param node The node to update.\\n   * @param name The name to set.\\n   */\\n  function setName(bytes32 node, string calldata name)\\n    external\\n    authorised(node)\\n  {\\n    names[node] = name;\\n    emit NameChanged(node, name);\\n  }\\n\\n  /**\\n   * Returns the name associated with an ENS node, for reverse records.\\n   * Defined in EIP181.\\n   * @param node The ENS node to query.\\n   * @return The associated name.\\n   */\\n  function name(bytes32 node) external view returns (string memory) {\\n    return names[node];\\n  }\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return\\n      interfaceID == NAME_INTERFACE_ID || super.supportsInterface(interfaceID);\\n  }\\n}\\n\\n// File: contracts/profiles/PubkeyResolver.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract PubkeyResolver is ResolverBase {\\n  bytes4 private constant PUBKEY_INTERFACE_ID = 0xc8690233;\\n\\n  event PubkeyChanged(bytes32 indexed node, bytes32 x, bytes32 y);\\n\\n  struct PublicKey {\\n    bytes32 x;\\n    bytes32 y;\\n  }\\n\\n  mapping(bytes32 => PublicKey) pubkeys;\\n\\n  /**\\n   * Sets the SECP256k1 public key associated with an ENS node.\\n   * @param node The ENS node to query\\n   * @param x the X coordinate of the curve point for the public key.\\n   * @param y the Y coordinate of the curve point for the public key.\\n   */\\n  function setPubkey(\\n    bytes32 node,\\n    bytes32 x,\\n    bytes32 y\\n  ) external authorised(node) {\\n    pubkeys[node] = PublicKey(x, y);\\n    emit PubkeyChanged(node, x, y);\\n  }\\n\\n  /**\\n   * Returns the SECP256k1 public key associated with an ENS node.\\n   * Defined in EIP 619.\\n   * @param node The ENS node to query\\n   * @return x, y the X and Y coordinates of the curve point for the public key.\\n   */\\n  function pubkey(bytes32 node) external view returns (bytes32 x, bytes32 y) {\\n    return (pubkeys[node].x, pubkeys[node].y);\\n  }\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return\\n      interfaceID == PUBKEY_INTERFACE_ID ||\\n      super.supportsInterface(interfaceID);\\n  }\\n}\\n\\n// File: contracts/profiles/TextResolver.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract TextResolver is ResolverBase {\\n  bytes4 private constant TEXT_INTERFACE_ID = 0x59d1d43c;\\n\\n  event TextChanged(\\n    bytes32 indexed node,\\n    string indexed indexedKey,\\n    string key\\n  );\\n\\n  mapping(bytes32 => mapping(string => string)) texts;\\n\\n  /**\\n   * Sets the text data associated with an ENS node and key.\\n   * May only be called by the owner of that node in the ENS registry.\\n   * @param node The node to update.\\n   * @param key The key to set.\\n   * @param value The text data value to set.\\n   */\\n  function setText(\\n    bytes32 node,\\n    string calldata key,\\n    string calldata value\\n  ) external authorised(node) {\\n    texts[node][key] = value;\\n    emit TextChanged(node, key, key);\\n  }\\n\\n  /**\\n   * Returns the text data associated with an ENS node and key.\\n   * @param node The ENS node to query.\\n   * @param key The text data key to query.\\n   * @return The associated text data.\\n   */\\n  function text(bytes32 node, string calldata key)\\n    external\\n    view\\n    returns (string memory)\\n  {\\n    return texts[node][key];\\n  }\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return\\n      interfaceID == TEXT_INTERFACE_ID || super.supportsInterface(interfaceID);\\n  }\\n}\\n\\n// File: contracts/PublicResolver.sol\\n\\npragma solidity ^0.5.0;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * A simple resolver anyone can use; only allows the owner of a node to set its\\n * address.\\n */\\ncontract PublicResolver_mainnet_9412610 is\\n  ABIResolver,\\n  AddrResolver,\\n  ContentHashResolver,\\n  DNSResolver,\\n  InterfaceResolver,\\n  NameResolver,\\n  PubkeyResolver,\\n  TextResolver\\n{\\n  ENS ens;\\n\\n  /**\\n   * A mapping of authorisations. An address that is authorised for a name\\n   * may make any changes to the name that the owner could, but may not update\\n   * the set of authorisations.\\n   * (node, owner, caller) => isAuthorised\\n   */\\n  mapping(bytes32 => mapping(address => mapping(address => bool)))\\n    public authorisations;\\n\\n  event AuthorisationChanged(\\n    bytes32 indexed node,\\n    address indexed owner,\\n    address indexed target,\\n    bool isAuthorised\\n  );\\n\\n  constructor(ENS _ens) public {\\n    ens = _ens;\\n  }\\n\\n  /**\\n   * @dev Sets or clears an authorisation.\\n   * Authorisations are specific to the caller. Any account can set an authorisation\\n   * for any name, but the authorisation that is checked will be that of the\\n   * current owner of a name. Thus, transferring a name effectively clears any\\n   * existing authorisations, and new authorisations can be set in advance of\\n   * an ownership transfer if desired.\\n   *\\n   * @param node The name to change the authorisation on.\\n   * @param target The address that is to be authorised or deauthorised.\\n   * @param isAuthorised True if the address should be authorised, or false if it should be deauthorised.\\n   */\\n  function setAuthorisation(\\n    bytes32 node,\\n    address target,\\n    bool isAuthorised\\n  ) external {\\n    authorisations[node][msg.sender][target] = isAuthorised;\\n    emit AuthorisationChanged(node, msg.sender, target, isAuthorised);\\n  }\\n\\n  function isAuthorised(bytes32 node) internal view returns (bool) {\\n    address owner = ens.owner(node);\\n    return owner == msg.sender || authorisations[node][owner][msg.sender];\\n  }\\n\\n  function multicall(bytes[] calldata data)\\n    external\\n    returns (bytes[] memory results)\\n  {\\n    results = new bytes[](data.length);\\n    for (uint256 i = 0; i < data.length; i++) {\\n      (bool success, bytes memory result) = address(this).delegatecall(data[i]);\\n      require(success);\\n      results[i] = result;\\n    }\\n    return results;\\n  }\\n}\\n\",\"keccak256\":\"0x29ca7d322ab7177f187f9bfc310e6dfc94049e9beaaafe958bead081fd90ad76\"}},\"version\":1}",
          "storageLayout": {
            "storage": [
              {
                "astId": 313,
                "contract": "contracts/legacy/PublicResolver_mainnet_9412610.sol:AddrResolver",
                "label": "_addresses",
                "offset": 0,
                "slot": "0",
                "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_bytes_storage))"
              }
            ],
            "types": {
              "t_bytes32": {
                "encoding": "inplace",
                "label": "bytes32",
                "numberOfBytes": "32"
              },
              "t_bytes_storage": {
                "encoding": "bytes",
                "label": "bytes",
                "numberOfBytes": "32"
              },
              "t_mapping(t_bytes32,t_mapping(t_uint256,t_bytes_storage))": {
                "encoding": "mapping",
                "key": "t_bytes32",
                "label": "mapping(bytes32 => mapping(uint256 => bytes))",
                "numberOfBytes": "32",
                "value": "t_mapping(t_uint256,t_bytes_storage)"
              },
              "t_mapping(t_uint256,t_bytes_storage)": {
                "encoding": "mapping",
                "key": "t_uint256",
                "label": "mapping(uint256 => bytes)",
                "numberOfBytes": "32",
                "value": "t_bytes_storage"
              },
              "t_uint256": {
                "encoding": "inplace",
                "label": "uint256",
                "numberOfBytes": "32"
              }
            }
          },
          "userdoc": {
            "methods": {
              "addr(bytes32)": {
                "notice": "Returns the address associated with an ENS node."
              },
              "setAddr(bytes32,address)": {
                "notice": "Sets the address associated with an ENS node. May only be called by the owner of that node in the ENS registry."
              }
            }
          }
        },
        "Buffer": {
          "abi": [],
          "devdoc": {
            "details": "A library for working with mutable byte buffers in Solidity. * Byte buffers are mutable and expandable, and provide a variety of primitives for writing to them. At any time you can fetch a bytes object containing the current contents of the buffer. The bytes object should not be stored between operations, as it may change due to resizing of the buffer.",
            "methods": {}
          },
          "evm": {
            "bytecode": {
              "linkReferences": {},
              "object": "60636023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea365627a7a7231582010b3f0480e604d1ec4a8378abf0cc88b870bf9f1dde6dba8cdabe13e76b810126c6578706572696d656e74616cf564736f6c63430005110040",
              "opcodes": "PUSH1 0x63 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG3 PUSH6 0x627A7A723158 KECCAK256 LT 0xB3 CREATE 0x48 0xE PUSH1 0x4D 0x1E 0xC4 0xA8 CALLDATACOPY DUP11 0xBF 0xC 0xC8 DUP12 DUP8 SIGNEXTEND 0xF9 CALL 0xDD 0xE6 0xDB 0xA8 0xCD 0xAB 0xE1 RETURNDATACOPY PUSH23 0xB810126C6578706572696D656E74616CF564736F6C6343 STOP SDIV GT STOP BLOCKHASH ",
              "sourceMap": "17865:9603:0:-;;132:2:-1;166:7;155:9;146:7;137:37;255:7;249:14;246:1;241:23;235:4;232:33;222:2;;269:9;222:2;293:9;290:1;283:20;323:4;314:7;306:22;347:7;338;331:24"
            },
            "deployedBytecode": {
              "linkReferences": {},
              "object": "73000000000000000000000000000000000000000030146080604052600080fdfea365627a7a7231582010b3f0480e604d1ec4a8378abf0cc88b870bf9f1dde6dba8cdabe13e76b810126c6578706572696d656e74616cf564736f6c63430005110040",
              "opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG3 PUSH6 0x627A7A723158 KECCAK256 LT 0xB3 CREATE 0x48 0xE PUSH1 0x4D 0x1E 0xC4 0xA8 CALLDATACOPY DUP11 0xBF 0xC 0xC8 DUP12 DUP8 SIGNEXTEND 0xF9 CALL 0xDD 0xE6 0xDB 0xA8 0xCD 0xAB 0xE1 RETURNDATACOPY PUSH23 0xB810126C6578706572696D656E74616CF564736F6C6343 STOP SDIV GT STOP BLOCKHASH ",
              "sourceMap": "17865:9603:0:-;;;;;;;;"
            },
            "gasEstimates": {
              "creation": {
                "codeDepositCost": "19800",
                "executionCost": "100",
                "totalCost": "19900"
              },
              "internal": {
                "append(struct Buffer.buffer memory,bytes memory)": "infinite",
                "append(struct Buffer.buffer memory,bytes memory,uint256)": "infinite",
                "appendBytes20(struct Buffer.buffer memory,bytes20)": "infinite",
                "appendBytes32(struct Buffer.buffer memory,bytes32)": "infinite",
                "appendInt(struct Buffer.buffer memory,uint256,uint256)": "infinite",
                "appendUint8(struct Buffer.buffer memory,uint8)": "infinite",
                "fromBytes(bytes memory)": "infinite",
                "init(struct Buffer.buffer memory,uint256)": "infinite",
                "max(uint256,uint256)": "infinite",
                "resize(struct Buffer.buffer memory,uint256)": "infinite",
                "truncate(struct Buffer.buffer memory)": "infinite",
                "write(struct Buffer.buffer memory,uint256,bytes memory,uint256)": "infinite",
                "write(struct Buffer.buffer memory,uint256,bytes32,uint256)": "infinite",
                "writeBytes20(struct Buffer.buffer memory,uint256,bytes20)": "infinite",
                "writeInt(struct Buffer.buffer memory,uint256,uint256,uint256)": "infinite",
                "writeUint8(struct Buffer.buffer memory,uint256,uint8)": "infinite"
              }
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.5.17+commit.d19bba13\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"A library for working with mutable byte buffers in Solidity. * Byte buffers are mutable and expandable, and provide a variety of primitives for writing to them. At any time you can fetch a bytes object containing the current contents of the buffer. The bytes object should not be stored between operations, as it may change due to resizing of the buffer.\",\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/legacy/PublicResolver_mainnet_9412610.sol\":\"Buffer\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"contracts/legacy/PublicResolver_mainnet_9412610.sol\":{\"content\":\"/**\\n *Submitted for verification at Etherscan.io on 2020-02-03\\n */\\n\\n// File: @ensdomains/ens/contracts/ENS.sol\\n\\npragma solidity >=0.4.24;\\n\\ninterface ENS {\\n  // Logged when the owner of a node assigns a new owner to a subnode.\\n  event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n  // Logged when the owner of a node transfers ownership to a new account.\\n  event Transfer(bytes32 indexed node, address owner);\\n\\n  // Logged when the resolver for a node changes.\\n  event NewResolver(bytes32 indexed node, address resolver);\\n\\n  // Logged when the TTL of a node changes\\n  event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n  function setSubnodeOwner(\\n    bytes32 node,\\n    bytes32 label,\\n    address owner\\n  ) external;\\n\\n  function setResolver(bytes32 node, address resolver) external;\\n\\n  function setOwner(bytes32 node, address owner) external;\\n\\n  function setTTL(bytes32 node, uint64 ttl) external;\\n\\n  function owner(bytes32 node) external view returns (address);\\n\\n  function resolver(bytes32 node) external view returns (address);\\n\\n  function ttl(bytes32 node) external view returns (uint64);\\n}\\n\\n// File: contracts/ResolverBase.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract ResolverBase {\\n  bytes4 private constant INTERFACE_META_ID = 0x01ffc9a7;\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return interfaceID == INTERFACE_META_ID;\\n  }\\n\\n  function isAuthorised(bytes32 node) internal view returns (bool);\\n\\n  modifier authorised(bytes32 node) {\\n    require(isAuthorised(node));\\n    _;\\n  }\\n\\n  function bytesToAddress(bytes memory b)\\n    internal\\n    pure\\n    returns (address payable a)\\n  {\\n    require(b.length == 20);\\n    assembly {\\n      a := div(mload(add(b, 32)), exp(256, 12))\\n    }\\n  }\\n\\n  function addressToBytes(address a) internal pure returns (bytes memory b) {\\n    b = new bytes(20);\\n    assembly {\\n      mstore(add(b, 32), mul(a, exp(256, 12)))\\n    }\\n  }\\n}\\n\\n// File: contracts/profiles/ABIResolver.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract ABIResolver is ResolverBase {\\n  bytes4 private constant ABI_INTERFACE_ID = 0x2203ab56;\\n\\n  event ABIChanged(bytes32 indexed node, uint256 indexed contentType);\\n\\n  mapping(bytes32 => mapping(uint256 => bytes)) abis;\\n\\n  /**\\n   * Sets the ABI associated with an ENS node.\\n   * Nodes may have one ABI of each content type. To remove an ABI, set it to\\n   * the empty string.\\n   * @param node The node to update.\\n   * @param contentType The content type of the ABI\\n   * @param data The ABI data.\\n   */\\n  function setABI(\\n    bytes32 node,\\n    uint256 contentType,\\n    bytes calldata data\\n  ) external authorised(node) {\\n    // Content types must be powers of 2\\n    require(((contentType - 1) & contentType) == 0);\\n\\n    abis[node][contentType] = data;\\n    emit ABIChanged(node, contentType);\\n  }\\n\\n  /**\\n   * Returns the ABI associated with an ENS node.\\n   * Defined in EIP205.\\n   * @param node The ENS node to query\\n   * @param contentTypes A bitwise OR of the ABI formats accepted by the caller.\\n   * @return contentType The content type of the return value\\n   * @return data The ABI data\\n   */\\n  function ABI(bytes32 node, uint256 contentTypes)\\n    external\\n    view\\n    returns (uint256, bytes memory)\\n  {\\n    mapping(uint256 => bytes) storage abiset = abis[node];\\n\\n    for (\\n      uint256 contentType = 1;\\n      contentType <= contentTypes;\\n      contentType <<= 1\\n    ) {\\n      if ((contentType & contentTypes) != 0 && abiset[contentType].length > 0) {\\n        return (contentType, abiset[contentType]);\\n      }\\n    }\\n\\n    return (0, bytes(''));\\n  }\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return\\n      interfaceID == ABI_INTERFACE_ID || super.supportsInterface(interfaceID);\\n  }\\n}\\n\\n// File: contracts/profiles/AddrResolver.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract AddrResolver is ResolverBase {\\n  bytes4 private constant ADDR_INTERFACE_ID = 0x3b3b57de;\\n  bytes4 private constant ADDRESS_INTERFACE_ID = 0xf1cb7e06;\\n  uint256 private constant COIN_TYPE_ETH = 60;\\n\\n  event AddrChanged(bytes32 indexed node, address a);\\n  event AddressChanged(\\n    bytes32 indexed node,\\n    uint256 coinType,\\n    bytes newAddress\\n  );\\n\\n  mapping(bytes32 => mapping(uint256 => bytes)) _addresses;\\n\\n  /**\\n   * Sets the address associated with an ENS node.\\n   * May only be called by the owner of that node in the ENS registry.\\n   * @param node The node to update.\\n   * @param a The address to set.\\n   */\\n  function setAddr(bytes32 node, address a) external authorised(node) {\\n    setAddr(node, COIN_TYPE_ETH, addressToBytes(a));\\n  }\\n\\n  /**\\n   * Returns the address associated with an ENS node.\\n   * @param node The ENS node to query.\\n   * @return The associated address.\\n   */\\n  function addr(bytes32 node) public view returns (address payable) {\\n    bytes memory a = addr(node, COIN_TYPE_ETH);\\n    if (a.length == 0) {\\n      return address(0);\\n    }\\n    return bytesToAddress(a);\\n  }\\n\\n  function setAddr(\\n    bytes32 node,\\n    uint256 coinType,\\n    bytes memory a\\n  ) public authorised(node) {\\n    emit AddressChanged(node, coinType, a);\\n    if (coinType == COIN_TYPE_ETH) {\\n      emit AddrChanged(node, bytesToAddress(a));\\n    }\\n    _addresses[node][coinType] = a;\\n  }\\n\\n  function addr(bytes32 node, uint256 coinType)\\n    public\\n    view\\n    returns (bytes memory)\\n  {\\n    return _addresses[node][coinType];\\n  }\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return\\n      interfaceID == ADDR_INTERFACE_ID ||\\n      interfaceID == ADDRESS_INTERFACE_ID ||\\n      super.supportsInterface(interfaceID);\\n  }\\n}\\n\\n// File: contracts/profiles/ContentHashResolver.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract ContentHashResolver is ResolverBase {\\n  bytes4 private constant CONTENT_HASH_INTERFACE_ID = 0xbc1c58d1;\\n\\n  event ContenthashChanged(bytes32 indexed node, bytes hash);\\n\\n  mapping(bytes32 => bytes) hashes;\\n\\n  /**\\n   * Sets the contenthash associated with an ENS node.\\n   * May only be called by the owner of that node in the ENS registry.\\n   * @param node The node to update.\\n   * @param hash The contenthash to set\\n   */\\n  function setContenthash(bytes32 node, bytes calldata hash)\\n    external\\n    authorised(node)\\n  {\\n    hashes[node] = hash;\\n    emit ContenthashChanged(node, hash);\\n  }\\n\\n  /**\\n   * Returns the contenthash associated with an ENS node.\\n   * @param node The ENS node to query.\\n   * @return The associated contenthash.\\n   */\\n  function contenthash(bytes32 node) external view returns (bytes memory) {\\n    return hashes[node];\\n  }\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return\\n      interfaceID == CONTENT_HASH_INTERFACE_ID ||\\n      super.supportsInterface(interfaceID);\\n  }\\n}\\n\\n// File: @ensdomains/dnssec-oracle/contracts/BytesUtils.sol\\n\\npragma solidity >0.4.23;\\n\\nlibrary BytesUtils {\\n  /*\\n   * @dev Returns the keccak-256 hash of a byte range.\\n   * @param self The byte string to hash.\\n   * @param offset The position to start hashing at.\\n   * @param len The number of bytes to hash.\\n   * @return The hash of the byte range.\\n   */\\n  function keccak(\\n    bytes memory self,\\n    uint256 offset,\\n    uint256 len\\n  ) internal pure returns (bytes32 ret) {\\n    require(offset + len <= self.length);\\n    assembly {\\n      ret := keccak256(add(add(self, 32), offset), len)\\n    }\\n  }\\n\\n  /*\\n   * @dev Returns a positive number if `other` comes lexicographically after\\n   *      `self`, a negative number if it comes before, or zero if the\\n   *      contents of the two bytes are equal.\\n   * @param self The first bytes to compare.\\n   * @param other The second bytes to compare.\\n   * @return The result of the comparison.\\n   */\\n  function compare(bytes memory self, bytes memory other)\\n    internal\\n    pure\\n    returns (int256)\\n  {\\n    return compare(self, 0, self.length, other, 0, other.length);\\n  }\\n\\n  /*\\n   * @dev Returns a positive number if `other` comes lexicographically after\\n   *      `self`, a negative number if it comes before, or zero if the\\n   *      contents of the two bytes are equal. Comparison is done per-rune,\\n   *      on unicode codepoints.\\n   * @param self The first bytes to compare.\\n   * @param offset The offset of self.\\n   * @param len    The length of self.\\n   * @param other The second bytes to compare.\\n   * @param otheroffset The offset of the other string.\\n   * @param otherlen    The length of the other string.\\n   * @return The result of the comparison.\\n   */\\n  function compare(\\n    bytes memory self,\\n    uint256 offset,\\n    uint256 len,\\n    bytes memory other,\\n    uint256 otheroffset,\\n    uint256 otherlen\\n  ) internal pure returns (int256) {\\n    uint256 shortest = len;\\n    if (otherlen < len) shortest = otherlen;\\n\\n    uint256 selfptr;\\n    uint256 otherptr;\\n\\n    assembly {\\n      selfptr := add(self, add(offset, 32))\\n      otherptr := add(other, add(otheroffset, 32))\\n    }\\n    for (uint256 idx = 0; idx < shortest; idx += 32) {\\n      uint256 a;\\n      uint256 b;\\n      assembly {\\n        a := mload(selfptr)\\n        b := mload(otherptr)\\n      }\\n      if (a != b) {\\n        // Mask out irrelevant bytes and check again\\n        uint256 mask;\\n        if (shortest > 32) {\\n          mask = uint256(-1); // aka 0xffffff....\\n        } else {\\n          mask = ~(2**(8 * (32 - shortest + idx)) - 1);\\n        }\\n        uint256 diff = (a & mask) - (b & mask);\\n        if (diff != 0) return int256(diff);\\n      }\\n      selfptr += 32;\\n      otherptr += 32;\\n    }\\n\\n    return int256(len) - int256(otherlen);\\n  }\\n\\n  /*\\n   * @dev Returns true if the two byte ranges are equal.\\n   * @param self The first byte range to compare.\\n   * @param offset The offset into the first byte range.\\n   * @param other The second byte range to compare.\\n   * @param otherOffset The offset into the second byte range.\\n   * @param len The number of bytes to compare\\n   * @return True if the byte ranges are equal, false otherwise.\\n   */\\n  function equals(\\n    bytes memory self,\\n    uint256 offset,\\n    bytes memory other,\\n    uint256 otherOffset,\\n    uint256 len\\n  ) internal pure returns (bool) {\\n    return keccak(self, offset, len) == keccak(other, otherOffset, len);\\n  }\\n\\n  /*\\n   * @dev Returns true if the two byte ranges are equal with offsets.\\n   * @param self The first byte range to compare.\\n   * @param offset The offset into the first byte range.\\n   * @param other The second byte range to compare.\\n   * @param otherOffset The offset into the second byte range.\\n   * @return True if the byte ranges are equal, false otherwise.\\n   */\\n  function equals(\\n    bytes memory self,\\n    uint256 offset,\\n    bytes memory other,\\n    uint256 otherOffset\\n  ) internal pure returns (bool) {\\n    return\\n      keccak(self, offset, self.length - offset) ==\\n      keccak(other, otherOffset, other.length - otherOffset);\\n  }\\n\\n  /*\\n   * @dev Compares a range of 'self' to all of 'other' and returns True iff\\n   *      they are equal.\\n   * @param self The first byte range to compare.\\n   * @param offset The offset into the first byte range.\\n   * @param other The second byte range to compare.\\n   * @return True if the byte ranges are equal, false otherwise.\\n   */\\n  function equals(\\n    bytes memory self,\\n    uint256 offset,\\n    bytes memory other\\n  ) internal pure returns (bool) {\\n    return\\n      self.length >= offset + other.length &&\\n      equals(self, offset, other, 0, other.length);\\n  }\\n\\n  /*\\n   * @dev Returns true if the two byte ranges are equal.\\n   * @param self The first byte range to compare.\\n   * @param other The second byte range to compare.\\n   * @return True if the byte ranges are equal, false otherwise.\\n   */\\n  function equals(bytes memory self, bytes memory other)\\n    internal\\n    pure\\n    returns (bool)\\n  {\\n    return\\n      self.length == other.length && equals(self, 0, other, 0, self.length);\\n  }\\n\\n  /*\\n   * @dev Returns the 8-bit number at the specified index of self.\\n   * @param self The byte string.\\n   * @param idx The index into the bytes\\n   * @return The specified 8 bits of the string, interpreted as an integer.\\n   */\\n  function readUint8(bytes memory self, uint256 idx)\\n    internal\\n    pure\\n    returns (uint8 ret)\\n  {\\n    return uint8(self[idx]);\\n  }\\n\\n  /*\\n   * @dev Returns the 16-bit number at the specified index of self.\\n   * @param self The byte string.\\n   * @param idx The index into the bytes\\n   * @return The specified 16 bits of the string, interpreted as an integer.\\n   */\\n  function readUint16(bytes memory self, uint256 idx)\\n    internal\\n    pure\\n    returns (uint16 ret)\\n  {\\n    require(idx + 2 <= self.length);\\n    assembly {\\n      ret := and(mload(add(add(self, 2), idx)), 0xFFFF)\\n    }\\n  }\\n\\n  /*\\n   * @dev Returns the 32-bit number at the specified index of self.\\n   * @param self The byte string.\\n   * @param idx The index into the bytes\\n   * @return The specified 32 bits of the string, interpreted as an integer.\\n   */\\n  function readUint32(bytes memory self, uint256 idx)\\n    internal\\n    pure\\n    returns (uint32 ret)\\n  {\\n    require(idx + 4 <= self.length);\\n    assembly {\\n      ret := and(mload(add(add(self, 4), idx)), 0xFFFFFFFF)\\n    }\\n  }\\n\\n  /*\\n   * @dev Returns the 32 byte value at the specified index of self.\\n   * @param self The byte string.\\n   * @param idx The index into the bytes\\n   * @return The specified 32 bytes of the string.\\n   */\\n  function readBytes32(bytes memory self, uint256 idx)\\n    internal\\n    pure\\n    returns (bytes32 ret)\\n  {\\n    require(idx + 32 <= self.length);\\n    assembly {\\n      ret := mload(add(add(self, 32), idx))\\n    }\\n  }\\n\\n  /*\\n   * @dev Returns the 32 byte value at the specified index of self.\\n   * @param self The byte string.\\n   * @param idx The index into the bytes\\n   * @return The specified 32 bytes of the string.\\n   */\\n  function readBytes20(bytes memory self, uint256 idx)\\n    internal\\n    pure\\n    returns (bytes20 ret)\\n  {\\n    require(idx + 20 <= self.length);\\n    assembly {\\n      ret := and(\\n        mload(add(add(self, 32), idx)),\\n        0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000\\n      )\\n    }\\n  }\\n\\n  /*\\n   * @dev Returns the n byte value at the specified index of self.\\n   * @param self The byte string.\\n   * @param idx The index into the bytes.\\n   * @param len The number of bytes.\\n   * @return The specified 32 bytes of the string.\\n   */\\n  function readBytesN(\\n    bytes memory self,\\n    uint256 idx,\\n    uint256 len\\n  ) internal pure returns (bytes32 ret) {\\n    require(len <= 32);\\n    require(idx + len <= self.length);\\n    assembly {\\n      let mask := not(sub(exp(256, sub(32, len)), 1))\\n      ret := and(mload(add(add(self, 32), idx)), mask)\\n    }\\n  }\\n\\n  function memcpy(\\n    uint256 dest,\\n    uint256 src,\\n    uint256 len\\n  ) private pure {\\n    // Copy word-length chunks while possible\\n    for (; len >= 32; len -= 32) {\\n      assembly {\\n        mstore(dest, mload(src))\\n      }\\n      dest += 32;\\n      src += 32;\\n    }\\n\\n    // Copy remaining bytes\\n    uint256 mask = 256**(32 - len) - 1;\\n    assembly {\\n      let srcpart := and(mload(src), not(mask))\\n      let destpart := and(mload(dest), mask)\\n      mstore(dest, or(destpart, srcpart))\\n    }\\n  }\\n\\n  /*\\n   * @dev Copies a substring into a new byte string.\\n   * @param self The byte string to copy from.\\n   * @param offset The offset to start copying at.\\n   * @param len The number of bytes to copy.\\n   */\\n  function substring(\\n    bytes memory self,\\n    uint256 offset,\\n    uint256 len\\n  ) internal pure returns (bytes memory) {\\n    require(offset + len <= self.length);\\n\\n    bytes memory ret = new bytes(len);\\n    uint256 dest;\\n    uint256 src;\\n\\n    assembly {\\n      dest := add(ret, 32)\\n      src := add(add(self, 32), offset)\\n    }\\n    memcpy(dest, src, len);\\n\\n    return ret;\\n  }\\n\\n  // Maps characters from 0x30 to 0x7A to their base32 values.\\n  // 0xFF represents invalid characters in that range.\\n  bytes constant base32HexTable =\\n    hex'00010203040506070809FFFFFFFFFFFFFF0A0B0C0D0E0F101112131415161718191A1B1C1D1E1FFFFFFFFFFFFFFFFFFFFF0A0B0C0D0E0F101112131415161718191A1B1C1D1E1F';\\n\\n  /**\\n   * @dev Decodes unpadded base32 data of up to one word in length.\\n   * @param self The data to decode.\\n   * @param off Offset into the string to start at.\\n   * @param len Number of characters to decode.\\n   * @return The decoded data, left aligned.\\n   */\\n  function base32HexDecodeWord(\\n    bytes memory self,\\n    uint256 off,\\n    uint256 len\\n  ) internal pure returns (bytes32) {\\n    require(len <= 52);\\n\\n    uint256 ret = 0;\\n    uint8 decoded;\\n    for (uint256 i = 0; i < len; i++) {\\n      bytes1 char = self[off + i];\\n      require(char >= 0x30 && char <= 0x7A);\\n      decoded = uint8(base32HexTable[uint256(uint8(char)) - 0x30]);\\n      require(decoded <= 0x20);\\n      if (i == len - 1) {\\n        break;\\n      }\\n      ret = (ret << 5) | decoded;\\n    }\\n\\n    uint256 bitlen = len * 5;\\n    if (len % 8 == 0) {\\n      // Multiple of 8 characters, no padding\\n      ret = (ret << 5) | decoded;\\n    } else if (len % 8 == 2) {\\n      // Two extra characters - 1 byte\\n      ret = (ret << 3) | (decoded >> 2);\\n      bitlen -= 2;\\n    } else if (len % 8 == 4) {\\n      // Four extra characters - 2 bytes\\n      ret = (ret << 1) | (decoded >> 4);\\n      bitlen -= 4;\\n    } else if (len % 8 == 5) {\\n      // Five extra characters - 3 bytes\\n      ret = (ret << 4) | (decoded >> 1);\\n      bitlen -= 1;\\n    } else if (len % 8 == 7) {\\n      // Seven extra characters - 4 bytes\\n      ret = (ret << 2) | (decoded >> 3);\\n      bitlen -= 3;\\n    } else {\\n      revert();\\n    }\\n\\n    return bytes32(ret << (256 - bitlen));\\n  }\\n}\\n\\n// File: @ensdomains/buffer/contracts/Buffer.sol\\n\\npragma solidity >0.4.18;\\n\\n/**\\n * @dev A library for working with mutable byte buffers in Solidity.\\n *\\n * Byte buffers are mutable and expandable, and provide a variety of primitives\\n * for writing to them. At any time you can fetch a bytes object containing the\\n * current contents of the buffer. The bytes object should not be stored between\\n * operations, as it may change due to resizing of the buffer.\\n */\\nlibrary Buffer {\\n  /**\\n   * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n   *      a capacity. The capacity may be longer than the current value, in\\n   *      which case it can be extended without the need to allocate more memory.\\n   */\\n  struct buffer {\\n    bytes buf;\\n    uint256 capacity;\\n  }\\n\\n  /**\\n   * @dev Initializes a buffer with an initial capacity.\\n   * @param buf The buffer to initialize.\\n   * @param capacity The number of bytes of space to allocate the buffer.\\n   * @return The buffer, for chaining.\\n   */\\n  function init(buffer memory buf, uint256 capacity)\\n    internal\\n    pure\\n    returns (buffer memory)\\n  {\\n    if (capacity % 32 != 0) {\\n      capacity += 32 - (capacity % 32);\\n    }\\n    // Allocate space for the buffer data\\n    buf.capacity = capacity;\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(buf, ptr)\\n      mstore(ptr, 0)\\n      mstore(0x40, add(32, add(ptr, capacity)))\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Initializes a new buffer from an existing bytes object.\\n   *      Changes to the buffer may mutate the original value.\\n   * @param b The bytes object to initialize the buffer with.\\n   * @return A new buffer.\\n   */\\n  function fromBytes(bytes memory b) internal pure returns (buffer memory) {\\n    buffer memory buf;\\n    buf.buf = b;\\n    buf.capacity = b.length;\\n    return buf;\\n  }\\n\\n  function resize(buffer memory buf, uint256 capacity) private pure {\\n    bytes memory oldbuf = buf.buf;\\n    init(buf, capacity);\\n    append(buf, oldbuf);\\n  }\\n\\n  function max(uint256 a, uint256 b) private pure returns (uint256) {\\n    if (a > b) {\\n      return a;\\n    }\\n    return b;\\n  }\\n\\n  /**\\n   * @dev Sets buffer length to 0.\\n   * @param buf The buffer to truncate.\\n   * @return The original buffer, for chaining..\\n   */\\n  function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n    assembly {\\n      let bufptr := mload(buf)\\n      mstore(bufptr, 0)\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Writes a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The start offset to write to.\\n   * @param data The data to append.\\n   * @param len The number of bytes to copy.\\n   * @return The original buffer, for chaining.\\n   */\\n  function write(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes memory data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    require(len <= data.length);\\n\\n    if (off + len > buf.capacity) {\\n      resize(buf, max(buf.capacity, len + off) * 2);\\n    }\\n\\n    uint256 dest;\\n    uint256 src;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Start address = buffer address + offset + sizeof(buffer length)\\n      dest := add(add(bufptr, 32), off)\\n      // Update buffer length if we're extending it\\n      if gt(add(len, off), buflen) {\\n        mstore(bufptr, add(len, off))\\n      }\\n      src := add(data, 32)\\n    }\\n\\n    // Copy word-length chunks while possible\\n    for (; len >= 32; len -= 32) {\\n      assembly {\\n        mstore(dest, mload(src))\\n      }\\n      dest += 32;\\n      src += 32;\\n    }\\n\\n    // Copy remaining bytes\\n    uint256 mask = 256**(32 - len) - 1;\\n    assembly {\\n      let srcpart := and(mload(src), not(mask))\\n      let destpart := and(mload(dest), mask)\\n      mstore(dest, or(destpart, srcpart))\\n    }\\n\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @param len The number of bytes to copy.\\n   * @return The original buffer, for chaining.\\n   */\\n  function append(\\n    buffer memory buf,\\n    bytes memory data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, len);\\n  }\\n\\n  /**\\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function append(buffer memory buf, bytes memory data)\\n    internal\\n    pure\\n    returns (buffer memory)\\n  {\\n    return write(buf, buf.buf.length, data, data.length);\\n  }\\n\\n  /**\\n   * @dev Writes a byte to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write the byte at.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeUint8(\\n    buffer memory buf,\\n    uint256 off,\\n    uint8 data\\n  ) internal pure returns (buffer memory) {\\n    if (off >= buf.capacity) {\\n      resize(buf, buf.capacity * 2);\\n    }\\n\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Address = buffer address + sizeof(buffer length) + off\\n      let dest := add(add(bufptr, off), 32)\\n      mstore8(dest, data)\\n      // Update buffer length if we extended it\\n      if eq(off, buflen) {\\n        mstore(bufptr, add(buflen, 1))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function appendUint8(buffer memory buf, uint8 data)\\n    internal\\n    pure\\n    returns (buffer memory)\\n  {\\n    return writeUint8(buf, buf.buf.length, data);\\n  }\\n\\n  /**\\n   * @dev Writes up to 32 bytes to the buffer. Resizes if doing so would\\n   *      exceed the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @param len The number of bytes to write (left-aligned).\\n   * @return The original buffer, for chaining.\\n   */\\n  function write(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes32 data,\\n    uint256 len\\n  ) private pure returns (buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    uint256 mask = 256**len - 1;\\n    // Right-align data\\n    data = data >> (8 * (32 - len));\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Address = buffer address + sizeof(buffer length) + off + len\\n      let dest := add(add(bufptr, off), len)\\n      mstore(dest, or(and(mload(dest), not(mask)), data))\\n      // Update buffer length if we extended it\\n      if gt(add(off, len), mload(bufptr)) {\\n        mstore(bufptr, add(off, len))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Writes a bytes20 to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeBytes20(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes20 data\\n  ) internal pure returns (buffer memory) {\\n    return write(buf, off, bytes32(data), 20);\\n  }\\n\\n  /**\\n   * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chhaining.\\n   */\\n  function appendBytes20(buffer memory buf, bytes20 data)\\n    internal\\n    pure\\n    returns (buffer memory)\\n  {\\n    return write(buf, buf.buf.length, bytes32(data), 20);\\n  }\\n\\n  /**\\n   * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function appendBytes32(buffer memory buf, bytes32 data)\\n    internal\\n    pure\\n    returns (buffer memory)\\n  {\\n    return write(buf, buf.buf.length, data, 32);\\n  }\\n\\n  /**\\n   * @dev Writes an integer to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @param len The number of bytes to write (right-aligned).\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeInt(\\n    buffer memory buf,\\n    uint256 off,\\n    uint256 data,\\n    uint256 len\\n  ) private pure returns (buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    uint256 mask = 256**len - 1;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Address = buffer address + off + sizeof(buffer length) + len\\n      let dest := add(add(bufptr, off), len)\\n      mstore(dest, or(and(mload(dest), not(mask)), data))\\n      // Update buffer length if we extended it\\n      if gt(add(off, len), mload(bufptr)) {\\n        mstore(bufptr, add(off, len))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n   * exceed the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer.\\n   */\\n  function appendInt(\\n    buffer memory buf,\\n    uint256 data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    return writeInt(buf, buf.buf.length, data, len);\\n  }\\n}\\n\\n// File: @ensdomains/dnssec-oracle/contracts/RRUtils.sol\\n\\npragma solidity >0.4.23;\\n\\n/**\\n * @dev RRUtils is a library that provides utilities for parsing DNS resource records.\\n */\\nlibrary RRUtils {\\n  using BytesUtils for *;\\n  using Buffer for *;\\n\\n  /**\\n   * @dev Returns the number of bytes in the DNS name at 'offset' in 'self'.\\n   * @param self The byte array to read a name from.\\n   * @param offset The offset to start reading at.\\n   * @return The length of the DNS name at 'offset', in bytes.\\n   */\\n  function nameLength(bytes memory self, uint256 offset)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    uint256 idx = offset;\\n    while (true) {\\n      assert(idx < self.length);\\n      uint256 labelLen = self.readUint8(idx);\\n      idx += labelLen + 1;\\n      if (labelLen == 0) {\\n        break;\\n      }\\n    }\\n    return idx - offset;\\n  }\\n\\n  /**\\n   * @dev Returns a DNS format name at the specified offset of self.\\n   * @param self The byte array to read a name from.\\n   * @param offset The offset to start reading at.\\n   * @return The name.\\n   */\\n  function readName(bytes memory self, uint256 offset)\\n    internal\\n    pure\\n    returns (bytes memory ret)\\n  {\\n    uint256 len = nameLength(self, offset);\\n    return self.substring(offset, len);\\n  }\\n\\n  /**\\n   * @dev Returns the number of labels in the DNS name at 'offset' in 'self'.\\n   * @param self The byte array to read a name from.\\n   * @param offset The offset to start reading at.\\n   * @return The number of labels in the DNS name at 'offset', in bytes.\\n   */\\n  function labelCount(bytes memory self, uint256 offset)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    uint256 count = 0;\\n    while (true) {\\n      assert(offset < self.length);\\n      uint256 labelLen = self.readUint8(offset);\\n      offset += labelLen + 1;\\n      if (labelLen == 0) {\\n        break;\\n      }\\n      count += 1;\\n    }\\n    return count;\\n  }\\n\\n  /**\\n   * @dev An iterator over resource records.\\n   */\\n  struct RRIterator {\\n    bytes data;\\n    uint256 offset;\\n    uint16 dnstype;\\n    uint16 class;\\n    uint32 ttl;\\n    uint256 rdataOffset;\\n    uint256 nextOffset;\\n  }\\n\\n  /**\\n   * @dev Begins iterating over resource records.\\n   * @param self The byte string to read from.\\n   * @param offset The offset to start reading at.\\n   * @return An iterator object.\\n   */\\n  function iterateRRs(bytes memory self, uint256 offset)\\n    internal\\n    pure\\n    returns (RRIterator memory ret)\\n  {\\n    ret.data = self;\\n    ret.nextOffset = offset;\\n    next(ret);\\n  }\\n\\n  /**\\n   * @dev Returns true iff there are more RRs to iterate.\\n   * @param iter The iterator to check.\\n   * @return True iff the iterator has finished.\\n   */\\n  function done(RRIterator memory iter) internal pure returns (bool) {\\n    return iter.offset >= iter.data.length;\\n  }\\n\\n  /**\\n   * @dev Moves the iterator to the next resource record.\\n   * @param iter The iterator to advance.\\n   */\\n  function next(RRIterator memory iter) internal pure {\\n    iter.offset = iter.nextOffset;\\n    if (iter.offset >= iter.data.length) {\\n      return;\\n    }\\n\\n    // Skip the name\\n    uint256 off = iter.offset + nameLength(iter.data, iter.offset);\\n\\n    // Read type, class, and ttl\\n    iter.dnstype = iter.data.readUint16(off);\\n    off += 2;\\n    iter.class = iter.data.readUint16(off);\\n    off += 2;\\n    iter.ttl = iter.data.readUint32(off);\\n    off += 4;\\n\\n    // Read the rdata\\n    uint256 rdataLength = iter.data.readUint16(off);\\n    off += 2;\\n    iter.rdataOffset = off;\\n    iter.nextOffset = off + rdataLength;\\n  }\\n\\n  /**\\n   * @dev Returns the name of the current record.\\n   * @param iter The iterator.\\n   * @return A new bytes object containing the owner name from the RR.\\n   */\\n  function name(RRIterator memory iter) internal pure returns (bytes memory) {\\n    return iter.data.substring(iter.offset, nameLength(iter.data, iter.offset));\\n  }\\n\\n  /**\\n   * @dev Returns the rdata portion of the current record.\\n   * @param iter The iterator.\\n   * @return A new bytes object containing the RR's RDATA.\\n   */\\n  function rdata(RRIterator memory iter) internal pure returns (bytes memory) {\\n    return\\n      iter.data.substring(iter.rdataOffset, iter.nextOffset - iter.rdataOffset);\\n  }\\n\\n  /**\\n   * @dev Checks if a given RR type exists in a type bitmap.\\n   * @param self The byte string to read the type bitmap from.\\n   * @param offset The offset to start reading at.\\n   * @param rrtype The RR type to check for.\\n   * @return True if the type is found in the bitmap, false otherwise.\\n   */\\n  function checkTypeBitmap(\\n    bytes memory self,\\n    uint256 offset,\\n    uint16 rrtype\\n  ) internal pure returns (bool) {\\n    uint8 typeWindow = uint8(rrtype >> 8);\\n    uint8 windowByte = uint8((rrtype & 0xff) / 8);\\n    uint8 windowBitmask = uint8(uint8(1) << (uint8(7) - uint8(rrtype & 0x7)));\\n    for (uint256 off = offset; off < self.length; ) {\\n      uint8 window = self.readUint8(off);\\n      uint8 len = self.readUint8(off + 1);\\n      if (typeWindow < window) {\\n        // We've gone past our window; it's not here.\\n        return false;\\n      } else if (typeWindow == window) {\\n        // Check this type bitmap\\n        if (len * 8 <= windowByte) {\\n          // Our type is past the end of the bitmap\\n          return false;\\n        }\\n        return (self.readUint8(off + windowByte + 2) & windowBitmask) != 0;\\n      } else {\\n        // Skip this type bitmap\\n        off += len + 2;\\n      }\\n    }\\n\\n    return false;\\n  }\\n\\n  function compareNames(bytes memory self, bytes memory other)\\n    internal\\n    pure\\n    returns (int256)\\n  {\\n    if (self.equals(other)) {\\n      return 0;\\n    }\\n\\n    uint256 off;\\n    uint256 otheroff;\\n    uint256 prevoff;\\n    uint256 otherprevoff;\\n    uint256 counts = labelCount(self, 0);\\n    uint256 othercounts = labelCount(other, 0);\\n\\n    // Keep removing labels from the front of the name until both names are equal length\\n    while (counts > othercounts) {\\n      prevoff = off;\\n      off = progress(self, off);\\n      counts--;\\n    }\\n\\n    while (othercounts > counts) {\\n      otherprevoff = otheroff;\\n      otheroff = progress(other, otheroff);\\n      othercounts--;\\n    }\\n\\n    // Compare the last nonequal labels to each other\\n    while (counts > 0 && !self.equals(off, other, otheroff)) {\\n      prevoff = off;\\n      off = progress(self, off);\\n      otherprevoff = otheroff;\\n      otheroff = progress(other, otheroff);\\n      counts -= 1;\\n    }\\n\\n    if (off == 0) {\\n      return -1;\\n    }\\n    if (otheroff == 0) {\\n      return 1;\\n    }\\n\\n    return\\n      self.compare(\\n        prevoff + 1,\\n        self.readUint8(prevoff),\\n        other,\\n        otherprevoff + 1,\\n        other.readUint8(otherprevoff)\\n      );\\n  }\\n\\n  function progress(bytes memory body, uint256 off)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    return off + 1 + body.readUint8(off);\\n  }\\n}\\n\\n// File: contracts/profiles/DNSResolver.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract DNSResolver is ResolverBase {\\n  using RRUtils for *;\\n  using BytesUtils for bytes;\\n\\n  bytes4 private constant DNS_RECORD_INTERFACE_ID = 0xa8fa5682;\\n\\n  // DNSRecordChanged is emitted whenever a given node/name/resource's RRSET is updated.\\n  event DNSRecordChanged(\\n    bytes32 indexed node,\\n    bytes name,\\n    uint16 resource,\\n    bytes record\\n  );\\n  // DNSRecordDeleted is emitted whenever a given node/name/resource's RRSET is deleted.\\n  event DNSRecordDeleted(bytes32 indexed node, bytes name, uint16 resource);\\n  // DNSZoneCleared is emitted whenever a given node's zone information is cleared.\\n  event DNSZoneCleared(bytes32 indexed node);\\n\\n  // Version the mapping for each zone.  This allows users who have lost\\n  // track of their entries to effectively delete an entire zone by bumping\\n  // the version number.\\n  // node => version\\n  mapping(bytes32 => uint256) private versions;\\n\\n  // The records themselves.  Stored as binary RRSETs\\n  // node => version => name => resource => data\\n  mapping(bytes32 => mapping(uint256 => mapping(bytes32 => mapping(uint16 => bytes))))\\n    private records;\\n\\n  // Count of number of entries for a given name.  Required for DNS resolvers\\n  // when resolving wildcards.\\n  // node => version => name => number of records\\n  mapping(bytes32 => mapping(uint256 => mapping(bytes32 => uint16)))\\n    private nameEntriesCount;\\n\\n  /**\\n   * Set one or more DNS records.  Records are supplied in wire-format.\\n   * Records with the same node/name/resource must be supplied one after the\\n   * other to ensure the data is updated correctly. For example, if the data\\n   * was supplied:\\n   *     a.example.com IN A 1.2.3.4\\n   *     a.example.com IN A 5.6.7.8\\n   *     www.example.com IN CNAME a.example.com.\\n   * then this would store the two A records for a.example.com correctly as a\\n   * single RRSET, however if the data was supplied:\\n   *     a.example.com IN A 1.2.3.4\\n   *     www.example.com IN CNAME a.example.com.\\n   *     a.example.com IN A 5.6.7.8\\n   * then this would store the first A record, the CNAME, then the second A\\n   * record which would overwrite the first.\\n   *\\n   * @param node the namehash of the node for which to set the records\\n   * @param data the DNS wire format records to set\\n   */\\n  function setDNSRecords(bytes32 node, bytes calldata data)\\n    external\\n    authorised(node)\\n  {\\n    uint16 resource = 0;\\n    uint256 offset = 0;\\n    bytes memory name;\\n    bytes memory value;\\n    bytes32 nameHash;\\n    // Iterate over the data to add the resource records\\n    for (\\n      RRUtils.RRIterator memory iter = data.iterateRRs(0);\\n      !iter.done();\\n      iter.next()\\n    ) {\\n      if (resource == 0) {\\n        resource = iter.dnstype;\\n        name = iter.name();\\n        nameHash = keccak256(abi.encodePacked(name));\\n        value = bytes(iter.rdata());\\n      } else {\\n        bytes memory newName = iter.name();\\n        if (resource != iter.dnstype || !name.equals(newName)) {\\n          setDNSRRSet(\\n            node,\\n            name,\\n            resource,\\n            data,\\n            offset,\\n            iter.offset - offset,\\n            value.length == 0\\n          );\\n          resource = iter.dnstype;\\n          offset = iter.offset;\\n          name = newName;\\n          nameHash = keccak256(name);\\n          value = bytes(iter.rdata());\\n        }\\n      }\\n    }\\n    if (name.length > 0) {\\n      setDNSRRSet(\\n        node,\\n        name,\\n        resource,\\n        data,\\n        offset,\\n        data.length - offset,\\n        value.length == 0\\n      );\\n    }\\n  }\\n\\n  /**\\n   * Obtain a DNS record.\\n   * @param node the namehash of the node for which to fetch the record\\n   * @param name the keccak-256 hash of the fully-qualified name for which to fetch the record\\n   * @param resource the ID of the resource as per https://en.wikipedia.org/wiki/List_of_DNS_record_types\\n   * @return the DNS record in wire format if present, otherwise empty\\n   */\\n  function dnsRecord(\\n    bytes32 node,\\n    bytes32 name,\\n    uint16 resource\\n  ) public view returns (bytes memory) {\\n    return records[node][versions[node]][name][resource];\\n  }\\n\\n  /**\\n   * Check if a given node has records.\\n   * @param node the namehash of the node for which to check the records\\n   * @param name the namehash of the node for which to check the records\\n   */\\n  function hasDNSRecords(bytes32 node, bytes32 name)\\n    public\\n    view\\n    returns (bool)\\n  {\\n    return (nameEntriesCount[node][versions[node]][name] != 0);\\n  }\\n\\n  /**\\n   * Clear all information for a DNS zone.\\n   * @param node the namehash of the node for which to clear the zone\\n   */\\n  function clearDNSZone(bytes32 node) public authorised(node) {\\n    versions[node]++;\\n    emit DNSZoneCleared(node);\\n  }\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return\\n      interfaceID == DNS_RECORD_INTERFACE_ID ||\\n      super.supportsInterface(interfaceID);\\n  }\\n\\n  function setDNSRRSet(\\n    bytes32 node,\\n    bytes memory name,\\n    uint16 resource,\\n    bytes memory data,\\n    uint256 offset,\\n    uint256 size,\\n    bool deleteRecord\\n  ) private {\\n    uint256 version = versions[node];\\n    bytes32 nameHash = keccak256(name);\\n    bytes memory rrData = data.substring(offset, size);\\n    if (deleteRecord) {\\n      if (records[node][version][nameHash][resource].length != 0) {\\n        nameEntriesCount[node][version][nameHash]--;\\n      }\\n      delete (records[node][version][nameHash][resource]);\\n      emit DNSRecordDeleted(node, name, resource);\\n    } else {\\n      if (records[node][version][nameHash][resource].length == 0) {\\n        nameEntriesCount[node][version][nameHash]++;\\n      }\\n      records[node][version][nameHash][resource] = rrData;\\n      emit DNSRecordChanged(node, name, resource, rrData);\\n    }\\n  }\\n}\\n\\n// File: contracts/profiles/InterfaceResolver.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract InterfaceResolver is ResolverBase, AddrResolver {\\n  bytes4 private constant INTERFACE_INTERFACE_ID =\\n    bytes4(keccak256('interfaceImplementer(bytes32,bytes4)'));\\n  bytes4 private constant INTERFACE_META_ID = 0x01ffc9a7;\\n\\n  event InterfaceChanged(\\n    bytes32 indexed node,\\n    bytes4 indexed interfaceID,\\n    address implementer\\n  );\\n\\n  mapping(bytes32 => mapping(bytes4 => address)) interfaces;\\n\\n  /**\\n   * Sets an interface associated with a name.\\n   * Setting the address to 0 restores the default behaviour of querying the contract at `addr()` for interface support.\\n   * @param node The node to update.\\n   * @param interfaceID The EIP 168 interface ID.\\n   * @param implementer The address of a contract that implements this interface for this node.\\n   */\\n  function setInterface(\\n    bytes32 node,\\n    bytes4 interfaceID,\\n    address implementer\\n  ) external authorised(node) {\\n    interfaces[node][interfaceID] = implementer;\\n    emit InterfaceChanged(node, interfaceID, implementer);\\n  }\\n\\n  /**\\n   * Returns the address of a contract that implements the specified interface for this name.\\n   * If an implementer has not been set for this interfaceID and name, the resolver will query\\n   * the contract at `addr()`. If `addr()` is set, a contract exists at that address, and that\\n   * contract implements EIP168 and returns `true` for the specified interfaceID, its address\\n   * will be returned.\\n   * @param node The ENS node to query.\\n   * @param interfaceID The EIP 168 interface ID to check for.\\n   * @return The address that implements this interface, or 0 if the interface is unsupported.\\n   */\\n  function interfaceImplementer(bytes32 node, bytes4 interfaceID)\\n    external\\n    view\\n    returns (address)\\n  {\\n    address implementer = interfaces[node][interfaceID];\\n    if (implementer != address(0)) {\\n      return implementer;\\n    }\\n\\n    address a = addr(node);\\n    if (a == address(0)) {\\n      return address(0);\\n    }\\n\\n    (bool success, bytes memory returnData) = a.staticcall(\\n      abi.encodeWithSignature('supportsInterface(bytes4)', INTERFACE_META_ID)\\n    );\\n    if (!success || returnData.length < 32 || returnData[31] == 0) {\\n      // EIP 168 not supported by target\\n      return address(0);\\n    }\\n\\n    (success, returnData) = a.staticcall(\\n      abi.encodeWithSignature('supportsInterface(bytes4)', interfaceID)\\n    );\\n    if (!success || returnData.length < 32 || returnData[31] == 0) {\\n      // Specified interface not supported by target\\n      return address(0);\\n    }\\n\\n    return a;\\n  }\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return\\n      interfaceID == INTERFACE_INTERFACE_ID ||\\n      super.supportsInterface(interfaceID);\\n  }\\n}\\n\\n// File: contracts/profiles/NameResolver.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract NameResolver is ResolverBase {\\n  bytes4 private constant NAME_INTERFACE_ID = 0x691f3431;\\n\\n  event NameChanged(bytes32 indexed node, string name);\\n\\n  mapping(bytes32 => string) names;\\n\\n  /**\\n   * Sets the name associated with an ENS node, for reverse records.\\n   * May only be called by the owner of that node in the ENS registry.\\n   * @param node The node to update.\\n   * @param name The name to set.\\n   */\\n  function setName(bytes32 node, string calldata name)\\n    external\\n    authorised(node)\\n  {\\n    names[node] = name;\\n    emit NameChanged(node, name);\\n  }\\n\\n  /**\\n   * Returns the name associated with an ENS node, for reverse records.\\n   * Defined in EIP181.\\n   * @param node The ENS node to query.\\n   * @return The associated name.\\n   */\\n  function name(bytes32 node) external view returns (string memory) {\\n    return names[node];\\n  }\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return\\n      interfaceID == NAME_INTERFACE_ID || super.supportsInterface(interfaceID);\\n  }\\n}\\n\\n// File: contracts/profiles/PubkeyResolver.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract PubkeyResolver is ResolverBase {\\n  bytes4 private constant PUBKEY_INTERFACE_ID = 0xc8690233;\\n\\n  event PubkeyChanged(bytes32 indexed node, bytes32 x, bytes32 y);\\n\\n  struct PublicKey {\\n    bytes32 x;\\n    bytes32 y;\\n  }\\n\\n  mapping(bytes32 => PublicKey) pubkeys;\\n\\n  /**\\n   * Sets the SECP256k1 public key associated with an ENS node.\\n   * @param node The ENS node to query\\n   * @param x the X coordinate of the curve point for the public key.\\n   * @param y the Y coordinate of the curve point for the public key.\\n   */\\n  function setPubkey(\\n    bytes32 node,\\n    bytes32 x,\\n    bytes32 y\\n  ) external authorised(node) {\\n    pubkeys[node] = PublicKey(x, y);\\n    emit PubkeyChanged(node, x, y);\\n  }\\n\\n  /**\\n   * Returns the SECP256k1 public key associated with an ENS node.\\n   * Defined in EIP 619.\\n   * @param node The ENS node to query\\n   * @return x, y the X and Y coordinates of the curve point for the public key.\\n   */\\n  function pubkey(bytes32 node) external view returns (bytes32 x, bytes32 y) {\\n    return (pubkeys[node].x, pubkeys[node].y);\\n  }\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return\\n      interfaceID == PUBKEY_INTERFACE_ID ||\\n      super.supportsInterface(interfaceID);\\n  }\\n}\\n\\n// File: contracts/profiles/TextResolver.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract TextResolver is ResolverBase {\\n  bytes4 private constant TEXT_INTERFACE_ID = 0x59d1d43c;\\n\\n  event TextChanged(\\n    bytes32 indexed node,\\n    string indexed indexedKey,\\n    string key\\n  );\\n\\n  mapping(bytes32 => mapping(string => string)) texts;\\n\\n  /**\\n   * Sets the text data associated with an ENS node and key.\\n   * May only be called by the owner of that node in the ENS registry.\\n   * @param node The node to update.\\n   * @param key The key to set.\\n   * @param value The text data value to set.\\n   */\\n  function setText(\\n    bytes32 node,\\n    string calldata key,\\n    string calldata value\\n  ) external authorised(node) {\\n    texts[node][key] = value;\\n    emit TextChanged(node, key, key);\\n  }\\n\\n  /**\\n   * Returns the text data associated with an ENS node and key.\\n   * @param node The ENS node to query.\\n   * @param key The text data key to query.\\n   * @return The associated text data.\\n   */\\n  function text(bytes32 node, string calldata key)\\n    external\\n    view\\n    returns (string memory)\\n  {\\n    return texts[node][key];\\n  }\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return\\n      interfaceID == TEXT_INTERFACE_ID || super.supportsInterface(interfaceID);\\n  }\\n}\\n\\n// File: contracts/PublicResolver.sol\\n\\npragma solidity ^0.5.0;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * A simple resolver anyone can use; only allows the owner of a node to set its\\n * address.\\n */\\ncontract PublicResolver_mainnet_9412610 is\\n  ABIResolver,\\n  AddrResolver,\\n  ContentHashResolver,\\n  DNSResolver,\\n  InterfaceResolver,\\n  NameResolver,\\n  PubkeyResolver,\\n  TextResolver\\n{\\n  ENS ens;\\n\\n  /**\\n   * A mapping of authorisations. An address that is authorised for a name\\n   * may make any changes to the name that the owner could, but may not update\\n   * the set of authorisations.\\n   * (node, owner, caller) => isAuthorised\\n   */\\n  mapping(bytes32 => mapping(address => mapping(address => bool)))\\n    public authorisations;\\n\\n  event AuthorisationChanged(\\n    bytes32 indexed node,\\n    address indexed owner,\\n    address indexed target,\\n    bool isAuthorised\\n  );\\n\\n  constructor(ENS _ens) public {\\n    ens = _ens;\\n  }\\n\\n  /**\\n   * @dev Sets or clears an authorisation.\\n   * Authorisations are specific to the caller. Any account can set an authorisation\\n   * for any name, but the authorisation that is checked will be that of the\\n   * current owner of a name. Thus, transferring a name effectively clears any\\n   * existing authorisations, and new authorisations can be set in advance of\\n   * an ownership transfer if desired.\\n   *\\n   * @param node The name to change the authorisation on.\\n   * @param target The address that is to be authorised or deauthorised.\\n   * @param isAuthorised True if the address should be authorised, or false if it should be deauthorised.\\n   */\\n  function setAuthorisation(\\n    bytes32 node,\\n    address target,\\n    bool isAuthorised\\n  ) external {\\n    authorisations[node][msg.sender][target] = isAuthorised;\\n    emit AuthorisationChanged(node, msg.sender, target, isAuthorised);\\n  }\\n\\n  function isAuthorised(bytes32 node) internal view returns (bool) {\\n    address owner = ens.owner(node);\\n    return owner == msg.sender || authorisations[node][owner][msg.sender];\\n  }\\n\\n  function multicall(bytes[] calldata data)\\n    external\\n    returns (bytes[] memory results)\\n  {\\n    results = new bytes[](data.length);\\n    for (uint256 i = 0; i < data.length; i++) {\\n      (bool success, bytes memory result) = address(this).delegatecall(data[i]);\\n      require(success);\\n      results[i] = result;\\n    }\\n    return results;\\n  }\\n}\\n\",\"keccak256\":\"0x29ca7d322ab7177f187f9bfc310e6dfc94049e9beaaafe958bead081fd90ad76\"}},\"version\":1}",
          "storageLayout": {
            "storage": [],
            "types": null
          },
          "userdoc": {
            "methods": {}
          }
        },
        "BytesUtils": {
          "abi": [],
          "devdoc": {
            "methods": {}
          },
          "evm": {
            "bytecode": {
              "linkReferences": {},
              "object": "60636023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea365627a7a7231582070c6b1e2e7530961a23eae7629fa40adaa71145c87e954dbcd9df58aace515d96c6578706572696d656e74616cf564736f6c63430005110040",
              "opcodes": "PUSH1 0x63 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG3 PUSH6 0x627A7A723158 KECCAK256 PUSH17 0xC6B1E2E7530961A23EAE7629FA40ADAA71 EQ 0x5C DUP8 0xE9 SLOAD 0xDB 0xCD SWAP14 CREATE2 DUP11 0xAC 0xE5 ISZERO 0xD9 PUSH13 0x6578706572696D656E74616CF5 PUSH5 0x736F6C6343 STOP SDIV GT STOP BLOCKHASH ",
              "sourceMap": "6770:10633:0:-;;132:2:-1;166:7;155:9;146:7;137:37;255:7;249:14;246:1;241:23;235:4;232:33;222:2;;269:9;222:2;293:9;290:1;283:20;323:4;314:7;306:22;347:7;338;331:24"
            },
            "deployedBytecode": {
              "linkReferences": {},
              "object": "73000000000000000000000000000000000000000030146080604052600080fdfea365627a7a7231582070c6b1e2e7530961a23eae7629fa40adaa71145c87e954dbcd9df58aace515d96c6578706572696d656e74616cf564736f6c63430005110040",
              "opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG3 PUSH6 0x627A7A723158 KECCAK256 PUSH17 0xC6B1E2E7530961A23EAE7629FA40ADAA71 EQ 0x5C DUP8 0xE9 SLOAD 0xDB 0xCD SWAP14 CREATE2 DUP11 0xAC 0xE5 ISZERO 0xD9 PUSH13 0x6578706572696D656E74616CF5 PUSH5 0x736F6C6343 STOP SDIV GT STOP BLOCKHASH ",
              "sourceMap": "6770:10633:0:-;;;;;;;;"
            },
            "gasEstimates": {
              "creation": {
                "codeDepositCost": "19800",
                "executionCost": "100",
                "totalCost": "19900"
              },
              "internal": {
                "base32HexDecodeWord(bytes memory,uint256,uint256)": "infinite",
                "compare(bytes memory,bytes memory)": "infinite",
                "compare(bytes memory,uint256,uint256,bytes memory,uint256,uint256)": "infinite",
                "equals(bytes memory,bytes memory)": "infinite",
                "equals(bytes memory,uint256,bytes memory)": "infinite",
                "equals(bytes memory,uint256,bytes memory,uint256)": "infinite",
                "equals(bytes memory,uint256,bytes memory,uint256,uint256)": "infinite",
                "keccak(bytes memory,uint256,uint256)": "infinite",
                "memcpy(uint256,uint256,uint256)": "infinite",
                "readBytes20(bytes memory,uint256)": "infinite",
                "readBytes32(bytes memory,uint256)": "infinite",
                "readBytesN(bytes memory,uint256,uint256)": "infinite",
                "readUint16(bytes memory,uint256)": "infinite",
                "readUint32(bytes memory,uint256)": "infinite",
                "readUint8(bytes memory,uint256)": "infinite",
                "substring(bytes memory,uint256,uint256)": "infinite"
              }
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.5.17+commit.d19bba13\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/legacy/PublicResolver_mainnet_9412610.sol\":\"BytesUtils\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"contracts/legacy/PublicResolver_mainnet_9412610.sol\":{\"content\":\"/**\\n *Submitted for verification at Etherscan.io on 2020-02-03\\n */\\n\\n// File: @ensdomains/ens/contracts/ENS.sol\\n\\npragma solidity >=0.4.24;\\n\\ninterface ENS {\\n  // Logged when the owner of a node assigns a new owner to a subnode.\\n  event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n  // Logged when the owner of a node transfers ownership to a new account.\\n  event Transfer(bytes32 indexed node, address owner);\\n\\n  // Logged when the resolver for a node changes.\\n  event NewResolver(bytes32 indexed node, address resolver);\\n\\n  // Logged when the TTL of a node changes\\n  event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n  function setSubnodeOwner(\\n    bytes32 node,\\n    bytes32 label,\\n    address owner\\n  ) external;\\n\\n  function setResolver(bytes32 node, address resolver) external;\\n\\n  function setOwner(bytes32 node, address owner) external;\\n\\n  function setTTL(bytes32 node, uint64 ttl) external;\\n\\n  function owner(bytes32 node) external view returns (address);\\n\\n  function resolver(bytes32 node) external view returns (address);\\n\\n  function ttl(bytes32 node) external view returns (uint64);\\n}\\n\\n// File: contracts/ResolverBase.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract ResolverBase {\\n  bytes4 private constant INTERFACE_META_ID = 0x01ffc9a7;\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return interfaceID == INTERFACE_META_ID;\\n  }\\n\\n  function isAuthorised(bytes32 node) internal view returns (bool);\\n\\n  modifier authorised(bytes32 node) {\\n    require(isAuthorised(node));\\n    _;\\n  }\\n\\n  function bytesToAddress(bytes memory b)\\n    internal\\n    pure\\n    returns (address payable a)\\n  {\\n    require(b.length == 20);\\n    assembly {\\n      a := div(mload(add(b, 32)), exp(256, 12))\\n    }\\n  }\\n\\n  function addressToBytes(address a) internal pure returns (bytes memory b) {\\n    b = new bytes(20);\\n    assembly {\\n      mstore(add(b, 32), mul(a, exp(256, 12)))\\n    }\\n  }\\n}\\n\\n// File: contracts/profiles/ABIResolver.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract ABIResolver is ResolverBase {\\n  bytes4 private constant ABI_INTERFACE_ID = 0x2203ab56;\\n\\n  event ABIChanged(bytes32 indexed node, uint256 indexed contentType);\\n\\n  mapping(bytes32 => mapping(uint256 => bytes)) abis;\\n\\n  /**\\n   * Sets the ABI associated with an ENS node.\\n   * Nodes may have one ABI of each content type. To remove an ABI, set it to\\n   * the empty string.\\n   * @param node The node to update.\\n   * @param contentType The content type of the ABI\\n   * @param data The ABI data.\\n   */\\n  function setABI(\\n    bytes32 node,\\n    uint256 contentType,\\n    bytes calldata data\\n  ) external authorised(node) {\\n    // Content types must be powers of 2\\n    require(((contentType - 1) & contentType) == 0);\\n\\n    abis[node][contentType] = data;\\n    emit ABIChanged(node, contentType);\\n  }\\n\\n  /**\\n   * Returns the ABI associated with an ENS node.\\n   * Defined in EIP205.\\n   * @param node The ENS node to query\\n   * @param contentTypes A bitwise OR of the ABI formats accepted by the caller.\\n   * @return contentType The content type of the return value\\n   * @return data The ABI data\\n   */\\n  function ABI(bytes32 node, uint256 contentTypes)\\n    external\\n    view\\n    returns (uint256, bytes memory)\\n  {\\n    mapping(uint256 => bytes) storage abiset = abis[node];\\n\\n    for (\\n      uint256 contentType = 1;\\n      contentType <= contentTypes;\\n      contentType <<= 1\\n    ) {\\n      if ((contentType & contentTypes) != 0 && abiset[contentType].length > 0) {\\n        return (contentType, abiset[contentType]);\\n      }\\n    }\\n\\n    return (0, bytes(''));\\n  }\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return\\n      interfaceID == ABI_INTERFACE_ID || super.supportsInterface(interfaceID);\\n  }\\n}\\n\\n// File: contracts/profiles/AddrResolver.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract AddrResolver is ResolverBase {\\n  bytes4 private constant ADDR_INTERFACE_ID = 0x3b3b57de;\\n  bytes4 private constant ADDRESS_INTERFACE_ID = 0xf1cb7e06;\\n  uint256 private constant COIN_TYPE_ETH = 60;\\n\\n  event AddrChanged(bytes32 indexed node, address a);\\n  event AddressChanged(\\n    bytes32 indexed node,\\n    uint256 coinType,\\n    bytes newAddress\\n  );\\n\\n  mapping(bytes32 => mapping(uint256 => bytes)) _addresses;\\n\\n  /**\\n   * Sets the address associated with an ENS node.\\n   * May only be called by the owner of that node in the ENS registry.\\n   * @param node The node to update.\\n   * @param a The address to set.\\n   */\\n  function setAddr(bytes32 node, address a) external authorised(node) {\\n    setAddr(node, COIN_TYPE_ETH, addressToBytes(a));\\n  }\\n\\n  /**\\n   * Returns the address associated with an ENS node.\\n   * @param node The ENS node to query.\\n   * @return The associated address.\\n   */\\n  function addr(bytes32 node) public view returns (address payable) {\\n    bytes memory a = addr(node, COIN_TYPE_ETH);\\n    if (a.length == 0) {\\n      return address(0);\\n    }\\n    return bytesToAddress(a);\\n  }\\n\\n  function setAddr(\\n    bytes32 node,\\n    uint256 coinType,\\n    bytes memory a\\n  ) public authorised(node) {\\n    emit AddressChanged(node, coinType, a);\\n    if (coinType == COIN_TYPE_ETH) {\\n      emit AddrChanged(node, bytesToAddress(a));\\n    }\\n    _addresses[node][coinType] = a;\\n  }\\n\\n  function addr(bytes32 node, uint256 coinType)\\n    public\\n    view\\n    returns (bytes memory)\\n  {\\n    return _addresses[node][coinType];\\n  }\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return\\n      interfaceID == ADDR_INTERFACE_ID ||\\n      interfaceID == ADDRESS_INTERFACE_ID ||\\n      super.supportsInterface(interfaceID);\\n  }\\n}\\n\\n// File: contracts/profiles/ContentHashResolver.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract ContentHashResolver is ResolverBase {\\n  bytes4 private constant CONTENT_HASH_INTERFACE_ID = 0xbc1c58d1;\\n\\n  event ContenthashChanged(bytes32 indexed node, bytes hash);\\n\\n  mapping(bytes32 => bytes) hashes;\\n\\n  /**\\n   * Sets the contenthash associated with an ENS node.\\n   * May only be called by the owner of that node in the ENS registry.\\n   * @param node The node to update.\\n   * @param hash The contenthash to set\\n   */\\n  function setContenthash(bytes32 node, bytes calldata hash)\\n    external\\n    authorised(node)\\n  {\\n    hashes[node] = hash;\\n    emit ContenthashChanged(node, hash);\\n  }\\n\\n  /**\\n   * Returns the contenthash associated with an ENS node.\\n   * @param node The ENS node to query.\\n   * @return The associated contenthash.\\n   */\\n  function contenthash(bytes32 node) external view returns (bytes memory) {\\n    return hashes[node];\\n  }\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return\\n      interfaceID == CONTENT_HASH_INTERFACE_ID ||\\n      super.supportsInterface(interfaceID);\\n  }\\n}\\n\\n// File: @ensdomains/dnssec-oracle/contracts/BytesUtils.sol\\n\\npragma solidity >0.4.23;\\n\\nlibrary BytesUtils {\\n  /*\\n   * @dev Returns the keccak-256 hash of a byte range.\\n   * @param self The byte string to hash.\\n   * @param offset The position to start hashing at.\\n   * @param len The number of bytes to hash.\\n   * @return The hash of the byte range.\\n   */\\n  function keccak(\\n    bytes memory self,\\n    uint256 offset,\\n    uint256 len\\n  ) internal pure returns (bytes32 ret) {\\n    require(offset + len <= self.length);\\n    assembly {\\n      ret := keccak256(add(add(self, 32), offset), len)\\n    }\\n  }\\n\\n  /*\\n   * @dev Returns a positive number if `other` comes lexicographically after\\n   *      `self`, a negative number if it comes before, or zero if the\\n   *      contents of the two bytes are equal.\\n   * @param self The first bytes to compare.\\n   * @param other The second bytes to compare.\\n   * @return The result of the comparison.\\n   */\\n  function compare(bytes memory self, bytes memory other)\\n    internal\\n    pure\\n    returns (int256)\\n  {\\n    return compare(self, 0, self.length, other, 0, other.length);\\n  }\\n\\n  /*\\n   * @dev Returns a positive number if `other` comes lexicographically after\\n   *      `self`, a negative number if it comes before, or zero if the\\n   *      contents of the two bytes are equal. Comparison is done per-rune,\\n   *      on unicode codepoints.\\n   * @param self The first bytes to compare.\\n   * @param offset The offset of self.\\n   * @param len    The length of self.\\n   * @param other The second bytes to compare.\\n   * @param otheroffset The offset of the other string.\\n   * @param otherlen    The length of the other string.\\n   * @return The result of the comparison.\\n   */\\n  function compare(\\n    bytes memory self,\\n    uint256 offset,\\n    uint256 len,\\n    bytes memory other,\\n    uint256 otheroffset,\\n    uint256 otherlen\\n  ) internal pure returns (int256) {\\n    uint256 shortest = len;\\n    if (otherlen < len) shortest = otherlen;\\n\\n    uint256 selfptr;\\n    uint256 otherptr;\\n\\n    assembly {\\n      selfptr := add(self, add(offset, 32))\\n      otherptr := add(other, add(otheroffset, 32))\\n    }\\n    for (uint256 idx = 0; idx < shortest; idx += 32) {\\n      uint256 a;\\n      uint256 b;\\n      assembly {\\n        a := mload(selfptr)\\n        b := mload(otherptr)\\n      }\\n      if (a != b) {\\n        // Mask out irrelevant bytes and check again\\n        uint256 mask;\\n        if (shortest > 32) {\\n          mask = uint256(-1); // aka 0xffffff....\\n        } else {\\n          mask = ~(2**(8 * (32 - shortest + idx)) - 1);\\n        }\\n        uint256 diff = (a & mask) - (b & mask);\\n        if (diff != 0) return int256(diff);\\n      }\\n      selfptr += 32;\\n      otherptr += 32;\\n    }\\n\\n    return int256(len) - int256(otherlen);\\n  }\\n\\n  /*\\n   * @dev Returns true if the two byte ranges are equal.\\n   * @param self The first byte range to compare.\\n   * @param offset The offset into the first byte range.\\n   * @param other The second byte range to compare.\\n   * @param otherOffset The offset into the second byte range.\\n   * @param len The number of bytes to compare\\n   * @return True if the byte ranges are equal, false otherwise.\\n   */\\n  function equals(\\n    bytes memory self,\\n    uint256 offset,\\n    bytes memory other,\\n    uint256 otherOffset,\\n    uint256 len\\n  ) internal pure returns (bool) {\\n    return keccak(self, offset, len) == keccak(other, otherOffset, len);\\n  }\\n\\n  /*\\n   * @dev Returns true if the two byte ranges are equal with offsets.\\n   * @param self The first byte range to compare.\\n   * @param offset The offset into the first byte range.\\n   * @param other The second byte range to compare.\\n   * @param otherOffset The offset into the second byte range.\\n   * @return True if the byte ranges are equal, false otherwise.\\n   */\\n  function equals(\\n    bytes memory self,\\n    uint256 offset,\\n    bytes memory other,\\n    uint256 otherOffset\\n  ) internal pure returns (bool) {\\n    return\\n      keccak(self, offset, self.length - offset) ==\\n      keccak(other, otherOffset, other.length - otherOffset);\\n  }\\n\\n  /*\\n   * @dev Compares a range of 'self' to all of 'other' and returns True iff\\n   *      they are equal.\\n   * @param self The first byte range to compare.\\n   * @param offset The offset into the first byte range.\\n   * @param other The second byte range to compare.\\n   * @return True if the byte ranges are equal, false otherwise.\\n   */\\n  function equals(\\n    bytes memory self,\\n    uint256 offset,\\n    bytes memory other\\n  ) internal pure returns (bool) {\\n    return\\n      self.length >= offset + other.length &&\\n      equals(self, offset, other, 0, other.length);\\n  }\\n\\n  /*\\n   * @dev Returns true if the two byte ranges are equal.\\n   * @param self The first byte range to compare.\\n   * @param other The second byte range to compare.\\n   * @return True if the byte ranges are equal, false otherwise.\\n   */\\n  function equals(bytes memory self, bytes memory other)\\n    internal\\n    pure\\n    returns (bool)\\n  {\\n    return\\n      self.length == other.length && equals(self, 0, other, 0, self.length);\\n  }\\n\\n  /*\\n   * @dev Returns the 8-bit number at the specified index of self.\\n   * @param self The byte string.\\n   * @param idx The index into the bytes\\n   * @return The specified 8 bits of the string, interpreted as an integer.\\n   */\\n  function readUint8(bytes memory self, uint256 idx)\\n    internal\\n    pure\\n    returns (uint8 ret)\\n  {\\n    return uint8(self[idx]);\\n  }\\n\\n  /*\\n   * @dev Returns the 16-bit number at the specified index of self.\\n   * @param self The byte string.\\n   * @param idx The index into the bytes\\n   * @return The specified 16 bits of the string, interpreted as an integer.\\n   */\\n  function readUint16(bytes memory self, uint256 idx)\\n    internal\\n    pure\\n    returns (uint16 ret)\\n  {\\n    require(idx + 2 <= self.length);\\n    assembly {\\n      ret := and(mload(add(add(self, 2), idx)), 0xFFFF)\\n    }\\n  }\\n\\n  /*\\n   * @dev Returns the 32-bit number at the specified index of self.\\n   * @param self The byte string.\\n   * @param idx The index into the bytes\\n   * @return The specified 32 bits of the string, interpreted as an integer.\\n   */\\n  function readUint32(bytes memory self, uint256 idx)\\n    internal\\n    pure\\n    returns (uint32 ret)\\n  {\\n    require(idx + 4 <= self.length);\\n    assembly {\\n      ret := and(mload(add(add(self, 4), idx)), 0xFFFFFFFF)\\n    }\\n  }\\n\\n  /*\\n   * @dev Returns the 32 byte value at the specified index of self.\\n   * @param self The byte string.\\n   * @param idx The index into the bytes\\n   * @return The specified 32 bytes of the string.\\n   */\\n  function readBytes32(bytes memory self, uint256 idx)\\n    internal\\n    pure\\n    returns (bytes32 ret)\\n  {\\n    require(idx + 32 <= self.length);\\n    assembly {\\n      ret := mload(add(add(self, 32), idx))\\n    }\\n  }\\n\\n  /*\\n   * @dev Returns the 32 byte value at the specified index of self.\\n   * @param self The byte string.\\n   * @param idx The index into the bytes\\n   * @return The specified 32 bytes of the string.\\n   */\\n  function readBytes20(bytes memory self, uint256 idx)\\n    internal\\n    pure\\n    returns (bytes20 ret)\\n  {\\n    require(idx + 20 <= self.length);\\n    assembly {\\n      ret := and(\\n        mload(add(add(self, 32), idx)),\\n        0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000\\n      )\\n    }\\n  }\\n\\n  /*\\n   * @dev Returns the n byte value at the specified index of self.\\n   * @param self The byte string.\\n   * @param idx The index into the bytes.\\n   * @param len The number of bytes.\\n   * @return The specified 32 bytes of the string.\\n   */\\n  function readBytesN(\\n    bytes memory self,\\n    uint256 idx,\\n    uint256 len\\n  ) internal pure returns (bytes32 ret) {\\n    require(len <= 32);\\n    require(idx + len <= self.length);\\n    assembly {\\n      let mask := not(sub(exp(256, sub(32, len)), 1))\\n      ret := and(mload(add(add(self, 32), idx)), mask)\\n    }\\n  }\\n\\n  function memcpy(\\n    uint256 dest,\\n    uint256 src,\\n    uint256 len\\n  ) private pure {\\n    // Copy word-length chunks while possible\\n    for (; len >= 32; len -= 32) {\\n      assembly {\\n        mstore(dest, mload(src))\\n      }\\n      dest += 32;\\n      src += 32;\\n    }\\n\\n    // Copy remaining bytes\\n    uint256 mask = 256**(32 - len) - 1;\\n    assembly {\\n      let srcpart := and(mload(src), not(mask))\\n      let destpart := and(mload(dest), mask)\\n      mstore(dest, or(destpart, srcpart))\\n    }\\n  }\\n\\n  /*\\n   * @dev Copies a substring into a new byte string.\\n   * @param self The byte string to copy from.\\n   * @param offset The offset to start copying at.\\n   * @param len The number of bytes to copy.\\n   */\\n  function substring(\\n    bytes memory self,\\n    uint256 offset,\\n    uint256 len\\n  ) internal pure returns (bytes memory) {\\n    require(offset + len <= self.length);\\n\\n    bytes memory ret = new bytes(len);\\n    uint256 dest;\\n    uint256 src;\\n\\n    assembly {\\n      dest := add(ret, 32)\\n      src := add(add(self, 32), offset)\\n    }\\n    memcpy(dest, src, len);\\n\\n    return ret;\\n  }\\n\\n  // Maps characters from 0x30 to 0x7A to their base32 values.\\n  // 0xFF represents invalid characters in that range.\\n  bytes constant base32HexTable =\\n    hex'00010203040506070809FFFFFFFFFFFFFF0A0B0C0D0E0F101112131415161718191A1B1C1D1E1FFFFFFFFFFFFFFFFFFFFF0A0B0C0D0E0F101112131415161718191A1B1C1D1E1F';\\n\\n  /**\\n   * @dev Decodes unpadded base32 data of up to one word in length.\\n   * @param self The data to decode.\\n   * @param off Offset into the string to start at.\\n   * @param len Number of characters to decode.\\n   * @return The decoded data, left aligned.\\n   */\\n  function base32HexDecodeWord(\\n    bytes memory self,\\n    uint256 off,\\n    uint256 len\\n  ) internal pure returns (bytes32) {\\n    require(len <= 52);\\n\\n    uint256 ret = 0;\\n    uint8 decoded;\\n    for (uint256 i = 0; i < len; i++) {\\n      bytes1 char = self[off + i];\\n      require(char >= 0x30 && char <= 0x7A);\\n      decoded = uint8(base32HexTable[uint256(uint8(char)) - 0x30]);\\n      require(decoded <= 0x20);\\n      if (i == len - 1) {\\n        break;\\n      }\\n      ret = (ret << 5) | decoded;\\n    }\\n\\n    uint256 bitlen = len * 5;\\n    if (len % 8 == 0) {\\n      // Multiple of 8 characters, no padding\\n      ret = (ret << 5) | decoded;\\n    } else if (len % 8 == 2) {\\n      // Two extra characters - 1 byte\\n      ret = (ret << 3) | (decoded >> 2);\\n      bitlen -= 2;\\n    } else if (len % 8 == 4) {\\n      // Four extra characters - 2 bytes\\n      ret = (ret << 1) | (decoded >> 4);\\n      bitlen -= 4;\\n    } else if (len % 8 == 5) {\\n      // Five extra characters - 3 bytes\\n      ret = (ret << 4) | (decoded >> 1);\\n      bitlen -= 1;\\n    } else if (len % 8 == 7) {\\n      // Seven extra characters - 4 bytes\\n      ret = (ret << 2) | (decoded >> 3);\\n      bitlen -= 3;\\n    } else {\\n      revert();\\n    }\\n\\n    return bytes32(ret << (256 - bitlen));\\n  }\\n}\\n\\n// File: @ensdomains/buffer/contracts/Buffer.sol\\n\\npragma solidity >0.4.18;\\n\\n/**\\n * @dev A library for working with mutable byte buffers in Solidity.\\n *\\n * Byte buffers are mutable and expandable, and provide a variety of primitives\\n * for writing to them. At any time you can fetch a bytes object containing the\\n * current contents of the buffer. The bytes object should not be stored between\\n * operations, as it may change due to resizing of the buffer.\\n */\\nlibrary Buffer {\\n  /**\\n   * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n   *      a capacity. The capacity may be longer than the current value, in\\n   *      which case it can be extended without the need to allocate more memory.\\n   */\\n  struct buffer {\\n    bytes buf;\\n    uint256 capacity;\\n  }\\n\\n  /**\\n   * @dev Initializes a buffer with an initial capacity.\\n   * @param buf The buffer to initialize.\\n   * @param capacity The number of bytes of space to allocate the buffer.\\n   * @return The buffer, for chaining.\\n   */\\n  function init(buffer memory buf, uint256 capacity)\\n    internal\\n    pure\\n    returns (buffer memory)\\n  {\\n    if (capacity % 32 != 0) {\\n      capacity += 32 - (capacity % 32);\\n    }\\n    // Allocate space for the buffer data\\n    buf.capacity = capacity;\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(buf, ptr)\\n      mstore(ptr, 0)\\n      mstore(0x40, add(32, add(ptr, capacity)))\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Initializes a new buffer from an existing bytes object.\\n   *      Changes to the buffer may mutate the original value.\\n   * @param b The bytes object to initialize the buffer with.\\n   * @return A new buffer.\\n   */\\n  function fromBytes(bytes memory b) internal pure returns (buffer memory) {\\n    buffer memory buf;\\n    buf.buf = b;\\n    buf.capacity = b.length;\\n    return buf;\\n  }\\n\\n  function resize(buffer memory buf, uint256 capacity) private pure {\\n    bytes memory oldbuf = buf.buf;\\n    init(buf, capacity);\\n    append(buf, oldbuf);\\n  }\\n\\n  function max(uint256 a, uint256 b) private pure returns (uint256) {\\n    if (a > b) {\\n      return a;\\n    }\\n    return b;\\n  }\\n\\n  /**\\n   * @dev Sets buffer length to 0.\\n   * @param buf The buffer to truncate.\\n   * @return The original buffer, for chaining..\\n   */\\n  function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n    assembly {\\n      let bufptr := mload(buf)\\n      mstore(bufptr, 0)\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Writes a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The start offset to write to.\\n   * @param data The data to append.\\n   * @param len The number of bytes to copy.\\n   * @return The original buffer, for chaining.\\n   */\\n  function write(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes memory data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    require(len <= data.length);\\n\\n    if (off + len > buf.capacity) {\\n      resize(buf, max(buf.capacity, len + off) * 2);\\n    }\\n\\n    uint256 dest;\\n    uint256 src;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Start address = buffer address + offset + sizeof(buffer length)\\n      dest := add(add(bufptr, 32), off)\\n      // Update buffer length if we're extending it\\n      if gt(add(len, off), buflen) {\\n        mstore(bufptr, add(len, off))\\n      }\\n      src := add(data, 32)\\n    }\\n\\n    // Copy word-length chunks while possible\\n    for (; len >= 32; len -= 32) {\\n      assembly {\\n        mstore(dest, mload(src))\\n      }\\n      dest += 32;\\n      src += 32;\\n    }\\n\\n    // Copy remaining bytes\\n    uint256 mask = 256**(32 - len) - 1;\\n    assembly {\\n      let srcpart := and(mload(src), not(mask))\\n      let destpart := and(mload(dest), mask)\\n      mstore(dest, or(destpart, srcpart))\\n    }\\n\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @param len The number of bytes to copy.\\n   * @return The original buffer, for chaining.\\n   */\\n  function append(\\n    buffer memory buf,\\n    bytes memory data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, len);\\n  }\\n\\n  /**\\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function append(buffer memory buf, bytes memory data)\\n    internal\\n    pure\\n    returns (buffer memory)\\n  {\\n    return write(buf, buf.buf.length, data, data.length);\\n  }\\n\\n  /**\\n   * @dev Writes a byte to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write the byte at.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeUint8(\\n    buffer memory buf,\\n    uint256 off,\\n    uint8 data\\n  ) internal pure returns (buffer memory) {\\n    if (off >= buf.capacity) {\\n      resize(buf, buf.capacity * 2);\\n    }\\n\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Address = buffer address + sizeof(buffer length) + off\\n      let dest := add(add(bufptr, off), 32)\\n      mstore8(dest, data)\\n      // Update buffer length if we extended it\\n      if eq(off, buflen) {\\n        mstore(bufptr, add(buflen, 1))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function appendUint8(buffer memory buf, uint8 data)\\n    internal\\n    pure\\n    returns (buffer memory)\\n  {\\n    return writeUint8(buf, buf.buf.length, data);\\n  }\\n\\n  /**\\n   * @dev Writes up to 32 bytes to the buffer. Resizes if doing so would\\n   *      exceed the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @param len The number of bytes to write (left-aligned).\\n   * @return The original buffer, for chaining.\\n   */\\n  function write(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes32 data,\\n    uint256 len\\n  ) private pure returns (buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    uint256 mask = 256**len - 1;\\n    // Right-align data\\n    data = data >> (8 * (32 - len));\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Address = buffer address + sizeof(buffer length) + off + len\\n      let dest := add(add(bufptr, off), len)\\n      mstore(dest, or(and(mload(dest), not(mask)), data))\\n      // Update buffer length if we extended it\\n      if gt(add(off, len), mload(bufptr)) {\\n        mstore(bufptr, add(off, len))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Writes a bytes20 to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeBytes20(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes20 data\\n  ) internal pure returns (buffer memory) {\\n    return write(buf, off, bytes32(data), 20);\\n  }\\n\\n  /**\\n   * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chhaining.\\n   */\\n  function appendBytes20(buffer memory buf, bytes20 data)\\n    internal\\n    pure\\n    returns (buffer memory)\\n  {\\n    return write(buf, buf.buf.length, bytes32(data), 20);\\n  }\\n\\n  /**\\n   * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function appendBytes32(buffer memory buf, bytes32 data)\\n    internal\\n    pure\\n    returns (buffer memory)\\n  {\\n    return write(buf, buf.buf.length, data, 32);\\n  }\\n\\n  /**\\n   * @dev Writes an integer to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @param len The number of bytes to write (right-aligned).\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeInt(\\n    buffer memory buf,\\n    uint256 off,\\n    uint256 data,\\n    uint256 len\\n  ) private pure returns (buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    uint256 mask = 256**len - 1;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Address = buffer address + off + sizeof(buffer length) + len\\n      let dest := add(add(bufptr, off), len)\\n      mstore(dest, or(and(mload(dest), not(mask)), data))\\n      // Update buffer length if we extended it\\n      if gt(add(off, len), mload(bufptr)) {\\n        mstore(bufptr, add(off, len))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n   * exceed the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer.\\n   */\\n  function appendInt(\\n    buffer memory buf,\\n    uint256 data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    return writeInt(buf, buf.buf.length, data, len);\\n  }\\n}\\n\\n// File: @ensdomains/dnssec-oracle/contracts/RRUtils.sol\\n\\npragma solidity >0.4.23;\\n\\n/**\\n * @dev RRUtils is a library that provides utilities for parsing DNS resource records.\\n */\\nlibrary RRUtils {\\n  using BytesUtils for *;\\n  using Buffer for *;\\n\\n  /**\\n   * @dev Returns the number of bytes in the DNS name at 'offset' in 'self'.\\n   * @param self The byte array to read a name from.\\n   * @param offset The offset to start reading at.\\n   * @return The length of the DNS name at 'offset', in bytes.\\n   */\\n  function nameLength(bytes memory self, uint256 offset)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    uint256 idx = offset;\\n    while (true) {\\n      assert(idx < self.length);\\n      uint256 labelLen = self.readUint8(idx);\\n      idx += labelLen + 1;\\n      if (labelLen == 0) {\\n        break;\\n      }\\n    }\\n    return idx - offset;\\n  }\\n\\n  /**\\n   * @dev Returns a DNS format name at the specified offset of self.\\n   * @param self The byte array to read a name from.\\n   * @param offset The offset to start reading at.\\n   * @return The name.\\n   */\\n  function readName(bytes memory self, uint256 offset)\\n    internal\\n    pure\\n    returns (bytes memory ret)\\n  {\\n    uint256 len = nameLength(self, offset);\\n    return self.substring(offset, len);\\n  }\\n\\n  /**\\n   * @dev Returns the number of labels in the DNS name at 'offset' in 'self'.\\n   * @param self The byte array to read a name from.\\n   * @param offset The offset to start reading at.\\n   * @return The number of labels in the DNS name at 'offset', in bytes.\\n   */\\n  function labelCount(bytes memory self, uint256 offset)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    uint256 count = 0;\\n    while (true) {\\n      assert(offset < self.length);\\n      uint256 labelLen = self.readUint8(offset);\\n      offset += labelLen + 1;\\n      if (labelLen == 0) {\\n        break;\\n      }\\n      count += 1;\\n    }\\n    return count;\\n  }\\n\\n  /**\\n   * @dev An iterator over resource records.\\n   */\\n  struct RRIterator {\\n    bytes data;\\n    uint256 offset;\\n    uint16 dnstype;\\n    uint16 class;\\n    uint32 ttl;\\n    uint256 rdataOffset;\\n    uint256 nextOffset;\\n  }\\n\\n  /**\\n   * @dev Begins iterating over resource records.\\n   * @param self The byte string to read from.\\n   * @param offset The offset to start reading at.\\n   * @return An iterator object.\\n   */\\n  function iterateRRs(bytes memory self, uint256 offset)\\n    internal\\n    pure\\n    returns (RRIterator memory ret)\\n  {\\n    ret.data = self;\\n    ret.nextOffset = offset;\\n    next(ret);\\n  }\\n\\n  /**\\n   * @dev Returns true iff there are more RRs to iterate.\\n   * @param iter The iterator to check.\\n   * @return True iff the iterator has finished.\\n   */\\n  function done(RRIterator memory iter) internal pure returns (bool) {\\n    return iter.offset >= iter.data.length;\\n  }\\n\\n  /**\\n   * @dev Moves the iterator to the next resource record.\\n   * @param iter The iterator to advance.\\n   */\\n  function next(RRIterator memory iter) internal pure {\\n    iter.offset = iter.nextOffset;\\n    if (iter.offset >= iter.data.length) {\\n      return;\\n    }\\n\\n    // Skip the name\\n    uint256 off = iter.offset + nameLength(iter.data, iter.offset);\\n\\n    // Read type, class, and ttl\\n    iter.dnstype = iter.data.readUint16(off);\\n    off += 2;\\n    iter.class = iter.data.readUint16(off);\\n    off += 2;\\n    iter.ttl = iter.data.readUint32(off);\\n    off += 4;\\n\\n    // Read the rdata\\n    uint256 rdataLength = iter.data.readUint16(off);\\n    off += 2;\\n    iter.rdataOffset = off;\\n    iter.nextOffset = off + rdataLength;\\n  }\\n\\n  /**\\n   * @dev Returns the name of the current record.\\n   * @param iter The iterator.\\n   * @return A new bytes object containing the owner name from the RR.\\n   */\\n  function name(RRIterator memory iter) internal pure returns (bytes memory) {\\n    return iter.data.substring(iter.offset, nameLength(iter.data, iter.offset));\\n  }\\n\\n  /**\\n   * @dev Returns the rdata portion of the current record.\\n   * @param iter The iterator.\\n   * @return A new bytes object containing the RR's RDATA.\\n   */\\n  function rdata(RRIterator memory iter) internal pure returns (bytes memory) {\\n    return\\n      iter.data.substring(iter.rdataOffset, iter.nextOffset - iter.rdataOffset);\\n  }\\n\\n  /**\\n   * @dev Checks if a given RR type exists in a type bitmap.\\n   * @param self The byte string to read the type bitmap from.\\n   * @param offset The offset to start reading at.\\n   * @param rrtype The RR type to check for.\\n   * @return True if the type is found in the bitmap, false otherwise.\\n   */\\n  function checkTypeBitmap(\\n    bytes memory self,\\n    uint256 offset,\\n    uint16 rrtype\\n  ) internal pure returns (bool) {\\n    uint8 typeWindow = uint8(rrtype >> 8);\\n    uint8 windowByte = uint8((rrtype & 0xff) / 8);\\n    uint8 windowBitmask = uint8(uint8(1) << (uint8(7) - uint8(rrtype & 0x7)));\\n    for (uint256 off = offset; off < self.length; ) {\\n      uint8 window = self.readUint8(off);\\n      uint8 len = self.readUint8(off + 1);\\n      if (typeWindow < window) {\\n        // We've gone past our window; it's not here.\\n        return false;\\n      } else if (typeWindow == window) {\\n        // Check this type bitmap\\n        if (len * 8 <= windowByte) {\\n          // Our type is past the end of the bitmap\\n          return false;\\n        }\\n        return (self.readUint8(off + windowByte + 2) & windowBitmask) != 0;\\n      } else {\\n        // Skip this type bitmap\\n        off += len + 2;\\n      }\\n    }\\n\\n    return false;\\n  }\\n\\n  function compareNames(bytes memory self, bytes memory other)\\n    internal\\n    pure\\n    returns (int256)\\n  {\\n    if (self.equals(other)) {\\n      return 0;\\n    }\\n\\n    uint256 off;\\n    uint256 otheroff;\\n    uint256 prevoff;\\n    uint256 otherprevoff;\\n    uint256 counts = labelCount(self, 0);\\n    uint256 othercounts = labelCount(other, 0);\\n\\n    // Keep removing labels from the front of the name until both names are equal length\\n    while (counts > othercounts) {\\n      prevoff = off;\\n      off = progress(self, off);\\n      counts--;\\n    }\\n\\n    while (othercounts > counts) {\\n      otherprevoff = otheroff;\\n      otheroff = progress(other, otheroff);\\n      othercounts--;\\n    }\\n\\n    // Compare the last nonequal labels to each other\\n    while (counts > 0 && !self.equals(off, other, otheroff)) {\\n      prevoff = off;\\n      off = progress(self, off);\\n      otherprevoff = otheroff;\\n      otheroff = progress(other, otheroff);\\n      counts -= 1;\\n    }\\n\\n    if (off == 0) {\\n      return -1;\\n    }\\n    if (otheroff == 0) {\\n      return 1;\\n    }\\n\\n    return\\n      self.compare(\\n        prevoff + 1,\\n        self.readUint8(prevoff),\\n        other,\\n        otherprevoff + 1,\\n        other.readUint8(otherprevoff)\\n      );\\n  }\\n\\n  function progress(bytes memory body, uint256 off)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    return off + 1 + body.readUint8(off);\\n  }\\n}\\n\\n// File: contracts/profiles/DNSResolver.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract DNSResolver is ResolverBase {\\n  using RRUtils for *;\\n  using BytesUtils for bytes;\\n\\n  bytes4 private constant DNS_RECORD_INTERFACE_ID = 0xa8fa5682;\\n\\n  // DNSRecordChanged is emitted whenever a given node/name/resource's RRSET is updated.\\n  event DNSRecordChanged(\\n    bytes32 indexed node,\\n    bytes name,\\n    uint16 resource,\\n    bytes record\\n  );\\n  // DNSRecordDeleted is emitted whenever a given node/name/resource's RRSET is deleted.\\n  event DNSRecordDeleted(bytes32 indexed node, bytes name, uint16 resource);\\n  // DNSZoneCleared is emitted whenever a given node's zone information is cleared.\\n  event DNSZoneCleared(bytes32 indexed node);\\n\\n  // Version the mapping for each zone.  This allows users who have lost\\n  // track of their entries to effectively delete an entire zone by bumping\\n  // the version number.\\n  // node => version\\n  mapping(bytes32 => uint256) private versions;\\n\\n  // The records themselves.  Stored as binary RRSETs\\n  // node => version => name => resource => data\\n  mapping(bytes32 => mapping(uint256 => mapping(bytes32 => mapping(uint16 => bytes))))\\n    private records;\\n\\n  // Count of number of entries for a given name.  Required for DNS resolvers\\n  // when resolving wildcards.\\n  // node => version => name => number of records\\n  mapping(bytes32 => mapping(uint256 => mapping(bytes32 => uint16)))\\n    private nameEntriesCount;\\n\\n  /**\\n   * Set one or more DNS records.  Records are supplied in wire-format.\\n   * Records with the same node/name/resource must be supplied one after the\\n   * other to ensure the data is updated correctly. For example, if the data\\n   * was supplied:\\n   *     a.example.com IN A 1.2.3.4\\n   *     a.example.com IN A 5.6.7.8\\n   *     www.example.com IN CNAME a.example.com.\\n   * then this would store the two A records for a.example.com correctly as a\\n   * single RRSET, however if the data was supplied:\\n   *     a.example.com IN A 1.2.3.4\\n   *     www.example.com IN CNAME a.example.com.\\n   *     a.example.com IN A 5.6.7.8\\n   * then this would store the first A record, the CNAME, then the second A\\n   * record which would overwrite the first.\\n   *\\n   * @param node the namehash of the node for which to set the records\\n   * @param data the DNS wire format records to set\\n   */\\n  function setDNSRecords(bytes32 node, bytes calldata data)\\n    external\\n    authorised(node)\\n  {\\n    uint16 resource = 0;\\n    uint256 offset = 0;\\n    bytes memory name;\\n    bytes memory value;\\n    bytes32 nameHash;\\n    // Iterate over the data to add the resource records\\n    for (\\n      RRUtils.RRIterator memory iter = data.iterateRRs(0);\\n      !iter.done();\\n      iter.next()\\n    ) {\\n      if (resource == 0) {\\n        resource = iter.dnstype;\\n        name = iter.name();\\n        nameHash = keccak256(abi.encodePacked(name));\\n        value = bytes(iter.rdata());\\n      } else {\\n        bytes memory newName = iter.name();\\n        if (resource != iter.dnstype || !name.equals(newName)) {\\n          setDNSRRSet(\\n            node,\\n            name,\\n            resource,\\n            data,\\n            offset,\\n            iter.offset - offset,\\n            value.length == 0\\n          );\\n          resource = iter.dnstype;\\n          offset = iter.offset;\\n          name = newName;\\n          nameHash = keccak256(name);\\n          value = bytes(iter.rdata());\\n        }\\n      }\\n    }\\n    if (name.length > 0) {\\n      setDNSRRSet(\\n        node,\\n        name,\\n        resource,\\n        data,\\n        offset,\\n        data.length - offset,\\n        value.length == 0\\n      );\\n    }\\n  }\\n\\n  /**\\n   * Obtain a DNS record.\\n   * @param node the namehash of the node for which to fetch the record\\n   * @param name the keccak-256 hash of the fully-qualified name for which to fetch the record\\n   * @param resource the ID of the resource as per https://en.wikipedia.org/wiki/List_of_DNS_record_types\\n   * @return the DNS record in wire format if present, otherwise empty\\n   */\\n  function dnsRecord(\\n    bytes32 node,\\n    bytes32 name,\\n    uint16 resource\\n  ) public view returns (bytes memory) {\\n    return records[node][versions[node]][name][resource];\\n  }\\n\\n  /**\\n   * Check if a given node has records.\\n   * @param node the namehash of the node for which to check the records\\n   * @param name the namehash of the node for which to check the records\\n   */\\n  function hasDNSRecords(bytes32 node, bytes32 name)\\n    public\\n    view\\n    returns (bool)\\n  {\\n    return (nameEntriesCount[node][versions[node]][name] != 0);\\n  }\\n\\n  /**\\n   * Clear all information for a DNS zone.\\n   * @param node the namehash of the node for which to clear the zone\\n   */\\n  function clearDNSZone(bytes32 node) public authorised(node) {\\n    versions[node]++;\\n    emit DNSZoneCleared(node);\\n  }\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return\\n      interfaceID == DNS_RECORD_INTERFACE_ID ||\\n      super.supportsInterface(interfaceID);\\n  }\\n\\n  function setDNSRRSet(\\n    bytes32 node,\\n    bytes memory name,\\n    uint16 resource,\\n    bytes memory data,\\n    uint256 offset,\\n    uint256 size,\\n    bool deleteRecord\\n  ) private {\\n    uint256 version = versions[node];\\n    bytes32 nameHash = keccak256(name);\\n    bytes memory rrData = data.substring(offset, size);\\n    if (deleteRecord) {\\n      if (records[node][version][nameHash][resource].length != 0) {\\n        nameEntriesCount[node][version][nameHash]--;\\n      }\\n      delete (records[node][version][nameHash][resource]);\\n      emit DNSRecordDeleted(node, name, resource);\\n    } else {\\n      if (records[node][version][nameHash][resource].length == 0) {\\n        nameEntriesCount[node][version][nameHash]++;\\n      }\\n      records[node][version][nameHash][resource] = rrData;\\n      emit DNSRecordChanged(node, name, resource, rrData);\\n    }\\n  }\\n}\\n\\n// File: contracts/profiles/InterfaceResolver.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract InterfaceResolver is ResolverBase, AddrResolver {\\n  bytes4 private constant INTERFACE_INTERFACE_ID =\\n    bytes4(keccak256('interfaceImplementer(bytes32,bytes4)'));\\n  bytes4 private constant INTERFACE_META_ID = 0x01ffc9a7;\\n\\n  event InterfaceChanged(\\n    bytes32 indexed node,\\n    bytes4 indexed interfaceID,\\n    address implementer\\n  );\\n\\n  mapping(bytes32 => mapping(bytes4 => address)) interfaces;\\n\\n  /**\\n   * Sets an interface associated with a name.\\n   * Setting the address to 0 restores the default behaviour of querying the contract at `addr()` for interface support.\\n   * @param node The node to update.\\n   * @param interfaceID The EIP 168 interface ID.\\n   * @param implementer The address of a contract that implements this interface for this node.\\n   */\\n  function setInterface(\\n    bytes32 node,\\n    bytes4 interfaceID,\\n    address implementer\\n  ) external authorised(node) {\\n    interfaces[node][interfaceID] = implementer;\\n    emit InterfaceChanged(node, interfaceID, implementer);\\n  }\\n\\n  /**\\n   * Returns the address of a contract that implements the specified interface for this name.\\n   * If an implementer has not been set for this interfaceID and name, the resolver will query\\n   * the contract at `addr()`. If `addr()` is set, a contract exists at that address, and that\\n   * contract implements EIP168 and returns `true` for the specified interfaceID, its address\\n   * will be returned.\\n   * @param node The ENS node to query.\\n   * @param interfaceID The EIP 168 interface ID to check for.\\n   * @return The address that implements this interface, or 0 if the interface is unsupported.\\n   */\\n  function interfaceImplementer(bytes32 node, bytes4 interfaceID)\\n    external\\n    view\\n    returns (address)\\n  {\\n    address implementer = interfaces[node][interfaceID];\\n    if (implementer != address(0)) {\\n      return implementer;\\n    }\\n\\n    address a = addr(node);\\n    if (a == address(0)) {\\n      return address(0);\\n    }\\n\\n    (bool success, bytes memory returnData) = a.staticcall(\\n      abi.encodeWithSignature('supportsInterface(bytes4)', INTERFACE_META_ID)\\n    );\\n    if (!success || returnData.length < 32 || returnData[31] == 0) {\\n      // EIP 168 not supported by target\\n      return address(0);\\n    }\\n\\n    (success, returnData) = a.staticcall(\\n      abi.encodeWithSignature('supportsInterface(bytes4)', interfaceID)\\n    );\\n    if (!success || returnData.length < 32 || returnData[31] == 0) {\\n      // Specified interface not supported by target\\n      return address(0);\\n    }\\n\\n    return a;\\n  }\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return\\n      interfaceID == INTERFACE_INTERFACE_ID ||\\n      super.supportsInterface(interfaceID);\\n  }\\n}\\n\\n// File: contracts/profiles/NameResolver.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract NameResolver is ResolverBase {\\n  bytes4 private constant NAME_INTERFACE_ID = 0x691f3431;\\n\\n  event NameChanged(bytes32 indexed node, string name);\\n\\n  mapping(bytes32 => string) names;\\n\\n  /**\\n   * Sets the name associated with an ENS node, for reverse records.\\n   * May only be called by the owner of that node in the ENS registry.\\n   * @param node The node to update.\\n   * @param name The name to set.\\n   */\\n  function setName(bytes32 node, string calldata name)\\n    external\\n    authorised(node)\\n  {\\n    names[node] = name;\\n    emit NameChanged(node, name);\\n  }\\n\\n  /**\\n   * Returns the name associated with an ENS node, for reverse records.\\n   * Defined in EIP181.\\n   * @param node The ENS node to query.\\n   * @return The associated name.\\n   */\\n  function name(bytes32 node) external view returns (string memory) {\\n    return names[node];\\n  }\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return\\n      interfaceID == NAME_INTERFACE_ID || super.supportsInterface(interfaceID);\\n  }\\n}\\n\\n// File: contracts/profiles/PubkeyResolver.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract PubkeyResolver is ResolverBase {\\n  bytes4 private constant PUBKEY_INTERFACE_ID = 0xc8690233;\\n\\n  event PubkeyChanged(bytes32 indexed node, bytes32 x, bytes32 y);\\n\\n  struct PublicKey {\\n    bytes32 x;\\n    bytes32 y;\\n  }\\n\\n  mapping(bytes32 => PublicKey) pubkeys;\\n\\n  /**\\n   * Sets the SECP256k1 public key associated with an ENS node.\\n   * @param node The ENS node to query\\n   * @param x the X coordinate of the curve point for the public key.\\n   * @param y the Y coordinate of the curve point for the public key.\\n   */\\n  function setPubkey(\\n    bytes32 node,\\n    bytes32 x,\\n    bytes32 y\\n  ) external authorised(node) {\\n    pubkeys[node] = PublicKey(x, y);\\n    emit PubkeyChanged(node, x, y);\\n  }\\n\\n  /**\\n   * Returns the SECP256k1 public key associated with an ENS node.\\n   * Defined in EIP 619.\\n   * @param node The ENS node to query\\n   * @return x, y the X and Y coordinates of the curve point for the public key.\\n   */\\n  function pubkey(bytes32 node) external view returns (bytes32 x, bytes32 y) {\\n    return (pubkeys[node].x, pubkeys[node].y);\\n  }\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return\\n      interfaceID == PUBKEY_INTERFACE_ID ||\\n      super.supportsInterface(interfaceID);\\n  }\\n}\\n\\n// File: contracts/profiles/TextResolver.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract TextResolver is ResolverBase {\\n  bytes4 private constant TEXT_INTERFACE_ID = 0x59d1d43c;\\n\\n  event TextChanged(\\n    bytes32 indexed node,\\n    string indexed indexedKey,\\n    string key\\n  );\\n\\n  mapping(bytes32 => mapping(string => string)) texts;\\n\\n  /**\\n   * Sets the text data associated with an ENS node and key.\\n   * May only be called by the owner of that node in the ENS registry.\\n   * @param node The node to update.\\n   * @param key The key to set.\\n   * @param value The text data value to set.\\n   */\\n  function setText(\\n    bytes32 node,\\n    string calldata key,\\n    string calldata value\\n  ) external authorised(node) {\\n    texts[node][key] = value;\\n    emit TextChanged(node, key, key);\\n  }\\n\\n  /**\\n   * Returns the text data associated with an ENS node and key.\\n   * @param node The ENS node to query.\\n   * @param key The text data key to query.\\n   * @return The associated text data.\\n   */\\n  function text(bytes32 node, string calldata key)\\n    external\\n    view\\n    returns (string memory)\\n  {\\n    return texts[node][key];\\n  }\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return\\n      interfaceID == TEXT_INTERFACE_ID || super.supportsInterface(interfaceID);\\n  }\\n}\\n\\n// File: contracts/PublicResolver.sol\\n\\npragma solidity ^0.5.0;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * A simple resolver anyone can use; only allows the owner of a node to set its\\n * address.\\n */\\ncontract PublicResolver_mainnet_9412610 is\\n  ABIResolver,\\n  AddrResolver,\\n  ContentHashResolver,\\n  DNSResolver,\\n  InterfaceResolver,\\n  NameResolver,\\n  PubkeyResolver,\\n  TextResolver\\n{\\n  ENS ens;\\n\\n  /**\\n   * A mapping of authorisations. An address that is authorised for a name\\n   * may make any changes to the name that the owner could, but may not update\\n   * the set of authorisations.\\n   * (node, owner, caller) => isAuthorised\\n   */\\n  mapping(bytes32 => mapping(address => mapping(address => bool)))\\n    public authorisations;\\n\\n  event AuthorisationChanged(\\n    bytes32 indexed node,\\n    address indexed owner,\\n    address indexed target,\\n    bool isAuthorised\\n  );\\n\\n  constructor(ENS _ens) public {\\n    ens = _ens;\\n  }\\n\\n  /**\\n   * @dev Sets or clears an authorisation.\\n   * Authorisations are specific to the caller. Any account can set an authorisation\\n   * for any name, but the authorisation that is checked will be that of the\\n   * current owner of a name. Thus, transferring a name effectively clears any\\n   * existing authorisations, and new authorisations can be set in advance of\\n   * an ownership transfer if desired.\\n   *\\n   * @param node The name to change the authorisation on.\\n   * @param target The address that is to be authorised or deauthorised.\\n   * @param isAuthorised True if the address should be authorised, or false if it should be deauthorised.\\n   */\\n  function setAuthorisation(\\n    bytes32 node,\\n    address target,\\n    bool isAuthorised\\n  ) external {\\n    authorisations[node][msg.sender][target] = isAuthorised;\\n    emit AuthorisationChanged(node, msg.sender, target, isAuthorised);\\n  }\\n\\n  function isAuthorised(bytes32 node) internal view returns (bool) {\\n    address owner = ens.owner(node);\\n    return owner == msg.sender || authorisations[node][owner][msg.sender];\\n  }\\n\\n  function multicall(bytes[] calldata data)\\n    external\\n    returns (bytes[] memory results)\\n  {\\n    results = new bytes[](data.length);\\n    for (uint256 i = 0; i < data.length; i++) {\\n      (bool success, bytes memory result) = address(this).delegatecall(data[i]);\\n      require(success);\\n      results[i] = result;\\n    }\\n    return results;\\n  }\\n}\\n\",\"keccak256\":\"0x29ca7d322ab7177f187f9bfc310e6dfc94049e9beaaafe958bead081fd90ad76\"}},\"version\":1}",
          "storageLayout": {
            "storage": [],
            "types": null
          },
          "userdoc": {
            "methods": {}
          }
        },
        "ContentHashResolver": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "node",
                  "type": "bytes32"
                },
                {
                  "indexed": false,
                  "internalType": "bytes",
                  "name": "hash",
                  "type": "bytes"
                }
              ],
              "name": "ContenthashChanged",
              "type": "event"
            },
            {
              "constant": true,
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "node",
                  "type": "bytes32"
                }
              ],
              "name": "contenthash",
              "outputs": [
                {
                  "internalType": "bytes",
                  "name": "",
                  "type": "bytes"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "node",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes",
                  "name": "hash",
                  "type": "bytes"
                }
              ],
              "name": "setContenthash",
              "outputs": [],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [
                {
                  "internalType": "bytes4",
                  "name": "interfaceID",
                  "type": "bytes4"
                }
              ],
              "name": "supportsInterface",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "payable": false,
              "stateMutability": "pure",
              "type": "function"
            }
          ],
          "devdoc": {
            "methods": {
              "contenthash(bytes32)": {
                "params": {
                  "node": "The ENS node to query."
                },
                "return": "The associated contenthash."
              },
              "setContenthash(bytes32,bytes)": {
                "params": {
                  "hash": "The contenthash to set",
                  "node": "The node to update."
                }
              }
            }
          },
          "evm": {
            "bytecode": {
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "gasEstimates": null,
            "methodIdentifiers": {
              "contenthash(bytes32)": "bc1c58d1",
              "setContenthash(bytes32,bytes)": "304e6ade",
              "supportsInterface(bytes4)": "01ffc9a7"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.5.17+commit.d19bba13\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"hash\",\"type\":\"bytes\"}],\"name\":\"ContenthashChanged\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"contenthash\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"hash\",\"type\":\"bytes\"}],\"name\":\"setContenthash\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"contenthash(bytes32)\":{\"params\":{\"node\":\"The ENS node to query.\"},\"return\":\"The associated contenthash.\"},\"setContenthash(bytes32,bytes)\":{\"params\":{\"hash\":\"The contenthash to set\",\"node\":\"The node to update.\"}}}},\"userdoc\":{\"methods\":{\"contenthash(bytes32)\":{\"notice\":\"Returns the contenthash associated with an ENS node.\"},\"setContenthash(bytes32,bytes)\":{\"notice\":\"Sets the contenthash associated with an ENS node. May only be called by the owner of that node in the ENS registry.\"}}}},\"settings\":{\"compilationTarget\":{\"contracts/legacy/PublicResolver_mainnet_9412610.sol\":\"ContentHashResolver\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"contracts/legacy/PublicResolver_mainnet_9412610.sol\":{\"content\":\"/**\\n *Submitted for verification at Etherscan.io on 2020-02-03\\n */\\n\\n// File: @ensdomains/ens/contracts/ENS.sol\\n\\npragma solidity >=0.4.24;\\n\\ninterface ENS {\\n  // Logged when the owner of a node assigns a new owner to a subnode.\\n  event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n  // Logged when the owner of a node transfers ownership to a new account.\\n  event Transfer(bytes32 indexed node, address owner);\\n\\n  // Logged when the resolver for a node changes.\\n  event NewResolver(bytes32 indexed node, address resolver);\\n\\n  // Logged when the TTL of a node changes\\n  event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n  function setSubnodeOwner(\\n    bytes32 node,\\n    bytes32 label,\\n    address owner\\n  ) external;\\n\\n  function setResolver(bytes32 node, address resolver) external;\\n\\n  function setOwner(bytes32 node, address owner) external;\\n\\n  function setTTL(bytes32 node, uint64 ttl) external;\\n\\n  function owner(bytes32 node) external view returns (address);\\n\\n  function resolver(bytes32 node) external view returns (address);\\n\\n  function ttl(bytes32 node) external view returns (uint64);\\n}\\n\\n// File: contracts/ResolverBase.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract ResolverBase {\\n  bytes4 private constant INTERFACE_META_ID = 0x01ffc9a7;\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return interfaceID == INTERFACE_META_ID;\\n  }\\n\\n  function isAuthorised(bytes32 node) internal view returns (bool);\\n\\n  modifier authorised(bytes32 node) {\\n    require(isAuthorised(node));\\n    _;\\n  }\\n\\n  function bytesToAddress(bytes memory b)\\n    internal\\n    pure\\n    returns (address payable a)\\n  {\\n    require(b.length == 20);\\n    assembly {\\n      a := div(mload(add(b, 32)), exp(256, 12))\\n    }\\n  }\\n\\n  function addressToBytes(address a) internal pure returns (bytes memory b) {\\n    b = new bytes(20);\\n    assembly {\\n      mstore(add(b, 32), mul(a, exp(256, 12)))\\n    }\\n  }\\n}\\n\\n// File: contracts/profiles/ABIResolver.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract ABIResolver is ResolverBase {\\n  bytes4 private constant ABI_INTERFACE_ID = 0x2203ab56;\\n\\n  event ABIChanged(bytes32 indexed node, uint256 indexed contentType);\\n\\n  mapping(bytes32 => mapping(uint256 => bytes)) abis;\\n\\n  /**\\n   * Sets the ABI associated with an ENS node.\\n   * Nodes may have one ABI of each content type. To remove an ABI, set it to\\n   * the empty string.\\n   * @param node The node to update.\\n   * @param contentType The content type of the ABI\\n   * @param data The ABI data.\\n   */\\n  function setABI(\\n    bytes32 node,\\n    uint256 contentType,\\n    bytes calldata data\\n  ) external authorised(node) {\\n    // Content types must be powers of 2\\n    require(((contentType - 1) & contentType) == 0);\\n\\n    abis[node][contentType] = data;\\n    emit ABIChanged(node, contentType);\\n  }\\n\\n  /**\\n   * Returns the ABI associated with an ENS node.\\n   * Defined in EIP205.\\n   * @param node The ENS node to query\\n   * @param contentTypes A bitwise OR of the ABI formats accepted by the caller.\\n   * @return contentType The content type of the return value\\n   * @return data The ABI data\\n   */\\n  function ABI(bytes32 node, uint256 contentTypes)\\n    external\\n    view\\n    returns (uint256, bytes memory)\\n  {\\n    mapping(uint256 => bytes) storage abiset = abis[node];\\n\\n    for (\\n      uint256 contentType = 1;\\n      contentType <= contentTypes;\\n      contentType <<= 1\\n    ) {\\n      if ((contentType & contentTypes) != 0 && abiset[contentType].length > 0) {\\n        return (contentType, abiset[contentType]);\\n      }\\n    }\\n\\n    return (0, bytes(''));\\n  }\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return\\n      interfaceID == ABI_INTERFACE_ID || super.supportsInterface(interfaceID);\\n  }\\n}\\n\\n// File: contracts/profiles/AddrResolver.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract AddrResolver is ResolverBase {\\n  bytes4 private constant ADDR_INTERFACE_ID = 0x3b3b57de;\\n  bytes4 private constant ADDRESS_INTERFACE_ID = 0xf1cb7e06;\\n  uint256 private constant COIN_TYPE_ETH = 60;\\n\\n  event AddrChanged(bytes32 indexed node, address a);\\n  event AddressChanged(\\n    bytes32 indexed node,\\n    uint256 coinType,\\n    bytes newAddress\\n  );\\n\\n  mapping(bytes32 => mapping(uint256 => bytes)) _addresses;\\n\\n  /**\\n   * Sets the address associated with an ENS node.\\n   * May only be called by the owner of that node in the ENS registry.\\n   * @param node The node to update.\\n   * @param a The address to set.\\n   */\\n  function setAddr(bytes32 node, address a) external authorised(node) {\\n    setAddr(node, COIN_TYPE_ETH, addressToBytes(a));\\n  }\\n\\n  /**\\n   * Returns the address associated with an ENS node.\\n   * @param node The ENS node to query.\\n   * @return The associated address.\\n   */\\n  function addr(bytes32 node) public view returns (address payable) {\\n    bytes memory a = addr(node, COIN_TYPE_ETH);\\n    if (a.length == 0) {\\n      return address(0);\\n    }\\n    return bytesToAddress(a);\\n  }\\n\\n  function setAddr(\\n    bytes32 node,\\n    uint256 coinType,\\n    bytes memory a\\n  ) public authorised(node) {\\n    emit AddressChanged(node, coinType, a);\\n    if (coinType == COIN_TYPE_ETH) {\\n      emit AddrChanged(node, bytesToAddress(a));\\n    }\\n    _addresses[node][coinType] = a;\\n  }\\n\\n  function addr(bytes32 node, uint256 coinType)\\n    public\\n    view\\n    returns (bytes memory)\\n  {\\n    return _addresses[node][coinType];\\n  }\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return\\n      interfaceID == ADDR_INTERFACE_ID ||\\n      interfaceID == ADDRESS_INTERFACE_ID ||\\n      super.supportsInterface(interfaceID);\\n  }\\n}\\n\\n// File: contracts/profiles/ContentHashResolver.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract ContentHashResolver is ResolverBase {\\n  bytes4 private constant CONTENT_HASH_INTERFACE_ID = 0xbc1c58d1;\\n\\n  event ContenthashChanged(bytes32 indexed node, bytes hash);\\n\\n  mapping(bytes32 => bytes) hashes;\\n\\n  /**\\n   * Sets the contenthash associated with an ENS node.\\n   * May only be called by the owner of that node in the ENS registry.\\n   * @param node The node to update.\\n   * @param hash The contenthash to set\\n   */\\n  function setContenthash(bytes32 node, bytes calldata hash)\\n    external\\n    authorised(node)\\n  {\\n    hashes[node] = hash;\\n    emit ContenthashChanged(node, hash);\\n  }\\n\\n  /**\\n   * Returns the contenthash associated with an ENS node.\\n   * @param node The ENS node to query.\\n   * @return The associated contenthash.\\n   */\\n  function contenthash(bytes32 node) external view returns (bytes memory) {\\n    return hashes[node];\\n  }\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return\\n      interfaceID == CONTENT_HASH_INTERFACE_ID ||\\n      super.supportsInterface(interfaceID);\\n  }\\n}\\n\\n// File: @ensdomains/dnssec-oracle/contracts/BytesUtils.sol\\n\\npragma solidity >0.4.23;\\n\\nlibrary BytesUtils {\\n  /*\\n   * @dev Returns the keccak-256 hash of a byte range.\\n   * @param self The byte string to hash.\\n   * @param offset The position to start hashing at.\\n   * @param len The number of bytes to hash.\\n   * @return The hash of the byte range.\\n   */\\n  function keccak(\\n    bytes memory self,\\n    uint256 offset,\\n    uint256 len\\n  ) internal pure returns (bytes32 ret) {\\n    require(offset + len <= self.length);\\n    assembly {\\n      ret := keccak256(add(add(self, 32), offset), len)\\n    }\\n  }\\n\\n  /*\\n   * @dev Returns a positive number if `other` comes lexicographically after\\n   *      `self`, a negative number if it comes before, or zero if the\\n   *      contents of the two bytes are equal.\\n   * @param self The first bytes to compare.\\n   * @param other The second bytes to compare.\\n   * @return The result of the comparison.\\n   */\\n  function compare(bytes memory self, bytes memory other)\\n    internal\\n    pure\\n    returns (int256)\\n  {\\n    return compare(self, 0, self.length, other, 0, other.length);\\n  }\\n\\n  /*\\n   * @dev Returns a positive number if `other` comes lexicographically after\\n   *      `self`, a negative number if it comes before, or zero if the\\n   *      contents of the two bytes are equal. Comparison is done per-rune,\\n   *      on unicode codepoints.\\n   * @param self The first bytes to compare.\\n   * @param offset The offset of self.\\n   * @param len    The length of self.\\n   * @param other The second bytes to compare.\\n   * @param otheroffset The offset of the other string.\\n   * @param otherlen    The length of the other string.\\n   * @return The result of the comparison.\\n   */\\n  function compare(\\n    bytes memory self,\\n    uint256 offset,\\n    uint256 len,\\n    bytes memory other,\\n    uint256 otheroffset,\\n    uint256 otherlen\\n  ) internal pure returns (int256) {\\n    uint256 shortest = len;\\n    if (otherlen < len) shortest = otherlen;\\n\\n    uint256 selfptr;\\n    uint256 otherptr;\\n\\n    assembly {\\n      selfptr := add(self, add(offset, 32))\\n      otherptr := add(other, add(otheroffset, 32))\\n    }\\n    for (uint256 idx = 0; idx < shortest; idx += 32) {\\n      uint256 a;\\n      uint256 b;\\n      assembly {\\n        a := mload(selfptr)\\n        b := mload(otherptr)\\n      }\\n      if (a != b) {\\n        // Mask out irrelevant bytes and check again\\n        uint256 mask;\\n        if (shortest > 32) {\\n          mask = uint256(-1); // aka 0xffffff....\\n        } else {\\n          mask = ~(2**(8 * (32 - shortest + idx)) - 1);\\n        }\\n        uint256 diff = (a & mask) - (b & mask);\\n        if (diff != 0) return int256(diff);\\n      }\\n      selfptr += 32;\\n      otherptr += 32;\\n    }\\n\\n    return int256(len) - int256(otherlen);\\n  }\\n\\n  /*\\n   * @dev Returns true if the two byte ranges are equal.\\n   * @param self The first byte range to compare.\\n   * @param offset The offset into the first byte range.\\n   * @param other The second byte range to compare.\\n   * @param otherOffset The offset into the second byte range.\\n   * @param len The number of bytes to compare\\n   * @return True if the byte ranges are equal, false otherwise.\\n   */\\n  function equals(\\n    bytes memory self,\\n    uint256 offset,\\n    bytes memory other,\\n    uint256 otherOffset,\\n    uint256 len\\n  ) internal pure returns (bool) {\\n    return keccak(self, offset, len) == keccak(other, otherOffset, len);\\n  }\\n\\n  /*\\n   * @dev Returns true if the two byte ranges are equal with offsets.\\n   * @param self The first byte range to compare.\\n   * @param offset The offset into the first byte range.\\n   * @param other The second byte range to compare.\\n   * @param otherOffset The offset into the second byte range.\\n   * @return True if the byte ranges are equal, false otherwise.\\n   */\\n  function equals(\\n    bytes memory self,\\n    uint256 offset,\\n    bytes memory other,\\n    uint256 otherOffset\\n  ) internal pure returns (bool) {\\n    return\\n      keccak(self, offset, self.length - offset) ==\\n      keccak(other, otherOffset, other.length - otherOffset);\\n  }\\n\\n  /*\\n   * @dev Compares a range of 'self' to all of 'other' and returns True iff\\n   *      they are equal.\\n   * @param self The first byte range to compare.\\n   * @param offset The offset into the first byte range.\\n   * @param other The second byte range to compare.\\n   * @return True if the byte ranges are equal, false otherwise.\\n   */\\n  function equals(\\n    bytes memory self,\\n    uint256 offset,\\n    bytes memory other\\n  ) internal pure returns (bool) {\\n    return\\n      self.length >= offset + other.length &&\\n      equals(self, offset, other, 0, other.length);\\n  }\\n\\n  /*\\n   * @dev Returns true if the two byte ranges are equal.\\n   * @param self The first byte range to compare.\\n   * @param other The second byte range to compare.\\n   * @return True if the byte ranges are equal, false otherwise.\\n   */\\n  function equals(bytes memory self, bytes memory other)\\n    internal\\n    pure\\n    returns (bool)\\n  {\\n    return\\n      self.length == other.length && equals(self, 0, other, 0, self.length);\\n  }\\n\\n  /*\\n   * @dev Returns the 8-bit number at the specified index of self.\\n   * @param self The byte string.\\n   * @param idx The index into the bytes\\n   * @return The specified 8 bits of the string, interpreted as an integer.\\n   */\\n  function readUint8(bytes memory self, uint256 idx)\\n    internal\\n    pure\\n    returns (uint8 ret)\\n  {\\n    return uint8(self[idx]);\\n  }\\n\\n  /*\\n   * @dev Returns the 16-bit number at the specified index of self.\\n   * @param self The byte string.\\n   * @param idx The index into the bytes\\n   * @return The specified 16 bits of the string, interpreted as an integer.\\n   */\\n  function readUint16(bytes memory self, uint256 idx)\\n    internal\\n    pure\\n    returns (uint16 ret)\\n  {\\n    require(idx + 2 <= self.length);\\n    assembly {\\n      ret := and(mload(add(add(self, 2), idx)), 0xFFFF)\\n    }\\n  }\\n\\n  /*\\n   * @dev Returns the 32-bit number at the specified index of self.\\n   * @param self The byte string.\\n   * @param idx The index into the bytes\\n   * @return The specified 32 bits of the string, interpreted as an integer.\\n   */\\n  function readUint32(bytes memory self, uint256 idx)\\n    internal\\n    pure\\n    returns (uint32 ret)\\n  {\\n    require(idx + 4 <= self.length);\\n    assembly {\\n      ret := and(mload(add(add(self, 4), idx)), 0xFFFFFFFF)\\n    }\\n  }\\n\\n  /*\\n   * @dev Returns the 32 byte value at the specified index of self.\\n   * @param self The byte string.\\n   * @param idx The index into the bytes\\n   * @return The specified 32 bytes of the string.\\n   */\\n  function readBytes32(bytes memory self, uint256 idx)\\n    internal\\n    pure\\n    returns (bytes32 ret)\\n  {\\n    require(idx + 32 <= self.length);\\n    assembly {\\n      ret := mload(add(add(self, 32), idx))\\n    }\\n  }\\n\\n  /*\\n   * @dev Returns the 32 byte value at the specified index of self.\\n   * @param self The byte string.\\n   * @param idx The index into the bytes\\n   * @return The specified 32 bytes of the string.\\n   */\\n  function readBytes20(bytes memory self, uint256 idx)\\n    internal\\n    pure\\n    returns (bytes20 ret)\\n  {\\n    require(idx + 20 <= self.length);\\n    assembly {\\n      ret := and(\\n        mload(add(add(self, 32), idx)),\\n        0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000\\n      )\\n    }\\n  }\\n\\n  /*\\n   * @dev Returns the n byte value at the specified index of self.\\n   * @param self The byte string.\\n   * @param idx The index into the bytes.\\n   * @param len The number of bytes.\\n   * @return The specified 32 bytes of the string.\\n   */\\n  function readBytesN(\\n    bytes memory self,\\n    uint256 idx,\\n    uint256 len\\n  ) internal pure returns (bytes32 ret) {\\n    require(len <= 32);\\n    require(idx + len <= self.length);\\n    assembly {\\n      let mask := not(sub(exp(256, sub(32, len)), 1))\\n      ret := and(mload(add(add(self, 32), idx)), mask)\\n    }\\n  }\\n\\n  function memcpy(\\n    uint256 dest,\\n    uint256 src,\\n    uint256 len\\n  ) private pure {\\n    // Copy word-length chunks while possible\\n    for (; len >= 32; len -= 32) {\\n      assembly {\\n        mstore(dest, mload(src))\\n      }\\n      dest += 32;\\n      src += 32;\\n    }\\n\\n    // Copy remaining bytes\\n    uint256 mask = 256**(32 - len) - 1;\\n    assembly {\\n      let srcpart := and(mload(src), not(mask))\\n      let destpart := and(mload(dest), mask)\\n      mstore(dest, or(destpart, srcpart))\\n    }\\n  }\\n\\n  /*\\n   * @dev Copies a substring into a new byte string.\\n   * @param self The byte string to copy from.\\n   * @param offset The offset to start copying at.\\n   * @param len The number of bytes to copy.\\n   */\\n  function substring(\\n    bytes memory self,\\n    uint256 offset,\\n    uint256 len\\n  ) internal pure returns (bytes memory) {\\n    require(offset + len <= self.length);\\n\\n    bytes memory ret = new bytes(len);\\n    uint256 dest;\\n    uint256 src;\\n\\n    assembly {\\n      dest := add(ret, 32)\\n      src := add(add(self, 32), offset)\\n    }\\n    memcpy(dest, src, len);\\n\\n    return ret;\\n  }\\n\\n  // Maps characters from 0x30 to 0x7A to their base32 values.\\n  // 0xFF represents invalid characters in that range.\\n  bytes constant base32HexTable =\\n    hex'00010203040506070809FFFFFFFFFFFFFF0A0B0C0D0E0F101112131415161718191A1B1C1D1E1FFFFFFFFFFFFFFFFFFFFF0A0B0C0D0E0F101112131415161718191A1B1C1D1E1F';\\n\\n  /**\\n   * @dev Decodes unpadded base32 data of up to one word in length.\\n   * @param self The data to decode.\\n   * @param off Offset into the string to start at.\\n   * @param len Number of characters to decode.\\n   * @return The decoded data, left aligned.\\n   */\\n  function base32HexDecodeWord(\\n    bytes memory self,\\n    uint256 off,\\n    uint256 len\\n  ) internal pure returns (bytes32) {\\n    require(len <= 52);\\n\\n    uint256 ret = 0;\\n    uint8 decoded;\\n    for (uint256 i = 0; i < len; i++) {\\n      bytes1 char = self[off + i];\\n      require(char >= 0x30 && char <= 0x7A);\\n      decoded = uint8(base32HexTable[uint256(uint8(char)) - 0x30]);\\n      require(decoded <= 0x20);\\n      if (i == len - 1) {\\n        break;\\n      }\\n      ret = (ret << 5) | decoded;\\n    }\\n\\n    uint256 bitlen = len * 5;\\n    if (len % 8 == 0) {\\n      // Multiple of 8 characters, no padding\\n      ret = (ret << 5) | decoded;\\n    } else if (len % 8 == 2) {\\n      // Two extra characters - 1 byte\\n      ret = (ret << 3) | (decoded >> 2);\\n      bitlen -= 2;\\n    } else if (len % 8 == 4) {\\n      // Four extra characters - 2 bytes\\n      ret = (ret << 1) | (decoded >> 4);\\n      bitlen -= 4;\\n    } else if (len % 8 == 5) {\\n      // Five extra characters - 3 bytes\\n      ret = (ret << 4) | (decoded >> 1);\\n      bitlen -= 1;\\n    } else if (len % 8 == 7) {\\n      // Seven extra characters - 4 bytes\\n      ret = (ret << 2) | (decoded >> 3);\\n      bitlen -= 3;\\n    } else {\\n      revert();\\n    }\\n\\n    return bytes32(ret << (256 - bitlen));\\n  }\\n}\\n\\n// File: @ensdomains/buffer/contracts/Buffer.sol\\n\\npragma solidity >0.4.18;\\n\\n/**\\n * @dev A library for working with mutable byte buffers in Solidity.\\n *\\n * Byte buffers are mutable and expandable, and provide a variety of primitives\\n * for writing to them. At any time you can fetch a bytes object containing the\\n * current contents of the buffer. The bytes object should not be stored between\\n * operations, as it may change due to resizing of the buffer.\\n */\\nlibrary Buffer {\\n  /**\\n   * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n   *      a capacity. The capacity may be longer than the current value, in\\n   *      which case it can be extended without the need to allocate more memory.\\n   */\\n  struct buffer {\\n    bytes buf;\\n    uint256 capacity;\\n  }\\n\\n  /**\\n   * @dev Initializes a buffer with an initial capacity.\\n   * @param buf The buffer to initialize.\\n   * @param capacity The number of bytes of space to allocate the buffer.\\n   * @return The buffer, for chaining.\\n   */\\n  function init(buffer memory buf, uint256 capacity)\\n    internal\\n    pure\\n    returns (buffer memory)\\n  {\\n    if (capacity % 32 != 0) {\\n      capacity += 32 - (capacity % 32);\\n    }\\n    // Allocate space for the buffer data\\n    buf.capacity = capacity;\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(buf, ptr)\\n      mstore(ptr, 0)\\n      mstore(0x40, add(32, add(ptr, capacity)))\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Initializes a new buffer from an existing bytes object.\\n   *      Changes to the buffer may mutate the original value.\\n   * @param b The bytes object to initialize the buffer with.\\n   * @return A new buffer.\\n   */\\n  function fromBytes(bytes memory b) internal pure returns (buffer memory) {\\n    buffer memory buf;\\n    buf.buf = b;\\n    buf.capacity = b.length;\\n    return buf;\\n  }\\n\\n  function resize(buffer memory buf, uint256 capacity) private pure {\\n    bytes memory oldbuf = buf.buf;\\n    init(buf, capacity);\\n    append(buf, oldbuf);\\n  }\\n\\n  function max(uint256 a, uint256 b) private pure returns (uint256) {\\n    if (a > b) {\\n      return a;\\n    }\\n    return b;\\n  }\\n\\n  /**\\n   * @dev Sets buffer length to 0.\\n   * @param buf The buffer to truncate.\\n   * @return The original buffer, for chaining..\\n   */\\n  function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n    assembly {\\n      let bufptr := mload(buf)\\n      mstore(bufptr, 0)\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Writes a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The start offset to write to.\\n   * @param data The data to append.\\n   * @param len The number of bytes to copy.\\n   * @return The original buffer, for chaining.\\n   */\\n  function write(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes memory data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    require(len <= data.length);\\n\\n    if (off + len > buf.capacity) {\\n      resize(buf, max(buf.capacity, len + off) * 2);\\n    }\\n\\n    uint256 dest;\\n    uint256 src;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Start address = buffer address + offset + sizeof(buffer length)\\n      dest := add(add(bufptr, 32), off)\\n      // Update buffer length if we're extending it\\n      if gt(add(len, off), buflen) {\\n        mstore(bufptr, add(len, off))\\n      }\\n      src := add(data, 32)\\n    }\\n\\n    // Copy word-length chunks while possible\\n    for (; len >= 32; len -= 32) {\\n      assembly {\\n        mstore(dest, mload(src))\\n      }\\n      dest += 32;\\n      src += 32;\\n    }\\n\\n    // Copy remaining bytes\\n    uint256 mask = 256**(32 - len) - 1;\\n    assembly {\\n      let srcpart := and(mload(src), not(mask))\\n      let destpart := and(mload(dest), mask)\\n      mstore(dest, or(destpart, srcpart))\\n    }\\n\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @param len The number of bytes to copy.\\n   * @return The original buffer, for chaining.\\n   */\\n  function append(\\n    buffer memory buf,\\n    bytes memory data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, len);\\n  }\\n\\n  /**\\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function append(buffer memory buf, bytes memory data)\\n    internal\\n    pure\\n    returns (buffer memory)\\n  {\\n    return write(buf, buf.buf.length, data, data.length);\\n  }\\n\\n  /**\\n   * @dev Writes a byte to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write the byte at.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeUint8(\\n    buffer memory buf,\\n    uint256 off,\\n    uint8 data\\n  ) internal pure returns (buffer memory) {\\n    if (off >= buf.capacity) {\\n      resize(buf, buf.capacity * 2);\\n    }\\n\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Address = buffer address + sizeof(buffer length) + off\\n      let dest := add(add(bufptr, off), 32)\\n      mstore8(dest, data)\\n      // Update buffer length if we extended it\\n      if eq(off, buflen) {\\n        mstore(bufptr, add(buflen, 1))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function appendUint8(buffer memory buf, uint8 data)\\n    internal\\n    pure\\n    returns (buffer memory)\\n  {\\n    return writeUint8(buf, buf.buf.length, data);\\n  }\\n\\n  /**\\n   * @dev Writes up to 32 bytes to the buffer. Resizes if doing so would\\n   *      exceed the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @param len The number of bytes to write (left-aligned).\\n   * @return The original buffer, for chaining.\\n   */\\n  function write(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes32 data,\\n    uint256 len\\n  ) private pure returns (buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    uint256 mask = 256**len - 1;\\n    // Right-align data\\n    data = data >> (8 * (32 - len));\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Address = buffer address + sizeof(buffer length) + off + len\\n      let dest := add(add(bufptr, off), len)\\n      mstore(dest, or(and(mload(dest), not(mask)), data))\\n      // Update buffer length if we extended it\\n      if gt(add(off, len), mload(bufptr)) {\\n        mstore(bufptr, add(off, len))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Writes a bytes20 to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeBytes20(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes20 data\\n  ) internal pure returns (buffer memory) {\\n    return write(buf, off, bytes32(data), 20);\\n  }\\n\\n  /**\\n   * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chhaining.\\n   */\\n  function appendBytes20(buffer memory buf, bytes20 data)\\n    internal\\n    pure\\n    returns (buffer memory)\\n  {\\n    return write(buf, buf.buf.length, bytes32(data), 20);\\n  }\\n\\n  /**\\n   * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function appendBytes32(buffer memory buf, bytes32 data)\\n    internal\\n    pure\\n    returns (buffer memory)\\n  {\\n    return write(buf, buf.buf.length, data, 32);\\n  }\\n\\n  /**\\n   * @dev Writes an integer to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @param len The number of bytes to write (right-aligned).\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeInt(\\n    buffer memory buf,\\n    uint256 off,\\n    uint256 data,\\n    uint256 len\\n  ) private pure returns (buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    uint256 mask = 256**len - 1;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Address = buffer address + off + sizeof(buffer length) + len\\n      let dest := add(add(bufptr, off), len)\\n      mstore(dest, or(and(mload(dest), not(mask)), data))\\n      // Update buffer length if we extended it\\n      if gt(add(off, len), mload(bufptr)) {\\n        mstore(bufptr, add(off, len))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n   * exceed the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer.\\n   */\\n  function appendInt(\\n    buffer memory buf,\\n    uint256 data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    return writeInt(buf, buf.buf.length, data, len);\\n  }\\n}\\n\\n// File: @ensdomains/dnssec-oracle/contracts/RRUtils.sol\\n\\npragma solidity >0.4.23;\\n\\n/**\\n * @dev RRUtils is a library that provides utilities for parsing DNS resource records.\\n */\\nlibrary RRUtils {\\n  using BytesUtils for *;\\n  using Buffer for *;\\n\\n  /**\\n   * @dev Returns the number of bytes in the DNS name at 'offset' in 'self'.\\n   * @param self The byte array to read a name from.\\n   * @param offset The offset to start reading at.\\n   * @return The length of the DNS name at 'offset', in bytes.\\n   */\\n  function nameLength(bytes memory self, uint256 offset)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    uint256 idx = offset;\\n    while (true) {\\n      assert(idx < self.length);\\n      uint256 labelLen = self.readUint8(idx);\\n      idx += labelLen + 1;\\n      if (labelLen == 0) {\\n        break;\\n      }\\n    }\\n    return idx - offset;\\n  }\\n\\n  /**\\n   * @dev Returns a DNS format name at the specified offset of self.\\n   * @param self The byte array to read a name from.\\n   * @param offset The offset to start reading at.\\n   * @return The name.\\n   */\\n  function readName(bytes memory self, uint256 offset)\\n    internal\\n    pure\\n    returns (bytes memory ret)\\n  {\\n    uint256 len = nameLength(self, offset);\\n    return self.substring(offset, len);\\n  }\\n\\n  /**\\n   * @dev Returns the number of labels in the DNS name at 'offset' in 'self'.\\n   * @param self The byte array to read a name from.\\n   * @param offset The offset to start reading at.\\n   * @return The number of labels in the DNS name at 'offset', in bytes.\\n   */\\n  function labelCount(bytes memory self, uint256 offset)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    uint256 count = 0;\\n    while (true) {\\n      assert(offset < self.length);\\n      uint256 labelLen = self.readUint8(offset);\\n      offset += labelLen + 1;\\n      if (labelLen == 0) {\\n        break;\\n      }\\n      count += 1;\\n    }\\n    return count;\\n  }\\n\\n  /**\\n   * @dev An iterator over resource records.\\n   */\\n  struct RRIterator {\\n    bytes data;\\n    uint256 offset;\\n    uint16 dnstype;\\n    uint16 class;\\n    uint32 ttl;\\n    uint256 rdataOffset;\\n    uint256 nextOffset;\\n  }\\n\\n  /**\\n   * @dev Begins iterating over resource records.\\n   * @param self The byte string to read from.\\n   * @param offset The offset to start reading at.\\n   * @return An iterator object.\\n   */\\n  function iterateRRs(bytes memory self, uint256 offset)\\n    internal\\n    pure\\n    returns (RRIterator memory ret)\\n  {\\n    ret.data = self;\\n    ret.nextOffset = offset;\\n    next(ret);\\n  }\\n\\n  /**\\n   * @dev Returns true iff there are more RRs to iterate.\\n   * @param iter The iterator to check.\\n   * @return True iff the iterator has finished.\\n   */\\n  function done(RRIterator memory iter) internal pure returns (bool) {\\n    return iter.offset >= iter.data.length;\\n  }\\n\\n  /**\\n   * @dev Moves the iterator to the next resource record.\\n   * @param iter The iterator to advance.\\n   */\\n  function next(RRIterator memory iter) internal pure {\\n    iter.offset = iter.nextOffset;\\n    if (iter.offset >= iter.data.length) {\\n      return;\\n    }\\n\\n    // Skip the name\\n    uint256 off = iter.offset + nameLength(iter.data, iter.offset);\\n\\n    // Read type, class, and ttl\\n    iter.dnstype = iter.data.readUint16(off);\\n    off += 2;\\n    iter.class = iter.data.readUint16(off);\\n    off += 2;\\n    iter.ttl = iter.data.readUint32(off);\\n    off += 4;\\n\\n    // Read the rdata\\n    uint256 rdataLength = iter.data.readUint16(off);\\n    off += 2;\\n    iter.rdataOffset = off;\\n    iter.nextOffset = off + rdataLength;\\n  }\\n\\n  /**\\n   * @dev Returns the name of the current record.\\n   * @param iter The iterator.\\n   * @return A new bytes object containing the owner name from the RR.\\n   */\\n  function name(RRIterator memory iter) internal pure returns (bytes memory) {\\n    return iter.data.substring(iter.offset, nameLength(iter.data, iter.offset));\\n  }\\n\\n  /**\\n   * @dev Returns the rdata portion of the current record.\\n   * @param iter The iterator.\\n   * @return A new bytes object containing the RR's RDATA.\\n   */\\n  function rdata(RRIterator memory iter) internal pure returns (bytes memory) {\\n    return\\n      iter.data.substring(iter.rdataOffset, iter.nextOffset - iter.rdataOffset);\\n  }\\n\\n  /**\\n   * @dev Checks if a given RR type exists in a type bitmap.\\n   * @param self The byte string to read the type bitmap from.\\n   * @param offset The offset to start reading at.\\n   * @param rrtype The RR type to check for.\\n   * @return True if the type is found in the bitmap, false otherwise.\\n   */\\n  function checkTypeBitmap(\\n    bytes memory self,\\n    uint256 offset,\\n    uint16 rrtype\\n  ) internal pure returns (bool) {\\n    uint8 typeWindow = uint8(rrtype >> 8);\\n    uint8 windowByte = uint8((rrtype & 0xff) / 8);\\n    uint8 windowBitmask = uint8(uint8(1) << (uint8(7) - uint8(rrtype & 0x7)));\\n    for (uint256 off = offset; off < self.length; ) {\\n      uint8 window = self.readUint8(off);\\n      uint8 len = self.readUint8(off + 1);\\n      if (typeWindow < window) {\\n        // We've gone past our window; it's not here.\\n        return false;\\n      } else if (typeWindow == window) {\\n        // Check this type bitmap\\n        if (len * 8 <= windowByte) {\\n          // Our type is past the end of the bitmap\\n          return false;\\n        }\\n        return (self.readUint8(off + windowByte + 2) & windowBitmask) != 0;\\n      } else {\\n        // Skip this type bitmap\\n        off += len + 2;\\n      }\\n    }\\n\\n    return false;\\n  }\\n\\n  function compareNames(bytes memory self, bytes memory other)\\n    internal\\n    pure\\n    returns (int256)\\n  {\\n    if (self.equals(other)) {\\n      return 0;\\n    }\\n\\n    uint256 off;\\n    uint256 otheroff;\\n    uint256 prevoff;\\n    uint256 otherprevoff;\\n    uint256 counts = labelCount(self, 0);\\n    uint256 othercounts = labelCount(other, 0);\\n\\n    // Keep removing labels from the front of the name until both names are equal length\\n    while (counts > othercounts) {\\n      prevoff = off;\\n      off = progress(self, off);\\n      counts--;\\n    }\\n\\n    while (othercounts > counts) {\\n      otherprevoff = otheroff;\\n      otheroff = progress(other, otheroff);\\n      othercounts--;\\n    }\\n\\n    // Compare the last nonequal labels to each other\\n    while (counts > 0 && !self.equals(off, other, otheroff)) {\\n      prevoff = off;\\n      off = progress(self, off);\\n      otherprevoff = otheroff;\\n      otheroff = progress(other, otheroff);\\n      counts -= 1;\\n    }\\n\\n    if (off == 0) {\\n      return -1;\\n    }\\n    if (otheroff == 0) {\\n      return 1;\\n    }\\n\\n    return\\n      self.compare(\\n        prevoff + 1,\\n        self.readUint8(prevoff),\\n        other,\\n        otherprevoff + 1,\\n        other.readUint8(otherprevoff)\\n      );\\n  }\\n\\n  function progress(bytes memory body, uint256 off)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    return off + 1 + body.readUint8(off);\\n  }\\n}\\n\\n// File: contracts/profiles/DNSResolver.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract DNSResolver is ResolverBase {\\n  using RRUtils for *;\\n  using BytesUtils for bytes;\\n\\n  bytes4 private constant DNS_RECORD_INTERFACE_ID = 0xa8fa5682;\\n\\n  // DNSRecordChanged is emitted whenever a given node/name/resource's RRSET is updated.\\n  event DNSRecordChanged(\\n    bytes32 indexed node,\\n    bytes name,\\n    uint16 resource,\\n    bytes record\\n  );\\n  // DNSRecordDeleted is emitted whenever a given node/name/resource's RRSET is deleted.\\n  event DNSRecordDeleted(bytes32 indexed node, bytes name, uint16 resource);\\n  // DNSZoneCleared is emitted whenever a given node's zone information is cleared.\\n  event DNSZoneCleared(bytes32 indexed node);\\n\\n  // Version the mapping for each zone.  This allows users who have lost\\n  // track of their entries to effectively delete an entire zone by bumping\\n  // the version number.\\n  // node => version\\n  mapping(bytes32 => uint256) private versions;\\n\\n  // The records themselves.  Stored as binary RRSETs\\n  // node => version => name => resource => data\\n  mapping(bytes32 => mapping(uint256 => mapping(bytes32 => mapping(uint16 => bytes))))\\n    private records;\\n\\n  // Count of number of entries for a given name.  Required for DNS resolvers\\n  // when resolving wildcards.\\n  // node => version => name => number of records\\n  mapping(bytes32 => mapping(uint256 => mapping(bytes32 => uint16)))\\n    private nameEntriesCount;\\n\\n  /**\\n   * Set one or more DNS records.  Records are supplied in wire-format.\\n   * Records with the same node/name/resource must be supplied one after the\\n   * other to ensure the data is updated correctly. For example, if the data\\n   * was supplied:\\n   *     a.example.com IN A 1.2.3.4\\n   *     a.example.com IN A 5.6.7.8\\n   *     www.example.com IN CNAME a.example.com.\\n   * then this would store the two A records for a.example.com correctly as a\\n   * single RRSET, however if the data was supplied:\\n   *     a.example.com IN A 1.2.3.4\\n   *     www.example.com IN CNAME a.example.com.\\n   *     a.example.com IN A 5.6.7.8\\n   * then this would store the first A record, the CNAME, then the second A\\n   * record which would overwrite the first.\\n   *\\n   * @param node the namehash of the node for which to set the records\\n   * @param data the DNS wire format records to set\\n   */\\n  function setDNSRecords(bytes32 node, bytes calldata data)\\n    external\\n    authorised(node)\\n  {\\n    uint16 resource = 0;\\n    uint256 offset = 0;\\n    bytes memory name;\\n    bytes memory value;\\n    bytes32 nameHash;\\n    // Iterate over the data to add the resource records\\n    for (\\n      RRUtils.RRIterator memory iter = data.iterateRRs(0);\\n      !iter.done();\\n      iter.next()\\n    ) {\\n      if (resource == 0) {\\n        resource = iter.dnstype;\\n        name = iter.name();\\n        nameHash = keccak256(abi.encodePacked(name));\\n        value = bytes(iter.rdata());\\n      } else {\\n        bytes memory newName = iter.name();\\n        if (resource != iter.dnstype || !name.equals(newName)) {\\n          setDNSRRSet(\\n            node,\\n            name,\\n            resource,\\n            data,\\n            offset,\\n            iter.offset - offset,\\n            value.length == 0\\n          );\\n          resource = iter.dnstype;\\n          offset = iter.offset;\\n          name = newName;\\n          nameHash = keccak256(name);\\n          value = bytes(iter.rdata());\\n        }\\n      }\\n    }\\n    if (name.length > 0) {\\n      setDNSRRSet(\\n        node,\\n        name,\\n        resource,\\n        data,\\n        offset,\\n        data.length - offset,\\n        value.length == 0\\n      );\\n    }\\n  }\\n\\n  /**\\n   * Obtain a DNS record.\\n   * @param node the namehash of the node for which to fetch the record\\n   * @param name the keccak-256 hash of the fully-qualified name for which to fetch the record\\n   * @param resource the ID of the resource as per https://en.wikipedia.org/wiki/List_of_DNS_record_types\\n   * @return the DNS record in wire format if present, otherwise empty\\n   */\\n  function dnsRecord(\\n    bytes32 node,\\n    bytes32 name,\\n    uint16 resource\\n  ) public view returns (bytes memory) {\\n    return records[node][versions[node]][name][resource];\\n  }\\n\\n  /**\\n   * Check if a given node has records.\\n   * @param node the namehash of the node for which to check the records\\n   * @param name the namehash of the node for which to check the records\\n   */\\n  function hasDNSRecords(bytes32 node, bytes32 name)\\n    public\\n    view\\n    returns (bool)\\n  {\\n    return (nameEntriesCount[node][versions[node]][name] != 0);\\n  }\\n\\n  /**\\n   * Clear all information for a DNS zone.\\n   * @param node the namehash of the node for which to clear the zone\\n   */\\n  function clearDNSZone(bytes32 node) public authorised(node) {\\n    versions[node]++;\\n    emit DNSZoneCleared(node);\\n  }\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return\\n      interfaceID == DNS_RECORD_INTERFACE_ID ||\\n      super.supportsInterface(interfaceID);\\n  }\\n\\n  function setDNSRRSet(\\n    bytes32 node,\\n    bytes memory name,\\n    uint16 resource,\\n    bytes memory data,\\n    uint256 offset,\\n    uint256 size,\\n    bool deleteRecord\\n  ) private {\\n    uint256 version = versions[node];\\n    bytes32 nameHash = keccak256(name);\\n    bytes memory rrData = data.substring(offset, size);\\n    if (deleteRecord) {\\n      if (records[node][version][nameHash][resource].length != 0) {\\n        nameEntriesCount[node][version][nameHash]--;\\n      }\\n      delete (records[node][version][nameHash][resource]);\\n      emit DNSRecordDeleted(node, name, resource);\\n    } else {\\n      if (records[node][version][nameHash][resource].length == 0) {\\n        nameEntriesCount[node][version][nameHash]++;\\n      }\\n      records[node][version][nameHash][resource] = rrData;\\n      emit DNSRecordChanged(node, name, resource, rrData);\\n    }\\n  }\\n}\\n\\n// File: contracts/profiles/InterfaceResolver.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract InterfaceResolver is ResolverBase, AddrResolver {\\n  bytes4 private constant INTERFACE_INTERFACE_ID =\\n    bytes4(keccak256('interfaceImplementer(bytes32,bytes4)'));\\n  bytes4 private constant INTERFACE_META_ID = 0x01ffc9a7;\\n\\n  event InterfaceChanged(\\n    bytes32 indexed node,\\n    bytes4 indexed interfaceID,\\n    address implementer\\n  );\\n\\n  mapping(bytes32 => mapping(bytes4 => address)) interfaces;\\n\\n  /**\\n   * Sets an interface associated with a name.\\n   * Setting the address to 0 restores the default behaviour of querying the contract at `addr()` for interface support.\\n   * @param node The node to update.\\n   * @param interfaceID The EIP 168 interface ID.\\n   * @param implementer The address of a contract that implements this interface for this node.\\n   */\\n  function setInterface(\\n    bytes32 node,\\n    bytes4 interfaceID,\\n    address implementer\\n  ) external authorised(node) {\\n    interfaces[node][interfaceID] = implementer;\\n    emit InterfaceChanged(node, interfaceID, implementer);\\n  }\\n\\n  /**\\n   * Returns the address of a contract that implements the specified interface for this name.\\n   * If an implementer has not been set for this interfaceID and name, the resolver will query\\n   * the contract at `addr()`. If `addr()` is set, a contract exists at that address, and that\\n   * contract implements EIP168 and returns `true` for the specified interfaceID, its address\\n   * will be returned.\\n   * @param node The ENS node to query.\\n   * @param interfaceID The EIP 168 interface ID to check for.\\n   * @return The address that implements this interface, or 0 if the interface is unsupported.\\n   */\\n  function interfaceImplementer(bytes32 node, bytes4 interfaceID)\\n    external\\n    view\\n    returns (address)\\n  {\\n    address implementer = interfaces[node][interfaceID];\\n    if (implementer != address(0)) {\\n      return implementer;\\n    }\\n\\n    address a = addr(node);\\n    if (a == address(0)) {\\n      return address(0);\\n    }\\n\\n    (bool success, bytes memory returnData) = a.staticcall(\\n      abi.encodeWithSignature('supportsInterface(bytes4)', INTERFACE_META_ID)\\n    );\\n    if (!success || returnData.length < 32 || returnData[31] == 0) {\\n      // EIP 168 not supported by target\\n      return address(0);\\n    }\\n\\n    (success, returnData) = a.staticcall(\\n      abi.encodeWithSignature('supportsInterface(bytes4)', interfaceID)\\n    );\\n    if (!success || returnData.length < 32 || returnData[31] == 0) {\\n      // Specified interface not supported by target\\n      return address(0);\\n    }\\n\\n    return a;\\n  }\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return\\n      interfaceID == INTERFACE_INTERFACE_ID ||\\n      super.supportsInterface(interfaceID);\\n  }\\n}\\n\\n// File: contracts/profiles/NameResolver.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract NameResolver is ResolverBase {\\n  bytes4 private constant NAME_INTERFACE_ID = 0x691f3431;\\n\\n  event NameChanged(bytes32 indexed node, string name);\\n\\n  mapping(bytes32 => string) names;\\n\\n  /**\\n   * Sets the name associated with an ENS node, for reverse records.\\n   * May only be called by the owner of that node in the ENS registry.\\n   * @param node The node to update.\\n   * @param name The name to set.\\n   */\\n  function setName(bytes32 node, string calldata name)\\n    external\\n    authorised(node)\\n  {\\n    names[node] = name;\\n    emit NameChanged(node, name);\\n  }\\n\\n  /**\\n   * Returns the name associated with an ENS node, for reverse records.\\n   * Defined in EIP181.\\n   * @param node The ENS node to query.\\n   * @return The associated name.\\n   */\\n  function name(bytes32 node) external view returns (string memory) {\\n    return names[node];\\n  }\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return\\n      interfaceID == NAME_INTERFACE_ID || super.supportsInterface(interfaceID);\\n  }\\n}\\n\\n// File: contracts/profiles/PubkeyResolver.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract PubkeyResolver is ResolverBase {\\n  bytes4 private constant PUBKEY_INTERFACE_ID = 0xc8690233;\\n\\n  event PubkeyChanged(bytes32 indexed node, bytes32 x, bytes32 y);\\n\\n  struct PublicKey {\\n    bytes32 x;\\n    bytes32 y;\\n  }\\n\\n  mapping(bytes32 => PublicKey) pubkeys;\\n\\n  /**\\n   * Sets the SECP256k1 public key associated with an ENS node.\\n   * @param node The ENS node to query\\n   * @param x the X coordinate of the curve point for the public key.\\n   * @param y the Y coordinate of the curve point for the public key.\\n   */\\n  function setPubkey(\\n    bytes32 node,\\n    bytes32 x,\\n    bytes32 y\\n  ) external authorised(node) {\\n    pubkeys[node] = PublicKey(x, y);\\n    emit PubkeyChanged(node, x, y);\\n  }\\n\\n  /**\\n   * Returns the SECP256k1 public key associated with an ENS node.\\n   * Defined in EIP 619.\\n   * @param node The ENS node to query\\n   * @return x, y the X and Y coordinates of the curve point for the public key.\\n   */\\n  function pubkey(bytes32 node) external view returns (bytes32 x, bytes32 y) {\\n    return (pubkeys[node].x, pubkeys[node].y);\\n  }\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return\\n      interfaceID == PUBKEY_INTERFACE_ID ||\\n      super.supportsInterface(interfaceID);\\n  }\\n}\\n\\n// File: contracts/profiles/TextResolver.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract TextResolver is ResolverBase {\\n  bytes4 private constant TEXT_INTERFACE_ID = 0x59d1d43c;\\n\\n  event TextChanged(\\n    bytes32 indexed node,\\n    string indexed indexedKey,\\n    string key\\n  );\\n\\n  mapping(bytes32 => mapping(string => string)) texts;\\n\\n  /**\\n   * Sets the text data associated with an ENS node and key.\\n   * May only be called by the owner of that node in the ENS registry.\\n   * @param node The node to update.\\n   * @param key The key to set.\\n   * @param value The text data value to set.\\n   */\\n  function setText(\\n    bytes32 node,\\n    string calldata key,\\n    string calldata value\\n  ) external authorised(node) {\\n    texts[node][key] = value;\\n    emit TextChanged(node, key, key);\\n  }\\n\\n  /**\\n   * Returns the text data associated with an ENS node and key.\\n   * @param node The ENS node to query.\\n   * @param key The text data key to query.\\n   * @return The associated text data.\\n   */\\n  function text(bytes32 node, string calldata key)\\n    external\\n    view\\n    returns (string memory)\\n  {\\n    return texts[node][key];\\n  }\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return\\n      interfaceID == TEXT_INTERFACE_ID || super.supportsInterface(interfaceID);\\n  }\\n}\\n\\n// File: contracts/PublicResolver.sol\\n\\npragma solidity ^0.5.0;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * A simple resolver anyone can use; only allows the owner of a node to set its\\n * address.\\n */\\ncontract PublicResolver_mainnet_9412610 is\\n  ABIResolver,\\n  AddrResolver,\\n  ContentHashResolver,\\n  DNSResolver,\\n  InterfaceResolver,\\n  NameResolver,\\n  PubkeyResolver,\\n  TextResolver\\n{\\n  ENS ens;\\n\\n  /**\\n   * A mapping of authorisations. An address that is authorised for a name\\n   * may make any changes to the name that the owner could, but may not update\\n   * the set of authorisations.\\n   * (node, owner, caller) => isAuthorised\\n   */\\n  mapping(bytes32 => mapping(address => mapping(address => bool)))\\n    public authorisations;\\n\\n  event AuthorisationChanged(\\n    bytes32 indexed node,\\n    address indexed owner,\\n    address indexed target,\\n    bool isAuthorised\\n  );\\n\\n  constructor(ENS _ens) public {\\n    ens = _ens;\\n  }\\n\\n  /**\\n   * @dev Sets or clears an authorisation.\\n   * Authorisations are specific to the caller. Any account can set an authorisation\\n   * for any name, but the authorisation that is checked will be that of the\\n   * current owner of a name. Thus, transferring a name effectively clears any\\n   * existing authorisations, and new authorisations can be set in advance of\\n   * an ownership transfer if desired.\\n   *\\n   * @param node The name to change the authorisation on.\\n   * @param target The address that is to be authorised or deauthorised.\\n   * @param isAuthorised True if the address should be authorised, or false if it should be deauthorised.\\n   */\\n  function setAuthorisation(\\n    bytes32 node,\\n    address target,\\n    bool isAuthorised\\n  ) external {\\n    authorisations[node][msg.sender][target] = isAuthorised;\\n    emit AuthorisationChanged(node, msg.sender, target, isAuthorised);\\n  }\\n\\n  function isAuthorised(bytes32 node) internal view returns (bool) {\\n    address owner = ens.owner(node);\\n    return owner == msg.sender || authorisations[node][owner][msg.sender];\\n  }\\n\\n  function multicall(bytes[] calldata data)\\n    external\\n    returns (bytes[] memory results)\\n  {\\n    results = new bytes[](data.length);\\n    for (uint256 i = 0; i < data.length; i++) {\\n      (bool success, bytes memory result) = address(this).delegatecall(data[i]);\\n      require(success);\\n      results[i] = result;\\n    }\\n    return results;\\n  }\\n}\\n\",\"keccak256\":\"0x29ca7d322ab7177f187f9bfc310e6dfc94049e9beaaafe958bead081fd90ad76\"}},\"version\":1}",
          "storageLayout": {
            "storage": [
              {
                "astId": 454,
                "contract": "contracts/legacy/PublicResolver_mainnet_9412610.sol:ContentHashResolver",
                "label": "hashes",
                "offset": 0,
                "slot": "0",
                "type": "t_mapping(t_bytes32,t_bytes_storage)"
              }
            ],
            "types": {
              "t_bytes32": {
                "encoding": "inplace",
                "label": "bytes32",
                "numberOfBytes": "32"
              },
              "t_bytes_storage": {
                "encoding": "bytes",
                "label": "bytes",
                "numberOfBytes": "32"
              },
              "t_mapping(t_bytes32,t_bytes_storage)": {
                "encoding": "mapping",
                "key": "t_bytes32",
                "label": "mapping(bytes32 => bytes)",
                "numberOfBytes": "32",
                "value": "t_bytes_storage"
              }
            }
          },
          "userdoc": {
            "methods": {
              "contenthash(bytes32)": {
                "notice": "Returns the contenthash associated with an ENS node."
              },
              "setContenthash(bytes32,bytes)": {
                "notice": "Sets the contenthash associated with an ENS node. May only be called by the owner of that node in the ENS registry."
              }
            }
          }
        },
        "DNSResolver": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "node",
                  "type": "bytes32"
                },
                {
                  "indexed": false,
                  "internalType": "bytes",
                  "name": "name",
                  "type": "bytes"
                },
                {
                  "indexed": false,
                  "internalType": "uint16",
                  "name": "resource",
                  "type": "uint16"
                },
                {
                  "indexed": false,
                  "internalType": "bytes",
                  "name": "record",
                  "type": "bytes"
                }
              ],
              "name": "DNSRecordChanged",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "node",
                  "type": "bytes32"
                },
                {
                  "indexed": false,
                  "internalType": "bytes",
                  "name": "name",
                  "type": "bytes"
                },
                {
                  "indexed": false,
                  "internalType": "uint16",
                  "name": "resource",
                  "type": "uint16"
                }
              ],
              "name": "DNSRecordDeleted",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "node",
                  "type": "bytes32"
                }
              ],
              "name": "DNSZoneCleared",
              "type": "event"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "node",
                  "type": "bytes32"
                }
              ],
              "name": "clearDNSZone",
              "outputs": [],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "node",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "name",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint16",
                  "name": "resource",
                  "type": "uint16"
                }
              ],
              "name": "dnsRecord",
              "outputs": [
                {
                  "internalType": "bytes",
                  "name": "",
                  "type": "bytes"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "node",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "name",
                  "type": "bytes32"
                }
              ],
              "name": "hasDNSRecords",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "node",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ],
              "name": "setDNSRecords",
              "outputs": [],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [
                {
                  "internalType": "bytes4",
                  "name": "interfaceID",
                  "type": "bytes4"
                }
              ],
              "name": "supportsInterface",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "payable": false,
              "stateMutability": "pure",
              "type": "function"
            }
          ],
          "devdoc": {
            "methods": {
              "clearDNSZone(bytes32)": {
                "params": {
                  "node": "the namehash of the node for which to clear the zone"
                }
              },
              "dnsRecord(bytes32,bytes32,uint16)": {
                "params": {
                  "name": "the keccak-256 hash of the fully-qualified name for which to fetch the record",
                  "node": "the namehash of the node for which to fetch the record",
                  "resource": "the ID of the resource as per https://en.wikipedia.org/wiki/List_of_DNS_record_types"
                },
                "return": "the DNS record in wire format if present, otherwise empty"
              },
              "hasDNSRecords(bytes32,bytes32)": {
                "params": {
                  "name": "the namehash of the node for which to check the records",
                  "node": "the namehash of the node for which to check the records"
                }
              },
              "setDNSRecords(bytes32,bytes)": {
                "params": {
                  "data": "the DNS wire format records to set",
                  "node": "the namehash of the node for which to set the records"
                }
              }
            }
          },
          "evm": {
            "bytecode": {
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "gasEstimates": null,
            "methodIdentifiers": {
              "clearDNSZone(bytes32)": "ad5780af",
              "dnsRecord(bytes32,bytes32,uint16)": "a8fa5682",
              "hasDNSRecords(bytes32,bytes32)": "4cbf6ba4",
              "setDNSRecords(bytes32,bytes)": "0af179d7",
              "supportsInterface(bytes4)": "01ffc9a7"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.5.17+commit.d19bba13\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"resource\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"record\",\"type\":\"bytes\"}],\"name\":\"DNSRecordChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"resource\",\"type\":\"uint16\"}],\"name\":\"DNSRecordDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"DNSZoneCleared\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"clearDNSZone\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"resource\",\"type\":\"uint16\"}],\"name\":\"dnsRecord\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"hasDNSRecords\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"setDNSRecords\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"clearDNSZone(bytes32)\":{\"params\":{\"node\":\"the namehash of the node for which to clear the zone\"}},\"dnsRecord(bytes32,bytes32,uint16)\":{\"params\":{\"name\":\"the keccak-256 hash of the fully-qualified name for which to fetch the record\",\"node\":\"the namehash of the node for which to fetch the record\",\"resource\":\"the ID of the resource as per https://en.wikipedia.org/wiki/List_of_DNS_record_types\"},\"return\":\"the DNS record in wire format if present, otherwise empty\"},\"hasDNSRecords(bytes32,bytes32)\":{\"params\":{\"name\":\"the namehash of the node for which to check the records\",\"node\":\"the namehash of the node for which to check the records\"}},\"setDNSRecords(bytes32,bytes)\":{\"params\":{\"data\":\"the DNS wire format records to set\",\"node\":\"the namehash of the node for which to set the records\"}}}},\"userdoc\":{\"methods\":{\"clearDNSZone(bytes32)\":{\"notice\":\"Clear all information for a DNS zone.\"},\"dnsRecord(bytes32,bytes32,uint16)\":{\"notice\":\"Obtain a DNS record.\"},\"hasDNSRecords(bytes32,bytes32)\":{\"notice\":\"Check if a given node has records.\"},\"setDNSRecords(bytes32,bytes)\":{\"notice\":\"Set one or more DNS records.  Records are supplied in wire-format. Records with the same node/name/resource must be supplied one after the other to ensure the data is updated correctly. For example, if the data was supplied:    a.example.com IN A 1.2.3.4    a.example.com IN A 5.6.7.8    www.example.com IN CNAME a.example.com. then this would store the two A records for a.example.com correctly as a single RRSET, however if the data was supplied:    a.example.com IN A 1.2.3.4    www.example.com IN CNAME a.example.com.    a.example.com IN A 5.6.7.8 then this would store the first A record, the CNAME, then the second A record which would overwrite the first.\"}}}},\"settings\":{\"compilationTarget\":{\"contracts/legacy/PublicResolver_mainnet_9412610.sol\":\"DNSResolver\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"contracts/legacy/PublicResolver_mainnet_9412610.sol\":{\"content\":\"/**\\n *Submitted for verification at Etherscan.io on 2020-02-03\\n */\\n\\n// File: @ensdomains/ens/contracts/ENS.sol\\n\\npragma solidity >=0.4.24;\\n\\ninterface ENS {\\n  // Logged when the owner of a node assigns a new owner to a subnode.\\n  event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n  // Logged when the owner of a node transfers ownership to a new account.\\n  event Transfer(bytes32 indexed node, address owner);\\n\\n  // Logged when the resolver for a node changes.\\n  event NewResolver(bytes32 indexed node, address resolver);\\n\\n  // Logged when the TTL of a node changes\\n  event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n  function setSubnodeOwner(\\n    bytes32 node,\\n    bytes32 label,\\n    address owner\\n  ) external;\\n\\n  function setResolver(bytes32 node, address resolver) external;\\n\\n  function setOwner(bytes32 node, address owner) external;\\n\\n  function setTTL(bytes32 node, uint64 ttl) external;\\n\\n  function owner(bytes32 node) external view returns (address);\\n\\n  function resolver(bytes32 node) external view returns (address);\\n\\n  function ttl(bytes32 node) external view returns (uint64);\\n}\\n\\n// File: contracts/ResolverBase.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract ResolverBase {\\n  bytes4 private constant INTERFACE_META_ID = 0x01ffc9a7;\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return interfaceID == INTERFACE_META_ID;\\n  }\\n\\n  function isAuthorised(bytes32 node) internal view returns (bool);\\n\\n  modifier authorised(bytes32 node) {\\n    require(isAuthorised(node));\\n    _;\\n  }\\n\\n  function bytesToAddress(bytes memory b)\\n    internal\\n    pure\\n    returns (address payable a)\\n  {\\n    require(b.length == 20);\\n    assembly {\\n      a := div(mload(add(b, 32)), exp(256, 12))\\n    }\\n  }\\n\\n  function addressToBytes(address a) internal pure returns (bytes memory b) {\\n    b = new bytes(20);\\n    assembly {\\n      mstore(add(b, 32), mul(a, exp(256, 12)))\\n    }\\n  }\\n}\\n\\n// File: contracts/profiles/ABIResolver.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract ABIResolver is ResolverBase {\\n  bytes4 private constant ABI_INTERFACE_ID = 0x2203ab56;\\n\\n  event ABIChanged(bytes32 indexed node, uint256 indexed contentType);\\n\\n  mapping(bytes32 => mapping(uint256 => bytes)) abis;\\n\\n  /**\\n   * Sets the ABI associated with an ENS node.\\n   * Nodes may have one ABI of each content type. To remove an ABI, set it to\\n   * the empty string.\\n   * @param node The node to update.\\n   * @param contentType The content type of the ABI\\n   * @param data The ABI data.\\n   */\\n  function setABI(\\n    bytes32 node,\\n    uint256 contentType,\\n    bytes calldata data\\n  ) external authorised(node) {\\n    // Content types must be powers of 2\\n    require(((contentType - 1) & contentType) == 0);\\n\\n    abis[node][contentType] = data;\\n    emit ABIChanged(node, contentType);\\n  }\\n\\n  /**\\n   * Returns the ABI associated with an ENS node.\\n   * Defined in EIP205.\\n   * @param node The ENS node to query\\n   * @param contentTypes A bitwise OR of the ABI formats accepted by the caller.\\n   * @return contentType The content type of the return value\\n   * @return data The ABI data\\n   */\\n  function ABI(bytes32 node, uint256 contentTypes)\\n    external\\n    view\\n    returns (uint256, bytes memory)\\n  {\\n    mapping(uint256 => bytes) storage abiset = abis[node];\\n\\n    for (\\n      uint256 contentType = 1;\\n      contentType <= contentTypes;\\n      contentType <<= 1\\n    ) {\\n      if ((contentType & contentTypes) != 0 && abiset[contentType].length > 0) {\\n        return (contentType, abiset[contentType]);\\n      }\\n    }\\n\\n    return (0, bytes(''));\\n  }\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return\\n      interfaceID == ABI_INTERFACE_ID || super.supportsInterface(interfaceID);\\n  }\\n}\\n\\n// File: contracts/profiles/AddrResolver.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract AddrResolver is ResolverBase {\\n  bytes4 private constant ADDR_INTERFACE_ID = 0x3b3b57de;\\n  bytes4 private constant ADDRESS_INTERFACE_ID = 0xf1cb7e06;\\n  uint256 private constant COIN_TYPE_ETH = 60;\\n\\n  event AddrChanged(bytes32 indexed node, address a);\\n  event AddressChanged(\\n    bytes32 indexed node,\\n    uint256 coinType,\\n    bytes newAddress\\n  );\\n\\n  mapping(bytes32 => mapping(uint256 => bytes)) _addresses;\\n\\n  /**\\n   * Sets the address associated with an ENS node.\\n   * May only be called by the owner of that node in the ENS registry.\\n   * @param node The node to update.\\n   * @param a The address to set.\\n   */\\n  function setAddr(bytes32 node, address a) external authorised(node) {\\n    setAddr(node, COIN_TYPE_ETH, addressToBytes(a));\\n  }\\n\\n  /**\\n   * Returns the address associated with an ENS node.\\n   * @param node The ENS node to query.\\n   * @return The associated address.\\n   */\\n  function addr(bytes32 node) public view returns (address payable) {\\n    bytes memory a = addr(node, COIN_TYPE_ETH);\\n    if (a.length == 0) {\\n      return address(0);\\n    }\\n    return bytesToAddress(a);\\n  }\\n\\n  function setAddr(\\n    bytes32 node,\\n    uint256 coinType,\\n    bytes memory a\\n  ) public authorised(node) {\\n    emit AddressChanged(node, coinType, a);\\n    if (coinType == COIN_TYPE_ETH) {\\n      emit AddrChanged(node, bytesToAddress(a));\\n    }\\n    _addresses[node][coinType] = a;\\n  }\\n\\n  function addr(bytes32 node, uint256 coinType)\\n    public\\n    view\\n    returns (bytes memory)\\n  {\\n    return _addresses[node][coinType];\\n  }\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return\\n      interfaceID == ADDR_INTERFACE_ID ||\\n      interfaceID == ADDRESS_INTERFACE_ID ||\\n      super.supportsInterface(interfaceID);\\n  }\\n}\\n\\n// File: contracts/profiles/ContentHashResolver.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract ContentHashResolver is ResolverBase {\\n  bytes4 private constant CONTENT_HASH_INTERFACE_ID = 0xbc1c58d1;\\n\\n  event ContenthashChanged(bytes32 indexed node, bytes hash);\\n\\n  mapping(bytes32 => bytes) hashes;\\n\\n  /**\\n   * Sets the contenthash associated with an ENS node.\\n   * May only be called by the owner of that node in the ENS registry.\\n   * @param node The node to update.\\n   * @param hash The contenthash to set\\n   */\\n  function setContenthash(bytes32 node, bytes calldata hash)\\n    external\\n    authorised(node)\\n  {\\n    hashes[node] = hash;\\n    emit ContenthashChanged(node, hash);\\n  }\\n\\n  /**\\n   * Returns the contenthash associated with an ENS node.\\n   * @param node The ENS node to query.\\n   * @return The associated contenthash.\\n   */\\n  function contenthash(bytes32 node) external view returns (bytes memory) {\\n    return hashes[node];\\n  }\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return\\n      interfaceID == CONTENT_HASH_INTERFACE_ID ||\\n      super.supportsInterface(interfaceID);\\n  }\\n}\\n\\n// File: @ensdomains/dnssec-oracle/contracts/BytesUtils.sol\\n\\npragma solidity >0.4.23;\\n\\nlibrary BytesUtils {\\n  /*\\n   * @dev Returns the keccak-256 hash of a byte range.\\n   * @param self The byte string to hash.\\n   * @param offset The position to start hashing at.\\n   * @param len The number of bytes to hash.\\n   * @return The hash of the byte range.\\n   */\\n  function keccak(\\n    bytes memory self,\\n    uint256 offset,\\n    uint256 len\\n  ) internal pure returns (bytes32 ret) {\\n    require(offset + len <= self.length);\\n    assembly {\\n      ret := keccak256(add(add(self, 32), offset), len)\\n    }\\n  }\\n\\n  /*\\n   * @dev Returns a positive number if `other` comes lexicographically after\\n   *      `self`, a negative number if it comes before, or zero if the\\n   *      contents of the two bytes are equal.\\n   * @param self The first bytes to compare.\\n   * @param other The second bytes to compare.\\n   * @return The result of the comparison.\\n   */\\n  function compare(bytes memory self, bytes memory other)\\n    internal\\n    pure\\n    returns (int256)\\n  {\\n    return compare(self, 0, self.length, other, 0, other.length);\\n  }\\n\\n  /*\\n   * @dev Returns a positive number if `other` comes lexicographically after\\n   *      `self`, a negative number if it comes before, or zero if the\\n   *      contents of the two bytes are equal. Comparison is done per-rune,\\n   *      on unicode codepoints.\\n   * @param self The first bytes to compare.\\n   * @param offset The offset of self.\\n   * @param len    The length of self.\\n   * @param other The second bytes to compare.\\n   * @param otheroffset The offset of the other string.\\n   * @param otherlen    The length of the other string.\\n   * @return The result of the comparison.\\n   */\\n  function compare(\\n    bytes memory self,\\n    uint256 offset,\\n    uint256 len,\\n    bytes memory other,\\n    uint256 otheroffset,\\n    uint256 otherlen\\n  ) internal pure returns (int256) {\\n    uint256 shortest = len;\\n    if (otherlen < len) shortest = otherlen;\\n\\n    uint256 selfptr;\\n    uint256 otherptr;\\n\\n    assembly {\\n      selfptr := add(self, add(offset, 32))\\n      otherptr := add(other, add(otheroffset, 32))\\n    }\\n    for (uint256 idx = 0; idx < shortest; idx += 32) {\\n      uint256 a;\\n      uint256 b;\\n      assembly {\\n        a := mload(selfptr)\\n        b := mload(otherptr)\\n      }\\n      if (a != b) {\\n        // Mask out irrelevant bytes and check again\\n        uint256 mask;\\n        if (shortest > 32) {\\n          mask = uint256(-1); // aka 0xffffff....\\n        } else {\\n          mask = ~(2**(8 * (32 - shortest + idx)) - 1);\\n        }\\n        uint256 diff = (a & mask) - (b & mask);\\n        if (diff != 0) return int256(diff);\\n      }\\n      selfptr += 32;\\n      otherptr += 32;\\n    }\\n\\n    return int256(len) - int256(otherlen);\\n  }\\n\\n  /*\\n   * @dev Returns true if the two byte ranges are equal.\\n   * @param self The first byte range to compare.\\n   * @param offset The offset into the first byte range.\\n   * @param other The second byte range to compare.\\n   * @param otherOffset The offset into the second byte range.\\n   * @param len The number of bytes to compare\\n   * @return True if the byte ranges are equal, false otherwise.\\n   */\\n  function equals(\\n    bytes memory self,\\n    uint256 offset,\\n    bytes memory other,\\n    uint256 otherOffset,\\n    uint256 len\\n  ) internal pure returns (bool) {\\n    return keccak(self, offset, len) == keccak(other, otherOffset, len);\\n  }\\n\\n  /*\\n   * @dev Returns true if the two byte ranges are equal with offsets.\\n   * @param self The first byte range to compare.\\n   * @param offset The offset into the first byte range.\\n   * @param other The second byte range to compare.\\n   * @param otherOffset The offset into the second byte range.\\n   * @return True if the byte ranges are equal, false otherwise.\\n   */\\n  function equals(\\n    bytes memory self,\\n    uint256 offset,\\n    bytes memory other,\\n    uint256 otherOffset\\n  ) internal pure returns (bool) {\\n    return\\n      keccak(self, offset, self.length - offset) ==\\n      keccak(other, otherOffset, other.length - otherOffset);\\n  }\\n\\n  /*\\n   * @dev Compares a range of 'self' to all of 'other' and returns True iff\\n   *      they are equal.\\n   * @param self The first byte range to compare.\\n   * @param offset The offset into the first byte range.\\n   * @param other The second byte range to compare.\\n   * @return True if the byte ranges are equal, false otherwise.\\n   */\\n  function equals(\\n    bytes memory self,\\n    uint256 offset,\\n    bytes memory other\\n  ) internal pure returns (bool) {\\n    return\\n      self.length >= offset + other.length &&\\n      equals(self, offset, other, 0, other.length);\\n  }\\n\\n  /*\\n   * @dev Returns true if the two byte ranges are equal.\\n   * @param self The first byte range to compare.\\n   * @param other The second byte range to compare.\\n   * @return True if the byte ranges are equal, false otherwise.\\n   */\\n  function equals(bytes memory self, bytes memory other)\\n    internal\\n    pure\\n    returns (bool)\\n  {\\n    return\\n      self.length == other.length && equals(self, 0, other, 0, self.length);\\n  }\\n\\n  /*\\n   * @dev Returns the 8-bit number at the specified index of self.\\n   * @param self The byte string.\\n   * @param idx The index into the bytes\\n   * @return The specified 8 bits of the string, interpreted as an integer.\\n   */\\n  function readUint8(bytes memory self, uint256 idx)\\n    internal\\n    pure\\n    returns (uint8 ret)\\n  {\\n    return uint8(self[idx]);\\n  }\\n\\n  /*\\n   * @dev Returns the 16-bit number at the specified index of self.\\n   * @param self The byte string.\\n   * @param idx The index into the bytes\\n   * @return The specified 16 bits of the string, interpreted as an integer.\\n   */\\n  function readUint16(bytes memory self, uint256 idx)\\n    internal\\n    pure\\n    returns (uint16 ret)\\n  {\\n    require(idx + 2 <= self.length);\\n    assembly {\\n      ret := and(mload(add(add(self, 2), idx)), 0xFFFF)\\n    }\\n  }\\n\\n  /*\\n   * @dev Returns the 32-bit number at the specified index of self.\\n   * @param self The byte string.\\n   * @param idx The index into the bytes\\n   * @return The specified 32 bits of the string, interpreted as an integer.\\n   */\\n  function readUint32(bytes memory self, uint256 idx)\\n    internal\\n    pure\\n    returns (uint32 ret)\\n  {\\n    require(idx + 4 <= self.length);\\n    assembly {\\n      ret := and(mload(add(add(self, 4), idx)), 0xFFFFFFFF)\\n    }\\n  }\\n\\n  /*\\n   * @dev Returns the 32 byte value at the specified index of self.\\n   * @param self The byte string.\\n   * @param idx The index into the bytes\\n   * @return The specified 32 bytes of the string.\\n   */\\n  function readBytes32(bytes memory self, uint256 idx)\\n    internal\\n    pure\\n    returns (bytes32 ret)\\n  {\\n    require(idx + 32 <= self.length);\\n    assembly {\\n      ret := mload(add(add(self, 32), idx))\\n    }\\n  }\\n\\n  /*\\n   * @dev Returns the 32 byte value at the specified index of self.\\n   * @param self The byte string.\\n   * @param idx The index into the bytes\\n   * @return The specified 32 bytes of the string.\\n   */\\n  function readBytes20(bytes memory self, uint256 idx)\\n    internal\\n    pure\\n    returns (bytes20 ret)\\n  {\\n    require(idx + 20 <= self.length);\\n    assembly {\\n      ret := and(\\n        mload(add(add(self, 32), idx)),\\n        0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000\\n      )\\n    }\\n  }\\n\\n  /*\\n   * @dev Returns the n byte value at the specified index of self.\\n   * @param self The byte string.\\n   * @param idx The index into the bytes.\\n   * @param len The number of bytes.\\n   * @return The specified 32 bytes of the string.\\n   */\\n  function readBytesN(\\n    bytes memory self,\\n    uint256 idx,\\n    uint256 len\\n  ) internal pure returns (bytes32 ret) {\\n    require(len <= 32);\\n    require(idx + len <= self.length);\\n    assembly {\\n      let mask := not(sub(exp(256, sub(32, len)), 1))\\n      ret := and(mload(add(add(self, 32), idx)), mask)\\n    }\\n  }\\n\\n  function memcpy(\\n    uint256 dest,\\n    uint256 src,\\n    uint256 len\\n  ) private pure {\\n    // Copy word-length chunks while possible\\n    for (; len >= 32; len -= 32) {\\n      assembly {\\n        mstore(dest, mload(src))\\n      }\\n      dest += 32;\\n      src += 32;\\n    }\\n\\n    // Copy remaining bytes\\n    uint256 mask = 256**(32 - len) - 1;\\n    assembly {\\n      let srcpart := and(mload(src), not(mask))\\n      let destpart := and(mload(dest), mask)\\n      mstore(dest, or(destpart, srcpart))\\n    }\\n  }\\n\\n  /*\\n   * @dev Copies a substring into a new byte string.\\n   * @param self The byte string to copy from.\\n   * @param offset The offset to start copying at.\\n   * @param len The number of bytes to copy.\\n   */\\n  function substring(\\n    bytes memory self,\\n    uint256 offset,\\n    uint256 len\\n  ) internal pure returns (bytes memory) {\\n    require(offset + len <= self.length);\\n\\n    bytes memory ret = new bytes(len);\\n    uint256 dest;\\n    uint256 src;\\n\\n    assembly {\\n      dest := add(ret, 32)\\n      src := add(add(self, 32), offset)\\n    }\\n    memcpy(dest, src, len);\\n\\n    return ret;\\n  }\\n\\n  // Maps characters from 0x30 to 0x7A to their base32 values.\\n  // 0xFF represents invalid characters in that range.\\n  bytes constant base32HexTable =\\n    hex'00010203040506070809FFFFFFFFFFFFFF0A0B0C0D0E0F101112131415161718191A1B1C1D1E1FFFFFFFFFFFFFFFFFFFFF0A0B0C0D0E0F101112131415161718191A1B1C1D1E1F';\\n\\n  /**\\n   * @dev Decodes unpadded base32 data of up to one word in length.\\n   * @param self The data to decode.\\n   * @param off Offset into the string to start at.\\n   * @param len Number of characters to decode.\\n   * @return The decoded data, left aligned.\\n   */\\n  function base32HexDecodeWord(\\n    bytes memory self,\\n    uint256 off,\\n    uint256 len\\n  ) internal pure returns (bytes32) {\\n    require(len <= 52);\\n\\n    uint256 ret = 0;\\n    uint8 decoded;\\n    for (uint256 i = 0; i < len; i++) {\\n      bytes1 char = self[off + i];\\n      require(char >= 0x30 && char <= 0x7A);\\n      decoded = uint8(base32HexTable[uint256(uint8(char)) - 0x30]);\\n      require(decoded <= 0x20);\\n      if (i == len - 1) {\\n        break;\\n      }\\n      ret = (ret << 5) | decoded;\\n    }\\n\\n    uint256 bitlen = len * 5;\\n    if (len % 8 == 0) {\\n      // Multiple of 8 characters, no padding\\n      ret = (ret << 5) | decoded;\\n    } else if (len % 8 == 2) {\\n      // Two extra characters - 1 byte\\n      ret = (ret << 3) | (decoded >> 2);\\n      bitlen -= 2;\\n    } else if (len % 8 == 4) {\\n      // Four extra characters - 2 bytes\\n      ret = (ret << 1) | (decoded >> 4);\\n      bitlen -= 4;\\n    } else if (len % 8 == 5) {\\n      // Five extra characters - 3 bytes\\n      ret = (ret << 4) | (decoded >> 1);\\n      bitlen -= 1;\\n    } else if (len % 8 == 7) {\\n      // Seven extra characters - 4 bytes\\n      ret = (ret << 2) | (decoded >> 3);\\n      bitlen -= 3;\\n    } else {\\n      revert();\\n    }\\n\\n    return bytes32(ret << (256 - bitlen));\\n  }\\n}\\n\\n// File: @ensdomains/buffer/contracts/Buffer.sol\\n\\npragma solidity >0.4.18;\\n\\n/**\\n * @dev A library for working with mutable byte buffers in Solidity.\\n *\\n * Byte buffers are mutable and expandable, and provide a variety of primitives\\n * for writing to them. At any time you can fetch a bytes object containing the\\n * current contents of the buffer. The bytes object should not be stored between\\n * operations, as it may change due to resizing of the buffer.\\n */\\nlibrary Buffer {\\n  /**\\n   * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n   *      a capacity. The capacity may be longer than the current value, in\\n   *      which case it can be extended without the need to allocate more memory.\\n   */\\n  struct buffer {\\n    bytes buf;\\n    uint256 capacity;\\n  }\\n\\n  /**\\n   * @dev Initializes a buffer with an initial capacity.\\n   * @param buf The buffer to initialize.\\n   * @param capacity The number of bytes of space to allocate the buffer.\\n   * @return The buffer, for chaining.\\n   */\\n  function init(buffer memory buf, uint256 capacity)\\n    internal\\n    pure\\n    returns (buffer memory)\\n  {\\n    if (capacity % 32 != 0) {\\n      capacity += 32 - (capacity % 32);\\n    }\\n    // Allocate space for the buffer data\\n    buf.capacity = capacity;\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(buf, ptr)\\n      mstore(ptr, 0)\\n      mstore(0x40, add(32, add(ptr, capacity)))\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Initializes a new buffer from an existing bytes object.\\n   *      Changes to the buffer may mutate the original value.\\n   * @param b The bytes object to initialize the buffer with.\\n   * @return A new buffer.\\n   */\\n  function fromBytes(bytes memory b) internal pure returns (buffer memory) {\\n    buffer memory buf;\\n    buf.buf = b;\\n    buf.capacity = b.length;\\n    return buf;\\n  }\\n\\n  function resize(buffer memory buf, uint256 capacity) private pure {\\n    bytes memory oldbuf = buf.buf;\\n    init(buf, capacity);\\n    append(buf, oldbuf);\\n  }\\n\\n  function max(uint256 a, uint256 b) private pure returns (uint256) {\\n    if (a > b) {\\n      return a;\\n    }\\n    return b;\\n  }\\n\\n  /**\\n   * @dev Sets buffer length to 0.\\n   * @param buf The buffer to truncate.\\n   * @return The original buffer, for chaining..\\n   */\\n  function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n    assembly {\\n      let bufptr := mload(buf)\\n      mstore(bufptr, 0)\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Writes a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The start offset to write to.\\n   * @param data The data to append.\\n   * @param len The number of bytes to copy.\\n   * @return The original buffer, for chaining.\\n   */\\n  function write(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes memory data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    require(len <= data.length);\\n\\n    if (off + len > buf.capacity) {\\n      resize(buf, max(buf.capacity, len + off) * 2);\\n    }\\n\\n    uint256 dest;\\n    uint256 src;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Start address = buffer address + offset + sizeof(buffer length)\\n      dest := add(add(bufptr, 32), off)\\n      // Update buffer length if we're extending it\\n      if gt(add(len, off), buflen) {\\n        mstore(bufptr, add(len, off))\\n      }\\n      src := add(data, 32)\\n    }\\n\\n    // Copy word-length chunks while possible\\n    for (; len >= 32; len -= 32) {\\n      assembly {\\n        mstore(dest, mload(src))\\n      }\\n      dest += 32;\\n      src += 32;\\n    }\\n\\n    // Copy remaining bytes\\n    uint256 mask = 256**(32 - len) - 1;\\n    assembly {\\n      let srcpart := and(mload(src), not(mask))\\n      let destpart := and(mload(dest), mask)\\n      mstore(dest, or(destpart, srcpart))\\n    }\\n\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @param len The number of bytes to copy.\\n   * @return The original buffer, for chaining.\\n   */\\n  function append(\\n    buffer memory buf,\\n    bytes memory data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, len);\\n  }\\n\\n  /**\\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function append(buffer memory buf, bytes memory data)\\n    internal\\n    pure\\n    returns (buffer memory)\\n  {\\n    return write(buf, buf.buf.length, data, data.length);\\n  }\\n\\n  /**\\n   * @dev Writes a byte to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write the byte at.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeUint8(\\n    buffer memory buf,\\n    uint256 off,\\n    uint8 data\\n  ) internal pure returns (buffer memory) {\\n    if (off >= buf.capacity) {\\n      resize(buf, buf.capacity * 2);\\n    }\\n\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Address = buffer address + sizeof(buffer length) + off\\n      let dest := add(add(bufptr, off), 32)\\n      mstore8(dest, data)\\n      // Update buffer length if we extended it\\n      if eq(off, buflen) {\\n        mstore(bufptr, add(buflen, 1))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function appendUint8(buffer memory buf, uint8 data)\\n    internal\\n    pure\\n    returns (buffer memory)\\n  {\\n    return writeUint8(buf, buf.buf.length, data);\\n  }\\n\\n  /**\\n   * @dev Writes up to 32 bytes to the buffer. Resizes if doing so would\\n   *      exceed the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @param len The number of bytes to write (left-aligned).\\n   * @return The original buffer, for chaining.\\n   */\\n  function write(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes32 data,\\n    uint256 len\\n  ) private pure returns (buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    uint256 mask = 256**len - 1;\\n    // Right-align data\\n    data = data >> (8 * (32 - len));\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Address = buffer address + sizeof(buffer length) + off + len\\n      let dest := add(add(bufptr, off), len)\\n      mstore(dest, or(and(mload(dest), not(mask)), data))\\n      // Update buffer length if we extended it\\n      if gt(add(off, len), mload(bufptr)) {\\n        mstore(bufptr, add(off, len))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Writes a bytes20 to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeBytes20(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes20 data\\n  ) internal pure returns (buffer memory) {\\n    return write(buf, off, bytes32(data), 20);\\n  }\\n\\n  /**\\n   * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chhaining.\\n   */\\n  function appendBytes20(buffer memory buf, bytes20 data)\\n    internal\\n    pure\\n    returns (buffer memory)\\n  {\\n    return write(buf, buf.buf.length, bytes32(data), 20);\\n  }\\n\\n  /**\\n   * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function appendBytes32(buffer memory buf, bytes32 data)\\n    internal\\n    pure\\n    returns (buffer memory)\\n  {\\n    return write(buf, buf.buf.length, data, 32);\\n  }\\n\\n  /**\\n   * @dev Writes an integer to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @param len The number of bytes to write (right-aligned).\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeInt(\\n    buffer memory buf,\\n    uint256 off,\\n    uint256 data,\\n    uint256 len\\n  ) private pure returns (buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    uint256 mask = 256**len - 1;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Address = buffer address + off + sizeof(buffer length) + len\\n      let dest := add(add(bufptr, off), len)\\n      mstore(dest, or(and(mload(dest), not(mask)), data))\\n      // Update buffer length if we extended it\\n      if gt(add(off, len), mload(bufptr)) {\\n        mstore(bufptr, add(off, len))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n   * exceed the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer.\\n   */\\n  function appendInt(\\n    buffer memory buf,\\n    uint256 data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    return writeInt(buf, buf.buf.length, data, len);\\n  }\\n}\\n\\n// File: @ensdomains/dnssec-oracle/contracts/RRUtils.sol\\n\\npragma solidity >0.4.23;\\n\\n/**\\n * @dev RRUtils is a library that provides utilities for parsing DNS resource records.\\n */\\nlibrary RRUtils {\\n  using BytesUtils for *;\\n  using Buffer for *;\\n\\n  /**\\n   * @dev Returns the number of bytes in the DNS name at 'offset' in 'self'.\\n   * @param self The byte array to read a name from.\\n   * @param offset The offset to start reading at.\\n   * @return The length of the DNS name at 'offset', in bytes.\\n   */\\n  function nameLength(bytes memory self, uint256 offset)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    uint256 idx = offset;\\n    while (true) {\\n      assert(idx < self.length);\\n      uint256 labelLen = self.readUint8(idx);\\n      idx += labelLen + 1;\\n      if (labelLen == 0) {\\n        break;\\n      }\\n    }\\n    return idx - offset;\\n  }\\n\\n  /**\\n   * @dev Returns a DNS format name at the specified offset of self.\\n   * @param self The byte array to read a name from.\\n   * @param offset The offset to start reading at.\\n   * @return The name.\\n   */\\n  function readName(bytes memory self, uint256 offset)\\n    internal\\n    pure\\n    returns (bytes memory ret)\\n  {\\n    uint256 len = nameLength(self, offset);\\n    return self.substring(offset, len);\\n  }\\n\\n  /**\\n   * @dev Returns the number of labels in the DNS name at 'offset' in 'self'.\\n   * @param self The byte array to read a name from.\\n   * @param offset The offset to start reading at.\\n   * @return The number of labels in the DNS name at 'offset', in bytes.\\n   */\\n  function labelCount(bytes memory self, uint256 offset)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    uint256 count = 0;\\n    while (true) {\\n      assert(offset < self.length);\\n      uint256 labelLen = self.readUint8(offset);\\n      offset += labelLen + 1;\\n      if (labelLen == 0) {\\n        break;\\n      }\\n      count += 1;\\n    }\\n    return count;\\n  }\\n\\n  /**\\n   * @dev An iterator over resource records.\\n   */\\n  struct RRIterator {\\n    bytes data;\\n    uint256 offset;\\n    uint16 dnstype;\\n    uint16 class;\\n    uint32 ttl;\\n    uint256 rdataOffset;\\n    uint256 nextOffset;\\n  }\\n\\n  /**\\n   * @dev Begins iterating over resource records.\\n   * @param self The byte string to read from.\\n   * @param offset The offset to start reading at.\\n   * @return An iterator object.\\n   */\\n  function iterateRRs(bytes memory self, uint256 offset)\\n    internal\\n    pure\\n    returns (RRIterator memory ret)\\n  {\\n    ret.data = self;\\n    ret.nextOffset = offset;\\n    next(ret);\\n  }\\n\\n  /**\\n   * @dev Returns true iff there are more RRs to iterate.\\n   * @param iter The iterator to check.\\n   * @return True iff the iterator has finished.\\n   */\\n  function done(RRIterator memory iter) internal pure returns (bool) {\\n    return iter.offset >= iter.data.length;\\n  }\\n\\n  /**\\n   * @dev Moves the iterator to the next resource record.\\n   * @param iter The iterator to advance.\\n   */\\n  function next(RRIterator memory iter) internal pure {\\n    iter.offset = iter.nextOffset;\\n    if (iter.offset >= iter.data.length) {\\n      return;\\n    }\\n\\n    // Skip the name\\n    uint256 off = iter.offset + nameLength(iter.data, iter.offset);\\n\\n    // Read type, class, and ttl\\n    iter.dnstype = iter.data.readUint16(off);\\n    off += 2;\\n    iter.class = iter.data.readUint16(off);\\n    off += 2;\\n    iter.ttl = iter.data.readUint32(off);\\n    off += 4;\\n\\n    // Read the rdata\\n    uint256 rdataLength = iter.data.readUint16(off);\\n    off += 2;\\n    iter.rdataOffset = off;\\n    iter.nextOffset = off + rdataLength;\\n  }\\n\\n  /**\\n   * @dev Returns the name of the current record.\\n   * @param iter The iterator.\\n   * @return A new bytes object containing the owner name from the RR.\\n   */\\n  function name(RRIterator memory iter) internal pure returns (bytes memory) {\\n    return iter.data.substring(iter.offset, nameLength(iter.data, iter.offset));\\n  }\\n\\n  /**\\n   * @dev Returns the rdata portion of the current record.\\n   * @param iter The iterator.\\n   * @return A new bytes object containing the RR's RDATA.\\n   */\\n  function rdata(RRIterator memory iter) internal pure returns (bytes memory) {\\n    return\\n      iter.data.substring(iter.rdataOffset, iter.nextOffset - iter.rdataOffset);\\n  }\\n\\n  /**\\n   * @dev Checks if a given RR type exists in a type bitmap.\\n   * @param self The byte string to read the type bitmap from.\\n   * @param offset The offset to start reading at.\\n   * @param rrtype The RR type to check for.\\n   * @return True if the type is found in the bitmap, false otherwise.\\n   */\\n  function checkTypeBitmap(\\n    bytes memory self,\\n    uint256 offset,\\n    uint16 rrtype\\n  ) internal pure returns (bool) {\\n    uint8 typeWindow = uint8(rrtype >> 8);\\n    uint8 windowByte = uint8((rrtype & 0xff) / 8);\\n    uint8 windowBitmask = uint8(uint8(1) << (uint8(7) - uint8(rrtype & 0x7)));\\n    for (uint256 off = offset; off < self.length; ) {\\n      uint8 window = self.readUint8(off);\\n      uint8 len = self.readUint8(off + 1);\\n      if (typeWindow < window) {\\n        // We've gone past our window; it's not here.\\n        return false;\\n      } else if (typeWindow == window) {\\n        // Check this type bitmap\\n        if (len * 8 <= windowByte) {\\n          // Our type is past the end of the bitmap\\n          return false;\\n        }\\n        return (self.readUint8(off + windowByte + 2) & windowBitmask) != 0;\\n      } else {\\n        // Skip this type bitmap\\n        off += len + 2;\\n      }\\n    }\\n\\n    return false;\\n  }\\n\\n  function compareNames(bytes memory self, bytes memory other)\\n    internal\\n    pure\\n    returns (int256)\\n  {\\n    if (self.equals(other)) {\\n      return 0;\\n    }\\n\\n    uint256 off;\\n    uint256 otheroff;\\n    uint256 prevoff;\\n    uint256 otherprevoff;\\n    uint256 counts = labelCount(self, 0);\\n    uint256 othercounts = labelCount(other, 0);\\n\\n    // Keep removing labels from the front of the name until both names are equal length\\n    while (counts > othercounts) {\\n      prevoff = off;\\n      off = progress(self, off);\\n      counts--;\\n    }\\n\\n    while (othercounts > counts) {\\n      otherprevoff = otheroff;\\n      otheroff = progress(other, otheroff);\\n      othercounts--;\\n    }\\n\\n    // Compare the last nonequal labels to each other\\n    while (counts > 0 && !self.equals(off, other, otheroff)) {\\n      prevoff = off;\\n      off = progress(self, off);\\n      otherprevoff = otheroff;\\n      otheroff = progress(other, otheroff);\\n      counts -= 1;\\n    }\\n\\n    if (off == 0) {\\n      return -1;\\n    }\\n    if (otheroff == 0) {\\n      return 1;\\n    }\\n\\n    return\\n      self.compare(\\n        prevoff + 1,\\n        self.readUint8(prevoff),\\n        other,\\n        otherprevoff + 1,\\n        other.readUint8(otherprevoff)\\n      );\\n  }\\n\\n  function progress(bytes memory body, uint256 off)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    return off + 1 + body.readUint8(off);\\n  }\\n}\\n\\n// File: contracts/profiles/DNSResolver.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract DNSResolver is ResolverBase {\\n  using RRUtils for *;\\n  using BytesUtils for bytes;\\n\\n  bytes4 private constant DNS_RECORD_INTERFACE_ID = 0xa8fa5682;\\n\\n  // DNSRecordChanged is emitted whenever a given node/name/resource's RRSET is updated.\\n  event DNSRecordChanged(\\n    bytes32 indexed node,\\n    bytes name,\\n    uint16 resource,\\n    bytes record\\n  );\\n  // DNSRecordDeleted is emitted whenever a given node/name/resource's RRSET is deleted.\\n  event DNSRecordDeleted(bytes32 indexed node, bytes name, uint16 resource);\\n  // DNSZoneCleared is emitted whenever a given node's zone information is cleared.\\n  event DNSZoneCleared(bytes32 indexed node);\\n\\n  // Version the mapping for each zone.  This allows users who have lost\\n  // track of their entries to effectively delete an entire zone by bumping\\n  // the version number.\\n  // node => version\\n  mapping(bytes32 => uint256) private versions;\\n\\n  // The records themselves.  Stored as binary RRSETs\\n  // node => version => name => resource => data\\n  mapping(bytes32 => mapping(uint256 => mapping(bytes32 => mapping(uint16 => bytes))))\\n    private records;\\n\\n  // Count of number of entries for a given name.  Required for DNS resolvers\\n  // when resolving wildcards.\\n  // node => version => name => number of records\\n  mapping(bytes32 => mapping(uint256 => mapping(bytes32 => uint16)))\\n    private nameEntriesCount;\\n\\n  /**\\n   * Set one or more DNS records.  Records are supplied in wire-format.\\n   * Records with the same node/name/resource must be supplied one after the\\n   * other to ensure the data is updated correctly. For example, if the data\\n   * was supplied:\\n   *     a.example.com IN A 1.2.3.4\\n   *     a.example.com IN A 5.6.7.8\\n   *     www.example.com IN CNAME a.example.com.\\n   * then this would store the two A records for a.example.com correctly as a\\n   * single RRSET, however if the data was supplied:\\n   *     a.example.com IN A 1.2.3.4\\n   *     www.example.com IN CNAME a.example.com.\\n   *     a.example.com IN A 5.6.7.8\\n   * then this would store the first A record, the CNAME, then the second A\\n   * record which would overwrite the first.\\n   *\\n   * @param node the namehash of the node for which to set the records\\n   * @param data the DNS wire format records to set\\n   */\\n  function setDNSRecords(bytes32 node, bytes calldata data)\\n    external\\n    authorised(node)\\n  {\\n    uint16 resource = 0;\\n    uint256 offset = 0;\\n    bytes memory name;\\n    bytes memory value;\\n    bytes32 nameHash;\\n    // Iterate over the data to add the resource records\\n    for (\\n      RRUtils.RRIterator memory iter = data.iterateRRs(0);\\n      !iter.done();\\n      iter.next()\\n    ) {\\n      if (resource == 0) {\\n        resource = iter.dnstype;\\n        name = iter.name();\\n        nameHash = keccak256(abi.encodePacked(name));\\n        value = bytes(iter.rdata());\\n      } else {\\n        bytes memory newName = iter.name();\\n        if (resource != iter.dnstype || !name.equals(newName)) {\\n          setDNSRRSet(\\n            node,\\n            name,\\n            resource,\\n            data,\\n            offset,\\n            iter.offset - offset,\\n            value.length == 0\\n          );\\n          resource = iter.dnstype;\\n          offset = iter.offset;\\n          name = newName;\\n          nameHash = keccak256(name);\\n          value = bytes(iter.rdata());\\n        }\\n      }\\n    }\\n    if (name.length > 0) {\\n      setDNSRRSet(\\n        node,\\n        name,\\n        resource,\\n        data,\\n        offset,\\n        data.length - offset,\\n        value.length == 0\\n      );\\n    }\\n  }\\n\\n  /**\\n   * Obtain a DNS record.\\n   * @param node the namehash of the node for which to fetch the record\\n   * @param name the keccak-256 hash of the fully-qualified name for which to fetch the record\\n   * @param resource the ID of the resource as per https://en.wikipedia.org/wiki/List_of_DNS_record_types\\n   * @return the DNS record in wire format if present, otherwise empty\\n   */\\n  function dnsRecord(\\n    bytes32 node,\\n    bytes32 name,\\n    uint16 resource\\n  ) public view returns (bytes memory) {\\n    return records[node][versions[node]][name][resource];\\n  }\\n\\n  /**\\n   * Check if a given node has records.\\n   * @param node the namehash of the node for which to check the records\\n   * @param name the namehash of the node for which to check the records\\n   */\\n  function hasDNSRecords(bytes32 node, bytes32 name)\\n    public\\n    view\\n    returns (bool)\\n  {\\n    return (nameEntriesCount[node][versions[node]][name] != 0);\\n  }\\n\\n  /**\\n   * Clear all information for a DNS zone.\\n   * @param node the namehash of the node for which to clear the zone\\n   */\\n  function clearDNSZone(bytes32 node) public authorised(node) {\\n    versions[node]++;\\n    emit DNSZoneCleared(node);\\n  }\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return\\n      interfaceID == DNS_RECORD_INTERFACE_ID ||\\n      super.supportsInterface(interfaceID);\\n  }\\n\\n  function setDNSRRSet(\\n    bytes32 node,\\n    bytes memory name,\\n    uint16 resource,\\n    bytes memory data,\\n    uint256 offset,\\n    uint256 size,\\n    bool deleteRecord\\n  ) private {\\n    uint256 version = versions[node];\\n    bytes32 nameHash = keccak256(name);\\n    bytes memory rrData = data.substring(offset, size);\\n    if (deleteRecord) {\\n      if (records[node][version][nameHash][resource].length != 0) {\\n        nameEntriesCount[node][version][nameHash]--;\\n      }\\n      delete (records[node][version][nameHash][resource]);\\n      emit DNSRecordDeleted(node, name, resource);\\n    } else {\\n      if (records[node][version][nameHash][resource].length == 0) {\\n        nameEntriesCount[node][version][nameHash]++;\\n      }\\n      records[node][version][nameHash][resource] = rrData;\\n      emit DNSRecordChanged(node, name, resource, rrData);\\n    }\\n  }\\n}\\n\\n// File: contracts/profiles/InterfaceResolver.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract InterfaceResolver is ResolverBase, AddrResolver {\\n  bytes4 private constant INTERFACE_INTERFACE_ID =\\n    bytes4(keccak256('interfaceImplementer(bytes32,bytes4)'));\\n  bytes4 private constant INTERFACE_META_ID = 0x01ffc9a7;\\n\\n  event InterfaceChanged(\\n    bytes32 indexed node,\\n    bytes4 indexed interfaceID,\\n    address implementer\\n  );\\n\\n  mapping(bytes32 => mapping(bytes4 => address)) interfaces;\\n\\n  /**\\n   * Sets an interface associated with a name.\\n   * Setting the address to 0 restores the default behaviour of querying the contract at `addr()` for interface support.\\n   * @param node The node to update.\\n   * @param interfaceID The EIP 168 interface ID.\\n   * @param implementer The address of a contract that implements this interface for this node.\\n   */\\n  function setInterface(\\n    bytes32 node,\\n    bytes4 interfaceID,\\n    address implementer\\n  ) external authorised(node) {\\n    interfaces[node][interfaceID] = implementer;\\n    emit InterfaceChanged(node, interfaceID, implementer);\\n  }\\n\\n  /**\\n   * Returns the address of a contract that implements the specified interface for this name.\\n   * If an implementer has not been set for this interfaceID and name, the resolver will query\\n   * the contract at `addr()`. If `addr()` is set, a contract exists at that address, and that\\n   * contract implements EIP168 and returns `true` for the specified interfaceID, its address\\n   * will be returned.\\n   * @param node The ENS node to query.\\n   * @param interfaceID The EIP 168 interface ID to check for.\\n   * @return The address that implements this interface, or 0 if the interface is unsupported.\\n   */\\n  function interfaceImplementer(bytes32 node, bytes4 interfaceID)\\n    external\\n    view\\n    returns (address)\\n  {\\n    address implementer = interfaces[node][interfaceID];\\n    if (implementer != address(0)) {\\n      return implementer;\\n    }\\n\\n    address a = addr(node);\\n    if (a == address(0)) {\\n      return address(0);\\n    }\\n\\n    (bool success, bytes memory returnData) = a.staticcall(\\n      abi.encodeWithSignature('supportsInterface(bytes4)', INTERFACE_META_ID)\\n    );\\n    if (!success || returnData.length < 32 || returnData[31] == 0) {\\n      // EIP 168 not supported by target\\n      return address(0);\\n    }\\n\\n    (success, returnData) = a.staticcall(\\n      abi.encodeWithSignature('supportsInterface(bytes4)', interfaceID)\\n    );\\n    if (!success || returnData.length < 32 || returnData[31] == 0) {\\n      // Specified interface not supported by target\\n      return address(0);\\n    }\\n\\n    return a;\\n  }\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return\\n      interfaceID == INTERFACE_INTERFACE_ID ||\\n      super.supportsInterface(interfaceID);\\n  }\\n}\\n\\n// File: contracts/profiles/NameResolver.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract NameResolver is ResolverBase {\\n  bytes4 private constant NAME_INTERFACE_ID = 0x691f3431;\\n\\n  event NameChanged(bytes32 indexed node, string name);\\n\\n  mapping(bytes32 => string) names;\\n\\n  /**\\n   * Sets the name associated with an ENS node, for reverse records.\\n   * May only be called by the owner of that node in the ENS registry.\\n   * @param node The node to update.\\n   * @param name The name to set.\\n   */\\n  function setName(bytes32 node, string calldata name)\\n    external\\n    authorised(node)\\n  {\\n    names[node] = name;\\n    emit NameChanged(node, name);\\n  }\\n\\n  /**\\n   * Returns the name associated with an ENS node, for reverse records.\\n   * Defined in EIP181.\\n   * @param node The ENS node to query.\\n   * @return The associated name.\\n   */\\n  function name(bytes32 node) external view returns (string memory) {\\n    return names[node];\\n  }\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return\\n      interfaceID == NAME_INTERFACE_ID || super.supportsInterface(interfaceID);\\n  }\\n}\\n\\n// File: contracts/profiles/PubkeyResolver.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract PubkeyResolver is ResolverBase {\\n  bytes4 private constant PUBKEY_INTERFACE_ID = 0xc8690233;\\n\\n  event PubkeyChanged(bytes32 indexed node, bytes32 x, bytes32 y);\\n\\n  struct PublicKey {\\n    bytes32 x;\\n    bytes32 y;\\n  }\\n\\n  mapping(bytes32 => PublicKey) pubkeys;\\n\\n  /**\\n   * Sets the SECP256k1 public key associated with an ENS node.\\n   * @param node The ENS node to query\\n   * @param x the X coordinate of the curve point for the public key.\\n   * @param y the Y coordinate of the curve point for the public key.\\n   */\\n  function setPubkey(\\n    bytes32 node,\\n    bytes32 x,\\n    bytes32 y\\n  ) external authorised(node) {\\n    pubkeys[node] = PublicKey(x, y);\\n    emit PubkeyChanged(node, x, y);\\n  }\\n\\n  /**\\n   * Returns the SECP256k1 public key associated with an ENS node.\\n   * Defined in EIP 619.\\n   * @param node The ENS node to query\\n   * @return x, y the X and Y coordinates of the curve point for the public key.\\n   */\\n  function pubkey(bytes32 node) external view returns (bytes32 x, bytes32 y) {\\n    return (pubkeys[node].x, pubkeys[node].y);\\n  }\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return\\n      interfaceID == PUBKEY_INTERFACE_ID ||\\n      super.supportsInterface(interfaceID);\\n  }\\n}\\n\\n// File: contracts/profiles/TextResolver.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract TextResolver is ResolverBase {\\n  bytes4 private constant TEXT_INTERFACE_ID = 0x59d1d43c;\\n\\n  event TextChanged(\\n    bytes32 indexed node,\\n    string indexed indexedKey,\\n    string key\\n  );\\n\\n  mapping(bytes32 => mapping(string => string)) texts;\\n\\n  /**\\n   * Sets the text data associated with an ENS node and key.\\n   * May only be called by the owner of that node in the ENS registry.\\n   * @param node The node to update.\\n   * @param key The key to set.\\n   * @param value The text data value to set.\\n   */\\n  function setText(\\n    bytes32 node,\\n    string calldata key,\\n    string calldata value\\n  ) external authorised(node) {\\n    texts[node][key] = value;\\n    emit TextChanged(node, key, key);\\n  }\\n\\n  /**\\n   * Returns the text data associated with an ENS node and key.\\n   * @param node The ENS node to query.\\n   * @param key The text data key to query.\\n   * @return The associated text data.\\n   */\\n  function text(bytes32 node, string calldata key)\\n    external\\n    view\\n    returns (string memory)\\n  {\\n    return texts[node][key];\\n  }\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return\\n      interfaceID == TEXT_INTERFACE_ID || super.supportsInterface(interfaceID);\\n  }\\n}\\n\\n// File: contracts/PublicResolver.sol\\n\\npragma solidity ^0.5.0;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * A simple resolver anyone can use; only allows the owner of a node to set its\\n * address.\\n */\\ncontract PublicResolver_mainnet_9412610 is\\n  ABIResolver,\\n  AddrResolver,\\n  ContentHashResolver,\\n  DNSResolver,\\n  InterfaceResolver,\\n  NameResolver,\\n  PubkeyResolver,\\n  TextResolver\\n{\\n  ENS ens;\\n\\n  /**\\n   * A mapping of authorisations. An address that is authorised for a name\\n   * may make any changes to the name that the owner could, but may not update\\n   * the set of authorisations.\\n   * (node, owner, caller) => isAuthorised\\n   */\\n  mapping(bytes32 => mapping(address => mapping(address => bool)))\\n    public authorisations;\\n\\n  event AuthorisationChanged(\\n    bytes32 indexed node,\\n    address indexed owner,\\n    address indexed target,\\n    bool isAuthorised\\n  );\\n\\n  constructor(ENS _ens) public {\\n    ens = _ens;\\n  }\\n\\n  /**\\n   * @dev Sets or clears an authorisation.\\n   * Authorisations are specific to the caller. Any account can set an authorisation\\n   * for any name, but the authorisation that is checked will be that of the\\n   * current owner of a name. Thus, transferring a name effectively clears any\\n   * existing authorisations, and new authorisations can be set in advance of\\n   * an ownership transfer if desired.\\n   *\\n   * @param node The name to change the authorisation on.\\n   * @param target The address that is to be authorised or deauthorised.\\n   * @param isAuthorised True if the address should be authorised, or false if it should be deauthorised.\\n   */\\n  function setAuthorisation(\\n    bytes32 node,\\n    address target,\\n    bool isAuthorised\\n  ) external {\\n    authorisations[node][msg.sender][target] = isAuthorised;\\n    emit AuthorisationChanged(node, msg.sender, target, isAuthorised);\\n  }\\n\\n  function isAuthorised(bytes32 node) internal view returns (bool) {\\n    address owner = ens.owner(node);\\n    return owner == msg.sender || authorisations[node][owner][msg.sender];\\n  }\\n\\n  function multicall(bytes[] calldata data)\\n    external\\n    returns (bytes[] memory results)\\n  {\\n    results = new bytes[](data.length);\\n    for (uint256 i = 0; i < data.length; i++) {\\n      (bool success, bytes memory result) = address(this).delegatecall(data[i]);\\n      require(success);\\n      results[i] = result;\\n    }\\n    return results;\\n  }\\n}\\n\",\"keccak256\":\"0x29ca7d322ab7177f187f9bfc310e6dfc94049e9beaaafe958bead081fd90ad76\"}},\"version\":1}",
          "storageLayout": {
            "storage": [
              {
                "astId": 2351,
                "contract": "contracts/legacy/PublicResolver_mainnet_9412610.sol:DNSResolver",
                "label": "versions",
                "offset": 0,
                "slot": "0",
                "type": "t_mapping(t_bytes32,t_uint256)"
              },
              {
                "astId": 2361,
                "contract": "contracts/legacy/PublicResolver_mainnet_9412610.sol:DNSResolver",
                "label": "records",
                "offset": 0,
                "slot": "1",
                "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_mapping(t_bytes32,t_mapping(t_uint16,t_bytes_storage))))"
              },
              {
                "astId": 2369,
                "contract": "contracts/legacy/PublicResolver_mainnet_9412610.sol:DNSResolver",
                "label": "nameEntriesCount",
                "offset": 0,
                "slot": "2",
                "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_mapping(t_bytes32,t_uint16)))"
              }
            ],
            "types": {
              "t_bytes32": {
                "encoding": "inplace",
                "label": "bytes32",
                "numberOfBytes": "32"
              },
              "t_bytes_storage": {
                "encoding": "bytes",
                "label": "bytes",
                "numberOfBytes": "32"
              },
              "t_mapping(t_bytes32,t_mapping(t_uint16,t_bytes_storage))": {
                "encoding": "mapping",
                "key": "t_bytes32",
                "label": "mapping(bytes32 => mapping(uint16 => bytes))",
                "numberOfBytes": "32",
                "value": "t_mapping(t_uint16,t_bytes_storage)"
              },
              "t_mapping(t_bytes32,t_mapping(t_uint256,t_mapping(t_bytes32,t_mapping(t_uint16,t_bytes_storage))))": {
                "encoding": "mapping",
                "key": "t_bytes32",
                "label": "mapping(bytes32 => mapping(uint256 => mapping(bytes32 => mapping(uint16 => bytes))))",
                "numberOfBytes": "32",
                "value": "t_mapping(t_uint256,t_mapping(t_bytes32,t_mapping(t_uint16,t_bytes_storage)))"
              },
              "t_mapping(t_bytes32,t_mapping(t_uint256,t_mapping(t_bytes32,t_uint16)))": {
                "encoding": "mapping",
                "key": "t_bytes32",
                "label": "mapping(bytes32 => mapping(uint256 => mapping(bytes32 => uint16)))",
                "numberOfBytes": "32",
                "value": "t_mapping(t_uint256,t_mapping(t_bytes32,t_uint16))"
              },
              "t_mapping(t_bytes32,t_uint16)": {
                "encoding": "mapping",
                "key": "t_bytes32",
                "label": "mapping(bytes32 => uint16)",
                "numberOfBytes": "32",
                "value": "t_uint16"
              },
              "t_mapping(t_bytes32,t_uint256)": {
                "encoding": "mapping",
                "key": "t_bytes32",
                "label": "mapping(bytes32 => uint256)",
                "numberOfBytes": "32",
                "value": "t_uint256"
              },
              "t_mapping(t_uint16,t_bytes_storage)": {
                "encoding": "mapping",
                "key": "t_uint16",
                "label": "mapping(uint16 => bytes)",
                "numberOfBytes": "32",
                "value": "t_bytes_storage"
              },
              "t_mapping(t_uint256,t_mapping(t_bytes32,t_mapping(t_uint16,t_bytes_storage)))": {
                "encoding": "mapping",
                "key": "t_uint256",
                "label": "mapping(uint256 => mapping(bytes32 => mapping(uint16 => bytes)))",
                "numberOfBytes": "32",
                "value": "t_mapping(t_bytes32,t_mapping(t_uint16,t_bytes_storage))"
              },
              "t_mapping(t_uint256,t_mapping(t_bytes32,t_uint16))": {
                "encoding": "mapping",
                "key": "t_uint256",
                "label": "mapping(uint256 => mapping(bytes32 => uint16))",
                "numberOfBytes": "32",
                "value": "t_mapping(t_bytes32,t_uint16)"
              },
              "t_uint16": {
                "encoding": "inplace",
                "label": "uint16",
                "numberOfBytes": "2"
              },
              "t_uint256": {
                "encoding": "inplace",
                "label": "uint256",
                "numberOfBytes": "32"
              }
            }
          },
          "userdoc": {
            "methods": {
              "clearDNSZone(bytes32)": {
                "notice": "Clear all information for a DNS zone."
              },
              "dnsRecord(bytes32,bytes32,uint16)": {
                "notice": "Obtain a DNS record."
              },
              "hasDNSRecords(bytes32,bytes32)": {
                "notice": "Check if a given node has records."
              },
              "setDNSRecords(bytes32,bytes)": {
                "notice": "Set one or more DNS records.  Records are supplied in wire-format. Records with the same node/name/resource must be supplied one after the other to ensure the data is updated correctly. For example, if the data was supplied:    a.example.com IN A 1.2.3.4    a.example.com IN A 5.6.7.8    www.example.com IN CNAME a.example.com. then this would store the two A records for a.example.com correctly as a single RRSET, however if the data was supplied:    a.example.com IN A 1.2.3.4    www.example.com IN CNAME a.example.com.    a.example.com IN A 5.6.7.8 then this would store the first A record, the CNAME, then the second A record which would overwrite the first."
              }
            }
          }
        },
        "ENS": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "node",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "label",
                  "type": "bytes32"
                },
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                }
              ],
              "name": "NewOwner",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "node",
                  "type": "bytes32"
                },
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "resolver",
                  "type": "address"
                }
              ],
              "name": "NewResolver",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "node",
                  "type": "bytes32"
                },
                {
                  "indexed": false,
                  "internalType": "uint64",
                  "name": "ttl",
                  "type": "uint64"
                }
              ],
              "name": "NewTTL",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "node",
                  "type": "bytes32"
                },
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                }
              ],
              "name": "Transfer",
              "type": "event"
            },
            {
              "constant": true,
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "node",
                  "type": "bytes32"
                }
              ],
              "name": "owner",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "node",
                  "type": "bytes32"
                }
              ],
              "name": "resolver",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "node",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                }
              ],
              "name": "setOwner",
              "outputs": [],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "node",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "resolver",
                  "type": "address"
                }
              ],
              "name": "setResolver",
              "outputs": [],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "node",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "label",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                }
              ],
              "name": "setSubnodeOwner",
              "outputs": [],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "node",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "ttl",
                  "type": "uint64"
                }
              ],
              "name": "setTTL",
              "outputs": [],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "node",
                  "type": "bytes32"
                }
              ],
              "name": "ttl",
              "outputs": [
                {
                  "internalType": "uint64",
                  "name": "",
                  "type": "uint64"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "devdoc": {
            "methods": {}
          },
          "evm": {
            "bytecode": {
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "gasEstimates": null,
            "methodIdentifiers": {
              "owner(bytes32)": "02571be3",
              "resolver(bytes32)": "0178b8bf",
              "setOwner(bytes32,address)": "5b0fc9c3",
              "setResolver(bytes32,address)": "1896f70a",
              "setSubnodeOwner(bytes32,bytes32,address)": "06ab5923",
              "setTTL(bytes32,uint64)": "14ab9038",
              "ttl(bytes32)": "16a25cbd"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.5.17+commit.d19bba13\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"label\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"NewOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"}],\"name\":\"NewResolver\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"ttl\",\"type\":\"uint64\"}],\"name\":\"NewTTL\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"resolver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"}],\"name\":\"setResolver\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"label\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"setSubnodeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"ttl\",\"type\":\"uint64\"}],\"name\":\"setTTL\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"ttl\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/legacy/PublicResolver_mainnet_9412610.sol\":\"ENS\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"contracts/legacy/PublicResolver_mainnet_9412610.sol\":{\"content\":\"/**\\n *Submitted for verification at Etherscan.io on 2020-02-03\\n */\\n\\n// File: @ensdomains/ens/contracts/ENS.sol\\n\\npragma solidity >=0.4.24;\\n\\ninterface ENS {\\n  // Logged when the owner of a node assigns a new owner to a subnode.\\n  event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n  // Logged when the owner of a node transfers ownership to a new account.\\n  event Transfer(bytes32 indexed node, address owner);\\n\\n  // Logged when the resolver for a node changes.\\n  event NewResolver(bytes32 indexed node, address resolver);\\n\\n  // Logged when the TTL of a node changes\\n  event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n  function setSubnodeOwner(\\n    bytes32 node,\\n    bytes32 label,\\n    address owner\\n  ) external;\\n\\n  function setResolver(bytes32 node, address resolver) external;\\n\\n  function setOwner(bytes32 node, address owner) external;\\n\\n  function setTTL(bytes32 node, uint64 ttl) external;\\n\\n  function owner(bytes32 node) external view returns (address);\\n\\n  function resolver(bytes32 node) external view returns (address);\\n\\n  function ttl(bytes32 node) external view returns (uint64);\\n}\\n\\n// File: contracts/ResolverBase.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract ResolverBase {\\n  bytes4 private constant INTERFACE_META_ID = 0x01ffc9a7;\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return interfaceID == INTERFACE_META_ID;\\n  }\\n\\n  function isAuthorised(bytes32 node) internal view returns (bool);\\n\\n  modifier authorised(bytes32 node) {\\n    require(isAuthorised(node));\\n    _;\\n  }\\n\\n  function bytesToAddress(bytes memory b)\\n    internal\\n    pure\\n    returns (address payable a)\\n  {\\n    require(b.length == 20);\\n    assembly {\\n      a := div(mload(add(b, 32)), exp(256, 12))\\n    }\\n  }\\n\\n  function addressToBytes(address a) internal pure returns (bytes memory b) {\\n    b = new bytes(20);\\n    assembly {\\n      mstore(add(b, 32), mul(a, exp(256, 12)))\\n    }\\n  }\\n}\\n\\n// File: contracts/profiles/ABIResolver.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract ABIResolver is ResolverBase {\\n  bytes4 private constant ABI_INTERFACE_ID = 0x2203ab56;\\n\\n  event ABIChanged(bytes32 indexed node, uint256 indexed contentType);\\n\\n  mapping(bytes32 => mapping(uint256 => bytes)) abis;\\n\\n  /**\\n   * Sets the ABI associated with an ENS node.\\n   * Nodes may have one ABI of each content type. To remove an ABI, set it to\\n   * the empty string.\\n   * @param node The node to update.\\n   * @param contentType The content type of the ABI\\n   * @param data The ABI data.\\n   */\\n  function setABI(\\n    bytes32 node,\\n    uint256 contentType,\\n    bytes calldata data\\n  ) external authorised(node) {\\n    // Content types must be powers of 2\\n    require(((contentType - 1) & contentType) == 0);\\n\\n    abis[node][contentType] = data;\\n    emit ABIChanged(node, contentType);\\n  }\\n\\n  /**\\n   * Returns the ABI associated with an ENS node.\\n   * Defined in EIP205.\\n   * @param node The ENS node to query\\n   * @param contentTypes A bitwise OR of the ABI formats accepted by the caller.\\n   * @return contentType The content type of the return value\\n   * @return data The ABI data\\n   */\\n  function ABI(bytes32 node, uint256 contentTypes)\\n    external\\n    view\\n    returns (uint256, bytes memory)\\n  {\\n    mapping(uint256 => bytes) storage abiset = abis[node];\\n\\n    for (\\n      uint256 contentType = 1;\\n      contentType <= contentTypes;\\n      contentType <<= 1\\n    ) {\\n      if ((contentType & contentTypes) != 0 && abiset[contentType].length > 0) {\\n        return (contentType, abiset[contentType]);\\n      }\\n    }\\n\\n    return (0, bytes(''));\\n  }\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return\\n      interfaceID == ABI_INTERFACE_ID || super.supportsInterface(interfaceID);\\n  }\\n}\\n\\n// File: contracts/profiles/AddrResolver.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract AddrResolver is ResolverBase {\\n  bytes4 private constant ADDR_INTERFACE_ID = 0x3b3b57de;\\n  bytes4 private constant ADDRESS_INTERFACE_ID = 0xf1cb7e06;\\n  uint256 private constant COIN_TYPE_ETH = 60;\\n\\n  event AddrChanged(bytes32 indexed node, address a);\\n  event AddressChanged(\\n    bytes32 indexed node,\\n    uint256 coinType,\\n    bytes newAddress\\n  );\\n\\n  mapping(bytes32 => mapping(uint256 => bytes)) _addresses;\\n\\n  /**\\n   * Sets the address associated with an ENS node.\\n   * May only be called by the owner of that node in the ENS registry.\\n   * @param node The node to update.\\n   * @param a The address to set.\\n   */\\n  function setAddr(bytes32 node, address a) external authorised(node) {\\n    setAddr(node, COIN_TYPE_ETH, addressToBytes(a));\\n  }\\n\\n  /**\\n   * Returns the address associated with an ENS node.\\n   * @param node The ENS node to query.\\n   * @return The associated address.\\n   */\\n  function addr(bytes32 node) public view returns (address payable) {\\n    bytes memory a = addr(node, COIN_TYPE_ETH);\\n    if (a.length == 0) {\\n      return address(0);\\n    }\\n    return bytesToAddress(a);\\n  }\\n\\n  function setAddr(\\n    bytes32 node,\\n    uint256 coinType,\\n    bytes memory a\\n  ) public authorised(node) {\\n    emit AddressChanged(node, coinType, a);\\n    if (coinType == COIN_TYPE_ETH) {\\n      emit AddrChanged(node, bytesToAddress(a));\\n    }\\n    _addresses[node][coinType] = a;\\n  }\\n\\n  function addr(bytes32 node, uint256 coinType)\\n    public\\n    view\\n    returns (bytes memory)\\n  {\\n    return _addresses[node][coinType];\\n  }\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return\\n      interfaceID == ADDR_INTERFACE_ID ||\\n      interfaceID == ADDRESS_INTERFACE_ID ||\\n      super.supportsInterface(interfaceID);\\n  }\\n}\\n\\n// File: contracts/profiles/ContentHashResolver.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract ContentHashResolver is ResolverBase {\\n  bytes4 private constant CONTENT_HASH_INTERFACE_ID = 0xbc1c58d1;\\n\\n  event ContenthashChanged(bytes32 indexed node, bytes hash);\\n\\n  mapping(bytes32 => bytes) hashes;\\n\\n  /**\\n   * Sets the contenthash associated with an ENS node.\\n   * May only be called by the owner of that node in the ENS registry.\\n   * @param node The node to update.\\n   * @param hash The contenthash to set\\n   */\\n  function setContenthash(bytes32 node, bytes calldata hash)\\n    external\\n    authorised(node)\\n  {\\n    hashes[node] = hash;\\n    emit ContenthashChanged(node, hash);\\n  }\\n\\n  /**\\n   * Returns the contenthash associated with an ENS node.\\n   * @param node The ENS node to query.\\n   * @return The associated contenthash.\\n   */\\n  function contenthash(bytes32 node) external view returns (bytes memory) {\\n    return hashes[node];\\n  }\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return\\n      interfaceID == CONTENT_HASH_INTERFACE_ID ||\\n      super.supportsInterface(interfaceID);\\n  }\\n}\\n\\n// File: @ensdomains/dnssec-oracle/contracts/BytesUtils.sol\\n\\npragma solidity >0.4.23;\\n\\nlibrary BytesUtils {\\n  /*\\n   * @dev Returns the keccak-256 hash of a byte range.\\n   * @param self The byte string to hash.\\n   * @param offset The position to start hashing at.\\n   * @param len The number of bytes to hash.\\n   * @return The hash of the byte range.\\n   */\\n  function keccak(\\n    bytes memory self,\\n    uint256 offset,\\n    uint256 len\\n  ) internal pure returns (bytes32 ret) {\\n    require(offset + len <= self.length);\\n    assembly {\\n      ret := keccak256(add(add(self, 32), offset), len)\\n    }\\n  }\\n\\n  /*\\n   * @dev Returns a positive number if `other` comes lexicographically after\\n   *      `self`, a negative number if it comes before, or zero if the\\n   *      contents of the two bytes are equal.\\n   * @param self The first bytes to compare.\\n   * @param other The second bytes to compare.\\n   * @return The result of the comparison.\\n   */\\n  function compare(bytes memory self, bytes memory other)\\n    internal\\n    pure\\n    returns (int256)\\n  {\\n    return compare(self, 0, self.length, other, 0, other.length);\\n  }\\n\\n  /*\\n   * @dev Returns a positive number if `other` comes lexicographically after\\n   *      `self`, a negative number if it comes before, or zero if the\\n   *      contents of the two bytes are equal. Comparison is done per-rune,\\n   *      on unicode codepoints.\\n   * @param self The first bytes to compare.\\n   * @param offset The offset of self.\\n   * @param len    The length of self.\\n   * @param other The second bytes to compare.\\n   * @param otheroffset The offset of the other string.\\n   * @param otherlen    The length of the other string.\\n   * @return The result of the comparison.\\n   */\\n  function compare(\\n    bytes memory self,\\n    uint256 offset,\\n    uint256 len,\\n    bytes memory other,\\n    uint256 otheroffset,\\n    uint256 otherlen\\n  ) internal pure returns (int256) {\\n    uint256 shortest = len;\\n    if (otherlen < len) shortest = otherlen;\\n\\n    uint256 selfptr;\\n    uint256 otherptr;\\n\\n    assembly {\\n      selfptr := add(self, add(offset, 32))\\n      otherptr := add(other, add(otheroffset, 32))\\n    }\\n    for (uint256 idx = 0; idx < shortest; idx += 32) {\\n      uint256 a;\\n      uint256 b;\\n      assembly {\\n        a := mload(selfptr)\\n        b := mload(otherptr)\\n      }\\n      if (a != b) {\\n        // Mask out irrelevant bytes and check again\\n        uint256 mask;\\n        if (shortest > 32) {\\n          mask = uint256(-1); // aka 0xffffff....\\n        } else {\\n          mask = ~(2**(8 * (32 - shortest + idx)) - 1);\\n        }\\n        uint256 diff = (a & mask) - (b & mask);\\n        if (diff != 0) return int256(diff);\\n      }\\n      selfptr += 32;\\n      otherptr += 32;\\n    }\\n\\n    return int256(len) - int256(otherlen);\\n  }\\n\\n  /*\\n   * @dev Returns true if the two byte ranges are equal.\\n   * @param self The first byte range to compare.\\n   * @param offset The offset into the first byte range.\\n   * @param other The second byte range to compare.\\n   * @param otherOffset The offset into the second byte range.\\n   * @param len The number of bytes to compare\\n   * @return True if the byte ranges are equal, false otherwise.\\n   */\\n  function equals(\\n    bytes memory self,\\n    uint256 offset,\\n    bytes memory other,\\n    uint256 otherOffset,\\n    uint256 len\\n  ) internal pure returns (bool) {\\n    return keccak(self, offset, len) == keccak(other, otherOffset, len);\\n  }\\n\\n  /*\\n   * @dev Returns true if the two byte ranges are equal with offsets.\\n   * @param self The first byte range to compare.\\n   * @param offset The offset into the first byte range.\\n   * @param other The second byte range to compare.\\n   * @param otherOffset The offset into the second byte range.\\n   * @return True if the byte ranges are equal, false otherwise.\\n   */\\n  function equals(\\n    bytes memory self,\\n    uint256 offset,\\n    bytes memory other,\\n    uint256 otherOffset\\n  ) internal pure returns (bool) {\\n    return\\n      keccak(self, offset, self.length - offset) ==\\n      keccak(other, otherOffset, other.length - otherOffset);\\n  }\\n\\n  /*\\n   * @dev Compares a range of 'self' to all of 'other' and returns True iff\\n   *      they are equal.\\n   * @param self The first byte range to compare.\\n   * @param offset The offset into the first byte range.\\n   * @param other The second byte range to compare.\\n   * @return True if the byte ranges are equal, false otherwise.\\n   */\\n  function equals(\\n    bytes memory self,\\n    uint256 offset,\\n    bytes memory other\\n  ) internal pure returns (bool) {\\n    return\\n      self.length >= offset + other.length &&\\n      equals(self, offset, other, 0, other.length);\\n  }\\n\\n  /*\\n   * @dev Returns true if the two byte ranges are equal.\\n   * @param self The first byte range to compare.\\n   * @param other The second byte range to compare.\\n   * @return True if the byte ranges are equal, false otherwise.\\n   */\\n  function equals(bytes memory self, bytes memory other)\\n    internal\\n    pure\\n    returns (bool)\\n  {\\n    return\\n      self.length == other.length && equals(self, 0, other, 0, self.length);\\n  }\\n\\n  /*\\n   * @dev Returns the 8-bit number at the specified index of self.\\n   * @param self The byte string.\\n   * @param idx The index into the bytes\\n   * @return The specified 8 bits of the string, interpreted as an integer.\\n   */\\n  function readUint8(bytes memory self, uint256 idx)\\n    internal\\n    pure\\n    returns (uint8 ret)\\n  {\\n    return uint8(self[idx]);\\n  }\\n\\n  /*\\n   * @dev Returns the 16-bit number at the specified index of self.\\n   * @param self The byte string.\\n   * @param idx The index into the bytes\\n   * @return The specified 16 bits of the string, interpreted as an integer.\\n   */\\n  function readUint16(bytes memory self, uint256 idx)\\n    internal\\n    pure\\n    returns (uint16 ret)\\n  {\\n    require(idx + 2 <= self.length);\\n    assembly {\\n      ret := and(mload(add(add(self, 2), idx)), 0xFFFF)\\n    }\\n  }\\n\\n  /*\\n   * @dev Returns the 32-bit number at the specified index of self.\\n   * @param self The byte string.\\n   * @param idx The index into the bytes\\n   * @return The specified 32 bits of the string, interpreted as an integer.\\n   */\\n  function readUint32(bytes memory self, uint256 idx)\\n    internal\\n    pure\\n    returns (uint32 ret)\\n  {\\n    require(idx + 4 <= self.length);\\n    assembly {\\n      ret := and(mload(add(add(self, 4), idx)), 0xFFFFFFFF)\\n    }\\n  }\\n\\n  /*\\n   * @dev Returns the 32 byte value at the specified index of self.\\n   * @param self The byte string.\\n   * @param idx The index into the bytes\\n   * @return The specified 32 bytes of the string.\\n   */\\n  function readBytes32(bytes memory self, uint256 idx)\\n    internal\\n    pure\\n    returns (bytes32 ret)\\n  {\\n    require(idx + 32 <= self.length);\\n    assembly {\\n      ret := mload(add(add(self, 32), idx))\\n    }\\n  }\\n\\n  /*\\n   * @dev Returns the 32 byte value at the specified index of self.\\n   * @param self The byte string.\\n   * @param idx The index into the bytes\\n   * @return The specified 32 bytes of the string.\\n   */\\n  function readBytes20(bytes memory self, uint256 idx)\\n    internal\\n    pure\\n    returns (bytes20 ret)\\n  {\\n    require(idx + 20 <= self.length);\\n    assembly {\\n      ret := and(\\n        mload(add(add(self, 32), idx)),\\n        0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000\\n      )\\n    }\\n  }\\n\\n  /*\\n   * @dev Returns the n byte value at the specified index of self.\\n   * @param self The byte string.\\n   * @param idx The index into the bytes.\\n   * @param len The number of bytes.\\n   * @return The specified 32 bytes of the string.\\n   */\\n  function readBytesN(\\n    bytes memory self,\\n    uint256 idx,\\n    uint256 len\\n  ) internal pure returns (bytes32 ret) {\\n    require(len <= 32);\\n    require(idx + len <= self.length);\\n    assembly {\\n      let mask := not(sub(exp(256, sub(32, len)), 1))\\n      ret := and(mload(add(add(self, 32), idx)), mask)\\n    }\\n  }\\n\\n  function memcpy(\\n    uint256 dest,\\n    uint256 src,\\n    uint256 len\\n  ) private pure {\\n    // Copy word-length chunks while possible\\n    for (; len >= 32; len -= 32) {\\n      assembly {\\n        mstore(dest, mload(src))\\n      }\\n      dest += 32;\\n      src += 32;\\n    }\\n\\n    // Copy remaining bytes\\n    uint256 mask = 256**(32 - len) - 1;\\n    assembly {\\n      let srcpart := and(mload(src), not(mask))\\n      let destpart := and(mload(dest), mask)\\n      mstore(dest, or(destpart, srcpart))\\n    }\\n  }\\n\\n  /*\\n   * @dev Copies a substring into a new byte string.\\n   * @param self The byte string to copy from.\\n   * @param offset The offset to start copying at.\\n   * @param len The number of bytes to copy.\\n   */\\n  function substring(\\n    bytes memory self,\\n    uint256 offset,\\n    uint256 len\\n  ) internal pure returns (bytes memory) {\\n    require(offset + len <= self.length);\\n\\n    bytes memory ret = new bytes(len);\\n    uint256 dest;\\n    uint256 src;\\n\\n    assembly {\\n      dest := add(ret, 32)\\n      src := add(add(self, 32), offset)\\n    }\\n    memcpy(dest, src, len);\\n\\n    return ret;\\n  }\\n\\n  // Maps characters from 0x30 to 0x7A to their base32 values.\\n  // 0xFF represents invalid characters in that range.\\n  bytes constant base32HexTable =\\n    hex'00010203040506070809FFFFFFFFFFFFFF0A0B0C0D0E0F101112131415161718191A1B1C1D1E1FFFFFFFFFFFFFFFFFFFFF0A0B0C0D0E0F101112131415161718191A1B1C1D1E1F';\\n\\n  /**\\n   * @dev Decodes unpadded base32 data of up to one word in length.\\n   * @param self The data to decode.\\n   * @param off Offset into the string to start at.\\n   * @param len Number of characters to decode.\\n   * @return The decoded data, left aligned.\\n   */\\n  function base32HexDecodeWord(\\n    bytes memory self,\\n    uint256 off,\\n    uint256 len\\n  ) internal pure returns (bytes32) {\\n    require(len <= 52);\\n\\n    uint256 ret = 0;\\n    uint8 decoded;\\n    for (uint256 i = 0; i < len; i++) {\\n      bytes1 char = self[off + i];\\n      require(char >= 0x30 && char <= 0x7A);\\n      decoded = uint8(base32HexTable[uint256(uint8(char)) - 0x30]);\\n      require(decoded <= 0x20);\\n      if (i == len - 1) {\\n        break;\\n      }\\n      ret = (ret << 5) | decoded;\\n    }\\n\\n    uint256 bitlen = len * 5;\\n    if (len % 8 == 0) {\\n      // Multiple of 8 characters, no padding\\n      ret = (ret << 5) | decoded;\\n    } else if (len % 8 == 2) {\\n      // Two extra characters - 1 byte\\n      ret = (ret << 3) | (decoded >> 2);\\n      bitlen -= 2;\\n    } else if (len % 8 == 4) {\\n      // Four extra characters - 2 bytes\\n      ret = (ret << 1) | (decoded >> 4);\\n      bitlen -= 4;\\n    } else if (len % 8 == 5) {\\n      // Five extra characters - 3 bytes\\n      ret = (ret << 4) | (decoded >> 1);\\n      bitlen -= 1;\\n    } else if (len % 8 == 7) {\\n      // Seven extra characters - 4 bytes\\n      ret = (ret << 2) | (decoded >> 3);\\n      bitlen -= 3;\\n    } else {\\n      revert();\\n    }\\n\\n    return bytes32(ret << (256 - bitlen));\\n  }\\n}\\n\\n// File: @ensdomains/buffer/contracts/Buffer.sol\\n\\npragma solidity >0.4.18;\\n\\n/**\\n * @dev A library for working with mutable byte buffers in Solidity.\\n *\\n * Byte buffers are mutable and expandable, and provide a variety of primitives\\n * for writing to them. At any time you can fetch a bytes object containing the\\n * current contents of the buffer. The bytes object should not be stored between\\n * operations, as it may change due to resizing of the buffer.\\n */\\nlibrary Buffer {\\n  /**\\n   * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n   *      a capacity. The capacity may be longer than the current value, in\\n   *      which case it can be extended without the need to allocate more memory.\\n   */\\n  struct buffer {\\n    bytes buf;\\n    uint256 capacity;\\n  }\\n\\n  /**\\n   * @dev Initializes a buffer with an initial capacity.\\n   * @param buf The buffer to initialize.\\n   * @param capacity The number of bytes of space to allocate the buffer.\\n   * @return The buffer, for chaining.\\n   */\\n  function init(buffer memory buf, uint256 capacity)\\n    internal\\n    pure\\n    returns (buffer memory)\\n  {\\n    if (capacity % 32 != 0) {\\n      capacity += 32 - (capacity % 32);\\n    }\\n    // Allocate space for the buffer data\\n    buf.capacity = capacity;\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(buf, ptr)\\n      mstore(ptr, 0)\\n      mstore(0x40, add(32, add(ptr, capacity)))\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Initializes a new buffer from an existing bytes object.\\n   *      Changes to the buffer may mutate the original value.\\n   * @param b The bytes object to initialize the buffer with.\\n   * @return A new buffer.\\n   */\\n  function fromBytes(bytes memory b) internal pure returns (buffer memory) {\\n    buffer memory buf;\\n    buf.buf = b;\\n    buf.capacity = b.length;\\n    return buf;\\n  }\\n\\n  function resize(buffer memory buf, uint256 capacity) private pure {\\n    bytes memory oldbuf = buf.buf;\\n    init(buf, capacity);\\n    append(buf, oldbuf);\\n  }\\n\\n  function max(uint256 a, uint256 b) private pure returns (uint256) {\\n    if (a > b) {\\n      return a;\\n    }\\n    return b;\\n  }\\n\\n  /**\\n   * @dev Sets buffer length to 0.\\n   * @param buf The buffer to truncate.\\n   * @return The original buffer, for chaining..\\n   */\\n  function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n    assembly {\\n      let bufptr := mload(buf)\\n      mstore(bufptr, 0)\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Writes a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The start offset to write to.\\n   * @param data The data to append.\\n   * @param len The number of bytes to copy.\\n   * @return The original buffer, for chaining.\\n   */\\n  function write(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes memory data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    require(len <= data.length);\\n\\n    if (off + len > buf.capacity) {\\n      resize(buf, max(buf.capacity, len + off) * 2);\\n    }\\n\\n    uint256 dest;\\n    uint256 src;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Start address = buffer address + offset + sizeof(buffer length)\\n      dest := add(add(bufptr, 32), off)\\n      // Update buffer length if we're extending it\\n      if gt(add(len, off), buflen) {\\n        mstore(bufptr, add(len, off))\\n      }\\n      src := add(data, 32)\\n    }\\n\\n    // Copy word-length chunks while possible\\n    for (; len >= 32; len -= 32) {\\n      assembly {\\n        mstore(dest, mload(src))\\n      }\\n      dest += 32;\\n      src += 32;\\n    }\\n\\n    // Copy remaining bytes\\n    uint256 mask = 256**(32 - len) - 1;\\n    assembly {\\n      let srcpart := and(mload(src), not(mask))\\n      let destpart := and(mload(dest), mask)\\n      mstore(dest, or(destpart, srcpart))\\n    }\\n\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @param len The number of bytes to copy.\\n   * @return The original buffer, for chaining.\\n   */\\n  function append(\\n    buffer memory buf,\\n    bytes memory data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, len);\\n  }\\n\\n  /**\\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function append(buffer memory buf, bytes memory data)\\n    internal\\n    pure\\n    returns (buffer memory)\\n  {\\n    return write(buf, buf.buf.length, data, data.length);\\n  }\\n\\n  /**\\n   * @dev Writes a byte to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write the byte at.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeUint8(\\n    buffer memory buf,\\n    uint256 off,\\n    uint8 data\\n  ) internal pure returns (buffer memory) {\\n    if (off >= buf.capacity) {\\n      resize(buf, buf.capacity * 2);\\n    }\\n\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Address = buffer address + sizeof(buffer length) + off\\n      let dest := add(add(bufptr, off), 32)\\n      mstore8(dest, data)\\n      // Update buffer length if we extended it\\n      if eq(off, buflen) {\\n        mstore(bufptr, add(buflen, 1))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function appendUint8(buffer memory buf, uint8 data)\\n    internal\\n    pure\\n    returns (buffer memory)\\n  {\\n    return writeUint8(buf, buf.buf.length, data);\\n  }\\n\\n  /**\\n   * @dev Writes up to 32 bytes to the buffer. Resizes if doing so would\\n   *      exceed the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @param len The number of bytes to write (left-aligned).\\n   * @return The original buffer, for chaining.\\n   */\\n  function write(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes32 data,\\n    uint256 len\\n  ) private pure returns (buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    uint256 mask = 256**len - 1;\\n    // Right-align data\\n    data = data >> (8 * (32 - len));\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Address = buffer address + sizeof(buffer length) + off + len\\n      let dest := add(add(bufptr, off), len)\\n      mstore(dest, or(and(mload(dest), not(mask)), data))\\n      // Update buffer length if we extended it\\n      if gt(add(off, len), mload(bufptr)) {\\n        mstore(bufptr, add(off, len))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Writes a bytes20 to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeBytes20(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes20 data\\n  ) internal pure returns (buffer memory) {\\n    return write(buf, off, bytes32(data), 20);\\n  }\\n\\n  /**\\n   * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chhaining.\\n   */\\n  function appendBytes20(buffer memory buf, bytes20 data)\\n    internal\\n    pure\\n    returns (buffer memory)\\n  {\\n    return write(buf, buf.buf.length, bytes32(data), 20);\\n  }\\n\\n  /**\\n   * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function appendBytes32(buffer memory buf, bytes32 data)\\n    internal\\n    pure\\n    returns (buffer memory)\\n  {\\n    return write(buf, buf.buf.length, data, 32);\\n  }\\n\\n  /**\\n   * @dev Writes an integer to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @param len The number of bytes to write (right-aligned).\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeInt(\\n    buffer memory buf,\\n    uint256 off,\\n    uint256 data,\\n    uint256 len\\n  ) private pure returns (buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    uint256 mask = 256**len - 1;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Address = buffer address + off + sizeof(buffer length) + len\\n      let dest := add(add(bufptr, off), len)\\n      mstore(dest, or(and(mload(dest), not(mask)), data))\\n      // Update buffer length if we extended it\\n      if gt(add(off, len), mload(bufptr)) {\\n        mstore(bufptr, add(off, len))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n   * exceed the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer.\\n   */\\n  function appendInt(\\n    buffer memory buf,\\n    uint256 data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    return writeInt(buf, buf.buf.length, data, len);\\n  }\\n}\\n\\n// File: @ensdomains/dnssec-oracle/contracts/RRUtils.sol\\n\\npragma solidity >0.4.23;\\n\\n/**\\n * @dev RRUtils is a library that provides utilities for parsing DNS resource records.\\n */\\nlibrary RRUtils {\\n  using BytesUtils for *;\\n  using Buffer for *;\\n\\n  /**\\n   * @dev Returns the number of bytes in the DNS name at 'offset' in 'self'.\\n   * @param self The byte array to read a name from.\\n   * @param offset The offset to start reading at.\\n   * @return The length of the DNS name at 'offset', in bytes.\\n   */\\n  function nameLength(bytes memory self, uint256 offset)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    uint256 idx = offset;\\n    while (true) {\\n      assert(idx < self.length);\\n      uint256 labelLen = self.readUint8(idx);\\n      idx += labelLen + 1;\\n      if (labelLen == 0) {\\n        break;\\n      }\\n    }\\n    return idx - offset;\\n  }\\n\\n  /**\\n   * @dev Returns a DNS format name at the specified offset of self.\\n   * @param self The byte array to read a name from.\\n   * @param offset The offset to start reading at.\\n   * @return The name.\\n   */\\n  function readName(bytes memory self, uint256 offset)\\n    internal\\n    pure\\n    returns (bytes memory ret)\\n  {\\n    uint256 len = nameLength(self, offset);\\n    return self.substring(offset, len);\\n  }\\n\\n  /**\\n   * @dev Returns the number of labels in the DNS name at 'offset' in 'self'.\\n   * @param self The byte array to read a name from.\\n   * @param offset The offset to start reading at.\\n   * @return The number of labels in the DNS name at 'offset', in bytes.\\n   */\\n  function labelCount(bytes memory self, uint256 offset)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    uint256 count = 0;\\n    while (true) {\\n      assert(offset < self.length);\\n      uint256 labelLen = self.readUint8(offset);\\n      offset += labelLen + 1;\\n      if (labelLen == 0) {\\n        break;\\n      }\\n      count += 1;\\n    }\\n    return count;\\n  }\\n\\n  /**\\n   * @dev An iterator over resource records.\\n   */\\n  struct RRIterator {\\n    bytes data;\\n    uint256 offset;\\n    uint16 dnstype;\\n    uint16 class;\\n    uint32 ttl;\\n    uint256 rdataOffset;\\n    uint256 nextOffset;\\n  }\\n\\n  /**\\n   * @dev Begins iterating over resource records.\\n   * @param self The byte string to read from.\\n   * @param offset The offset to start reading at.\\n   * @return An iterator object.\\n   */\\n  function iterateRRs(bytes memory self, uint256 offset)\\n    internal\\n    pure\\n    returns (RRIterator memory ret)\\n  {\\n    ret.data = self;\\n    ret.nextOffset = offset;\\n    next(ret);\\n  }\\n\\n  /**\\n   * @dev Returns true iff there are more RRs to iterate.\\n   * @param iter The iterator to check.\\n   * @return True iff the iterator has finished.\\n   */\\n  function done(RRIterator memory iter) internal pure returns (bool) {\\n    return iter.offset >= iter.data.length;\\n  }\\n\\n  /**\\n   * @dev Moves the iterator to the next resource record.\\n   * @param iter The iterator to advance.\\n   */\\n  function next(RRIterator memory iter) internal pure {\\n    iter.offset = iter.nextOffset;\\n    if (iter.offset >= iter.data.length) {\\n      return;\\n    }\\n\\n    // Skip the name\\n    uint256 off = iter.offset + nameLength(iter.data, iter.offset);\\n\\n    // Read type, class, and ttl\\n    iter.dnstype = iter.data.readUint16(off);\\n    off += 2;\\n    iter.class = iter.data.readUint16(off);\\n    off += 2;\\n    iter.ttl = iter.data.readUint32(off);\\n    off += 4;\\n\\n    // Read the rdata\\n    uint256 rdataLength = iter.data.readUint16(off);\\n    off += 2;\\n    iter.rdataOffset = off;\\n    iter.nextOffset = off + rdataLength;\\n  }\\n\\n  /**\\n   * @dev Returns the name of the current record.\\n   * @param iter The iterator.\\n   * @return A new bytes object containing the owner name from the RR.\\n   */\\n  function name(RRIterator memory iter) internal pure returns (bytes memory) {\\n    return iter.data.substring(iter.offset, nameLength(iter.data, iter.offset));\\n  }\\n\\n  /**\\n   * @dev Returns the rdata portion of the current record.\\n   * @param iter The iterator.\\n   * @return A new bytes object containing the RR's RDATA.\\n   */\\n  function rdata(RRIterator memory iter) internal pure returns (bytes memory) {\\n    return\\n      iter.data.substring(iter.rdataOffset, iter.nextOffset - iter.rdataOffset);\\n  }\\n\\n  /**\\n   * @dev Checks if a given RR type exists in a type bitmap.\\n   * @param self The byte string to read the type bitmap from.\\n   * @param offset The offset to start reading at.\\n   * @param rrtype The RR type to check for.\\n   * @return True if the type is found in the bitmap, false otherwise.\\n   */\\n  function checkTypeBitmap(\\n    bytes memory self,\\n    uint256 offset,\\n    uint16 rrtype\\n  ) internal pure returns (bool) {\\n    uint8 typeWindow = uint8(rrtype >> 8);\\n    uint8 windowByte = uint8((rrtype & 0xff) / 8);\\n    uint8 windowBitmask = uint8(uint8(1) << (uint8(7) - uint8(rrtype & 0x7)));\\n    for (uint256 off = offset; off < self.length; ) {\\n      uint8 window = self.readUint8(off);\\n      uint8 len = self.readUint8(off + 1);\\n      if (typeWindow < window) {\\n        // We've gone past our window; it's not here.\\n        return false;\\n      } else if (typeWindow == window) {\\n        // Check this type bitmap\\n        if (len * 8 <= windowByte) {\\n          // Our type is past the end of the bitmap\\n          return false;\\n        }\\n        return (self.readUint8(off + windowByte + 2) & windowBitmask) != 0;\\n      } else {\\n        // Skip this type bitmap\\n        off += len + 2;\\n      }\\n    }\\n\\n    return false;\\n  }\\n\\n  function compareNames(bytes memory self, bytes memory other)\\n    internal\\n    pure\\n    returns (int256)\\n  {\\n    if (self.equals(other)) {\\n      return 0;\\n    }\\n\\n    uint256 off;\\n    uint256 otheroff;\\n    uint256 prevoff;\\n    uint256 otherprevoff;\\n    uint256 counts = labelCount(self, 0);\\n    uint256 othercounts = labelCount(other, 0);\\n\\n    // Keep removing labels from the front of the name until both names are equal length\\n    while (counts > othercounts) {\\n      prevoff = off;\\n      off = progress(self, off);\\n      counts--;\\n    }\\n\\n    while (othercounts > counts) {\\n      otherprevoff = otheroff;\\n      otheroff = progress(other, otheroff);\\n      othercounts--;\\n    }\\n\\n    // Compare the last nonequal labels to each other\\n    while (counts > 0 && !self.equals(off, other, otheroff)) {\\n      prevoff = off;\\n      off = progress(self, off);\\n      otherprevoff = otheroff;\\n      otheroff = progress(other, otheroff);\\n      counts -= 1;\\n    }\\n\\n    if (off == 0) {\\n      return -1;\\n    }\\n    if (otheroff == 0) {\\n      return 1;\\n    }\\n\\n    return\\n      self.compare(\\n        prevoff + 1,\\n        self.readUint8(prevoff),\\n        other,\\n        otherprevoff + 1,\\n        other.readUint8(otherprevoff)\\n      );\\n  }\\n\\n  function progress(bytes memory body, uint256 off)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    return off + 1 + body.readUint8(off);\\n  }\\n}\\n\\n// File: contracts/profiles/DNSResolver.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract DNSResolver is ResolverBase {\\n  using RRUtils for *;\\n  using BytesUtils for bytes;\\n\\n  bytes4 private constant DNS_RECORD_INTERFACE_ID = 0xa8fa5682;\\n\\n  // DNSRecordChanged is emitted whenever a given node/name/resource's RRSET is updated.\\n  event DNSRecordChanged(\\n    bytes32 indexed node,\\n    bytes name,\\n    uint16 resource,\\n    bytes record\\n  );\\n  // DNSRecordDeleted is emitted whenever a given node/name/resource's RRSET is deleted.\\n  event DNSRecordDeleted(bytes32 indexed node, bytes name, uint16 resource);\\n  // DNSZoneCleared is emitted whenever a given node's zone information is cleared.\\n  event DNSZoneCleared(bytes32 indexed node);\\n\\n  // Version the mapping for each zone.  This allows users who have lost\\n  // track of their entries to effectively delete an entire zone by bumping\\n  // the version number.\\n  // node => version\\n  mapping(bytes32 => uint256) private versions;\\n\\n  // The records themselves.  Stored as binary RRSETs\\n  // node => version => name => resource => data\\n  mapping(bytes32 => mapping(uint256 => mapping(bytes32 => mapping(uint16 => bytes))))\\n    private records;\\n\\n  // Count of number of entries for a given name.  Required for DNS resolvers\\n  // when resolving wildcards.\\n  // node => version => name => number of records\\n  mapping(bytes32 => mapping(uint256 => mapping(bytes32 => uint16)))\\n    private nameEntriesCount;\\n\\n  /**\\n   * Set one or more DNS records.  Records are supplied in wire-format.\\n   * Records with the same node/name/resource must be supplied one after the\\n   * other to ensure the data is updated correctly. For example, if the data\\n   * was supplied:\\n   *     a.example.com IN A 1.2.3.4\\n   *     a.example.com IN A 5.6.7.8\\n   *     www.example.com IN CNAME a.example.com.\\n   * then this would store the two A records for a.example.com correctly as a\\n   * single RRSET, however if the data was supplied:\\n   *     a.example.com IN A 1.2.3.4\\n   *     www.example.com IN CNAME a.example.com.\\n   *     a.example.com IN A 5.6.7.8\\n   * then this would store the first A record, the CNAME, then the second A\\n   * record which would overwrite the first.\\n   *\\n   * @param node the namehash of the node for which to set the records\\n   * @param data the DNS wire format records to set\\n   */\\n  function setDNSRecords(bytes32 node, bytes calldata data)\\n    external\\n    authorised(node)\\n  {\\n    uint16 resource = 0;\\n    uint256 offset = 0;\\n    bytes memory name;\\n    bytes memory value;\\n    bytes32 nameHash;\\n    // Iterate over the data to add the resource records\\n    for (\\n      RRUtils.RRIterator memory iter = data.iterateRRs(0);\\n      !iter.done();\\n      iter.next()\\n    ) {\\n      if (resource == 0) {\\n        resource = iter.dnstype;\\n        name = iter.name();\\n        nameHash = keccak256(abi.encodePacked(name));\\n        value = bytes(iter.rdata());\\n      } else {\\n        bytes memory newName = iter.name();\\n        if (resource != iter.dnstype || !name.equals(newName)) {\\n          setDNSRRSet(\\n            node,\\n            name,\\n            resource,\\n            data,\\n            offset,\\n            iter.offset - offset,\\n            value.length == 0\\n          );\\n          resource = iter.dnstype;\\n          offset = iter.offset;\\n          name = newName;\\n          nameHash = keccak256(name);\\n          value = bytes(iter.rdata());\\n        }\\n      }\\n    }\\n    if (name.length > 0) {\\n      setDNSRRSet(\\n        node,\\n        name,\\n        resource,\\n        data,\\n        offset,\\n        data.length - offset,\\n        value.length == 0\\n      );\\n    }\\n  }\\n\\n  /**\\n   * Obtain a DNS record.\\n   * @param node the namehash of the node for which to fetch the record\\n   * @param name the keccak-256 hash of the fully-qualified name for which to fetch the record\\n   * @param resource the ID of the resource as per https://en.wikipedia.org/wiki/List_of_DNS_record_types\\n   * @return the DNS record in wire format if present, otherwise empty\\n   */\\n  function dnsRecord(\\n    bytes32 node,\\n    bytes32 name,\\n    uint16 resource\\n  ) public view returns (bytes memory) {\\n    return records[node][versions[node]][name][resource];\\n  }\\n\\n  /**\\n   * Check if a given node has records.\\n   * @param node the namehash of the node for which to check the records\\n   * @param name the namehash of the node for which to check the records\\n   */\\n  function hasDNSRecords(bytes32 node, bytes32 name)\\n    public\\n    view\\n    returns (bool)\\n  {\\n    return (nameEntriesCount[node][versions[node]][name] != 0);\\n  }\\n\\n  /**\\n   * Clear all information for a DNS zone.\\n   * @param node the namehash of the node for which to clear the zone\\n   */\\n  function clearDNSZone(bytes32 node) public authorised(node) {\\n    versions[node]++;\\n    emit DNSZoneCleared(node);\\n  }\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return\\n      interfaceID == DNS_RECORD_INTERFACE_ID ||\\n      super.supportsInterface(interfaceID);\\n  }\\n\\n  function setDNSRRSet(\\n    bytes32 node,\\n    bytes memory name,\\n    uint16 resource,\\n    bytes memory data,\\n    uint256 offset,\\n    uint256 size,\\n    bool deleteRecord\\n  ) private {\\n    uint256 version = versions[node];\\n    bytes32 nameHash = keccak256(name);\\n    bytes memory rrData = data.substring(offset, size);\\n    if (deleteRecord) {\\n      if (records[node][version][nameHash][resource].length != 0) {\\n        nameEntriesCount[node][version][nameHash]--;\\n      }\\n      delete (records[node][version][nameHash][resource]);\\n      emit DNSRecordDeleted(node, name, resource);\\n    } else {\\n      if (records[node][version][nameHash][resource].length == 0) {\\n        nameEntriesCount[node][version][nameHash]++;\\n      }\\n      records[node][version][nameHash][resource] = rrData;\\n      emit DNSRecordChanged(node, name, resource, rrData);\\n    }\\n  }\\n}\\n\\n// File: contracts/profiles/InterfaceResolver.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract InterfaceResolver is ResolverBase, AddrResolver {\\n  bytes4 private constant INTERFACE_INTERFACE_ID =\\n    bytes4(keccak256('interfaceImplementer(bytes32,bytes4)'));\\n  bytes4 private constant INTERFACE_META_ID = 0x01ffc9a7;\\n\\n  event InterfaceChanged(\\n    bytes32 indexed node,\\n    bytes4 indexed interfaceID,\\n    address implementer\\n  );\\n\\n  mapping(bytes32 => mapping(bytes4 => address)) interfaces;\\n\\n  /**\\n   * Sets an interface associated with a name.\\n   * Setting the address to 0 restores the default behaviour of querying the contract at `addr()` for interface support.\\n   * @param node The node to update.\\n   * @param interfaceID The EIP 168 interface ID.\\n   * @param implementer The address of a contract that implements this interface for this node.\\n   */\\n  function setInterface(\\n    bytes32 node,\\n    bytes4 interfaceID,\\n    address implementer\\n  ) external authorised(node) {\\n    interfaces[node][interfaceID] = implementer;\\n    emit InterfaceChanged(node, interfaceID, implementer);\\n  }\\n\\n  /**\\n   * Returns the address of a contract that implements the specified interface for this name.\\n   * If an implementer has not been set for this interfaceID and name, the resolver will query\\n   * the contract at `addr()`. If `addr()` is set, a contract exists at that address, and that\\n   * contract implements EIP168 and returns `true` for the specified interfaceID, its address\\n   * will be returned.\\n   * @param node The ENS node to query.\\n   * @param interfaceID The EIP 168 interface ID to check for.\\n   * @return The address that implements this interface, or 0 if the interface is unsupported.\\n   */\\n  function interfaceImplementer(bytes32 node, bytes4 interfaceID)\\n    external\\n    view\\n    returns (address)\\n  {\\n    address implementer = interfaces[node][interfaceID];\\n    if (implementer != address(0)) {\\n      return implementer;\\n    }\\n\\n    address a = addr(node);\\n    if (a == address(0)) {\\n      return address(0);\\n    }\\n\\n    (bool success, bytes memory returnData) = a.staticcall(\\n      abi.encodeWithSignature('supportsInterface(bytes4)', INTERFACE_META_ID)\\n    );\\n    if (!success || returnData.length < 32 || returnData[31] == 0) {\\n      // EIP 168 not supported by target\\n      return address(0);\\n    }\\n\\n    (success, returnData) = a.staticcall(\\n      abi.encodeWithSignature('supportsInterface(bytes4)', interfaceID)\\n    );\\n    if (!success || returnData.length < 32 || returnData[31] == 0) {\\n      // Specified interface not supported by target\\n      return address(0);\\n    }\\n\\n    return a;\\n  }\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return\\n      interfaceID == INTERFACE_INTERFACE_ID ||\\n      super.supportsInterface(interfaceID);\\n  }\\n}\\n\\n// File: contracts/profiles/NameResolver.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract NameResolver is ResolverBase {\\n  bytes4 private constant NAME_INTERFACE_ID = 0x691f3431;\\n\\n  event NameChanged(bytes32 indexed node, string name);\\n\\n  mapping(bytes32 => string) names;\\n\\n  /**\\n   * Sets the name associated with an ENS node, for reverse records.\\n   * May only be called by the owner of that node in the ENS registry.\\n   * @param node The node to update.\\n   * @param name The name to set.\\n   */\\n  function setName(bytes32 node, string calldata name)\\n    external\\n    authorised(node)\\n  {\\n    names[node] = name;\\n    emit NameChanged(node, name);\\n  }\\n\\n  /**\\n   * Returns the name associated with an ENS node, for reverse records.\\n   * Defined in EIP181.\\n   * @param node The ENS node to query.\\n   * @return The associated name.\\n   */\\n  function name(bytes32 node) external view returns (string memory) {\\n    return names[node];\\n  }\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return\\n      interfaceID == NAME_INTERFACE_ID || super.supportsInterface(interfaceID);\\n  }\\n}\\n\\n// File: contracts/profiles/PubkeyResolver.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract PubkeyResolver is ResolverBase {\\n  bytes4 private constant PUBKEY_INTERFACE_ID = 0xc8690233;\\n\\n  event PubkeyChanged(bytes32 indexed node, bytes32 x, bytes32 y);\\n\\n  struct PublicKey {\\n    bytes32 x;\\n    bytes32 y;\\n  }\\n\\n  mapping(bytes32 => PublicKey) pubkeys;\\n\\n  /**\\n   * Sets the SECP256k1 public key associated with an ENS node.\\n   * @param node The ENS node to query\\n   * @param x the X coordinate of the curve point for the public key.\\n   * @param y the Y coordinate of the curve point for the public key.\\n   */\\n  function setPubkey(\\n    bytes32 node,\\n    bytes32 x,\\n    bytes32 y\\n  ) external authorised(node) {\\n    pubkeys[node] = PublicKey(x, y);\\n    emit PubkeyChanged(node, x, y);\\n  }\\n\\n  /**\\n   * Returns the SECP256k1 public key associated with an ENS node.\\n   * Defined in EIP 619.\\n   * @param node The ENS node to query\\n   * @return x, y the X and Y coordinates of the curve point for the public key.\\n   */\\n  function pubkey(bytes32 node) external view returns (bytes32 x, bytes32 y) {\\n    return (pubkeys[node].x, pubkeys[node].y);\\n  }\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return\\n      interfaceID == PUBKEY_INTERFACE_ID ||\\n      super.supportsInterface(interfaceID);\\n  }\\n}\\n\\n// File: contracts/profiles/TextResolver.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract TextResolver is ResolverBase {\\n  bytes4 private constant TEXT_INTERFACE_ID = 0x59d1d43c;\\n\\n  event TextChanged(\\n    bytes32 indexed node,\\n    string indexed indexedKey,\\n    string key\\n  );\\n\\n  mapping(bytes32 => mapping(string => string)) texts;\\n\\n  /**\\n   * Sets the text data associated with an ENS node and key.\\n   * May only be called by the owner of that node in the ENS registry.\\n   * @param node The node to update.\\n   * @param key The key to set.\\n   * @param value The text data value to set.\\n   */\\n  function setText(\\n    bytes32 node,\\n    string calldata key,\\n    string calldata value\\n  ) external authorised(node) {\\n    texts[node][key] = value;\\n    emit TextChanged(node, key, key);\\n  }\\n\\n  /**\\n   * Returns the text data associated with an ENS node and key.\\n   * @param node The ENS node to query.\\n   * @param key The text data key to query.\\n   * @return The associated text data.\\n   */\\n  function text(bytes32 node, string calldata key)\\n    external\\n    view\\n    returns (string memory)\\n  {\\n    return texts[node][key];\\n  }\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return\\n      interfaceID == TEXT_INTERFACE_ID || super.supportsInterface(interfaceID);\\n  }\\n}\\n\\n// File: contracts/PublicResolver.sol\\n\\npragma solidity ^0.5.0;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * A simple resolver anyone can use; only allows the owner of a node to set its\\n * address.\\n */\\ncontract PublicResolver_mainnet_9412610 is\\n  ABIResolver,\\n  AddrResolver,\\n  ContentHashResolver,\\n  DNSResolver,\\n  InterfaceResolver,\\n  NameResolver,\\n  PubkeyResolver,\\n  TextResolver\\n{\\n  ENS ens;\\n\\n  /**\\n   * A mapping of authorisations. An address that is authorised for a name\\n   * may make any changes to the name that the owner could, but may not update\\n   * the set of authorisations.\\n   * (node, owner, caller) => isAuthorised\\n   */\\n  mapping(bytes32 => mapping(address => mapping(address => bool)))\\n    public authorisations;\\n\\n  event AuthorisationChanged(\\n    bytes32 indexed node,\\n    address indexed owner,\\n    address indexed target,\\n    bool isAuthorised\\n  );\\n\\n  constructor(ENS _ens) public {\\n    ens = _ens;\\n  }\\n\\n  /**\\n   * @dev Sets or clears an authorisation.\\n   * Authorisations are specific to the caller. Any account can set an authorisation\\n   * for any name, but the authorisation that is checked will be that of the\\n   * current owner of a name. Thus, transferring a name effectively clears any\\n   * existing authorisations, and new authorisations can be set in advance of\\n   * an ownership transfer if desired.\\n   *\\n   * @param node The name to change the authorisation on.\\n   * @param target The address that is to be authorised or deauthorised.\\n   * @param isAuthorised True if the address should be authorised, or false if it should be deauthorised.\\n   */\\n  function setAuthorisation(\\n    bytes32 node,\\n    address target,\\n    bool isAuthorised\\n  ) external {\\n    authorisations[node][msg.sender][target] = isAuthorised;\\n    emit AuthorisationChanged(node, msg.sender, target, isAuthorised);\\n  }\\n\\n  function isAuthorised(bytes32 node) internal view returns (bool) {\\n    address owner = ens.owner(node);\\n    return owner == msg.sender || authorisations[node][owner][msg.sender];\\n  }\\n\\n  function multicall(bytes[] calldata data)\\n    external\\n    returns (bytes[] memory results)\\n  {\\n    results = new bytes[](data.length);\\n    for (uint256 i = 0; i < data.length; i++) {\\n      (bool success, bytes memory result) = address(this).delegatecall(data[i]);\\n      require(success);\\n      results[i] = result;\\n    }\\n    return results;\\n  }\\n}\\n\",\"keccak256\":\"0x29ca7d322ab7177f187f9bfc310e6dfc94049e9beaaafe958bead081fd90ad76\"}},\"version\":1}",
          "storageLayout": {
            "storage": [],
            "types": null
          },
          "userdoc": {
            "methods": {}
          }
        },
        "InterfaceResolver": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "node",
                  "type": "bytes32"
                },
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "a",
                  "type": "address"
                }
              ],
              "name": "AddrChanged",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "node",
                  "type": "bytes32"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "coinType",
                  "type": "uint256"
                },
                {
                  "indexed": false,
                  "internalType": "bytes",
                  "name": "newAddress",
                  "type": "bytes"
                }
              ],
              "name": "AddressChanged",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "node",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "bytes4",
                  "name": "interfaceID",
                  "type": "bytes4"
                },
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "implementer",
                  "type": "address"
                }
              ],
              "name": "InterfaceChanged",
              "type": "event"
            },
            {
              "constant": true,
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "node",
                  "type": "bytes32"
                }
              ],
              "name": "addr",
              "outputs": [
                {
                  "internalType": "address payable",
                  "name": "",
                  "type": "address"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "node",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "coinType",
                  "type": "uint256"
                }
              ],
              "name": "addr",
              "outputs": [
                {
                  "internalType": "bytes",
                  "name": "",
                  "type": "bytes"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "node",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes4",
                  "name": "interfaceID",
                  "type": "bytes4"
                }
              ],
              "name": "interfaceImplementer",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "node",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "coinType",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "a",
                  "type": "bytes"
                }
              ],
              "name": "setAddr",
              "outputs": [],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "node",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "a",
                  "type": "address"
                }
              ],
              "name": "setAddr",
              "outputs": [],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "node",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes4",
                  "name": "interfaceID",
                  "type": "bytes4"
                },
                {
                  "internalType": "address",
                  "name": "implementer",
                  "type": "address"
                }
              ],
              "name": "setInterface",
              "outputs": [],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [
                {
                  "internalType": "bytes4",
                  "name": "interfaceID",
                  "type": "bytes4"
                }
              ],
              "name": "supportsInterface",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "payable": false,
              "stateMutability": "pure",
              "type": "function"
            }
          ],
          "devdoc": {
            "methods": {
              "addr(bytes32)": {
                "params": {
                  "node": "The ENS node to query."
                },
                "return": "The associated address."
              },
              "interfaceImplementer(bytes32,bytes4)": {
                "params": {
                  "interfaceID": "The EIP 168 interface ID to check for.",
                  "node": "The ENS node to query."
                },
                "return": "The address that implements this interface, or 0 if the interface is unsupported."
              },
              "setAddr(bytes32,address)": {
                "params": {
                  "a": "The address to set.",
                  "node": "The node to update."
                }
              },
              "setInterface(bytes32,bytes4,address)": {
                "params": {
                  "implementer": "The address of a contract that implements this interface for this node.",
                  "interfaceID": "The EIP 168 interface ID.",
                  "node": "The node to update."
                }
              }
            }
          },
          "evm": {
            "bytecode": {
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "gasEstimates": null,
            "methodIdentifiers": {
              "addr(bytes32)": "3b3b57de",
              "addr(bytes32,uint256)": "f1cb7e06",
              "interfaceImplementer(bytes32,bytes4)": "124a319c",
              "setAddr(bytes32,address)": "d5fa2b00",
              "setAddr(bytes32,uint256,bytes)": "8b95dd71",
              "setInterface(bytes32,bytes4,address)": "e59d895d",
              "supportsInterface(bytes4)": "01ffc9a7"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.5.17+commit.d19bba13\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"AddrChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"coinType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"newAddress\",\"type\":\"bytes\"}],\"name\":\"AddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"implementer\",\"type\":\"address\"}],\"name\":\"InterfaceChanged\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"addr\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"coinType\",\"type\":\"uint256\"}],\"name\":\"addr\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"interfaceImplementer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"coinType\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"a\",\"type\":\"bytes\"}],\"name\":\"setAddr\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"setAddr\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"},{\"internalType\":\"address\",\"name\":\"implementer\",\"type\":\"address\"}],\"name\":\"setInterface\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"addr(bytes32)\":{\"params\":{\"node\":\"The ENS node to query.\"},\"return\":\"The associated address.\"},\"interfaceImplementer(bytes32,bytes4)\":{\"params\":{\"interfaceID\":\"The EIP 168 interface ID to check for.\",\"node\":\"The ENS node to query.\"},\"return\":\"The address that implements this interface, or 0 if the interface is unsupported.\"},\"setAddr(bytes32,address)\":{\"params\":{\"a\":\"The address to set.\",\"node\":\"The node to update.\"}},\"setInterface(bytes32,bytes4,address)\":{\"params\":{\"implementer\":\"The address of a contract that implements this interface for this node.\",\"interfaceID\":\"The EIP 168 interface ID.\",\"node\":\"The node to update.\"}}}},\"userdoc\":{\"methods\":{\"addr(bytes32)\":{\"notice\":\"Returns the address associated with an ENS node.\"},\"interfaceImplementer(bytes32,bytes4)\":{\"notice\":\"Returns the address of a contract that implements the specified interface for this name. If an implementer has not been set for this interfaceID and name, the resolver will query the contract at `addr()`. If `addr()` is set, a contract exists at that address, and that contract implements EIP168 and returns `true` for the specified interfaceID, its address will be returned.\"},\"setAddr(bytes32,address)\":{\"notice\":\"Sets the address associated with an ENS node. May only be called by the owner of that node in the ENS registry.\"},\"setInterface(bytes32,bytes4,address)\":{\"notice\":\"Sets an interface associated with a name. Setting the address to 0 restores the default behaviour of querying the contract at `addr()` for interface support.\"}}}},\"settings\":{\"compilationTarget\":{\"contracts/legacy/PublicResolver_mainnet_9412610.sol\":\"InterfaceResolver\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"contracts/legacy/PublicResolver_mainnet_9412610.sol\":{\"content\":\"/**\\n *Submitted for verification at Etherscan.io on 2020-02-03\\n */\\n\\n// File: @ensdomains/ens/contracts/ENS.sol\\n\\npragma solidity >=0.4.24;\\n\\ninterface ENS {\\n  // Logged when the owner of a node assigns a new owner to a subnode.\\n  event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n  // Logged when the owner of a node transfers ownership to a new account.\\n  event Transfer(bytes32 indexed node, address owner);\\n\\n  // Logged when the resolver for a node changes.\\n  event NewResolver(bytes32 indexed node, address resolver);\\n\\n  // Logged when the TTL of a node changes\\n  event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n  function setSubnodeOwner(\\n    bytes32 node,\\n    bytes32 label,\\n    address owner\\n  ) external;\\n\\n  function setResolver(bytes32 node, address resolver) external;\\n\\n  function setOwner(bytes32 node, address owner) external;\\n\\n  function setTTL(bytes32 node, uint64 ttl) external;\\n\\n  function owner(bytes32 node) external view returns (address);\\n\\n  function resolver(bytes32 node) external view returns (address);\\n\\n  function ttl(bytes32 node) external view returns (uint64);\\n}\\n\\n// File: contracts/ResolverBase.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract ResolverBase {\\n  bytes4 private constant INTERFACE_META_ID = 0x01ffc9a7;\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return interfaceID == INTERFACE_META_ID;\\n  }\\n\\n  function isAuthorised(bytes32 node) internal view returns (bool);\\n\\n  modifier authorised(bytes32 node) {\\n    require(isAuthorised(node));\\n    _;\\n  }\\n\\n  function bytesToAddress(bytes memory b)\\n    internal\\n    pure\\n    returns (address payable a)\\n  {\\n    require(b.length == 20);\\n    assembly {\\n      a := div(mload(add(b, 32)), exp(256, 12))\\n    }\\n  }\\n\\n  function addressToBytes(address a) internal pure returns (bytes memory b) {\\n    b = new bytes(20);\\n    assembly {\\n      mstore(add(b, 32), mul(a, exp(256, 12)))\\n    }\\n  }\\n}\\n\\n// File: contracts/profiles/ABIResolver.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract ABIResolver is ResolverBase {\\n  bytes4 private constant ABI_INTERFACE_ID = 0x2203ab56;\\n\\n  event ABIChanged(bytes32 indexed node, uint256 indexed contentType);\\n\\n  mapping(bytes32 => mapping(uint256 => bytes)) abis;\\n\\n  /**\\n   * Sets the ABI associated with an ENS node.\\n   * Nodes may have one ABI of each content type. To remove an ABI, set it to\\n   * the empty string.\\n   * @param node The node to update.\\n   * @param contentType The content type of the ABI\\n   * @param data The ABI data.\\n   */\\n  function setABI(\\n    bytes32 node,\\n    uint256 contentType,\\n    bytes calldata data\\n  ) external authorised(node) {\\n    // Content types must be powers of 2\\n    require(((contentType - 1) & contentType) == 0);\\n\\n    abis[node][contentType] = data;\\n    emit ABIChanged(node, contentType);\\n  }\\n\\n  /**\\n   * Returns the ABI associated with an ENS node.\\n   * Defined in EIP205.\\n   * @param node The ENS node to query\\n   * @param contentTypes A bitwise OR of the ABI formats accepted by the caller.\\n   * @return contentType The content type of the return value\\n   * @return data The ABI data\\n   */\\n  function ABI(bytes32 node, uint256 contentTypes)\\n    external\\n    view\\n    returns (uint256, bytes memory)\\n  {\\n    mapping(uint256 => bytes) storage abiset = abis[node];\\n\\n    for (\\n      uint256 contentType = 1;\\n      contentType <= contentTypes;\\n      contentType <<= 1\\n    ) {\\n      if ((contentType & contentTypes) != 0 && abiset[contentType].length > 0) {\\n        return (contentType, abiset[contentType]);\\n      }\\n    }\\n\\n    return (0, bytes(''));\\n  }\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return\\n      interfaceID == ABI_INTERFACE_ID || super.supportsInterface(interfaceID);\\n  }\\n}\\n\\n// File: contracts/profiles/AddrResolver.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract AddrResolver is ResolverBase {\\n  bytes4 private constant ADDR_INTERFACE_ID = 0x3b3b57de;\\n  bytes4 private constant ADDRESS_INTERFACE_ID = 0xf1cb7e06;\\n  uint256 private constant COIN_TYPE_ETH = 60;\\n\\n  event AddrChanged(bytes32 indexed node, address a);\\n  event AddressChanged(\\n    bytes32 indexed node,\\n    uint256 coinType,\\n    bytes newAddress\\n  );\\n\\n  mapping(bytes32 => mapping(uint256 => bytes)) _addresses;\\n\\n  /**\\n   * Sets the address associated with an ENS node.\\n   * May only be called by the owner of that node in the ENS registry.\\n   * @param node The node to update.\\n   * @param a The address to set.\\n   */\\n  function setAddr(bytes32 node, address a) external authorised(node) {\\n    setAddr(node, COIN_TYPE_ETH, addressToBytes(a));\\n  }\\n\\n  /**\\n   * Returns the address associated with an ENS node.\\n   * @param node The ENS node to query.\\n   * @return The associated address.\\n   */\\n  function addr(bytes32 node) public view returns (address payable) {\\n    bytes memory a = addr(node, COIN_TYPE_ETH);\\n    if (a.length == 0) {\\n      return address(0);\\n    }\\n    return bytesToAddress(a);\\n  }\\n\\n  function setAddr(\\n    bytes32 node,\\n    uint256 coinType,\\n    bytes memory a\\n  ) public authorised(node) {\\n    emit AddressChanged(node, coinType, a);\\n    if (coinType == COIN_TYPE_ETH) {\\n      emit AddrChanged(node, bytesToAddress(a));\\n    }\\n    _addresses[node][coinType] = a;\\n  }\\n\\n  function addr(bytes32 node, uint256 coinType)\\n    public\\n    view\\n    returns (bytes memory)\\n  {\\n    return _addresses[node][coinType];\\n  }\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return\\n      interfaceID == ADDR_INTERFACE_ID ||\\n      interfaceID == ADDRESS_INTERFACE_ID ||\\n      super.supportsInterface(interfaceID);\\n  }\\n}\\n\\n// File: contracts/profiles/ContentHashResolver.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract ContentHashResolver is ResolverBase {\\n  bytes4 private constant CONTENT_HASH_INTERFACE_ID = 0xbc1c58d1;\\n\\n  event ContenthashChanged(bytes32 indexed node, bytes hash);\\n\\n  mapping(bytes32 => bytes) hashes;\\n\\n  /**\\n   * Sets the contenthash associated with an ENS node.\\n   * May only be called by the owner of that node in the ENS registry.\\n   * @param node The node to update.\\n   * @param hash The contenthash to set\\n   */\\n  function setContenthash(bytes32 node, bytes calldata hash)\\n    external\\n    authorised(node)\\n  {\\n    hashes[node] = hash;\\n    emit ContenthashChanged(node, hash);\\n  }\\n\\n  /**\\n   * Returns the contenthash associated with an ENS node.\\n   * @param node The ENS node to query.\\n   * @return The associated contenthash.\\n   */\\n  function contenthash(bytes32 node) external view returns (bytes memory) {\\n    return hashes[node];\\n  }\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return\\n      interfaceID == CONTENT_HASH_INTERFACE_ID ||\\n      super.supportsInterface(interfaceID);\\n  }\\n}\\n\\n// File: @ensdomains/dnssec-oracle/contracts/BytesUtils.sol\\n\\npragma solidity >0.4.23;\\n\\nlibrary BytesUtils {\\n  /*\\n   * @dev Returns the keccak-256 hash of a byte range.\\n   * @param self The byte string to hash.\\n   * @param offset The position to start hashing at.\\n   * @param len The number of bytes to hash.\\n   * @return The hash of the byte range.\\n   */\\n  function keccak(\\n    bytes memory self,\\n    uint256 offset,\\n    uint256 len\\n  ) internal pure returns (bytes32 ret) {\\n    require(offset + len <= self.length);\\n    assembly {\\n      ret := keccak256(add(add(self, 32), offset), len)\\n    }\\n  }\\n\\n  /*\\n   * @dev Returns a positive number if `other` comes lexicographically after\\n   *      `self`, a negative number if it comes before, or zero if the\\n   *      contents of the two bytes are equal.\\n   * @param self The first bytes to compare.\\n   * @param other The second bytes to compare.\\n   * @return The result of the comparison.\\n   */\\n  function compare(bytes memory self, bytes memory other)\\n    internal\\n    pure\\n    returns (int256)\\n  {\\n    return compare(self, 0, self.length, other, 0, other.length);\\n  }\\n\\n  /*\\n   * @dev Returns a positive number if `other` comes lexicographically after\\n   *      `self`, a negative number if it comes before, or zero if the\\n   *      contents of the two bytes are equal. Comparison is done per-rune,\\n   *      on unicode codepoints.\\n   * @param self The first bytes to compare.\\n   * @param offset The offset of self.\\n   * @param len    The length of self.\\n   * @param other The second bytes to compare.\\n   * @param otheroffset The offset of the other string.\\n   * @param otherlen    The length of the other string.\\n   * @return The result of the comparison.\\n   */\\n  function compare(\\n    bytes memory self,\\n    uint256 offset,\\n    uint256 len,\\n    bytes memory other,\\n    uint256 otheroffset,\\n    uint256 otherlen\\n  ) internal pure returns (int256) {\\n    uint256 shortest = len;\\n    if (otherlen < len) shortest = otherlen;\\n\\n    uint256 selfptr;\\n    uint256 otherptr;\\n\\n    assembly {\\n      selfptr := add(self, add(offset, 32))\\n      otherptr := add(other, add(otheroffset, 32))\\n    }\\n    for (uint256 idx = 0; idx < shortest; idx += 32) {\\n      uint256 a;\\n      uint256 b;\\n      assembly {\\n        a := mload(selfptr)\\n        b := mload(otherptr)\\n      }\\n      if (a != b) {\\n        // Mask out irrelevant bytes and check again\\n        uint256 mask;\\n        if (shortest > 32) {\\n          mask = uint256(-1); // aka 0xffffff....\\n        } else {\\n          mask = ~(2**(8 * (32 - shortest + idx)) - 1);\\n        }\\n        uint256 diff = (a & mask) - (b & mask);\\n        if (diff != 0) return int256(diff);\\n      }\\n      selfptr += 32;\\n      otherptr += 32;\\n    }\\n\\n    return int256(len) - int256(otherlen);\\n  }\\n\\n  /*\\n   * @dev Returns true if the two byte ranges are equal.\\n   * @param self The first byte range to compare.\\n   * @param offset The offset into the first byte range.\\n   * @param other The second byte range to compare.\\n   * @param otherOffset The offset into the second byte range.\\n   * @param len The number of bytes to compare\\n   * @return True if the byte ranges are equal, false otherwise.\\n   */\\n  function equals(\\n    bytes memory self,\\n    uint256 offset,\\n    bytes memory other,\\n    uint256 otherOffset,\\n    uint256 len\\n  ) internal pure returns (bool) {\\n    return keccak(self, offset, len) == keccak(other, otherOffset, len);\\n  }\\n\\n  /*\\n   * @dev Returns true if the two byte ranges are equal with offsets.\\n   * @param self The first byte range to compare.\\n   * @param offset The offset into the first byte range.\\n   * @param other The second byte range to compare.\\n   * @param otherOffset The offset into the second byte range.\\n   * @return True if the byte ranges are equal, false otherwise.\\n   */\\n  function equals(\\n    bytes memory self,\\n    uint256 offset,\\n    bytes memory other,\\n    uint256 otherOffset\\n  ) internal pure returns (bool) {\\n    return\\n      keccak(self, offset, self.length - offset) ==\\n      keccak(other, otherOffset, other.length - otherOffset);\\n  }\\n\\n  /*\\n   * @dev Compares a range of 'self' to all of 'other' and returns True iff\\n   *      they are equal.\\n   * @param self The first byte range to compare.\\n   * @param offset The offset into the first byte range.\\n   * @param other The second byte range to compare.\\n   * @return True if the byte ranges are equal, false otherwise.\\n   */\\n  function equals(\\n    bytes memory self,\\n    uint256 offset,\\n    bytes memory other\\n  ) internal pure returns (bool) {\\n    return\\n      self.length >= offset + other.length &&\\n      equals(self, offset, other, 0, other.length);\\n  }\\n\\n  /*\\n   * @dev Returns true if the two byte ranges are equal.\\n   * @param self The first byte range to compare.\\n   * @param other The second byte range to compare.\\n   * @return True if the byte ranges are equal, false otherwise.\\n   */\\n  function equals(bytes memory self, bytes memory other)\\n    internal\\n    pure\\n    returns (bool)\\n  {\\n    return\\n      self.length == other.length && equals(self, 0, other, 0, self.length);\\n  }\\n\\n  /*\\n   * @dev Returns the 8-bit number at the specified index of self.\\n   * @param self The byte string.\\n   * @param idx The index into the bytes\\n   * @return The specified 8 bits of the string, interpreted as an integer.\\n   */\\n  function readUint8(bytes memory self, uint256 idx)\\n    internal\\n    pure\\n    returns (uint8 ret)\\n  {\\n    return uint8(self[idx]);\\n  }\\n\\n  /*\\n   * @dev Returns the 16-bit number at the specified index of self.\\n   * @param self The byte string.\\n   * @param idx The index into the bytes\\n   * @return The specified 16 bits of the string, interpreted as an integer.\\n   */\\n  function readUint16(bytes memory self, uint256 idx)\\n    internal\\n    pure\\n    returns (uint16 ret)\\n  {\\n    require(idx + 2 <= self.length);\\n    assembly {\\n      ret := and(mload(add(add(self, 2), idx)), 0xFFFF)\\n    }\\n  }\\n\\n  /*\\n   * @dev Returns the 32-bit number at the specified index of self.\\n   * @param self The byte string.\\n   * @param idx The index into the bytes\\n   * @return The specified 32 bits of the string, interpreted as an integer.\\n   */\\n  function readUint32(bytes memory self, uint256 idx)\\n    internal\\n    pure\\n    returns (uint32 ret)\\n  {\\n    require(idx + 4 <= self.length);\\n    assembly {\\n      ret := and(mload(add(add(self, 4), idx)), 0xFFFFFFFF)\\n    }\\n  }\\n\\n  /*\\n   * @dev Returns the 32 byte value at the specified index of self.\\n   * @param self The byte string.\\n   * @param idx The index into the bytes\\n   * @return The specified 32 bytes of the string.\\n   */\\n  function readBytes32(bytes memory self, uint256 idx)\\n    internal\\n    pure\\n    returns (bytes32 ret)\\n  {\\n    require(idx + 32 <= self.length);\\n    assembly {\\n      ret := mload(add(add(self, 32), idx))\\n    }\\n  }\\n\\n  /*\\n   * @dev Returns the 32 byte value at the specified index of self.\\n   * @param self The byte string.\\n   * @param idx The index into the bytes\\n   * @return The specified 32 bytes of the string.\\n   */\\n  function readBytes20(bytes memory self, uint256 idx)\\n    internal\\n    pure\\n    returns (bytes20 ret)\\n  {\\n    require(idx + 20 <= self.length);\\n    assembly {\\n      ret := and(\\n        mload(add(add(self, 32), idx)),\\n        0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000\\n      )\\n    }\\n  }\\n\\n  /*\\n   * @dev Returns the n byte value at the specified index of self.\\n   * @param self The byte string.\\n   * @param idx The index into the bytes.\\n   * @param len The number of bytes.\\n   * @return The specified 32 bytes of the string.\\n   */\\n  function readBytesN(\\n    bytes memory self,\\n    uint256 idx,\\n    uint256 len\\n  ) internal pure returns (bytes32 ret) {\\n    require(len <= 32);\\n    require(idx + len <= self.length);\\n    assembly {\\n      let mask := not(sub(exp(256, sub(32, len)), 1))\\n      ret := and(mload(add(add(self, 32), idx)), mask)\\n    }\\n  }\\n\\n  function memcpy(\\n    uint256 dest,\\n    uint256 src,\\n    uint256 len\\n  ) private pure {\\n    // Copy word-length chunks while possible\\n    for (; len >= 32; len -= 32) {\\n      assembly {\\n        mstore(dest, mload(src))\\n      }\\n      dest += 32;\\n      src += 32;\\n    }\\n\\n    // Copy remaining bytes\\n    uint256 mask = 256**(32 - len) - 1;\\n    assembly {\\n      let srcpart := and(mload(src), not(mask))\\n      let destpart := and(mload(dest), mask)\\n      mstore(dest, or(destpart, srcpart))\\n    }\\n  }\\n\\n  /*\\n   * @dev Copies a substring into a new byte string.\\n   * @param self The byte string to copy from.\\n   * @param offset The offset to start copying at.\\n   * @param len The number of bytes to copy.\\n   */\\n  function substring(\\n    bytes memory self,\\n    uint256 offset,\\n    uint256 len\\n  ) internal pure returns (bytes memory) {\\n    require(offset + len <= self.length);\\n\\n    bytes memory ret = new bytes(len);\\n    uint256 dest;\\n    uint256 src;\\n\\n    assembly {\\n      dest := add(ret, 32)\\n      src := add(add(self, 32), offset)\\n    }\\n    memcpy(dest, src, len);\\n\\n    return ret;\\n  }\\n\\n  // Maps characters from 0x30 to 0x7A to their base32 values.\\n  // 0xFF represents invalid characters in that range.\\n  bytes constant base32HexTable =\\n    hex'00010203040506070809FFFFFFFFFFFFFF0A0B0C0D0E0F101112131415161718191A1B1C1D1E1FFFFFFFFFFFFFFFFFFFFF0A0B0C0D0E0F101112131415161718191A1B1C1D1E1F';\\n\\n  /**\\n   * @dev Decodes unpadded base32 data of up to one word in length.\\n   * @param self The data to decode.\\n   * @param off Offset into the string to start at.\\n   * @param len Number of characters to decode.\\n   * @return The decoded data, left aligned.\\n   */\\n  function base32HexDecodeWord(\\n    bytes memory self,\\n    uint256 off,\\n    uint256 len\\n  ) internal pure returns (bytes32) {\\n    require(len <= 52);\\n\\n    uint256 ret = 0;\\n    uint8 decoded;\\n    for (uint256 i = 0; i < len; i++) {\\n      bytes1 char = self[off + i];\\n      require(char >= 0x30 && char <= 0x7A);\\n      decoded = uint8(base32HexTable[uint256(uint8(char)) - 0x30]);\\n      require(decoded <= 0x20);\\n      if (i == len - 1) {\\n        break;\\n      }\\n      ret = (ret << 5) | decoded;\\n    }\\n\\n    uint256 bitlen = len * 5;\\n    if (len % 8 == 0) {\\n      // Multiple of 8 characters, no padding\\n      ret = (ret << 5) | decoded;\\n    } else if (len % 8 == 2) {\\n      // Two extra characters - 1 byte\\n      ret = (ret << 3) | (decoded >> 2);\\n      bitlen -= 2;\\n    } else if (len % 8 == 4) {\\n      // Four extra characters - 2 bytes\\n      ret = (ret << 1) | (decoded >> 4);\\n      bitlen -= 4;\\n    } else if (len % 8 == 5) {\\n      // Five extra characters - 3 bytes\\n      ret = (ret << 4) | (decoded >> 1);\\n      bitlen -= 1;\\n    } else if (len % 8 == 7) {\\n      // Seven extra characters - 4 bytes\\n      ret = (ret << 2) | (decoded >> 3);\\n      bitlen -= 3;\\n    } else {\\n      revert();\\n    }\\n\\n    return bytes32(ret << (256 - bitlen));\\n  }\\n}\\n\\n// File: @ensdomains/buffer/contracts/Buffer.sol\\n\\npragma solidity >0.4.18;\\n\\n/**\\n * @dev A library for working with mutable byte buffers in Solidity.\\n *\\n * Byte buffers are mutable and expandable, and provide a variety of primitives\\n * for writing to them. At any time you can fetch a bytes object containing the\\n * current contents of the buffer. The bytes object should not be stored between\\n * operations, as it may change due to resizing of the buffer.\\n */\\nlibrary Buffer {\\n  /**\\n   * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n   *      a capacity. The capacity may be longer than the current value, in\\n   *      which case it can be extended without the need to allocate more memory.\\n   */\\n  struct buffer {\\n    bytes buf;\\n    uint256 capacity;\\n  }\\n\\n  /**\\n   * @dev Initializes a buffer with an initial capacity.\\n   * @param buf The buffer to initialize.\\n   * @param capacity The number of bytes of space to allocate the buffer.\\n   * @return The buffer, for chaining.\\n   */\\n  function init(buffer memory buf, uint256 capacity)\\n    internal\\n    pure\\n    returns (buffer memory)\\n  {\\n    if (capacity % 32 != 0) {\\n      capacity += 32 - (capacity % 32);\\n    }\\n    // Allocate space for the buffer data\\n    buf.capacity = capacity;\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(buf, ptr)\\n      mstore(ptr, 0)\\n      mstore(0x40, add(32, add(ptr, capacity)))\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Initializes a new buffer from an existing bytes object.\\n   *      Changes to the buffer may mutate the original value.\\n   * @param b The bytes object to initialize the buffer with.\\n   * @return A new buffer.\\n   */\\n  function fromBytes(bytes memory b) internal pure returns (buffer memory) {\\n    buffer memory buf;\\n    buf.buf = b;\\n    buf.capacity = b.length;\\n    return buf;\\n  }\\n\\n  function resize(buffer memory buf, uint256 capacity) private pure {\\n    bytes memory oldbuf = buf.buf;\\n    init(buf, capacity);\\n    append(buf, oldbuf);\\n  }\\n\\n  function max(uint256 a, uint256 b) private pure returns (uint256) {\\n    if (a > b) {\\n      return a;\\n    }\\n    return b;\\n  }\\n\\n  /**\\n   * @dev Sets buffer length to 0.\\n   * @param buf The buffer to truncate.\\n   * @return The original buffer, for chaining..\\n   */\\n  function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n    assembly {\\n      let bufptr := mload(buf)\\n      mstore(bufptr, 0)\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Writes a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The start offset to write to.\\n   * @param data The data to append.\\n   * @param len The number of bytes to copy.\\n   * @return The original buffer, for chaining.\\n   */\\n  function write(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes memory data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    require(len <= data.length);\\n\\n    if (off + len > buf.capacity) {\\n      resize(buf, max(buf.capacity, len + off) * 2);\\n    }\\n\\n    uint256 dest;\\n    uint256 src;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Start address = buffer address + offset + sizeof(buffer length)\\n      dest := add(add(bufptr, 32), off)\\n      // Update buffer length if we're extending it\\n      if gt(add(len, off), buflen) {\\n        mstore(bufptr, add(len, off))\\n      }\\n      src := add(data, 32)\\n    }\\n\\n    // Copy word-length chunks while possible\\n    for (; len >= 32; len -= 32) {\\n      assembly {\\n        mstore(dest, mload(src))\\n      }\\n      dest += 32;\\n      src += 32;\\n    }\\n\\n    // Copy remaining bytes\\n    uint256 mask = 256**(32 - len) - 1;\\n    assembly {\\n      let srcpart := and(mload(src), not(mask))\\n      let destpart := and(mload(dest), mask)\\n      mstore(dest, or(destpart, srcpart))\\n    }\\n\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @param len The number of bytes to copy.\\n   * @return The original buffer, for chaining.\\n   */\\n  function append(\\n    buffer memory buf,\\n    bytes memory data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, len);\\n  }\\n\\n  /**\\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function append(buffer memory buf, bytes memory data)\\n    internal\\n    pure\\n    returns (buffer memory)\\n  {\\n    return write(buf, buf.buf.length, data, data.length);\\n  }\\n\\n  /**\\n   * @dev Writes a byte to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write the byte at.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeUint8(\\n    buffer memory buf,\\n    uint256 off,\\n    uint8 data\\n  ) internal pure returns (buffer memory) {\\n    if (off >= buf.capacity) {\\n      resize(buf, buf.capacity * 2);\\n    }\\n\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Address = buffer address + sizeof(buffer length) + off\\n      let dest := add(add(bufptr, off), 32)\\n      mstore8(dest, data)\\n      // Update buffer length if we extended it\\n      if eq(off, buflen) {\\n        mstore(bufptr, add(buflen, 1))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function appendUint8(buffer memory buf, uint8 data)\\n    internal\\n    pure\\n    returns (buffer memory)\\n  {\\n    return writeUint8(buf, buf.buf.length, data);\\n  }\\n\\n  /**\\n   * @dev Writes up to 32 bytes to the buffer. Resizes if doing so would\\n   *      exceed the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @param len The number of bytes to write (left-aligned).\\n   * @return The original buffer, for chaining.\\n   */\\n  function write(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes32 data,\\n    uint256 len\\n  ) private pure returns (buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    uint256 mask = 256**len - 1;\\n    // Right-align data\\n    data = data >> (8 * (32 - len));\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Address = buffer address + sizeof(buffer length) + off + len\\n      let dest := add(add(bufptr, off), len)\\n      mstore(dest, or(and(mload(dest), not(mask)), data))\\n      // Update buffer length if we extended it\\n      if gt(add(off, len), mload(bufptr)) {\\n        mstore(bufptr, add(off, len))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Writes a bytes20 to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeBytes20(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes20 data\\n  ) internal pure returns (buffer memory) {\\n    return write(buf, off, bytes32(data), 20);\\n  }\\n\\n  /**\\n   * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chhaining.\\n   */\\n  function appendBytes20(buffer memory buf, bytes20 data)\\n    internal\\n    pure\\n    returns (buffer memory)\\n  {\\n    return write(buf, buf.buf.length, bytes32(data), 20);\\n  }\\n\\n  /**\\n   * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function appendBytes32(buffer memory buf, bytes32 data)\\n    internal\\n    pure\\n    returns (buffer memory)\\n  {\\n    return write(buf, buf.buf.length, data, 32);\\n  }\\n\\n  /**\\n   * @dev Writes an integer to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @param len The number of bytes to write (right-aligned).\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeInt(\\n    buffer memory buf,\\n    uint256 off,\\n    uint256 data,\\n    uint256 len\\n  ) private pure returns (buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    uint256 mask = 256**len - 1;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Address = buffer address + off + sizeof(buffer length) + len\\n      let dest := add(add(bufptr, off), len)\\n      mstore(dest, or(and(mload(dest), not(mask)), data))\\n      // Update buffer length if we extended it\\n      if gt(add(off, len), mload(bufptr)) {\\n        mstore(bufptr, add(off, len))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n   * exceed the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer.\\n   */\\n  function appendInt(\\n    buffer memory buf,\\n    uint256 data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    return writeInt(buf, buf.buf.length, data, len);\\n  }\\n}\\n\\n// File: @ensdomains/dnssec-oracle/contracts/RRUtils.sol\\n\\npragma solidity >0.4.23;\\n\\n/**\\n * @dev RRUtils is a library that provides utilities for parsing DNS resource records.\\n */\\nlibrary RRUtils {\\n  using BytesUtils for *;\\n  using Buffer for *;\\n\\n  /**\\n   * @dev Returns the number of bytes in the DNS name at 'offset' in 'self'.\\n   * @param self The byte array to read a name from.\\n   * @param offset The offset to start reading at.\\n   * @return The length of the DNS name at 'offset', in bytes.\\n   */\\n  function nameLength(bytes memory self, uint256 offset)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    uint256 idx = offset;\\n    while (true) {\\n      assert(idx < self.length);\\n      uint256 labelLen = self.readUint8(idx);\\n      idx += labelLen + 1;\\n      if (labelLen == 0) {\\n        break;\\n      }\\n    }\\n    return idx - offset;\\n  }\\n\\n  /**\\n   * @dev Returns a DNS format name at the specified offset of self.\\n   * @param self The byte array to read a name from.\\n   * @param offset The offset to start reading at.\\n   * @return The name.\\n   */\\n  function readName(bytes memory self, uint256 offset)\\n    internal\\n    pure\\n    returns (bytes memory ret)\\n  {\\n    uint256 len = nameLength(self, offset);\\n    return self.substring(offset, len);\\n  }\\n\\n  /**\\n   * @dev Returns the number of labels in the DNS name at 'offset' in 'self'.\\n   * @param self The byte array to read a name from.\\n   * @param offset The offset to start reading at.\\n   * @return The number of labels in the DNS name at 'offset', in bytes.\\n   */\\n  function labelCount(bytes memory self, uint256 offset)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    uint256 count = 0;\\n    while (true) {\\n      assert(offset < self.length);\\n      uint256 labelLen = self.readUint8(offset);\\n      offset += labelLen + 1;\\n      if (labelLen == 0) {\\n        break;\\n      }\\n      count += 1;\\n    }\\n    return count;\\n  }\\n\\n  /**\\n   * @dev An iterator over resource records.\\n   */\\n  struct RRIterator {\\n    bytes data;\\n    uint256 offset;\\n    uint16 dnstype;\\n    uint16 class;\\n    uint32 ttl;\\n    uint256 rdataOffset;\\n    uint256 nextOffset;\\n  }\\n\\n  /**\\n   * @dev Begins iterating over resource records.\\n   * @param self The byte string to read from.\\n   * @param offset The offset to start reading at.\\n   * @return An iterator object.\\n   */\\n  function iterateRRs(bytes memory self, uint256 offset)\\n    internal\\n    pure\\n    returns (RRIterator memory ret)\\n  {\\n    ret.data = self;\\n    ret.nextOffset = offset;\\n    next(ret);\\n  }\\n\\n  /**\\n   * @dev Returns true iff there are more RRs to iterate.\\n   * @param iter The iterator to check.\\n   * @return True iff the iterator has finished.\\n   */\\n  function done(RRIterator memory iter) internal pure returns (bool) {\\n    return iter.offset >= iter.data.length;\\n  }\\n\\n  /**\\n   * @dev Moves the iterator to the next resource record.\\n   * @param iter The iterator to advance.\\n   */\\n  function next(RRIterator memory iter) internal pure {\\n    iter.offset = iter.nextOffset;\\n    if (iter.offset >= iter.data.length) {\\n      return;\\n    }\\n\\n    // Skip the name\\n    uint256 off = iter.offset + nameLength(iter.data, iter.offset);\\n\\n    // Read type, class, and ttl\\n    iter.dnstype = iter.data.readUint16(off);\\n    off += 2;\\n    iter.class = iter.data.readUint16(off);\\n    off += 2;\\n    iter.ttl = iter.data.readUint32(off);\\n    off += 4;\\n\\n    // Read the rdata\\n    uint256 rdataLength = iter.data.readUint16(off);\\n    off += 2;\\n    iter.rdataOffset = off;\\n    iter.nextOffset = off + rdataLength;\\n  }\\n\\n  /**\\n   * @dev Returns the name of the current record.\\n   * @param iter The iterator.\\n   * @return A new bytes object containing the owner name from the RR.\\n   */\\n  function name(RRIterator memory iter) internal pure returns (bytes memory) {\\n    return iter.data.substring(iter.offset, nameLength(iter.data, iter.offset));\\n  }\\n\\n  /**\\n   * @dev Returns the rdata portion of the current record.\\n   * @param iter The iterator.\\n   * @return A new bytes object containing the RR's RDATA.\\n   */\\n  function rdata(RRIterator memory iter) internal pure returns (bytes memory) {\\n    return\\n      iter.data.substring(iter.rdataOffset, iter.nextOffset - iter.rdataOffset);\\n  }\\n\\n  /**\\n   * @dev Checks if a given RR type exists in a type bitmap.\\n   * @param self The byte string to read the type bitmap from.\\n   * @param offset The offset to start reading at.\\n   * @param rrtype The RR type to check for.\\n   * @return True if the type is found in the bitmap, false otherwise.\\n   */\\n  function checkTypeBitmap(\\n    bytes memory self,\\n    uint256 offset,\\n    uint16 rrtype\\n  ) internal pure returns (bool) {\\n    uint8 typeWindow = uint8(rrtype >> 8);\\n    uint8 windowByte = uint8((rrtype & 0xff) / 8);\\n    uint8 windowBitmask = uint8(uint8(1) << (uint8(7) - uint8(rrtype & 0x7)));\\n    for (uint256 off = offset; off < self.length; ) {\\n      uint8 window = self.readUint8(off);\\n      uint8 len = self.readUint8(off + 1);\\n      if (typeWindow < window) {\\n        // We've gone past our window; it's not here.\\n        return false;\\n      } else if (typeWindow == window) {\\n        // Check this type bitmap\\n        if (len * 8 <= windowByte) {\\n          // Our type is past the end of the bitmap\\n          return false;\\n        }\\n        return (self.readUint8(off + windowByte + 2) & windowBitmask) != 0;\\n      } else {\\n        // Skip this type bitmap\\n        off += len + 2;\\n      }\\n    }\\n\\n    return false;\\n  }\\n\\n  function compareNames(bytes memory self, bytes memory other)\\n    internal\\n    pure\\n    returns (int256)\\n  {\\n    if (self.equals(other)) {\\n      return 0;\\n    }\\n\\n    uint256 off;\\n    uint256 otheroff;\\n    uint256 prevoff;\\n    uint256 otherprevoff;\\n    uint256 counts = labelCount(self, 0);\\n    uint256 othercounts = labelCount(other, 0);\\n\\n    // Keep removing labels from the front of the name until both names are equal length\\n    while (counts > othercounts) {\\n      prevoff = off;\\n      off = progress(self, off);\\n      counts--;\\n    }\\n\\n    while (othercounts > counts) {\\n      otherprevoff = otheroff;\\n      otheroff = progress(other, otheroff);\\n      othercounts--;\\n    }\\n\\n    // Compare the last nonequal labels to each other\\n    while (counts > 0 && !self.equals(off, other, otheroff)) {\\n      prevoff = off;\\n      off = progress(self, off);\\n      otherprevoff = otheroff;\\n      otheroff = progress(other, otheroff);\\n      counts -= 1;\\n    }\\n\\n    if (off == 0) {\\n      return -1;\\n    }\\n    if (otheroff == 0) {\\n      return 1;\\n    }\\n\\n    return\\n      self.compare(\\n        prevoff + 1,\\n        self.readUint8(prevoff),\\n        other,\\n        otherprevoff + 1,\\n        other.readUint8(otherprevoff)\\n      );\\n  }\\n\\n  function progress(bytes memory body, uint256 off)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    return off + 1 + body.readUint8(off);\\n  }\\n}\\n\\n// File: contracts/profiles/DNSResolver.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract DNSResolver is ResolverBase {\\n  using RRUtils for *;\\n  using BytesUtils for bytes;\\n\\n  bytes4 private constant DNS_RECORD_INTERFACE_ID = 0xa8fa5682;\\n\\n  // DNSRecordChanged is emitted whenever a given node/name/resource's RRSET is updated.\\n  event DNSRecordChanged(\\n    bytes32 indexed node,\\n    bytes name,\\n    uint16 resource,\\n    bytes record\\n  );\\n  // DNSRecordDeleted is emitted whenever a given node/name/resource's RRSET is deleted.\\n  event DNSRecordDeleted(bytes32 indexed node, bytes name, uint16 resource);\\n  // DNSZoneCleared is emitted whenever a given node's zone information is cleared.\\n  event DNSZoneCleared(bytes32 indexed node);\\n\\n  // Version the mapping for each zone.  This allows users who have lost\\n  // track of their entries to effectively delete an entire zone by bumping\\n  // the version number.\\n  // node => version\\n  mapping(bytes32 => uint256) private versions;\\n\\n  // The records themselves.  Stored as binary RRSETs\\n  // node => version => name => resource => data\\n  mapping(bytes32 => mapping(uint256 => mapping(bytes32 => mapping(uint16 => bytes))))\\n    private records;\\n\\n  // Count of number of entries for a given name.  Required for DNS resolvers\\n  // when resolving wildcards.\\n  // node => version => name => number of records\\n  mapping(bytes32 => mapping(uint256 => mapping(bytes32 => uint16)))\\n    private nameEntriesCount;\\n\\n  /**\\n   * Set one or more DNS records.  Records are supplied in wire-format.\\n   * Records with the same node/name/resource must be supplied one after the\\n   * other to ensure the data is updated correctly. For example, if the data\\n   * was supplied:\\n   *     a.example.com IN A 1.2.3.4\\n   *     a.example.com IN A 5.6.7.8\\n   *     www.example.com IN CNAME a.example.com.\\n   * then this would store the two A records for a.example.com correctly as a\\n   * single RRSET, however if the data was supplied:\\n   *     a.example.com IN A 1.2.3.4\\n   *     www.example.com IN CNAME a.example.com.\\n   *     a.example.com IN A 5.6.7.8\\n   * then this would store the first A record, the CNAME, then the second A\\n   * record which would overwrite the first.\\n   *\\n   * @param node the namehash of the node for which to set the records\\n   * @param data the DNS wire format records to set\\n   */\\n  function setDNSRecords(bytes32 node, bytes calldata data)\\n    external\\n    authorised(node)\\n  {\\n    uint16 resource = 0;\\n    uint256 offset = 0;\\n    bytes memory name;\\n    bytes memory value;\\n    bytes32 nameHash;\\n    // Iterate over the data to add the resource records\\n    for (\\n      RRUtils.RRIterator memory iter = data.iterateRRs(0);\\n      !iter.done();\\n      iter.next()\\n    ) {\\n      if (resource == 0) {\\n        resource = iter.dnstype;\\n        name = iter.name();\\n        nameHash = keccak256(abi.encodePacked(name));\\n        value = bytes(iter.rdata());\\n      } else {\\n        bytes memory newName = iter.name();\\n        if (resource != iter.dnstype || !name.equals(newName)) {\\n          setDNSRRSet(\\n            node,\\n            name,\\n            resource,\\n            data,\\n            offset,\\n            iter.offset - offset,\\n            value.length == 0\\n          );\\n          resource = iter.dnstype;\\n          offset = iter.offset;\\n          name = newName;\\n          nameHash = keccak256(name);\\n          value = bytes(iter.rdata());\\n        }\\n      }\\n    }\\n    if (name.length > 0) {\\n      setDNSRRSet(\\n        node,\\n        name,\\n        resource,\\n        data,\\n        offset,\\n        data.length - offset,\\n        value.length == 0\\n      );\\n    }\\n  }\\n\\n  /**\\n   * Obtain a DNS record.\\n   * @param node the namehash of the node for which to fetch the record\\n   * @param name the keccak-256 hash of the fully-qualified name for which to fetch the record\\n   * @param resource the ID of the resource as per https://en.wikipedia.org/wiki/List_of_DNS_record_types\\n   * @return the DNS record in wire format if present, otherwise empty\\n   */\\n  function dnsRecord(\\n    bytes32 node,\\n    bytes32 name,\\n    uint16 resource\\n  ) public view returns (bytes memory) {\\n    return records[node][versions[node]][name][resource];\\n  }\\n\\n  /**\\n   * Check if a given node has records.\\n   * @param node the namehash of the node for which to check the records\\n   * @param name the namehash of the node for which to check the records\\n   */\\n  function hasDNSRecords(bytes32 node, bytes32 name)\\n    public\\n    view\\n    returns (bool)\\n  {\\n    return (nameEntriesCount[node][versions[node]][name] != 0);\\n  }\\n\\n  /**\\n   * Clear all information for a DNS zone.\\n   * @param node the namehash of the node for which to clear the zone\\n   */\\n  function clearDNSZone(bytes32 node) public authorised(node) {\\n    versions[node]++;\\n    emit DNSZoneCleared(node);\\n  }\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return\\n      interfaceID == DNS_RECORD_INTERFACE_ID ||\\n      super.supportsInterface(interfaceID);\\n  }\\n\\n  function setDNSRRSet(\\n    bytes32 node,\\n    bytes memory name,\\n    uint16 resource,\\n    bytes memory data,\\n    uint256 offset,\\n    uint256 size,\\n    bool deleteRecord\\n  ) private {\\n    uint256 version = versions[node];\\n    bytes32 nameHash = keccak256(name);\\n    bytes memory rrData = data.substring(offset, size);\\n    if (deleteRecord) {\\n      if (records[node][version][nameHash][resource].length != 0) {\\n        nameEntriesCount[node][version][nameHash]--;\\n      }\\n      delete (records[node][version][nameHash][resource]);\\n      emit DNSRecordDeleted(node, name, resource);\\n    } else {\\n      if (records[node][version][nameHash][resource].length == 0) {\\n        nameEntriesCount[node][version][nameHash]++;\\n      }\\n      records[node][version][nameHash][resource] = rrData;\\n      emit DNSRecordChanged(node, name, resource, rrData);\\n    }\\n  }\\n}\\n\\n// File: contracts/profiles/InterfaceResolver.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract InterfaceResolver is ResolverBase, AddrResolver {\\n  bytes4 private constant INTERFACE_INTERFACE_ID =\\n    bytes4(keccak256('interfaceImplementer(bytes32,bytes4)'));\\n  bytes4 private constant INTERFACE_META_ID = 0x01ffc9a7;\\n\\n  event InterfaceChanged(\\n    bytes32 indexed node,\\n    bytes4 indexed interfaceID,\\n    address implementer\\n  );\\n\\n  mapping(bytes32 => mapping(bytes4 => address)) interfaces;\\n\\n  /**\\n   * Sets an interface associated with a name.\\n   * Setting the address to 0 restores the default behaviour of querying the contract at `addr()` for interface support.\\n   * @param node The node to update.\\n   * @param interfaceID The EIP 168 interface ID.\\n   * @param implementer The address of a contract that implements this interface for this node.\\n   */\\n  function setInterface(\\n    bytes32 node,\\n    bytes4 interfaceID,\\n    address implementer\\n  ) external authorised(node) {\\n    interfaces[node][interfaceID] = implementer;\\n    emit InterfaceChanged(node, interfaceID, implementer);\\n  }\\n\\n  /**\\n   * Returns the address of a contract that implements the specified interface for this name.\\n   * If an implementer has not been set for this interfaceID and name, the resolver will query\\n   * the contract at `addr()`. If `addr()` is set, a contract exists at that address, and that\\n   * contract implements EIP168 and returns `true` for the specified interfaceID, its address\\n   * will be returned.\\n   * @param node The ENS node to query.\\n   * @param interfaceID The EIP 168 interface ID to check for.\\n   * @return The address that implements this interface, or 0 if the interface is unsupported.\\n   */\\n  function interfaceImplementer(bytes32 node, bytes4 interfaceID)\\n    external\\n    view\\n    returns (address)\\n  {\\n    address implementer = interfaces[node][interfaceID];\\n    if (implementer != address(0)) {\\n      return implementer;\\n    }\\n\\n    address a = addr(node);\\n    if (a == address(0)) {\\n      return address(0);\\n    }\\n\\n    (bool success, bytes memory returnData) = a.staticcall(\\n      abi.encodeWithSignature('supportsInterface(bytes4)', INTERFACE_META_ID)\\n    );\\n    if (!success || returnData.length < 32 || returnData[31] == 0) {\\n      // EIP 168 not supported by target\\n      return address(0);\\n    }\\n\\n    (success, returnData) = a.staticcall(\\n      abi.encodeWithSignature('supportsInterface(bytes4)', interfaceID)\\n    );\\n    if (!success || returnData.length < 32 || returnData[31] == 0) {\\n      // Specified interface not supported by target\\n      return address(0);\\n    }\\n\\n    return a;\\n  }\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return\\n      interfaceID == INTERFACE_INTERFACE_ID ||\\n      super.supportsInterface(interfaceID);\\n  }\\n}\\n\\n// File: contracts/profiles/NameResolver.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract NameResolver is ResolverBase {\\n  bytes4 private constant NAME_INTERFACE_ID = 0x691f3431;\\n\\n  event NameChanged(bytes32 indexed node, string name);\\n\\n  mapping(bytes32 => string) names;\\n\\n  /**\\n   * Sets the name associated with an ENS node, for reverse records.\\n   * May only be called by the owner of that node in the ENS registry.\\n   * @param node The node to update.\\n   * @param name The name to set.\\n   */\\n  function setName(bytes32 node, string calldata name)\\n    external\\n    authorised(node)\\n  {\\n    names[node] = name;\\n    emit NameChanged(node, name);\\n  }\\n\\n  /**\\n   * Returns the name associated with an ENS node, for reverse records.\\n   * Defined in EIP181.\\n   * @param node The ENS node to query.\\n   * @return The associated name.\\n   */\\n  function name(bytes32 node) external view returns (string memory) {\\n    return names[node];\\n  }\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return\\n      interfaceID == NAME_INTERFACE_ID || super.supportsInterface(interfaceID);\\n  }\\n}\\n\\n// File: contracts/profiles/PubkeyResolver.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract PubkeyResolver is ResolverBase {\\n  bytes4 private constant PUBKEY_INTERFACE_ID = 0xc8690233;\\n\\n  event PubkeyChanged(bytes32 indexed node, bytes32 x, bytes32 y);\\n\\n  struct PublicKey {\\n    bytes32 x;\\n    bytes32 y;\\n  }\\n\\n  mapping(bytes32 => PublicKey) pubkeys;\\n\\n  /**\\n   * Sets the SECP256k1 public key associated with an ENS node.\\n   * @param node The ENS node to query\\n   * @param x the X coordinate of the curve point for the public key.\\n   * @param y the Y coordinate of the curve point for the public key.\\n   */\\n  function setPubkey(\\n    bytes32 node,\\n    bytes32 x,\\n    bytes32 y\\n  ) external authorised(node) {\\n    pubkeys[node] = PublicKey(x, y);\\n    emit PubkeyChanged(node, x, y);\\n  }\\n\\n  /**\\n   * Returns the SECP256k1 public key associated with an ENS node.\\n   * Defined in EIP 619.\\n   * @param node The ENS node to query\\n   * @return x, y the X and Y coordinates of the curve point for the public key.\\n   */\\n  function pubkey(bytes32 node) external view returns (bytes32 x, bytes32 y) {\\n    return (pubkeys[node].x, pubkeys[node].y);\\n  }\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return\\n      interfaceID == PUBKEY_INTERFACE_ID ||\\n      super.supportsInterface(interfaceID);\\n  }\\n}\\n\\n// File: contracts/profiles/TextResolver.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract TextResolver is ResolverBase {\\n  bytes4 private constant TEXT_INTERFACE_ID = 0x59d1d43c;\\n\\n  event TextChanged(\\n    bytes32 indexed node,\\n    string indexed indexedKey,\\n    string key\\n  );\\n\\n  mapping(bytes32 => mapping(string => string)) texts;\\n\\n  /**\\n   * Sets the text data associated with an ENS node and key.\\n   * May only be called by the owner of that node in the ENS registry.\\n   * @param node The node to update.\\n   * @param key The key to set.\\n   * @param value The text data value to set.\\n   */\\n  function setText(\\n    bytes32 node,\\n    string calldata key,\\n    string calldata value\\n  ) external authorised(node) {\\n    texts[node][key] = value;\\n    emit TextChanged(node, key, key);\\n  }\\n\\n  /**\\n   * Returns the text data associated with an ENS node and key.\\n   * @param node The ENS node to query.\\n   * @param key The text data key to query.\\n   * @return The associated text data.\\n   */\\n  function text(bytes32 node, string calldata key)\\n    external\\n    view\\n    returns (string memory)\\n  {\\n    return texts[node][key];\\n  }\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return\\n      interfaceID == TEXT_INTERFACE_ID || super.supportsInterface(interfaceID);\\n  }\\n}\\n\\n// File: contracts/PublicResolver.sol\\n\\npragma solidity ^0.5.0;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * A simple resolver anyone can use; only allows the owner of a node to set its\\n * address.\\n */\\ncontract PublicResolver_mainnet_9412610 is\\n  ABIResolver,\\n  AddrResolver,\\n  ContentHashResolver,\\n  DNSResolver,\\n  InterfaceResolver,\\n  NameResolver,\\n  PubkeyResolver,\\n  TextResolver\\n{\\n  ENS ens;\\n\\n  /**\\n   * A mapping of authorisations. An address that is authorised for a name\\n   * may make any changes to the name that the owner could, but may not update\\n   * the set of authorisations.\\n   * (node, owner, caller) => isAuthorised\\n   */\\n  mapping(bytes32 => mapping(address => mapping(address => bool)))\\n    public authorisations;\\n\\n  event AuthorisationChanged(\\n    bytes32 indexed node,\\n    address indexed owner,\\n    address indexed target,\\n    bool isAuthorised\\n  );\\n\\n  constructor(ENS _ens) public {\\n    ens = _ens;\\n  }\\n\\n  /**\\n   * @dev Sets or clears an authorisation.\\n   * Authorisations are specific to the caller. Any account can set an authorisation\\n   * for any name, but the authorisation that is checked will be that of the\\n   * current owner of a name. Thus, transferring a name effectively clears any\\n   * existing authorisations, and new authorisations can be set in advance of\\n   * an ownership transfer if desired.\\n   *\\n   * @param node The name to change the authorisation on.\\n   * @param target The address that is to be authorised or deauthorised.\\n   * @param isAuthorised True if the address should be authorised, or false if it should be deauthorised.\\n   */\\n  function setAuthorisation(\\n    bytes32 node,\\n    address target,\\n    bool isAuthorised\\n  ) external {\\n    authorisations[node][msg.sender][target] = isAuthorised;\\n    emit AuthorisationChanged(node, msg.sender, target, isAuthorised);\\n  }\\n\\n  function isAuthorised(bytes32 node) internal view returns (bool) {\\n    address owner = ens.owner(node);\\n    return owner == msg.sender || authorisations[node][owner][msg.sender];\\n  }\\n\\n  function multicall(bytes[] calldata data)\\n    external\\n    returns (bytes[] memory results)\\n  {\\n    results = new bytes[](data.length);\\n    for (uint256 i = 0; i < data.length; i++) {\\n      (bool success, bytes memory result) = address(this).delegatecall(data[i]);\\n      require(success);\\n      results[i] = result;\\n    }\\n    return results;\\n  }\\n}\\n\",\"keccak256\":\"0x29ca7d322ab7177f187f9bfc310e6dfc94049e9beaaafe958bead081fd90ad76\"}},\"version\":1}",
          "storageLayout": {
            "storage": [
              {
                "astId": 313,
                "contract": "contracts/legacy/PublicResolver_mainnet_9412610.sol:InterfaceResolver",
                "label": "_addresses",
                "offset": 0,
                "slot": "0",
                "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_bytes_storage))"
              },
              {
                "astId": 2771,
                "contract": "contracts/legacy/PublicResolver_mainnet_9412610.sol:InterfaceResolver",
                "label": "interfaces",
                "offset": 0,
                "slot": "1",
                "type": "t_mapping(t_bytes32,t_mapping(t_bytes4,t_address))"
              }
            ],
            "types": {
              "t_address": {
                "encoding": "inplace",
                "label": "address",
                "numberOfBytes": "20"
              },
              "t_bytes32": {
                "encoding": "inplace",
                "label": "bytes32",
                "numberOfBytes": "32"
              },
              "t_bytes4": {
                "encoding": "inplace",
                "label": "bytes4",
                "numberOfBytes": "4"
              },
              "t_bytes_storage": {
                "encoding": "bytes",
                "label": "bytes",
                "numberOfBytes": "32"
              },
              "t_mapping(t_bytes32,t_mapping(t_bytes4,t_address))": {
                "encoding": "mapping",
                "key": "t_bytes32",
                "label": "mapping(bytes32 => mapping(bytes4 => address))",
                "numberOfBytes": "32",
                "value": "t_mapping(t_bytes4,t_address)"
              },
              "t_mapping(t_bytes32,t_mapping(t_uint256,t_bytes_storage))": {
                "encoding": "mapping",
                "key": "t_bytes32",
                "label": "mapping(bytes32 => mapping(uint256 => bytes))",
                "numberOfBytes": "32",
                "value": "t_mapping(t_uint256,t_bytes_storage)"
              },
              "t_mapping(t_bytes4,t_address)": {
                "encoding": "mapping",
                "key": "t_bytes4",
                "label": "mapping(bytes4 => address)",
                "numberOfBytes": "32",
                "value": "t_address"
              },
              "t_mapping(t_uint256,t_bytes_storage)": {
                "encoding": "mapping",
                "key": "t_uint256",
                "label": "mapping(uint256 => bytes)",
                "numberOfBytes": "32",
                "value": "t_bytes_storage"
              },
              "t_uint256": {
                "encoding": "inplace",
                "label": "uint256",
                "numberOfBytes": "32"
              }
            }
          },
          "userdoc": {
            "methods": {
              "addr(bytes32)": {
                "notice": "Returns the address associated with an ENS node."
              },
              "interfaceImplementer(bytes32,bytes4)": {
                "notice": "Returns the address of a contract that implements the specified interface for this name. If an implementer has not been set for this interfaceID and name, the resolver will query the contract at `addr()`. If `addr()` is set, a contract exists at that address, and that contract implements EIP168 and returns `true` for the specified interfaceID, its address will be returned."
              },
              "setAddr(bytes32,address)": {
                "notice": "Sets the address associated with an ENS node. May only be called by the owner of that node in the ENS registry."
              },
              "setInterface(bytes32,bytes4,address)": {
                "notice": "Sets an interface associated with a name. Setting the address to 0 restores the default behaviour of querying the contract at `addr()` for interface support."
              }
            }
          }
        },
        "NameResolver": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "node",
                  "type": "bytes32"
                },
                {
                  "indexed": false,
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                }
              ],
              "name": "NameChanged",
              "type": "event"
            },
            {
              "constant": true,
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "node",
                  "type": "bytes32"
                }
              ],
              "name": "name",
              "outputs": [
                {
                  "internalType": "string",
                  "name": "",
                  "type": "string"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "node",
                  "type": "bytes32"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                }
              ],
              "name": "setName",
              "outputs": [],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [
                {
                  "internalType": "bytes4",
                  "name": "interfaceID",
                  "type": "bytes4"
                }
              ],
              "name": "supportsInterface",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "payable": false,
              "stateMutability": "pure",
              "type": "function"
            }
          ],
          "devdoc": {
            "methods": {
              "name(bytes32)": {
                "params": {
                  "node": "The ENS node to query."
                },
                "return": "The associated name."
              },
              "setName(bytes32,string)": {
                "params": {
                  "name": "The name to set.",
                  "node": "The node to update."
                }
              }
            }
          },
          "evm": {
            "bytecode": {
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "gasEstimates": null,
            "methodIdentifiers": {
              "name(bytes32)": "691f3431",
              "setName(bytes32,string)": "77372213",
              "supportsInterface(bytes4)": "01ffc9a7"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.5.17+commit.d19bba13\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"NameChanged\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"name(bytes32)\":{\"params\":{\"node\":\"The ENS node to query.\"},\"return\":\"The associated name.\"},\"setName(bytes32,string)\":{\"params\":{\"name\":\"The name to set.\",\"node\":\"The node to update.\"}}}},\"userdoc\":{\"methods\":{\"name(bytes32)\":{\"notice\":\"Returns the name associated with an ENS node, for reverse records. Defined in EIP181.\"},\"setName(bytes32,string)\":{\"notice\":\"Sets the name associated with an ENS node, for reverse records. May only be called by the owner of that node in the ENS registry.\"}}}},\"settings\":{\"compilationTarget\":{\"contracts/legacy/PublicResolver_mainnet_9412610.sol\":\"NameResolver\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"contracts/legacy/PublicResolver_mainnet_9412610.sol\":{\"content\":\"/**\\n *Submitted for verification at Etherscan.io on 2020-02-03\\n */\\n\\n// File: @ensdomains/ens/contracts/ENS.sol\\n\\npragma solidity >=0.4.24;\\n\\ninterface ENS {\\n  // Logged when the owner of a node assigns a new owner to a subnode.\\n  event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n  // Logged when the owner of a node transfers ownership to a new account.\\n  event Transfer(bytes32 indexed node, address owner);\\n\\n  // Logged when the resolver for a node changes.\\n  event NewResolver(bytes32 indexed node, address resolver);\\n\\n  // Logged when the TTL of a node changes\\n  event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n  function setSubnodeOwner(\\n    bytes32 node,\\n    bytes32 label,\\n    address owner\\n  ) external;\\n\\n  function setResolver(bytes32 node, address resolver) external;\\n\\n  function setOwner(bytes32 node, address owner) external;\\n\\n  function setTTL(bytes32 node, uint64 ttl) external;\\n\\n  function owner(bytes32 node) external view returns (address);\\n\\n  function resolver(bytes32 node) external view returns (address);\\n\\n  function ttl(bytes32 node) external view returns (uint64);\\n}\\n\\n// File: contracts/ResolverBase.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract ResolverBase {\\n  bytes4 private constant INTERFACE_META_ID = 0x01ffc9a7;\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return interfaceID == INTERFACE_META_ID;\\n  }\\n\\n  function isAuthorised(bytes32 node) internal view returns (bool);\\n\\n  modifier authorised(bytes32 node) {\\n    require(isAuthorised(node));\\n    _;\\n  }\\n\\n  function bytesToAddress(bytes memory b)\\n    internal\\n    pure\\n    returns (address payable a)\\n  {\\n    require(b.length == 20);\\n    assembly {\\n      a := div(mload(add(b, 32)), exp(256, 12))\\n    }\\n  }\\n\\n  function addressToBytes(address a) internal pure returns (bytes memory b) {\\n    b = new bytes(20);\\n    assembly {\\n      mstore(add(b, 32), mul(a, exp(256, 12)))\\n    }\\n  }\\n}\\n\\n// File: contracts/profiles/ABIResolver.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract ABIResolver is ResolverBase {\\n  bytes4 private constant ABI_INTERFACE_ID = 0x2203ab56;\\n\\n  event ABIChanged(bytes32 indexed node, uint256 indexed contentType);\\n\\n  mapping(bytes32 => mapping(uint256 => bytes)) abis;\\n\\n  /**\\n   * Sets the ABI associated with an ENS node.\\n   * Nodes may have one ABI of each content type. To remove an ABI, set it to\\n   * the empty string.\\n   * @param node The node to update.\\n   * @param contentType The content type of the ABI\\n   * @param data The ABI data.\\n   */\\n  function setABI(\\n    bytes32 node,\\n    uint256 contentType,\\n    bytes calldata data\\n  ) external authorised(node) {\\n    // Content types must be powers of 2\\n    require(((contentType - 1) & contentType) == 0);\\n\\n    abis[node][contentType] = data;\\n    emit ABIChanged(node, contentType);\\n  }\\n\\n  /**\\n   * Returns the ABI associated with an ENS node.\\n   * Defined in EIP205.\\n   * @param node The ENS node to query\\n   * @param contentTypes A bitwise OR of the ABI formats accepted by the caller.\\n   * @return contentType The content type of the return value\\n   * @return data The ABI data\\n   */\\n  function ABI(bytes32 node, uint256 contentTypes)\\n    external\\n    view\\n    returns (uint256, bytes memory)\\n  {\\n    mapping(uint256 => bytes) storage abiset = abis[node];\\n\\n    for (\\n      uint256 contentType = 1;\\n      contentType <= contentTypes;\\n      contentType <<= 1\\n    ) {\\n      if ((contentType & contentTypes) != 0 && abiset[contentType].length > 0) {\\n        return (contentType, abiset[contentType]);\\n      }\\n    }\\n\\n    return (0, bytes(''));\\n  }\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return\\n      interfaceID == ABI_INTERFACE_ID || super.supportsInterface(interfaceID);\\n  }\\n}\\n\\n// File: contracts/profiles/AddrResolver.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract AddrResolver is ResolverBase {\\n  bytes4 private constant ADDR_INTERFACE_ID = 0x3b3b57de;\\n  bytes4 private constant ADDRESS_INTERFACE_ID = 0xf1cb7e06;\\n  uint256 private constant COIN_TYPE_ETH = 60;\\n\\n  event AddrChanged(bytes32 indexed node, address a);\\n  event AddressChanged(\\n    bytes32 indexed node,\\n    uint256 coinType,\\n    bytes newAddress\\n  );\\n\\n  mapping(bytes32 => mapping(uint256 => bytes)) _addresses;\\n\\n  /**\\n   * Sets the address associated with an ENS node.\\n   * May only be called by the owner of that node in the ENS registry.\\n   * @param node The node to update.\\n   * @param a The address to set.\\n   */\\n  function setAddr(bytes32 node, address a) external authorised(node) {\\n    setAddr(node, COIN_TYPE_ETH, addressToBytes(a));\\n  }\\n\\n  /**\\n   * Returns the address associated with an ENS node.\\n   * @param node The ENS node to query.\\n   * @return The associated address.\\n   */\\n  function addr(bytes32 node) public view returns (address payable) {\\n    bytes memory a = addr(node, COIN_TYPE_ETH);\\n    if (a.length == 0) {\\n      return address(0);\\n    }\\n    return bytesToAddress(a);\\n  }\\n\\n  function setAddr(\\n    bytes32 node,\\n    uint256 coinType,\\n    bytes memory a\\n  ) public authorised(node) {\\n    emit AddressChanged(node, coinType, a);\\n    if (coinType == COIN_TYPE_ETH) {\\n      emit AddrChanged(node, bytesToAddress(a));\\n    }\\n    _addresses[node][coinType] = a;\\n  }\\n\\n  function addr(bytes32 node, uint256 coinType)\\n    public\\n    view\\n    returns (bytes memory)\\n  {\\n    return _addresses[node][coinType];\\n  }\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return\\n      interfaceID == ADDR_INTERFACE_ID ||\\n      interfaceID == ADDRESS_INTERFACE_ID ||\\n      super.supportsInterface(interfaceID);\\n  }\\n}\\n\\n// File: contracts/profiles/ContentHashResolver.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract ContentHashResolver is ResolverBase {\\n  bytes4 private constant CONTENT_HASH_INTERFACE_ID = 0xbc1c58d1;\\n\\n  event ContenthashChanged(bytes32 indexed node, bytes hash);\\n\\n  mapping(bytes32 => bytes) hashes;\\n\\n  /**\\n   * Sets the contenthash associated with an ENS node.\\n   * May only be called by the owner of that node in the ENS registry.\\n   * @param node The node to update.\\n   * @param hash The contenthash to set\\n   */\\n  function setContenthash(bytes32 node, bytes calldata hash)\\n    external\\n    authorised(node)\\n  {\\n    hashes[node] = hash;\\n    emit ContenthashChanged(node, hash);\\n  }\\n\\n  /**\\n   * Returns the contenthash associated with an ENS node.\\n   * @param node The ENS node to query.\\n   * @return The associated contenthash.\\n   */\\n  function contenthash(bytes32 node) external view returns (bytes memory) {\\n    return hashes[node];\\n  }\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return\\n      interfaceID == CONTENT_HASH_INTERFACE_ID ||\\n      super.supportsInterface(interfaceID);\\n  }\\n}\\n\\n// File: @ensdomains/dnssec-oracle/contracts/BytesUtils.sol\\n\\npragma solidity >0.4.23;\\n\\nlibrary BytesUtils {\\n  /*\\n   * @dev Returns the keccak-256 hash of a byte range.\\n   * @param self The byte string to hash.\\n   * @param offset The position to start hashing at.\\n   * @param len The number of bytes to hash.\\n   * @return The hash of the byte range.\\n   */\\n  function keccak(\\n    bytes memory self,\\n    uint256 offset,\\n    uint256 len\\n  ) internal pure returns (bytes32 ret) {\\n    require(offset + len <= self.length);\\n    assembly {\\n      ret := keccak256(add(add(self, 32), offset), len)\\n    }\\n  }\\n\\n  /*\\n   * @dev Returns a positive number if `other` comes lexicographically after\\n   *      `self`, a negative number if it comes before, or zero if the\\n   *      contents of the two bytes are equal.\\n   * @param self The first bytes to compare.\\n   * @param other The second bytes to compare.\\n   * @return The result of the comparison.\\n   */\\n  function compare(bytes memory self, bytes memory other)\\n    internal\\n    pure\\n    returns (int256)\\n  {\\n    return compare(self, 0, self.length, other, 0, other.length);\\n  }\\n\\n  /*\\n   * @dev Returns a positive number if `other` comes lexicographically after\\n   *      `self`, a negative number if it comes before, or zero if the\\n   *      contents of the two bytes are equal. Comparison is done per-rune,\\n   *      on unicode codepoints.\\n   * @param self The first bytes to compare.\\n   * @param offset The offset of self.\\n   * @param len    The length of self.\\n   * @param other The second bytes to compare.\\n   * @param otheroffset The offset of the other string.\\n   * @param otherlen    The length of the other string.\\n   * @return The result of the comparison.\\n   */\\n  function compare(\\n    bytes memory self,\\n    uint256 offset,\\n    uint256 len,\\n    bytes memory other,\\n    uint256 otheroffset,\\n    uint256 otherlen\\n  ) internal pure returns (int256) {\\n    uint256 shortest = len;\\n    if (otherlen < len) shortest = otherlen;\\n\\n    uint256 selfptr;\\n    uint256 otherptr;\\n\\n    assembly {\\n      selfptr := add(self, add(offset, 32))\\n      otherptr := add(other, add(otheroffset, 32))\\n    }\\n    for (uint256 idx = 0; idx < shortest; idx += 32) {\\n      uint256 a;\\n      uint256 b;\\n      assembly {\\n        a := mload(selfptr)\\n        b := mload(otherptr)\\n      }\\n      if (a != b) {\\n        // Mask out irrelevant bytes and check again\\n        uint256 mask;\\n        if (shortest > 32) {\\n          mask = uint256(-1); // aka 0xffffff....\\n        } else {\\n          mask = ~(2**(8 * (32 - shortest + idx)) - 1);\\n        }\\n        uint256 diff = (a & mask) - (b & mask);\\n        if (diff != 0) return int256(diff);\\n      }\\n      selfptr += 32;\\n      otherptr += 32;\\n    }\\n\\n    return int256(len) - int256(otherlen);\\n  }\\n\\n  /*\\n   * @dev Returns true if the two byte ranges are equal.\\n   * @param self The first byte range to compare.\\n   * @param offset The offset into the first byte range.\\n   * @param other The second byte range to compare.\\n   * @param otherOffset The offset into the second byte range.\\n   * @param len The number of bytes to compare\\n   * @return True if the byte ranges are equal, false otherwise.\\n   */\\n  function equals(\\n    bytes memory self,\\n    uint256 offset,\\n    bytes memory other,\\n    uint256 otherOffset,\\n    uint256 len\\n  ) internal pure returns (bool) {\\n    return keccak(self, offset, len) == keccak(other, otherOffset, len);\\n  }\\n\\n  /*\\n   * @dev Returns true if the two byte ranges are equal with offsets.\\n   * @param self The first byte range to compare.\\n   * @param offset The offset into the first byte range.\\n   * @param other The second byte range to compare.\\n   * @param otherOffset The offset into the second byte range.\\n   * @return True if the byte ranges are equal, false otherwise.\\n   */\\n  function equals(\\n    bytes memory self,\\n    uint256 offset,\\n    bytes memory other,\\n    uint256 otherOffset\\n  ) internal pure returns (bool) {\\n    return\\n      keccak(self, offset, self.length - offset) ==\\n      keccak(other, otherOffset, other.length - otherOffset);\\n  }\\n\\n  /*\\n   * @dev Compares a range of 'self' to all of 'other' and returns True iff\\n   *      they are equal.\\n   * @param self The first byte range to compare.\\n   * @param offset The offset into the first byte range.\\n   * @param other The second byte range to compare.\\n   * @return True if the byte ranges are equal, false otherwise.\\n   */\\n  function equals(\\n    bytes memory self,\\n    uint256 offset,\\n    bytes memory other\\n  ) internal pure returns (bool) {\\n    return\\n      self.length >= offset + other.length &&\\n      equals(self, offset, other, 0, other.length);\\n  }\\n\\n  /*\\n   * @dev Returns true if the two byte ranges are equal.\\n   * @param self The first byte range to compare.\\n   * @param other The second byte range to compare.\\n   * @return True if the byte ranges are equal, false otherwise.\\n   */\\n  function equals(bytes memory self, bytes memory other)\\n    internal\\n    pure\\n    returns (bool)\\n  {\\n    return\\n      self.length == other.length && equals(self, 0, other, 0, self.length);\\n  }\\n\\n  /*\\n   * @dev Returns the 8-bit number at the specified index of self.\\n   * @param self The byte string.\\n   * @param idx The index into the bytes\\n   * @return The specified 8 bits of the string, interpreted as an integer.\\n   */\\n  function readUint8(bytes memory self, uint256 idx)\\n    internal\\n    pure\\n    returns (uint8 ret)\\n  {\\n    return uint8(self[idx]);\\n  }\\n\\n  /*\\n   * @dev Returns the 16-bit number at the specified index of self.\\n   * @param self The byte string.\\n   * @param idx The index into the bytes\\n   * @return The specified 16 bits of the string, interpreted as an integer.\\n   */\\n  function readUint16(bytes memory self, uint256 idx)\\n    internal\\n    pure\\n    returns (uint16 ret)\\n  {\\n    require(idx + 2 <= self.length);\\n    assembly {\\n      ret := and(mload(add(add(self, 2), idx)), 0xFFFF)\\n    }\\n  }\\n\\n  /*\\n   * @dev Returns the 32-bit number at the specified index of self.\\n   * @param self The byte string.\\n   * @param idx The index into the bytes\\n   * @return The specified 32 bits of the string, interpreted as an integer.\\n   */\\n  function readUint32(bytes memory self, uint256 idx)\\n    internal\\n    pure\\n    returns (uint32 ret)\\n  {\\n    require(idx + 4 <= self.length);\\n    assembly {\\n      ret := and(mload(add(add(self, 4), idx)), 0xFFFFFFFF)\\n    }\\n  }\\n\\n  /*\\n   * @dev Returns the 32 byte value at the specified index of self.\\n   * @param self The byte string.\\n   * @param idx The index into the bytes\\n   * @return The specified 32 bytes of the string.\\n   */\\n  function readBytes32(bytes memory self, uint256 idx)\\n    internal\\n    pure\\n    returns (bytes32 ret)\\n  {\\n    require(idx + 32 <= self.length);\\n    assembly {\\n      ret := mload(add(add(self, 32), idx))\\n    }\\n  }\\n\\n  /*\\n   * @dev Returns the 32 byte value at the specified index of self.\\n   * @param self The byte string.\\n   * @param idx The index into the bytes\\n   * @return The specified 32 bytes of the string.\\n   */\\n  function readBytes20(bytes memory self, uint256 idx)\\n    internal\\n    pure\\n    returns (bytes20 ret)\\n  {\\n    require(idx + 20 <= self.length);\\n    assembly {\\n      ret := and(\\n        mload(add(add(self, 32), idx)),\\n        0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000\\n      )\\n    }\\n  }\\n\\n  /*\\n   * @dev Returns the n byte value at the specified index of self.\\n   * @param self The byte string.\\n   * @param idx The index into the bytes.\\n   * @param len The number of bytes.\\n   * @return The specified 32 bytes of the string.\\n   */\\n  function readBytesN(\\n    bytes memory self,\\n    uint256 idx,\\n    uint256 len\\n  ) internal pure returns (bytes32 ret) {\\n    require(len <= 32);\\n    require(idx + len <= self.length);\\n    assembly {\\n      let mask := not(sub(exp(256, sub(32, len)), 1))\\n      ret := and(mload(add(add(self, 32), idx)), mask)\\n    }\\n  }\\n\\n  function memcpy(\\n    uint256 dest,\\n    uint256 src,\\n    uint256 len\\n  ) private pure {\\n    // Copy word-length chunks while possible\\n    for (; len >= 32; len -= 32) {\\n      assembly {\\n        mstore(dest, mload(src))\\n      }\\n      dest += 32;\\n      src += 32;\\n    }\\n\\n    // Copy remaining bytes\\n    uint256 mask = 256**(32 - len) - 1;\\n    assembly {\\n      let srcpart := and(mload(src), not(mask))\\n      let destpart := and(mload(dest), mask)\\n      mstore(dest, or(destpart, srcpart))\\n    }\\n  }\\n\\n  /*\\n   * @dev Copies a substring into a new byte string.\\n   * @param self The byte string to copy from.\\n   * @param offset The offset to start copying at.\\n   * @param len The number of bytes to copy.\\n   */\\n  function substring(\\n    bytes memory self,\\n    uint256 offset,\\n    uint256 len\\n  ) internal pure returns (bytes memory) {\\n    require(offset + len <= self.length);\\n\\n    bytes memory ret = new bytes(len);\\n    uint256 dest;\\n    uint256 src;\\n\\n    assembly {\\n      dest := add(ret, 32)\\n      src := add(add(self, 32), offset)\\n    }\\n    memcpy(dest, src, len);\\n\\n    return ret;\\n  }\\n\\n  // Maps characters from 0x30 to 0x7A to their base32 values.\\n  // 0xFF represents invalid characters in that range.\\n  bytes constant base32HexTable =\\n    hex'00010203040506070809FFFFFFFFFFFFFF0A0B0C0D0E0F101112131415161718191A1B1C1D1E1FFFFFFFFFFFFFFFFFFFFF0A0B0C0D0E0F101112131415161718191A1B1C1D1E1F';\\n\\n  /**\\n   * @dev Decodes unpadded base32 data of up to one word in length.\\n   * @param self The data to decode.\\n   * @param off Offset into the string to start at.\\n   * @param len Number of characters to decode.\\n   * @return The decoded data, left aligned.\\n   */\\n  function base32HexDecodeWord(\\n    bytes memory self,\\n    uint256 off,\\n    uint256 len\\n  ) internal pure returns (bytes32) {\\n    require(len <= 52);\\n\\n    uint256 ret = 0;\\n    uint8 decoded;\\n    for (uint256 i = 0; i < len; i++) {\\n      bytes1 char = self[off + i];\\n      require(char >= 0x30 && char <= 0x7A);\\n      decoded = uint8(base32HexTable[uint256(uint8(char)) - 0x30]);\\n      require(decoded <= 0x20);\\n      if (i == len - 1) {\\n        break;\\n      }\\n      ret = (ret << 5) | decoded;\\n    }\\n\\n    uint256 bitlen = len * 5;\\n    if (len % 8 == 0) {\\n      // Multiple of 8 characters, no padding\\n      ret = (ret << 5) | decoded;\\n    } else if (len % 8 == 2) {\\n      // Two extra characters - 1 byte\\n      ret = (ret << 3) | (decoded >> 2);\\n      bitlen -= 2;\\n    } else if (len % 8 == 4) {\\n      // Four extra characters - 2 bytes\\n      ret = (ret << 1) | (decoded >> 4);\\n      bitlen -= 4;\\n    } else if (len % 8 == 5) {\\n      // Five extra characters - 3 bytes\\n      ret = (ret << 4) | (decoded >> 1);\\n      bitlen -= 1;\\n    } else if (len % 8 == 7) {\\n      // Seven extra characters - 4 bytes\\n      ret = (ret << 2) | (decoded >> 3);\\n      bitlen -= 3;\\n    } else {\\n      revert();\\n    }\\n\\n    return bytes32(ret << (256 - bitlen));\\n  }\\n}\\n\\n// File: @ensdomains/buffer/contracts/Buffer.sol\\n\\npragma solidity >0.4.18;\\n\\n/**\\n * @dev A library for working with mutable byte buffers in Solidity.\\n *\\n * Byte buffers are mutable and expandable, and provide a variety of primitives\\n * for writing to them. At any time you can fetch a bytes object containing the\\n * current contents of the buffer. The bytes object should not be stored between\\n * operations, as it may change due to resizing of the buffer.\\n */\\nlibrary Buffer {\\n  /**\\n   * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n   *      a capacity. The capacity may be longer than the current value, in\\n   *      which case it can be extended without the need to allocate more memory.\\n   */\\n  struct buffer {\\n    bytes buf;\\n    uint256 capacity;\\n  }\\n\\n  /**\\n   * @dev Initializes a buffer with an initial capacity.\\n   * @param buf The buffer to initialize.\\n   * @param capacity The number of bytes of space to allocate the buffer.\\n   * @return The buffer, for chaining.\\n   */\\n  function init(buffer memory buf, uint256 capacity)\\n    internal\\n    pure\\n    returns (buffer memory)\\n  {\\n    if (capacity % 32 != 0) {\\n      capacity += 32 - (capacity % 32);\\n    }\\n    // Allocate space for the buffer data\\n    buf.capacity = capacity;\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(buf, ptr)\\n      mstore(ptr, 0)\\n      mstore(0x40, add(32, add(ptr, capacity)))\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Initializes a new buffer from an existing bytes object.\\n   *      Changes to the buffer may mutate the original value.\\n   * @param b The bytes object to initialize the buffer with.\\n   * @return A new buffer.\\n   */\\n  function fromBytes(bytes memory b) internal pure returns (buffer memory) {\\n    buffer memory buf;\\n    buf.buf = b;\\n    buf.capacity = b.length;\\n    return buf;\\n  }\\n\\n  function resize(buffer memory buf, uint256 capacity) private pure {\\n    bytes memory oldbuf = buf.buf;\\n    init(buf, capacity);\\n    append(buf, oldbuf);\\n  }\\n\\n  function max(uint256 a, uint256 b) private pure returns (uint256) {\\n    if (a > b) {\\n      return a;\\n    }\\n    return b;\\n  }\\n\\n  /**\\n   * @dev Sets buffer length to 0.\\n   * @param buf The buffer to truncate.\\n   * @return The original buffer, for chaining..\\n   */\\n  function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n    assembly {\\n      let bufptr := mload(buf)\\n      mstore(bufptr, 0)\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Writes a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The start offset to write to.\\n   * @param data The data to append.\\n   * @param len The number of bytes to copy.\\n   * @return The original buffer, for chaining.\\n   */\\n  function write(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes memory data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    require(len <= data.length);\\n\\n    if (off + len > buf.capacity) {\\n      resize(buf, max(buf.capacity, len + off) * 2);\\n    }\\n\\n    uint256 dest;\\n    uint256 src;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Start address = buffer address + offset + sizeof(buffer length)\\n      dest := add(add(bufptr, 32), off)\\n      // Update buffer length if we're extending it\\n      if gt(add(len, off), buflen) {\\n        mstore(bufptr, add(len, off))\\n      }\\n      src := add(data, 32)\\n    }\\n\\n    // Copy word-length chunks while possible\\n    for (; len >= 32; len -= 32) {\\n      assembly {\\n        mstore(dest, mload(src))\\n      }\\n      dest += 32;\\n      src += 32;\\n    }\\n\\n    // Copy remaining bytes\\n    uint256 mask = 256**(32 - len) - 1;\\n    assembly {\\n      let srcpart := and(mload(src), not(mask))\\n      let destpart := and(mload(dest), mask)\\n      mstore(dest, or(destpart, srcpart))\\n    }\\n\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @param len The number of bytes to copy.\\n   * @return The original buffer, for chaining.\\n   */\\n  function append(\\n    buffer memory buf,\\n    bytes memory data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, len);\\n  }\\n\\n  /**\\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function append(buffer memory buf, bytes memory data)\\n    internal\\n    pure\\n    returns (buffer memory)\\n  {\\n    return write(buf, buf.buf.length, data, data.length);\\n  }\\n\\n  /**\\n   * @dev Writes a byte to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write the byte at.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeUint8(\\n    buffer memory buf,\\n    uint256 off,\\n    uint8 data\\n  ) internal pure returns (buffer memory) {\\n    if (off >= buf.capacity) {\\n      resize(buf, buf.capacity * 2);\\n    }\\n\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Address = buffer address + sizeof(buffer length) + off\\n      let dest := add(add(bufptr, off), 32)\\n      mstore8(dest, data)\\n      // Update buffer length if we extended it\\n      if eq(off, buflen) {\\n        mstore(bufptr, add(buflen, 1))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function appendUint8(buffer memory buf, uint8 data)\\n    internal\\n    pure\\n    returns (buffer memory)\\n  {\\n    return writeUint8(buf, buf.buf.length, data);\\n  }\\n\\n  /**\\n   * @dev Writes up to 32 bytes to the buffer. Resizes if doing so would\\n   *      exceed the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @param len The number of bytes to write (left-aligned).\\n   * @return The original buffer, for chaining.\\n   */\\n  function write(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes32 data,\\n    uint256 len\\n  ) private pure returns (buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    uint256 mask = 256**len - 1;\\n    // Right-align data\\n    data = data >> (8 * (32 - len));\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Address = buffer address + sizeof(buffer length) + off + len\\n      let dest := add(add(bufptr, off), len)\\n      mstore(dest, or(and(mload(dest), not(mask)), data))\\n      // Update buffer length if we extended it\\n      if gt(add(off, len), mload(bufptr)) {\\n        mstore(bufptr, add(off, len))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Writes a bytes20 to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeBytes20(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes20 data\\n  ) internal pure returns (buffer memory) {\\n    return write(buf, off, bytes32(data), 20);\\n  }\\n\\n  /**\\n   * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chhaining.\\n   */\\n  function appendBytes20(buffer memory buf, bytes20 data)\\n    internal\\n    pure\\n    returns (buffer memory)\\n  {\\n    return write(buf, buf.buf.length, bytes32(data), 20);\\n  }\\n\\n  /**\\n   * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function appendBytes32(buffer memory buf, bytes32 data)\\n    internal\\n    pure\\n    returns (buffer memory)\\n  {\\n    return write(buf, buf.buf.length, data, 32);\\n  }\\n\\n  /**\\n   * @dev Writes an integer to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @param len The number of bytes to write (right-aligned).\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeInt(\\n    buffer memory buf,\\n    uint256 off,\\n    uint256 data,\\n    uint256 len\\n  ) private pure returns (buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    uint256 mask = 256**len - 1;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Address = buffer address + off + sizeof(buffer length) + len\\n      let dest := add(add(bufptr, off), len)\\n      mstore(dest, or(and(mload(dest), not(mask)), data))\\n      // Update buffer length if we extended it\\n      if gt(add(off, len), mload(bufptr)) {\\n        mstore(bufptr, add(off, len))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n   * exceed the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer.\\n   */\\n  function appendInt(\\n    buffer memory buf,\\n    uint256 data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    return writeInt(buf, buf.buf.length, data, len);\\n  }\\n}\\n\\n// File: @ensdomains/dnssec-oracle/contracts/RRUtils.sol\\n\\npragma solidity >0.4.23;\\n\\n/**\\n * @dev RRUtils is a library that provides utilities for parsing DNS resource records.\\n */\\nlibrary RRUtils {\\n  using BytesUtils for *;\\n  using Buffer for *;\\n\\n  /**\\n   * @dev Returns the number of bytes in the DNS name at 'offset' in 'self'.\\n   * @param self The byte array to read a name from.\\n   * @param offset The offset to start reading at.\\n   * @return The length of the DNS name at 'offset', in bytes.\\n   */\\n  function nameLength(bytes memory self, uint256 offset)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    uint256 idx = offset;\\n    while (true) {\\n      assert(idx < self.length);\\n      uint256 labelLen = self.readUint8(idx);\\n      idx += labelLen + 1;\\n      if (labelLen == 0) {\\n        break;\\n      }\\n    }\\n    return idx - offset;\\n  }\\n\\n  /**\\n   * @dev Returns a DNS format name at the specified offset of self.\\n   * @param self The byte array to read a name from.\\n   * @param offset The offset to start reading at.\\n   * @return The name.\\n   */\\n  function readName(bytes memory self, uint256 offset)\\n    internal\\n    pure\\n    returns (bytes memory ret)\\n  {\\n    uint256 len = nameLength(self, offset);\\n    return self.substring(offset, len);\\n  }\\n\\n  /**\\n   * @dev Returns the number of labels in the DNS name at 'offset' in 'self'.\\n   * @param self The byte array to read a name from.\\n   * @param offset The offset to start reading at.\\n   * @return The number of labels in the DNS name at 'offset', in bytes.\\n   */\\n  function labelCount(bytes memory self, uint256 offset)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    uint256 count = 0;\\n    while (true) {\\n      assert(offset < self.length);\\n      uint256 labelLen = self.readUint8(offset);\\n      offset += labelLen + 1;\\n      if (labelLen == 0) {\\n        break;\\n      }\\n      count += 1;\\n    }\\n    return count;\\n  }\\n\\n  /**\\n   * @dev An iterator over resource records.\\n   */\\n  struct RRIterator {\\n    bytes data;\\n    uint256 offset;\\n    uint16 dnstype;\\n    uint16 class;\\n    uint32 ttl;\\n    uint256 rdataOffset;\\n    uint256 nextOffset;\\n  }\\n\\n  /**\\n   * @dev Begins iterating over resource records.\\n   * @param self The byte string to read from.\\n   * @param offset The offset to start reading at.\\n   * @return An iterator object.\\n   */\\n  function iterateRRs(bytes memory self, uint256 offset)\\n    internal\\n    pure\\n    returns (RRIterator memory ret)\\n  {\\n    ret.data = self;\\n    ret.nextOffset = offset;\\n    next(ret);\\n  }\\n\\n  /**\\n   * @dev Returns true iff there are more RRs to iterate.\\n   * @param iter The iterator to check.\\n   * @return True iff the iterator has finished.\\n   */\\n  function done(RRIterator memory iter) internal pure returns (bool) {\\n    return iter.offset >= iter.data.length;\\n  }\\n\\n  /**\\n   * @dev Moves the iterator to the next resource record.\\n   * @param iter The iterator to advance.\\n   */\\n  function next(RRIterator memory iter) internal pure {\\n    iter.offset = iter.nextOffset;\\n    if (iter.offset >= iter.data.length) {\\n      return;\\n    }\\n\\n    // Skip the name\\n    uint256 off = iter.offset + nameLength(iter.data, iter.offset);\\n\\n    // Read type, class, and ttl\\n    iter.dnstype = iter.data.readUint16(off);\\n    off += 2;\\n    iter.class = iter.data.readUint16(off);\\n    off += 2;\\n    iter.ttl = iter.data.readUint32(off);\\n    off += 4;\\n\\n    // Read the rdata\\n    uint256 rdataLength = iter.data.readUint16(off);\\n    off += 2;\\n    iter.rdataOffset = off;\\n    iter.nextOffset = off + rdataLength;\\n  }\\n\\n  /**\\n   * @dev Returns the name of the current record.\\n   * @param iter The iterator.\\n   * @return A new bytes object containing the owner name from the RR.\\n   */\\n  function name(RRIterator memory iter) internal pure returns (bytes memory) {\\n    return iter.data.substring(iter.offset, nameLength(iter.data, iter.offset));\\n  }\\n\\n  /**\\n   * @dev Returns the rdata portion of the current record.\\n   * @param iter The iterator.\\n   * @return A new bytes object containing the RR's RDATA.\\n   */\\n  function rdata(RRIterator memory iter) internal pure returns (bytes memory) {\\n    return\\n      iter.data.substring(iter.rdataOffset, iter.nextOffset - iter.rdataOffset);\\n  }\\n\\n  /**\\n   * @dev Checks if a given RR type exists in a type bitmap.\\n   * @param self The byte string to read the type bitmap from.\\n   * @param offset The offset to start reading at.\\n   * @param rrtype The RR type to check for.\\n   * @return True if the type is found in the bitmap, false otherwise.\\n   */\\n  function checkTypeBitmap(\\n    bytes memory self,\\n    uint256 offset,\\n    uint16 rrtype\\n  ) internal pure returns (bool) {\\n    uint8 typeWindow = uint8(rrtype >> 8);\\n    uint8 windowByte = uint8((rrtype & 0xff) / 8);\\n    uint8 windowBitmask = uint8(uint8(1) << (uint8(7) - uint8(rrtype & 0x7)));\\n    for (uint256 off = offset; off < self.length; ) {\\n      uint8 window = self.readUint8(off);\\n      uint8 len = self.readUint8(off + 1);\\n      if (typeWindow < window) {\\n        // We've gone past our window; it's not here.\\n        return false;\\n      } else if (typeWindow == window) {\\n        // Check this type bitmap\\n        if (len * 8 <= windowByte) {\\n          // Our type is past the end of the bitmap\\n          return false;\\n        }\\n        return (self.readUint8(off + windowByte + 2) & windowBitmask) != 0;\\n      } else {\\n        // Skip this type bitmap\\n        off += len + 2;\\n      }\\n    }\\n\\n    return false;\\n  }\\n\\n  function compareNames(bytes memory self, bytes memory other)\\n    internal\\n    pure\\n    returns (int256)\\n  {\\n    if (self.equals(other)) {\\n      return 0;\\n    }\\n\\n    uint256 off;\\n    uint256 otheroff;\\n    uint256 prevoff;\\n    uint256 otherprevoff;\\n    uint256 counts = labelCount(self, 0);\\n    uint256 othercounts = labelCount(other, 0);\\n\\n    // Keep removing labels from the front of the name until both names are equal length\\n    while (counts > othercounts) {\\n      prevoff = off;\\n      off = progress(self, off);\\n      counts--;\\n    }\\n\\n    while (othercounts > counts) {\\n      otherprevoff = otheroff;\\n      otheroff = progress(other, otheroff);\\n      othercounts--;\\n    }\\n\\n    // Compare the last nonequal labels to each other\\n    while (counts > 0 && !self.equals(off, other, otheroff)) {\\n      prevoff = off;\\n      off = progress(self, off);\\n      otherprevoff = otheroff;\\n      otheroff = progress(other, otheroff);\\n      counts -= 1;\\n    }\\n\\n    if (off == 0) {\\n      return -1;\\n    }\\n    if (otheroff == 0) {\\n      return 1;\\n    }\\n\\n    return\\n      self.compare(\\n        prevoff + 1,\\n        self.readUint8(prevoff),\\n        other,\\n        otherprevoff + 1,\\n        other.readUint8(otherprevoff)\\n      );\\n  }\\n\\n  function progress(bytes memory body, uint256 off)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    return off + 1 + body.readUint8(off);\\n  }\\n}\\n\\n// File: contracts/profiles/DNSResolver.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract DNSResolver is ResolverBase {\\n  using RRUtils for *;\\n  using BytesUtils for bytes;\\n\\n  bytes4 private constant DNS_RECORD_INTERFACE_ID = 0xa8fa5682;\\n\\n  // DNSRecordChanged is emitted whenever a given node/name/resource's RRSET is updated.\\n  event DNSRecordChanged(\\n    bytes32 indexed node,\\n    bytes name,\\n    uint16 resource,\\n    bytes record\\n  );\\n  // DNSRecordDeleted is emitted whenever a given node/name/resource's RRSET is deleted.\\n  event DNSRecordDeleted(bytes32 indexed node, bytes name, uint16 resource);\\n  // DNSZoneCleared is emitted whenever a given node's zone information is cleared.\\n  event DNSZoneCleared(bytes32 indexed node);\\n\\n  // Version the mapping for each zone.  This allows users who have lost\\n  // track of their entries to effectively delete an entire zone by bumping\\n  // the version number.\\n  // node => version\\n  mapping(bytes32 => uint256) private versions;\\n\\n  // The records themselves.  Stored as binary RRSETs\\n  // node => version => name => resource => data\\n  mapping(bytes32 => mapping(uint256 => mapping(bytes32 => mapping(uint16 => bytes))))\\n    private records;\\n\\n  // Count of number of entries for a given name.  Required for DNS resolvers\\n  // when resolving wildcards.\\n  // node => version => name => number of records\\n  mapping(bytes32 => mapping(uint256 => mapping(bytes32 => uint16)))\\n    private nameEntriesCount;\\n\\n  /**\\n   * Set one or more DNS records.  Records are supplied in wire-format.\\n   * Records with the same node/name/resource must be supplied one after the\\n   * other to ensure the data is updated correctly. For example, if the data\\n   * was supplied:\\n   *     a.example.com IN A 1.2.3.4\\n   *     a.example.com IN A 5.6.7.8\\n   *     www.example.com IN CNAME a.example.com.\\n   * then this would store the two A records for a.example.com correctly as a\\n   * single RRSET, however if the data was supplied:\\n   *     a.example.com IN A 1.2.3.4\\n   *     www.example.com IN CNAME a.example.com.\\n   *     a.example.com IN A 5.6.7.8\\n   * then this would store the first A record, the CNAME, then the second A\\n   * record which would overwrite the first.\\n   *\\n   * @param node the namehash of the node for which to set the records\\n   * @param data the DNS wire format records to set\\n   */\\n  function setDNSRecords(bytes32 node, bytes calldata data)\\n    external\\n    authorised(node)\\n  {\\n    uint16 resource = 0;\\n    uint256 offset = 0;\\n    bytes memory name;\\n    bytes memory value;\\n    bytes32 nameHash;\\n    // Iterate over the data to add the resource records\\n    for (\\n      RRUtils.RRIterator memory iter = data.iterateRRs(0);\\n      !iter.done();\\n      iter.next()\\n    ) {\\n      if (resource == 0) {\\n        resource = iter.dnstype;\\n        name = iter.name();\\n        nameHash = keccak256(abi.encodePacked(name));\\n        value = bytes(iter.rdata());\\n      } else {\\n        bytes memory newName = iter.name();\\n        if (resource != iter.dnstype || !name.equals(newName)) {\\n          setDNSRRSet(\\n            node,\\n            name,\\n            resource,\\n            data,\\n            offset,\\n            iter.offset - offset,\\n            value.length == 0\\n          );\\n          resource = iter.dnstype;\\n          offset = iter.offset;\\n          name = newName;\\n          nameHash = keccak256(name);\\n          value = bytes(iter.rdata());\\n        }\\n      }\\n    }\\n    if (name.length > 0) {\\n      setDNSRRSet(\\n        node,\\n        name,\\n        resource,\\n        data,\\n        offset,\\n        data.length - offset,\\n        value.length == 0\\n      );\\n    }\\n  }\\n\\n  /**\\n   * Obtain a DNS record.\\n   * @param node the namehash of the node for which to fetch the record\\n   * @param name the keccak-256 hash of the fully-qualified name for which to fetch the record\\n   * @param resource the ID of the resource as per https://en.wikipedia.org/wiki/List_of_DNS_record_types\\n   * @return the DNS record in wire format if present, otherwise empty\\n   */\\n  function dnsRecord(\\n    bytes32 node,\\n    bytes32 name,\\n    uint16 resource\\n  ) public view returns (bytes memory) {\\n    return records[node][versions[node]][name][resource];\\n  }\\n\\n  /**\\n   * Check if a given node has records.\\n   * @param node the namehash of the node for which to check the records\\n   * @param name the namehash of the node for which to check the records\\n   */\\n  function hasDNSRecords(bytes32 node, bytes32 name)\\n    public\\n    view\\n    returns (bool)\\n  {\\n    return (nameEntriesCount[node][versions[node]][name] != 0);\\n  }\\n\\n  /**\\n   * Clear all information for a DNS zone.\\n   * @param node the namehash of the node for which to clear the zone\\n   */\\n  function clearDNSZone(bytes32 node) public authorised(node) {\\n    versions[node]++;\\n    emit DNSZoneCleared(node);\\n  }\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return\\n      interfaceID == DNS_RECORD_INTERFACE_ID ||\\n      super.supportsInterface(interfaceID);\\n  }\\n\\n  function setDNSRRSet(\\n    bytes32 node,\\n    bytes memory name,\\n    uint16 resource,\\n    bytes memory data,\\n    uint256 offset,\\n    uint256 size,\\n    bool deleteRecord\\n  ) private {\\n    uint256 version = versions[node];\\n    bytes32 nameHash = keccak256(name);\\n    bytes memory rrData = data.substring(offset, size);\\n    if (deleteRecord) {\\n      if (records[node][version][nameHash][resource].length != 0) {\\n        nameEntriesCount[node][version][nameHash]--;\\n      }\\n      delete (records[node][version][nameHash][resource]);\\n      emit DNSRecordDeleted(node, name, resource);\\n    } else {\\n      if (records[node][version][nameHash][resource].length == 0) {\\n        nameEntriesCount[node][version][nameHash]++;\\n      }\\n      records[node][version][nameHash][resource] = rrData;\\n      emit DNSRecordChanged(node, name, resource, rrData);\\n    }\\n  }\\n}\\n\\n// File: contracts/profiles/InterfaceResolver.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract InterfaceResolver is ResolverBase, AddrResolver {\\n  bytes4 private constant INTERFACE_INTERFACE_ID =\\n    bytes4(keccak256('interfaceImplementer(bytes32,bytes4)'));\\n  bytes4 private constant INTERFACE_META_ID = 0x01ffc9a7;\\n\\n  event InterfaceChanged(\\n    bytes32 indexed node,\\n    bytes4 indexed interfaceID,\\n    address implementer\\n  );\\n\\n  mapping(bytes32 => mapping(bytes4 => address)) interfaces;\\n\\n  /**\\n   * Sets an interface associated with a name.\\n   * Setting the address to 0 restores the default behaviour of querying the contract at `addr()` for interface support.\\n   * @param node The node to update.\\n   * @param interfaceID The EIP 168 interface ID.\\n   * @param implementer The address of a contract that implements this interface for this node.\\n   */\\n  function setInterface(\\n    bytes32 node,\\n    bytes4 interfaceID,\\n    address implementer\\n  ) external authorised(node) {\\n    interfaces[node][interfaceID] = implementer;\\n    emit InterfaceChanged(node, interfaceID, implementer);\\n  }\\n\\n  /**\\n   * Returns the address of a contract that implements the specified interface for this name.\\n   * If an implementer has not been set for this interfaceID and name, the resolver will query\\n   * the contract at `addr()`. If `addr()` is set, a contract exists at that address, and that\\n   * contract implements EIP168 and returns `true` for the specified interfaceID, its address\\n   * will be returned.\\n   * @param node The ENS node to query.\\n   * @param interfaceID The EIP 168 interface ID to check for.\\n   * @return The address that implements this interface, or 0 if the interface is unsupported.\\n   */\\n  function interfaceImplementer(bytes32 node, bytes4 interfaceID)\\n    external\\n    view\\n    returns (address)\\n  {\\n    address implementer = interfaces[node][interfaceID];\\n    if (implementer != address(0)) {\\n      return implementer;\\n    }\\n\\n    address a = addr(node);\\n    if (a == address(0)) {\\n      return address(0);\\n    }\\n\\n    (bool success, bytes memory returnData) = a.staticcall(\\n      abi.encodeWithSignature('supportsInterface(bytes4)', INTERFACE_META_ID)\\n    );\\n    if (!success || returnData.length < 32 || returnData[31] == 0) {\\n      // EIP 168 not supported by target\\n      return address(0);\\n    }\\n\\n    (success, returnData) = a.staticcall(\\n      abi.encodeWithSignature('supportsInterface(bytes4)', interfaceID)\\n    );\\n    if (!success || returnData.length < 32 || returnData[31] == 0) {\\n      // Specified interface not supported by target\\n      return address(0);\\n    }\\n\\n    return a;\\n  }\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return\\n      interfaceID == INTERFACE_INTERFACE_ID ||\\n      super.supportsInterface(interfaceID);\\n  }\\n}\\n\\n// File: contracts/profiles/NameResolver.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract NameResolver is ResolverBase {\\n  bytes4 private constant NAME_INTERFACE_ID = 0x691f3431;\\n\\n  event NameChanged(bytes32 indexed node, string name);\\n\\n  mapping(bytes32 => string) names;\\n\\n  /**\\n   * Sets the name associated with an ENS node, for reverse records.\\n   * May only be called by the owner of that node in the ENS registry.\\n   * @param node The node to update.\\n   * @param name The name to set.\\n   */\\n  function setName(bytes32 node, string calldata name)\\n    external\\n    authorised(node)\\n  {\\n    names[node] = name;\\n    emit NameChanged(node, name);\\n  }\\n\\n  /**\\n   * Returns the name associated with an ENS node, for reverse records.\\n   * Defined in EIP181.\\n   * @param node The ENS node to query.\\n   * @return The associated name.\\n   */\\n  function name(bytes32 node) external view returns (string memory) {\\n    return names[node];\\n  }\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return\\n      interfaceID == NAME_INTERFACE_ID || super.supportsInterface(interfaceID);\\n  }\\n}\\n\\n// File: contracts/profiles/PubkeyResolver.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract PubkeyResolver is ResolverBase {\\n  bytes4 private constant PUBKEY_INTERFACE_ID = 0xc8690233;\\n\\n  event PubkeyChanged(bytes32 indexed node, bytes32 x, bytes32 y);\\n\\n  struct PublicKey {\\n    bytes32 x;\\n    bytes32 y;\\n  }\\n\\n  mapping(bytes32 => PublicKey) pubkeys;\\n\\n  /**\\n   * Sets the SECP256k1 public key associated with an ENS node.\\n   * @param node The ENS node to query\\n   * @param x the X coordinate of the curve point for the public key.\\n   * @param y the Y coordinate of the curve point for the public key.\\n   */\\n  function setPubkey(\\n    bytes32 node,\\n    bytes32 x,\\n    bytes32 y\\n  ) external authorised(node) {\\n    pubkeys[node] = PublicKey(x, y);\\n    emit PubkeyChanged(node, x, y);\\n  }\\n\\n  /**\\n   * Returns the SECP256k1 public key associated with an ENS node.\\n   * Defined in EIP 619.\\n   * @param node The ENS node to query\\n   * @return x, y the X and Y coordinates of the curve point for the public key.\\n   */\\n  function pubkey(bytes32 node) external view returns (bytes32 x, bytes32 y) {\\n    return (pubkeys[node].x, pubkeys[node].y);\\n  }\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return\\n      interfaceID == PUBKEY_INTERFACE_ID ||\\n      super.supportsInterface(interfaceID);\\n  }\\n}\\n\\n// File: contracts/profiles/TextResolver.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract TextResolver is ResolverBase {\\n  bytes4 private constant TEXT_INTERFACE_ID = 0x59d1d43c;\\n\\n  event TextChanged(\\n    bytes32 indexed node,\\n    string indexed indexedKey,\\n    string key\\n  );\\n\\n  mapping(bytes32 => mapping(string => string)) texts;\\n\\n  /**\\n   * Sets the text data associated with an ENS node and key.\\n   * May only be called by the owner of that node in the ENS registry.\\n   * @param node The node to update.\\n   * @param key The key to set.\\n   * @param value The text data value to set.\\n   */\\n  function setText(\\n    bytes32 node,\\n    string calldata key,\\n    string calldata value\\n  ) external authorised(node) {\\n    texts[node][key] = value;\\n    emit TextChanged(node, key, key);\\n  }\\n\\n  /**\\n   * Returns the text data associated with an ENS node and key.\\n   * @param node The ENS node to query.\\n   * @param key The text data key to query.\\n   * @return The associated text data.\\n   */\\n  function text(bytes32 node, string calldata key)\\n    external\\n    view\\n    returns (string memory)\\n  {\\n    return texts[node][key];\\n  }\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return\\n      interfaceID == TEXT_INTERFACE_ID || super.supportsInterface(interfaceID);\\n  }\\n}\\n\\n// File: contracts/PublicResolver.sol\\n\\npragma solidity ^0.5.0;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * A simple resolver anyone can use; only allows the owner of a node to set its\\n * address.\\n */\\ncontract PublicResolver_mainnet_9412610 is\\n  ABIResolver,\\n  AddrResolver,\\n  ContentHashResolver,\\n  DNSResolver,\\n  InterfaceResolver,\\n  NameResolver,\\n  PubkeyResolver,\\n  TextResolver\\n{\\n  ENS ens;\\n\\n  /**\\n   * A mapping of authorisations. An address that is authorised for a name\\n   * may make any changes to the name that the owner could, but may not update\\n   * the set of authorisations.\\n   * (node, owner, caller) => isAuthorised\\n   */\\n  mapping(bytes32 => mapping(address => mapping(address => bool)))\\n    public authorisations;\\n\\n  event AuthorisationChanged(\\n    bytes32 indexed node,\\n    address indexed owner,\\n    address indexed target,\\n    bool isAuthorised\\n  );\\n\\n  constructor(ENS _ens) public {\\n    ens = _ens;\\n  }\\n\\n  /**\\n   * @dev Sets or clears an authorisation.\\n   * Authorisations are specific to the caller. Any account can set an authorisation\\n   * for any name, but the authorisation that is checked will be that of the\\n   * current owner of a name. Thus, transferring a name effectively clears any\\n   * existing authorisations, and new authorisations can be set in advance of\\n   * an ownership transfer if desired.\\n   *\\n   * @param node The name to change the authorisation on.\\n   * @param target The address that is to be authorised or deauthorised.\\n   * @param isAuthorised True if the address should be authorised, or false if it should be deauthorised.\\n   */\\n  function setAuthorisation(\\n    bytes32 node,\\n    address target,\\n    bool isAuthorised\\n  ) external {\\n    authorisations[node][msg.sender][target] = isAuthorised;\\n    emit AuthorisationChanged(node, msg.sender, target, isAuthorised);\\n  }\\n\\n  function isAuthorised(bytes32 node) internal view returns (bool) {\\n    address owner = ens.owner(node);\\n    return owner == msg.sender || authorisations[node][owner][msg.sender];\\n  }\\n\\n  function multicall(bytes[] calldata data)\\n    external\\n    returns (bytes[] memory results)\\n  {\\n    results = new bytes[](data.length);\\n    for (uint256 i = 0; i < data.length; i++) {\\n      (bool success, bytes memory result) = address(this).delegatecall(data[i]);\\n      require(success);\\n      results[i] = result;\\n    }\\n    return results;\\n  }\\n}\\n\",\"keccak256\":\"0x29ca7d322ab7177f187f9bfc310e6dfc94049e9beaaafe958bead081fd90ad76\"}},\"version\":1}",
          "storageLayout": {
            "storage": [
              {
                "astId": 2942,
                "contract": "contracts/legacy/PublicResolver_mainnet_9412610.sol:NameResolver",
                "label": "names",
                "offset": 0,
                "slot": "0",
                "type": "t_mapping(t_bytes32,t_string_storage)"
              }
            ],
            "types": {
              "t_bytes32": {
                "encoding": "inplace",
                "label": "bytes32",
                "numberOfBytes": "32"
              },
              "t_mapping(t_bytes32,t_string_storage)": {
                "encoding": "mapping",
                "key": "t_bytes32",
                "label": "mapping(bytes32 => string)",
                "numberOfBytes": "32",
                "value": "t_string_storage"
              },
              "t_string_storage": {
                "encoding": "bytes",
                "label": "string",
                "numberOfBytes": "32"
              }
            }
          },
          "userdoc": {
            "methods": {
              "name(bytes32)": {
                "notice": "Returns the name associated with an ENS node, for reverse records. Defined in EIP181."
              },
              "setName(bytes32,string)": {
                "notice": "Sets the name associated with an ENS node, for reverse records. May only be called by the owner of that node in the ENS registry."
              }
            }
          }
        },
        "PubkeyResolver": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "node",
                  "type": "bytes32"
                },
                {
                  "indexed": false,
                  "internalType": "bytes32",
                  "name": "x",
                  "type": "bytes32"
                },
                {
                  "indexed": false,
                  "internalType": "bytes32",
                  "name": "y",
                  "type": "bytes32"
                }
              ],
              "name": "PubkeyChanged",
              "type": "event"
            },
            {
              "constant": true,
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "node",
                  "type": "bytes32"
                }
              ],
              "name": "pubkey",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "x",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "y",
                  "type": "bytes32"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "node",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "x",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "y",
                  "type": "bytes32"
                }
              ],
              "name": "setPubkey",
              "outputs": [],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [
                {
                  "internalType": "bytes4",
                  "name": "interfaceID",
                  "type": "bytes4"
                }
              ],
              "name": "supportsInterface",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "payable": false,
              "stateMutability": "pure",
              "type": "function"
            }
          ],
          "devdoc": {
            "methods": {
              "pubkey(bytes32)": {
                "params": {
                  "node": "The ENS node to query"
                },
                "return": "x, y the X and Y coordinates of the curve point for the public key."
              },
              "setPubkey(bytes32,bytes32,bytes32)": {
                "params": {
                  "node": "The ENS node to query",
                  "x": "the X coordinate of the curve point for the public key.",
                  "y": "the Y coordinate of the curve point for the public key."
                }
              }
            }
          },
          "evm": {
            "bytecode": {
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "gasEstimates": null,
            "methodIdentifiers": {
              "pubkey(bytes32)": "c8690233",
              "setPubkey(bytes32,bytes32,bytes32)": "29cd62ea",
              "supportsInterface(bytes4)": "01ffc9a7"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.5.17+commit.d19bba13\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"x\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"y\",\"type\":\"bytes32\"}],\"name\":\"PubkeyChanged\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"pubkey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"x\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"y\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"x\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"y\",\"type\":\"bytes32\"}],\"name\":\"setPubkey\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"pubkey(bytes32)\":{\"params\":{\"node\":\"The ENS node to query\"},\"return\":\"x, y the X and Y coordinates of the curve point for the public key.\"},\"setPubkey(bytes32,bytes32,bytes32)\":{\"params\":{\"node\":\"The ENS node to query\",\"x\":\"the X coordinate of the curve point for the public key.\",\"y\":\"the Y coordinate of the curve point for the public key.\"}}}},\"userdoc\":{\"methods\":{\"pubkey(bytes32)\":{\"notice\":\"Returns the SECP256k1 public key associated with an ENS node. Defined in EIP 619.\"},\"setPubkey(bytes32,bytes32,bytes32)\":{\"notice\":\"Sets the SECP256k1 public key associated with an ENS node.\"}}}},\"settings\":{\"compilationTarget\":{\"contracts/legacy/PublicResolver_mainnet_9412610.sol\":\"PubkeyResolver\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"contracts/legacy/PublicResolver_mainnet_9412610.sol\":{\"content\":\"/**\\n *Submitted for verification at Etherscan.io on 2020-02-03\\n */\\n\\n// File: @ensdomains/ens/contracts/ENS.sol\\n\\npragma solidity >=0.4.24;\\n\\ninterface ENS {\\n  // Logged when the owner of a node assigns a new owner to a subnode.\\n  event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n  // Logged when the owner of a node transfers ownership to a new account.\\n  event Transfer(bytes32 indexed node, address owner);\\n\\n  // Logged when the resolver for a node changes.\\n  event NewResolver(bytes32 indexed node, address resolver);\\n\\n  // Logged when the TTL of a node changes\\n  event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n  function setSubnodeOwner(\\n    bytes32 node,\\n    bytes32 label,\\n    address owner\\n  ) external;\\n\\n  function setResolver(bytes32 node, address resolver) external;\\n\\n  function setOwner(bytes32 node, address owner) external;\\n\\n  function setTTL(bytes32 node, uint64 ttl) external;\\n\\n  function owner(bytes32 node) external view returns (address);\\n\\n  function resolver(bytes32 node) external view returns (address);\\n\\n  function ttl(bytes32 node) external view returns (uint64);\\n}\\n\\n// File: contracts/ResolverBase.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract ResolverBase {\\n  bytes4 private constant INTERFACE_META_ID = 0x01ffc9a7;\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return interfaceID == INTERFACE_META_ID;\\n  }\\n\\n  function isAuthorised(bytes32 node) internal view returns (bool);\\n\\n  modifier authorised(bytes32 node) {\\n    require(isAuthorised(node));\\n    _;\\n  }\\n\\n  function bytesToAddress(bytes memory b)\\n    internal\\n    pure\\n    returns (address payable a)\\n  {\\n    require(b.length == 20);\\n    assembly {\\n      a := div(mload(add(b, 32)), exp(256, 12))\\n    }\\n  }\\n\\n  function addressToBytes(address a) internal pure returns (bytes memory b) {\\n    b = new bytes(20);\\n    assembly {\\n      mstore(add(b, 32), mul(a, exp(256, 12)))\\n    }\\n  }\\n}\\n\\n// File: contracts/profiles/ABIResolver.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract ABIResolver is ResolverBase {\\n  bytes4 private constant ABI_INTERFACE_ID = 0x2203ab56;\\n\\n  event ABIChanged(bytes32 indexed node, uint256 indexed contentType);\\n\\n  mapping(bytes32 => mapping(uint256 => bytes)) abis;\\n\\n  /**\\n   * Sets the ABI associated with an ENS node.\\n   * Nodes may have one ABI of each content type. To remove an ABI, set it to\\n   * the empty string.\\n   * @param node The node to update.\\n   * @param contentType The content type of the ABI\\n   * @param data The ABI data.\\n   */\\n  function setABI(\\n    bytes32 node,\\n    uint256 contentType,\\n    bytes calldata data\\n  ) external authorised(node) {\\n    // Content types must be powers of 2\\n    require(((contentType - 1) & contentType) == 0);\\n\\n    abis[node][contentType] = data;\\n    emit ABIChanged(node, contentType);\\n  }\\n\\n  /**\\n   * Returns the ABI associated with an ENS node.\\n   * Defined in EIP205.\\n   * @param node The ENS node to query\\n   * @param contentTypes A bitwise OR of the ABI formats accepted by the caller.\\n   * @return contentType The content type of the return value\\n   * @return data The ABI data\\n   */\\n  function ABI(bytes32 node, uint256 contentTypes)\\n    external\\n    view\\n    returns (uint256, bytes memory)\\n  {\\n    mapping(uint256 => bytes) storage abiset = abis[node];\\n\\n    for (\\n      uint256 contentType = 1;\\n      contentType <= contentTypes;\\n      contentType <<= 1\\n    ) {\\n      if ((contentType & contentTypes) != 0 && abiset[contentType].length > 0) {\\n        return (contentType, abiset[contentType]);\\n      }\\n    }\\n\\n    return (0, bytes(''));\\n  }\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return\\n      interfaceID == ABI_INTERFACE_ID || super.supportsInterface(interfaceID);\\n  }\\n}\\n\\n// File: contracts/profiles/AddrResolver.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract AddrResolver is ResolverBase {\\n  bytes4 private constant ADDR_INTERFACE_ID = 0x3b3b57de;\\n  bytes4 private constant ADDRESS_INTERFACE_ID = 0xf1cb7e06;\\n  uint256 private constant COIN_TYPE_ETH = 60;\\n\\n  event AddrChanged(bytes32 indexed node, address a);\\n  event AddressChanged(\\n    bytes32 indexed node,\\n    uint256 coinType,\\n    bytes newAddress\\n  );\\n\\n  mapping(bytes32 => mapping(uint256 => bytes)) _addresses;\\n\\n  /**\\n   * Sets the address associated with an ENS node.\\n   * May only be called by the owner of that node in the ENS registry.\\n   * @param node The node to update.\\n   * @param a The address to set.\\n   */\\n  function setAddr(bytes32 node, address a) external authorised(node) {\\n    setAddr(node, COIN_TYPE_ETH, addressToBytes(a));\\n  }\\n\\n  /**\\n   * Returns the address associated with an ENS node.\\n   * @param node The ENS node to query.\\n   * @return The associated address.\\n   */\\n  function addr(bytes32 node) public view returns (address payable) {\\n    bytes memory a = addr(node, COIN_TYPE_ETH);\\n    if (a.length == 0) {\\n      return address(0);\\n    }\\n    return bytesToAddress(a);\\n  }\\n\\n  function setAddr(\\n    bytes32 node,\\n    uint256 coinType,\\n    bytes memory a\\n  ) public authorised(node) {\\n    emit AddressChanged(node, coinType, a);\\n    if (coinType == COIN_TYPE_ETH) {\\n      emit AddrChanged(node, bytesToAddress(a));\\n    }\\n    _addresses[node][coinType] = a;\\n  }\\n\\n  function addr(bytes32 node, uint256 coinType)\\n    public\\n    view\\n    returns (bytes memory)\\n  {\\n    return _addresses[node][coinType];\\n  }\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return\\n      interfaceID == ADDR_INTERFACE_ID ||\\n      interfaceID == ADDRESS_INTERFACE_ID ||\\n      super.supportsInterface(interfaceID);\\n  }\\n}\\n\\n// File: contracts/profiles/ContentHashResolver.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract ContentHashResolver is ResolverBase {\\n  bytes4 private constant CONTENT_HASH_INTERFACE_ID = 0xbc1c58d1;\\n\\n  event ContenthashChanged(bytes32 indexed node, bytes hash);\\n\\n  mapping(bytes32 => bytes) hashes;\\n\\n  /**\\n   * Sets the contenthash associated with an ENS node.\\n   * May only be called by the owner of that node in the ENS registry.\\n   * @param node The node to update.\\n   * @param hash The contenthash to set\\n   */\\n  function setContenthash(bytes32 node, bytes calldata hash)\\n    external\\n    authorised(node)\\n  {\\n    hashes[node] = hash;\\n    emit ContenthashChanged(node, hash);\\n  }\\n\\n  /**\\n   * Returns the contenthash associated with an ENS node.\\n   * @param node The ENS node to query.\\n   * @return The associated contenthash.\\n   */\\n  function contenthash(bytes32 node) external view returns (bytes memory) {\\n    return hashes[node];\\n  }\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return\\n      interfaceID == CONTENT_HASH_INTERFACE_ID ||\\n      super.supportsInterface(interfaceID);\\n  }\\n}\\n\\n// File: @ensdomains/dnssec-oracle/contracts/BytesUtils.sol\\n\\npragma solidity >0.4.23;\\n\\nlibrary BytesUtils {\\n  /*\\n   * @dev Returns the keccak-256 hash of a byte range.\\n   * @param self The byte string to hash.\\n   * @param offset The position to start hashing at.\\n   * @param len The number of bytes to hash.\\n   * @return The hash of the byte range.\\n   */\\n  function keccak(\\n    bytes memory self,\\n    uint256 offset,\\n    uint256 len\\n  ) internal pure returns (bytes32 ret) {\\n    require(offset + len <= self.length);\\n    assembly {\\n      ret := keccak256(add(add(self, 32), offset), len)\\n    }\\n  }\\n\\n  /*\\n   * @dev Returns a positive number if `other` comes lexicographically after\\n   *      `self`, a negative number if it comes before, or zero if the\\n   *      contents of the two bytes are equal.\\n   * @param self The first bytes to compare.\\n   * @param other The second bytes to compare.\\n   * @return The result of the comparison.\\n   */\\n  function compare(bytes memory self, bytes memory other)\\n    internal\\n    pure\\n    returns (int256)\\n  {\\n    return compare(self, 0, self.length, other, 0, other.length);\\n  }\\n\\n  /*\\n   * @dev Returns a positive number if `other` comes lexicographically after\\n   *      `self`, a negative number if it comes before, or zero if the\\n   *      contents of the two bytes are equal. Comparison is done per-rune,\\n   *      on unicode codepoints.\\n   * @param self The first bytes to compare.\\n   * @param offset The offset of self.\\n   * @param len    The length of self.\\n   * @param other The second bytes to compare.\\n   * @param otheroffset The offset of the other string.\\n   * @param otherlen    The length of the other string.\\n   * @return The result of the comparison.\\n   */\\n  function compare(\\n    bytes memory self,\\n    uint256 offset,\\n    uint256 len,\\n    bytes memory other,\\n    uint256 otheroffset,\\n    uint256 otherlen\\n  ) internal pure returns (int256) {\\n    uint256 shortest = len;\\n    if (otherlen < len) shortest = otherlen;\\n\\n    uint256 selfptr;\\n    uint256 otherptr;\\n\\n    assembly {\\n      selfptr := add(self, add(offset, 32))\\n      otherptr := add(other, add(otheroffset, 32))\\n    }\\n    for (uint256 idx = 0; idx < shortest; idx += 32) {\\n      uint256 a;\\n      uint256 b;\\n      assembly {\\n        a := mload(selfptr)\\n        b := mload(otherptr)\\n      }\\n      if (a != b) {\\n        // Mask out irrelevant bytes and check again\\n        uint256 mask;\\n        if (shortest > 32) {\\n          mask = uint256(-1); // aka 0xffffff....\\n        } else {\\n          mask = ~(2**(8 * (32 - shortest + idx)) - 1);\\n        }\\n        uint256 diff = (a & mask) - (b & mask);\\n        if (diff != 0) return int256(diff);\\n      }\\n      selfptr += 32;\\n      otherptr += 32;\\n    }\\n\\n    return int256(len) - int256(otherlen);\\n  }\\n\\n  /*\\n   * @dev Returns true if the two byte ranges are equal.\\n   * @param self The first byte range to compare.\\n   * @param offset The offset into the first byte range.\\n   * @param other The second byte range to compare.\\n   * @param otherOffset The offset into the second byte range.\\n   * @param len The number of bytes to compare\\n   * @return True if the byte ranges are equal, false otherwise.\\n   */\\n  function equals(\\n    bytes memory self,\\n    uint256 offset,\\n    bytes memory other,\\n    uint256 otherOffset,\\n    uint256 len\\n  ) internal pure returns (bool) {\\n    return keccak(self, offset, len) == keccak(other, otherOffset, len);\\n  }\\n\\n  /*\\n   * @dev Returns true if the two byte ranges are equal with offsets.\\n   * @param self The first byte range to compare.\\n   * @param offset The offset into the first byte range.\\n   * @param other The second byte range to compare.\\n   * @param otherOffset The offset into the second byte range.\\n   * @return True if the byte ranges are equal, false otherwise.\\n   */\\n  function equals(\\n    bytes memory self,\\n    uint256 offset,\\n    bytes memory other,\\n    uint256 otherOffset\\n  ) internal pure returns (bool) {\\n    return\\n      keccak(self, offset, self.length - offset) ==\\n      keccak(other, otherOffset, other.length - otherOffset);\\n  }\\n\\n  /*\\n   * @dev Compares a range of 'self' to all of 'other' and returns True iff\\n   *      they are equal.\\n   * @param self The first byte range to compare.\\n   * @param offset The offset into the first byte range.\\n   * @param other The second byte range to compare.\\n   * @return True if the byte ranges are equal, false otherwise.\\n   */\\n  function equals(\\n    bytes memory self,\\n    uint256 offset,\\n    bytes memory other\\n  ) internal pure returns (bool) {\\n    return\\n      self.length >= offset + other.length &&\\n      equals(self, offset, other, 0, other.length);\\n  }\\n\\n  /*\\n   * @dev Returns true if the two byte ranges are equal.\\n   * @param self The first byte range to compare.\\n   * @param other The second byte range to compare.\\n   * @return True if the byte ranges are equal, false otherwise.\\n   */\\n  function equals(bytes memory self, bytes memory other)\\n    internal\\n    pure\\n    returns (bool)\\n  {\\n    return\\n      self.length == other.length && equals(self, 0, other, 0, self.length);\\n  }\\n\\n  /*\\n   * @dev Returns the 8-bit number at the specified index of self.\\n   * @param self The byte string.\\n   * @param idx The index into the bytes\\n   * @return The specified 8 bits of the string, interpreted as an integer.\\n   */\\n  function readUint8(bytes memory self, uint256 idx)\\n    internal\\n    pure\\n    returns (uint8 ret)\\n  {\\n    return uint8(self[idx]);\\n  }\\n\\n  /*\\n   * @dev Returns the 16-bit number at the specified index of self.\\n   * @param self The byte string.\\n   * @param idx The index into the bytes\\n   * @return The specified 16 bits of the string, interpreted as an integer.\\n   */\\n  function readUint16(bytes memory self, uint256 idx)\\n    internal\\n    pure\\n    returns (uint16 ret)\\n  {\\n    require(idx + 2 <= self.length);\\n    assembly {\\n      ret := and(mload(add(add(self, 2), idx)), 0xFFFF)\\n    }\\n  }\\n\\n  /*\\n   * @dev Returns the 32-bit number at the specified index of self.\\n   * @param self The byte string.\\n   * @param idx The index into the bytes\\n   * @return The specified 32 bits of the string, interpreted as an integer.\\n   */\\n  function readUint32(bytes memory self, uint256 idx)\\n    internal\\n    pure\\n    returns (uint32 ret)\\n  {\\n    require(idx + 4 <= self.length);\\n    assembly {\\n      ret := and(mload(add(add(self, 4), idx)), 0xFFFFFFFF)\\n    }\\n  }\\n\\n  /*\\n   * @dev Returns the 32 byte value at the specified index of self.\\n   * @param self The byte string.\\n   * @param idx The index into the bytes\\n   * @return The specified 32 bytes of the string.\\n   */\\n  function readBytes32(bytes memory self, uint256 idx)\\n    internal\\n    pure\\n    returns (bytes32 ret)\\n  {\\n    require(idx + 32 <= self.length);\\n    assembly {\\n      ret := mload(add(add(self, 32), idx))\\n    }\\n  }\\n\\n  /*\\n   * @dev Returns the 32 byte value at the specified index of self.\\n   * @param self The byte string.\\n   * @param idx The index into the bytes\\n   * @return The specified 32 bytes of the string.\\n   */\\n  function readBytes20(bytes memory self, uint256 idx)\\n    internal\\n    pure\\n    returns (bytes20 ret)\\n  {\\n    require(idx + 20 <= self.length);\\n    assembly {\\n      ret := and(\\n        mload(add(add(self, 32), idx)),\\n        0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000\\n      )\\n    }\\n  }\\n\\n  /*\\n   * @dev Returns the n byte value at the specified index of self.\\n   * @param self The byte string.\\n   * @param idx The index into the bytes.\\n   * @param len The number of bytes.\\n   * @return The specified 32 bytes of the string.\\n   */\\n  function readBytesN(\\n    bytes memory self,\\n    uint256 idx,\\n    uint256 len\\n  ) internal pure returns (bytes32 ret) {\\n    require(len <= 32);\\n    require(idx + len <= self.length);\\n    assembly {\\n      let mask := not(sub(exp(256, sub(32, len)), 1))\\n      ret := and(mload(add(add(self, 32), idx)), mask)\\n    }\\n  }\\n\\n  function memcpy(\\n    uint256 dest,\\n    uint256 src,\\n    uint256 len\\n  ) private pure {\\n    // Copy word-length chunks while possible\\n    for (; len >= 32; len -= 32) {\\n      assembly {\\n        mstore(dest, mload(src))\\n      }\\n      dest += 32;\\n      src += 32;\\n    }\\n\\n    // Copy remaining bytes\\n    uint256 mask = 256**(32 - len) - 1;\\n    assembly {\\n      let srcpart := and(mload(src), not(mask))\\n      let destpart := and(mload(dest), mask)\\n      mstore(dest, or(destpart, srcpart))\\n    }\\n  }\\n\\n  /*\\n   * @dev Copies a substring into a new byte string.\\n   * @param self The byte string to copy from.\\n   * @param offset The offset to start copying at.\\n   * @param len The number of bytes to copy.\\n   */\\n  function substring(\\n    bytes memory self,\\n    uint256 offset,\\n    uint256 len\\n  ) internal pure returns (bytes memory) {\\n    require(offset + len <= self.length);\\n\\n    bytes memory ret = new bytes(len);\\n    uint256 dest;\\n    uint256 src;\\n\\n    assembly {\\n      dest := add(ret, 32)\\n      src := add(add(self, 32), offset)\\n    }\\n    memcpy(dest, src, len);\\n\\n    return ret;\\n  }\\n\\n  // Maps characters from 0x30 to 0x7A to their base32 values.\\n  // 0xFF represents invalid characters in that range.\\n  bytes constant base32HexTable =\\n    hex'00010203040506070809FFFFFFFFFFFFFF0A0B0C0D0E0F101112131415161718191A1B1C1D1E1FFFFFFFFFFFFFFFFFFFFF0A0B0C0D0E0F101112131415161718191A1B1C1D1E1F';\\n\\n  /**\\n   * @dev Decodes unpadded base32 data of up to one word in length.\\n   * @param self The data to decode.\\n   * @param off Offset into the string to start at.\\n   * @param len Number of characters to decode.\\n   * @return The decoded data, left aligned.\\n   */\\n  function base32HexDecodeWord(\\n    bytes memory self,\\n    uint256 off,\\n    uint256 len\\n  ) internal pure returns (bytes32) {\\n    require(len <= 52);\\n\\n    uint256 ret = 0;\\n    uint8 decoded;\\n    for (uint256 i = 0; i < len; i++) {\\n      bytes1 char = self[off + i];\\n      require(char >= 0x30 && char <= 0x7A);\\n      decoded = uint8(base32HexTable[uint256(uint8(char)) - 0x30]);\\n      require(decoded <= 0x20);\\n      if (i == len - 1) {\\n        break;\\n      }\\n      ret = (ret << 5) | decoded;\\n    }\\n\\n    uint256 bitlen = len * 5;\\n    if (len % 8 == 0) {\\n      // Multiple of 8 characters, no padding\\n      ret = (ret << 5) | decoded;\\n    } else if (len % 8 == 2) {\\n      // Two extra characters - 1 byte\\n      ret = (ret << 3) | (decoded >> 2);\\n      bitlen -= 2;\\n    } else if (len % 8 == 4) {\\n      // Four extra characters - 2 bytes\\n      ret = (ret << 1) | (decoded >> 4);\\n      bitlen -= 4;\\n    } else if (len % 8 == 5) {\\n      // Five extra characters - 3 bytes\\n      ret = (ret << 4) | (decoded >> 1);\\n      bitlen -= 1;\\n    } else if (len % 8 == 7) {\\n      // Seven extra characters - 4 bytes\\n      ret = (ret << 2) | (decoded >> 3);\\n      bitlen -= 3;\\n    } else {\\n      revert();\\n    }\\n\\n    return bytes32(ret << (256 - bitlen));\\n  }\\n}\\n\\n// File: @ensdomains/buffer/contracts/Buffer.sol\\n\\npragma solidity >0.4.18;\\n\\n/**\\n * @dev A library for working with mutable byte buffers in Solidity.\\n *\\n * Byte buffers are mutable and expandable, and provide a variety of primitives\\n * for writing to them. At any time you can fetch a bytes object containing the\\n * current contents of the buffer. The bytes object should not be stored between\\n * operations, as it may change due to resizing of the buffer.\\n */\\nlibrary Buffer {\\n  /**\\n   * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n   *      a capacity. The capacity may be longer than the current value, in\\n   *      which case it can be extended without the need to allocate more memory.\\n   */\\n  struct buffer {\\n    bytes buf;\\n    uint256 capacity;\\n  }\\n\\n  /**\\n   * @dev Initializes a buffer with an initial capacity.\\n   * @param buf The buffer to initialize.\\n   * @param capacity The number of bytes of space to allocate the buffer.\\n   * @return The buffer, for chaining.\\n   */\\n  function init(buffer memory buf, uint256 capacity)\\n    internal\\n    pure\\n    returns (buffer memory)\\n  {\\n    if (capacity % 32 != 0) {\\n      capacity += 32 - (capacity % 32);\\n    }\\n    // Allocate space for the buffer data\\n    buf.capacity = capacity;\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(buf, ptr)\\n      mstore(ptr, 0)\\n      mstore(0x40, add(32, add(ptr, capacity)))\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Initializes a new buffer from an existing bytes object.\\n   *      Changes to the buffer may mutate the original value.\\n   * @param b The bytes object to initialize the buffer with.\\n   * @return A new buffer.\\n   */\\n  function fromBytes(bytes memory b) internal pure returns (buffer memory) {\\n    buffer memory buf;\\n    buf.buf = b;\\n    buf.capacity = b.length;\\n    return buf;\\n  }\\n\\n  function resize(buffer memory buf, uint256 capacity) private pure {\\n    bytes memory oldbuf = buf.buf;\\n    init(buf, capacity);\\n    append(buf, oldbuf);\\n  }\\n\\n  function max(uint256 a, uint256 b) private pure returns (uint256) {\\n    if (a > b) {\\n      return a;\\n    }\\n    return b;\\n  }\\n\\n  /**\\n   * @dev Sets buffer length to 0.\\n   * @param buf The buffer to truncate.\\n   * @return The original buffer, for chaining..\\n   */\\n  function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n    assembly {\\n      let bufptr := mload(buf)\\n      mstore(bufptr, 0)\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Writes a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The start offset to write to.\\n   * @param data The data to append.\\n   * @param len The number of bytes to copy.\\n   * @return The original buffer, for chaining.\\n   */\\n  function write(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes memory data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    require(len <= data.length);\\n\\n    if (off + len > buf.capacity) {\\n      resize(buf, max(buf.capacity, len + off) * 2);\\n    }\\n\\n    uint256 dest;\\n    uint256 src;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Start address = buffer address + offset + sizeof(buffer length)\\n      dest := add(add(bufptr, 32), off)\\n      // Update buffer length if we're extending it\\n      if gt(add(len, off), buflen) {\\n        mstore(bufptr, add(len, off))\\n      }\\n      src := add(data, 32)\\n    }\\n\\n    // Copy word-length chunks while possible\\n    for (; len >= 32; len -= 32) {\\n      assembly {\\n        mstore(dest, mload(src))\\n      }\\n      dest += 32;\\n      src += 32;\\n    }\\n\\n    // Copy remaining bytes\\n    uint256 mask = 256**(32 - len) - 1;\\n    assembly {\\n      let srcpart := and(mload(src), not(mask))\\n      let destpart := and(mload(dest), mask)\\n      mstore(dest, or(destpart, srcpart))\\n    }\\n\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @param len The number of bytes to copy.\\n   * @return The original buffer, for chaining.\\n   */\\n  function append(\\n    buffer memory buf,\\n    bytes memory data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, len);\\n  }\\n\\n  /**\\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function append(buffer memory buf, bytes memory data)\\n    internal\\n    pure\\n    returns (buffer memory)\\n  {\\n    return write(buf, buf.buf.length, data, data.length);\\n  }\\n\\n  /**\\n   * @dev Writes a byte to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write the byte at.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeUint8(\\n    buffer memory buf,\\n    uint256 off,\\n    uint8 data\\n  ) internal pure returns (buffer memory) {\\n    if (off >= buf.capacity) {\\n      resize(buf, buf.capacity * 2);\\n    }\\n\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Address = buffer address + sizeof(buffer length) + off\\n      let dest := add(add(bufptr, off), 32)\\n      mstore8(dest, data)\\n      // Update buffer length if we extended it\\n      if eq(off, buflen) {\\n        mstore(bufptr, add(buflen, 1))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function appendUint8(buffer memory buf, uint8 data)\\n    internal\\n    pure\\n    returns (buffer memory)\\n  {\\n    return writeUint8(buf, buf.buf.length, data);\\n  }\\n\\n  /**\\n   * @dev Writes up to 32 bytes to the buffer. Resizes if doing so would\\n   *      exceed the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @param len The number of bytes to write (left-aligned).\\n   * @return The original buffer, for chaining.\\n   */\\n  function write(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes32 data,\\n    uint256 len\\n  ) private pure returns (buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    uint256 mask = 256**len - 1;\\n    // Right-align data\\n    data = data >> (8 * (32 - len));\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Address = buffer address + sizeof(buffer length) + off + len\\n      let dest := add(add(bufptr, off), len)\\n      mstore(dest, or(and(mload(dest), not(mask)), data))\\n      // Update buffer length if we extended it\\n      if gt(add(off, len), mload(bufptr)) {\\n        mstore(bufptr, add(off, len))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Writes a bytes20 to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeBytes20(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes20 data\\n  ) internal pure returns (buffer memory) {\\n    return write(buf, off, bytes32(data), 20);\\n  }\\n\\n  /**\\n   * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chhaining.\\n   */\\n  function appendBytes20(buffer memory buf, bytes20 data)\\n    internal\\n    pure\\n    returns (buffer memory)\\n  {\\n    return write(buf, buf.buf.length, bytes32(data), 20);\\n  }\\n\\n  /**\\n   * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function appendBytes32(buffer memory buf, bytes32 data)\\n    internal\\n    pure\\n    returns (buffer memory)\\n  {\\n    return write(buf, buf.buf.length, data, 32);\\n  }\\n\\n  /**\\n   * @dev Writes an integer to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @param len The number of bytes to write (right-aligned).\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeInt(\\n    buffer memory buf,\\n    uint256 off,\\n    uint256 data,\\n    uint256 len\\n  ) private pure returns (buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    uint256 mask = 256**len - 1;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Address = buffer address + off + sizeof(buffer length) + len\\n      let dest := add(add(bufptr, off), len)\\n      mstore(dest, or(and(mload(dest), not(mask)), data))\\n      // Update buffer length if we extended it\\n      if gt(add(off, len), mload(bufptr)) {\\n        mstore(bufptr, add(off, len))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n   * exceed the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer.\\n   */\\n  function appendInt(\\n    buffer memory buf,\\n    uint256 data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    return writeInt(buf, buf.buf.length, data, len);\\n  }\\n}\\n\\n// File: @ensdomains/dnssec-oracle/contracts/RRUtils.sol\\n\\npragma solidity >0.4.23;\\n\\n/**\\n * @dev RRUtils is a library that provides utilities for parsing DNS resource records.\\n */\\nlibrary RRUtils {\\n  using BytesUtils for *;\\n  using Buffer for *;\\n\\n  /**\\n   * @dev Returns the number of bytes in the DNS name at 'offset' in 'self'.\\n   * @param self The byte array to read a name from.\\n   * @param offset The offset to start reading at.\\n   * @return The length of the DNS name at 'offset', in bytes.\\n   */\\n  function nameLength(bytes memory self, uint256 offset)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    uint256 idx = offset;\\n    while (true) {\\n      assert(idx < self.length);\\n      uint256 labelLen = self.readUint8(idx);\\n      idx += labelLen + 1;\\n      if (labelLen == 0) {\\n        break;\\n      }\\n    }\\n    return idx - offset;\\n  }\\n\\n  /**\\n   * @dev Returns a DNS format name at the specified offset of self.\\n   * @param self The byte array to read a name from.\\n   * @param offset The offset to start reading at.\\n   * @return The name.\\n   */\\n  function readName(bytes memory self, uint256 offset)\\n    internal\\n    pure\\n    returns (bytes memory ret)\\n  {\\n    uint256 len = nameLength(self, offset);\\n    return self.substring(offset, len);\\n  }\\n\\n  /**\\n   * @dev Returns the number of labels in the DNS name at 'offset' in 'self'.\\n   * @param self The byte array to read a name from.\\n   * @param offset The offset to start reading at.\\n   * @return The number of labels in the DNS name at 'offset', in bytes.\\n   */\\n  function labelCount(bytes memory self, uint256 offset)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    uint256 count = 0;\\n    while (true) {\\n      assert(offset < self.length);\\n      uint256 labelLen = self.readUint8(offset);\\n      offset += labelLen + 1;\\n      if (labelLen == 0) {\\n        break;\\n      }\\n      count += 1;\\n    }\\n    return count;\\n  }\\n\\n  /**\\n   * @dev An iterator over resource records.\\n   */\\n  struct RRIterator {\\n    bytes data;\\n    uint256 offset;\\n    uint16 dnstype;\\n    uint16 class;\\n    uint32 ttl;\\n    uint256 rdataOffset;\\n    uint256 nextOffset;\\n  }\\n\\n  /**\\n   * @dev Begins iterating over resource records.\\n   * @param self The byte string to read from.\\n   * @param offset The offset to start reading at.\\n   * @return An iterator object.\\n   */\\n  function iterateRRs(bytes memory self, uint256 offset)\\n    internal\\n    pure\\n    returns (RRIterator memory ret)\\n  {\\n    ret.data = self;\\n    ret.nextOffset = offset;\\n    next(ret);\\n  }\\n\\n  /**\\n   * @dev Returns true iff there are more RRs to iterate.\\n   * @param iter The iterator to check.\\n   * @return True iff the iterator has finished.\\n   */\\n  function done(RRIterator memory iter) internal pure returns (bool) {\\n    return iter.offset >= iter.data.length;\\n  }\\n\\n  /**\\n   * @dev Moves the iterator to the next resource record.\\n   * @param iter The iterator to advance.\\n   */\\n  function next(RRIterator memory iter) internal pure {\\n    iter.offset = iter.nextOffset;\\n    if (iter.offset >= iter.data.length) {\\n      return;\\n    }\\n\\n    // Skip the name\\n    uint256 off = iter.offset + nameLength(iter.data, iter.offset);\\n\\n    // Read type, class, and ttl\\n    iter.dnstype = iter.data.readUint16(off);\\n    off += 2;\\n    iter.class = iter.data.readUint16(off);\\n    off += 2;\\n    iter.ttl = iter.data.readUint32(off);\\n    off += 4;\\n\\n    // Read the rdata\\n    uint256 rdataLength = iter.data.readUint16(off);\\n    off += 2;\\n    iter.rdataOffset = off;\\n    iter.nextOffset = off + rdataLength;\\n  }\\n\\n  /**\\n   * @dev Returns the name of the current record.\\n   * @param iter The iterator.\\n   * @return A new bytes object containing the owner name from the RR.\\n   */\\n  function name(RRIterator memory iter) internal pure returns (bytes memory) {\\n    return iter.data.substring(iter.offset, nameLength(iter.data, iter.offset));\\n  }\\n\\n  /**\\n   * @dev Returns the rdata portion of the current record.\\n   * @param iter The iterator.\\n   * @return A new bytes object containing the RR's RDATA.\\n   */\\n  function rdata(RRIterator memory iter) internal pure returns (bytes memory) {\\n    return\\n      iter.data.substring(iter.rdataOffset, iter.nextOffset - iter.rdataOffset);\\n  }\\n\\n  /**\\n   * @dev Checks if a given RR type exists in a type bitmap.\\n   * @param self The byte string to read the type bitmap from.\\n   * @param offset The offset to start reading at.\\n   * @param rrtype The RR type to check for.\\n   * @return True if the type is found in the bitmap, false otherwise.\\n   */\\n  function checkTypeBitmap(\\n    bytes memory self,\\n    uint256 offset,\\n    uint16 rrtype\\n  ) internal pure returns (bool) {\\n    uint8 typeWindow = uint8(rrtype >> 8);\\n    uint8 windowByte = uint8((rrtype & 0xff) / 8);\\n    uint8 windowBitmask = uint8(uint8(1) << (uint8(7) - uint8(rrtype & 0x7)));\\n    for (uint256 off = offset; off < self.length; ) {\\n      uint8 window = self.readUint8(off);\\n      uint8 len = self.readUint8(off + 1);\\n      if (typeWindow < window) {\\n        // We've gone past our window; it's not here.\\n        return false;\\n      } else if (typeWindow == window) {\\n        // Check this type bitmap\\n        if (len * 8 <= windowByte) {\\n          // Our type is past the end of the bitmap\\n          return false;\\n        }\\n        return (self.readUint8(off + windowByte + 2) & windowBitmask) != 0;\\n      } else {\\n        // Skip this type bitmap\\n        off += len + 2;\\n      }\\n    }\\n\\n    return false;\\n  }\\n\\n  function compareNames(bytes memory self, bytes memory other)\\n    internal\\n    pure\\n    returns (int256)\\n  {\\n    if (self.equals(other)) {\\n      return 0;\\n    }\\n\\n    uint256 off;\\n    uint256 otheroff;\\n    uint256 prevoff;\\n    uint256 otherprevoff;\\n    uint256 counts = labelCount(self, 0);\\n    uint256 othercounts = labelCount(other, 0);\\n\\n    // Keep removing labels from the front of the name until both names are equal length\\n    while (counts > othercounts) {\\n      prevoff = off;\\n      off = progress(self, off);\\n      counts--;\\n    }\\n\\n    while (othercounts > counts) {\\n      otherprevoff = otheroff;\\n      otheroff = progress(other, otheroff);\\n      othercounts--;\\n    }\\n\\n    // Compare the last nonequal labels to each other\\n    while (counts > 0 && !self.equals(off, other, otheroff)) {\\n      prevoff = off;\\n      off = progress(self, off);\\n      otherprevoff = otheroff;\\n      otheroff = progress(other, otheroff);\\n      counts -= 1;\\n    }\\n\\n    if (off == 0) {\\n      return -1;\\n    }\\n    if (otheroff == 0) {\\n      return 1;\\n    }\\n\\n    return\\n      self.compare(\\n        prevoff + 1,\\n        self.readUint8(prevoff),\\n        other,\\n        otherprevoff + 1,\\n        other.readUint8(otherprevoff)\\n      );\\n  }\\n\\n  function progress(bytes memory body, uint256 off)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    return off + 1 + body.readUint8(off);\\n  }\\n}\\n\\n// File: contracts/profiles/DNSResolver.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract DNSResolver is ResolverBase {\\n  using RRUtils for *;\\n  using BytesUtils for bytes;\\n\\n  bytes4 private constant DNS_RECORD_INTERFACE_ID = 0xa8fa5682;\\n\\n  // DNSRecordChanged is emitted whenever a given node/name/resource's RRSET is updated.\\n  event DNSRecordChanged(\\n    bytes32 indexed node,\\n    bytes name,\\n    uint16 resource,\\n    bytes record\\n  );\\n  // DNSRecordDeleted is emitted whenever a given node/name/resource's RRSET is deleted.\\n  event DNSRecordDeleted(bytes32 indexed node, bytes name, uint16 resource);\\n  // DNSZoneCleared is emitted whenever a given node's zone information is cleared.\\n  event DNSZoneCleared(bytes32 indexed node);\\n\\n  // Version the mapping for each zone.  This allows users who have lost\\n  // track of their entries to effectively delete an entire zone by bumping\\n  // the version number.\\n  // node => version\\n  mapping(bytes32 => uint256) private versions;\\n\\n  // The records themselves.  Stored as binary RRSETs\\n  // node => version => name => resource => data\\n  mapping(bytes32 => mapping(uint256 => mapping(bytes32 => mapping(uint16 => bytes))))\\n    private records;\\n\\n  // Count of number of entries for a given name.  Required for DNS resolvers\\n  // when resolving wildcards.\\n  // node => version => name => number of records\\n  mapping(bytes32 => mapping(uint256 => mapping(bytes32 => uint16)))\\n    private nameEntriesCount;\\n\\n  /**\\n   * Set one or more DNS records.  Records are supplied in wire-format.\\n   * Records with the same node/name/resource must be supplied one after the\\n   * other to ensure the data is updated correctly. For example, if the data\\n   * was supplied:\\n   *     a.example.com IN A 1.2.3.4\\n   *     a.example.com IN A 5.6.7.8\\n   *     www.example.com IN CNAME a.example.com.\\n   * then this would store the two A records for a.example.com correctly as a\\n   * single RRSET, however if the data was supplied:\\n   *     a.example.com IN A 1.2.3.4\\n   *     www.example.com IN CNAME a.example.com.\\n   *     a.example.com IN A 5.6.7.8\\n   * then this would store the first A record, the CNAME, then the second A\\n   * record which would overwrite the first.\\n   *\\n   * @param node the namehash of the node for which to set the records\\n   * @param data the DNS wire format records to set\\n   */\\n  function setDNSRecords(bytes32 node, bytes calldata data)\\n    external\\n    authorised(node)\\n  {\\n    uint16 resource = 0;\\n    uint256 offset = 0;\\n    bytes memory name;\\n    bytes memory value;\\n    bytes32 nameHash;\\n    // Iterate over the data to add the resource records\\n    for (\\n      RRUtils.RRIterator memory iter = data.iterateRRs(0);\\n      !iter.done();\\n      iter.next()\\n    ) {\\n      if (resource == 0) {\\n        resource = iter.dnstype;\\n        name = iter.name();\\n        nameHash = keccak256(abi.encodePacked(name));\\n        value = bytes(iter.rdata());\\n      } else {\\n        bytes memory newName = iter.name();\\n        if (resource != iter.dnstype || !name.equals(newName)) {\\n          setDNSRRSet(\\n            node,\\n            name,\\n            resource,\\n            data,\\n            offset,\\n            iter.offset - offset,\\n            value.length == 0\\n          );\\n          resource = iter.dnstype;\\n          offset = iter.offset;\\n          name = newName;\\n          nameHash = keccak256(name);\\n          value = bytes(iter.rdata());\\n        }\\n      }\\n    }\\n    if (name.length > 0) {\\n      setDNSRRSet(\\n        node,\\n        name,\\n        resource,\\n        data,\\n        offset,\\n        data.length - offset,\\n        value.length == 0\\n      );\\n    }\\n  }\\n\\n  /**\\n   * Obtain a DNS record.\\n   * @param node the namehash of the node for which to fetch the record\\n   * @param name the keccak-256 hash of the fully-qualified name for which to fetch the record\\n   * @param resource the ID of the resource as per https://en.wikipedia.org/wiki/List_of_DNS_record_types\\n   * @return the DNS record in wire format if present, otherwise empty\\n   */\\n  function dnsRecord(\\n    bytes32 node,\\n    bytes32 name,\\n    uint16 resource\\n  ) public view returns (bytes memory) {\\n    return records[node][versions[node]][name][resource];\\n  }\\n\\n  /**\\n   * Check if a given node has records.\\n   * @param node the namehash of the node for which to check the records\\n   * @param name the namehash of the node for which to check the records\\n   */\\n  function hasDNSRecords(bytes32 node, bytes32 name)\\n    public\\n    view\\n    returns (bool)\\n  {\\n    return (nameEntriesCount[node][versions[node]][name] != 0);\\n  }\\n\\n  /**\\n   * Clear all information for a DNS zone.\\n   * @param node the namehash of the node for which to clear the zone\\n   */\\n  function clearDNSZone(bytes32 node) public authorised(node) {\\n    versions[node]++;\\n    emit DNSZoneCleared(node);\\n  }\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return\\n      interfaceID == DNS_RECORD_INTERFACE_ID ||\\n      super.supportsInterface(interfaceID);\\n  }\\n\\n  function setDNSRRSet(\\n    bytes32 node,\\n    bytes memory name,\\n    uint16 resource,\\n    bytes memory data,\\n    uint256 offset,\\n    uint256 size,\\n    bool deleteRecord\\n  ) private {\\n    uint256 version = versions[node];\\n    bytes32 nameHash = keccak256(name);\\n    bytes memory rrData = data.substring(offset, size);\\n    if (deleteRecord) {\\n      if (records[node][version][nameHash][resource].length != 0) {\\n        nameEntriesCount[node][version][nameHash]--;\\n      }\\n      delete (records[node][version][nameHash][resource]);\\n      emit DNSRecordDeleted(node, name, resource);\\n    } else {\\n      if (records[node][version][nameHash][resource].length == 0) {\\n        nameEntriesCount[node][version][nameHash]++;\\n      }\\n      records[node][version][nameHash][resource] = rrData;\\n      emit DNSRecordChanged(node, name, resource, rrData);\\n    }\\n  }\\n}\\n\\n// File: contracts/profiles/InterfaceResolver.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract InterfaceResolver is ResolverBase, AddrResolver {\\n  bytes4 private constant INTERFACE_INTERFACE_ID =\\n    bytes4(keccak256('interfaceImplementer(bytes32,bytes4)'));\\n  bytes4 private constant INTERFACE_META_ID = 0x01ffc9a7;\\n\\n  event InterfaceChanged(\\n    bytes32 indexed node,\\n    bytes4 indexed interfaceID,\\n    address implementer\\n  );\\n\\n  mapping(bytes32 => mapping(bytes4 => address)) interfaces;\\n\\n  /**\\n   * Sets an interface associated with a name.\\n   * Setting the address to 0 restores the default behaviour of querying the contract at `addr()` for interface support.\\n   * @param node The node to update.\\n   * @param interfaceID The EIP 168 interface ID.\\n   * @param implementer The address of a contract that implements this interface for this node.\\n   */\\n  function setInterface(\\n    bytes32 node,\\n    bytes4 interfaceID,\\n    address implementer\\n  ) external authorised(node) {\\n    interfaces[node][interfaceID] = implementer;\\n    emit InterfaceChanged(node, interfaceID, implementer);\\n  }\\n\\n  /**\\n   * Returns the address of a contract that implements the specified interface for this name.\\n   * If an implementer has not been set for this interfaceID and name, the resolver will query\\n   * the contract at `addr()`. If `addr()` is set, a contract exists at that address, and that\\n   * contract implements EIP168 and returns `true` for the specified interfaceID, its address\\n   * will be returned.\\n   * @param node The ENS node to query.\\n   * @param interfaceID The EIP 168 interface ID to check for.\\n   * @return The address that implements this interface, or 0 if the interface is unsupported.\\n   */\\n  function interfaceImplementer(bytes32 node, bytes4 interfaceID)\\n    external\\n    view\\n    returns (address)\\n  {\\n    address implementer = interfaces[node][interfaceID];\\n    if (implementer != address(0)) {\\n      return implementer;\\n    }\\n\\n    address a = addr(node);\\n    if (a == address(0)) {\\n      return address(0);\\n    }\\n\\n    (bool success, bytes memory returnData) = a.staticcall(\\n      abi.encodeWithSignature('supportsInterface(bytes4)', INTERFACE_META_ID)\\n    );\\n    if (!success || returnData.length < 32 || returnData[31] == 0) {\\n      // EIP 168 not supported by target\\n      return address(0);\\n    }\\n\\n    (success, returnData) = a.staticcall(\\n      abi.encodeWithSignature('supportsInterface(bytes4)', interfaceID)\\n    );\\n    if (!success || returnData.length < 32 || returnData[31] == 0) {\\n      // Specified interface not supported by target\\n      return address(0);\\n    }\\n\\n    return a;\\n  }\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return\\n      interfaceID == INTERFACE_INTERFACE_ID ||\\n      super.supportsInterface(interfaceID);\\n  }\\n}\\n\\n// File: contracts/profiles/NameResolver.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract NameResolver is ResolverBase {\\n  bytes4 private constant NAME_INTERFACE_ID = 0x691f3431;\\n\\n  event NameChanged(bytes32 indexed node, string name);\\n\\n  mapping(bytes32 => string) names;\\n\\n  /**\\n   * Sets the name associated with an ENS node, for reverse records.\\n   * May only be called by the owner of that node in the ENS registry.\\n   * @param node The node to update.\\n   * @param name The name to set.\\n   */\\n  function setName(bytes32 node, string calldata name)\\n    external\\n    authorised(node)\\n  {\\n    names[node] = name;\\n    emit NameChanged(node, name);\\n  }\\n\\n  /**\\n   * Returns the name associated with an ENS node, for reverse records.\\n   * Defined in EIP181.\\n   * @param node The ENS node to query.\\n   * @return The associated name.\\n   */\\n  function name(bytes32 node) external view returns (string memory) {\\n    return names[node];\\n  }\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return\\n      interfaceID == NAME_INTERFACE_ID || super.supportsInterface(interfaceID);\\n  }\\n}\\n\\n// File: contracts/profiles/PubkeyResolver.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract PubkeyResolver is ResolverBase {\\n  bytes4 private constant PUBKEY_INTERFACE_ID = 0xc8690233;\\n\\n  event PubkeyChanged(bytes32 indexed node, bytes32 x, bytes32 y);\\n\\n  struct PublicKey {\\n    bytes32 x;\\n    bytes32 y;\\n  }\\n\\n  mapping(bytes32 => PublicKey) pubkeys;\\n\\n  /**\\n   * Sets the SECP256k1 public key associated with an ENS node.\\n   * @param node The ENS node to query\\n   * @param x the X coordinate of the curve point for the public key.\\n   * @param y the Y coordinate of the curve point for the public key.\\n   */\\n  function setPubkey(\\n    bytes32 node,\\n    bytes32 x,\\n    bytes32 y\\n  ) external authorised(node) {\\n    pubkeys[node] = PublicKey(x, y);\\n    emit PubkeyChanged(node, x, y);\\n  }\\n\\n  /**\\n   * Returns the SECP256k1 public key associated with an ENS node.\\n   * Defined in EIP 619.\\n   * @param node The ENS node to query\\n   * @return x, y the X and Y coordinates of the curve point for the public key.\\n   */\\n  function pubkey(bytes32 node) external view returns (bytes32 x, bytes32 y) {\\n    return (pubkeys[node].x, pubkeys[node].y);\\n  }\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return\\n      interfaceID == PUBKEY_INTERFACE_ID ||\\n      super.supportsInterface(interfaceID);\\n  }\\n}\\n\\n// File: contracts/profiles/TextResolver.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract TextResolver is ResolverBase {\\n  bytes4 private constant TEXT_INTERFACE_ID = 0x59d1d43c;\\n\\n  event TextChanged(\\n    bytes32 indexed node,\\n    string indexed indexedKey,\\n    string key\\n  );\\n\\n  mapping(bytes32 => mapping(string => string)) texts;\\n\\n  /**\\n   * Sets the text data associated with an ENS node and key.\\n   * May only be called by the owner of that node in the ENS registry.\\n   * @param node The node to update.\\n   * @param key The key to set.\\n   * @param value The text data value to set.\\n   */\\n  function setText(\\n    bytes32 node,\\n    string calldata key,\\n    string calldata value\\n  ) external authorised(node) {\\n    texts[node][key] = value;\\n    emit TextChanged(node, key, key);\\n  }\\n\\n  /**\\n   * Returns the text data associated with an ENS node and key.\\n   * @param node The ENS node to query.\\n   * @param key The text data key to query.\\n   * @return The associated text data.\\n   */\\n  function text(bytes32 node, string calldata key)\\n    external\\n    view\\n    returns (string memory)\\n  {\\n    return texts[node][key];\\n  }\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return\\n      interfaceID == TEXT_INTERFACE_ID || super.supportsInterface(interfaceID);\\n  }\\n}\\n\\n// File: contracts/PublicResolver.sol\\n\\npragma solidity ^0.5.0;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * A simple resolver anyone can use; only allows the owner of a node to set its\\n * address.\\n */\\ncontract PublicResolver_mainnet_9412610 is\\n  ABIResolver,\\n  AddrResolver,\\n  ContentHashResolver,\\n  DNSResolver,\\n  InterfaceResolver,\\n  NameResolver,\\n  PubkeyResolver,\\n  TextResolver\\n{\\n  ENS ens;\\n\\n  /**\\n   * A mapping of authorisations. An address that is authorised for a name\\n   * may make any changes to the name that the owner could, but may not update\\n   * the set of authorisations.\\n   * (node, owner, caller) => isAuthorised\\n   */\\n  mapping(bytes32 => mapping(address => mapping(address => bool)))\\n    public authorisations;\\n\\n  event AuthorisationChanged(\\n    bytes32 indexed node,\\n    address indexed owner,\\n    address indexed target,\\n    bool isAuthorised\\n  );\\n\\n  constructor(ENS _ens) public {\\n    ens = _ens;\\n  }\\n\\n  /**\\n   * @dev Sets or clears an authorisation.\\n   * Authorisations are specific to the caller. Any account can set an authorisation\\n   * for any name, but the authorisation that is checked will be that of the\\n   * current owner of a name. Thus, transferring a name effectively clears any\\n   * existing authorisations, and new authorisations can be set in advance of\\n   * an ownership transfer if desired.\\n   *\\n   * @param node The name to change the authorisation on.\\n   * @param target The address that is to be authorised or deauthorised.\\n   * @param isAuthorised True if the address should be authorised, or false if it should be deauthorised.\\n   */\\n  function setAuthorisation(\\n    bytes32 node,\\n    address target,\\n    bool isAuthorised\\n  ) external {\\n    authorisations[node][msg.sender][target] = isAuthorised;\\n    emit AuthorisationChanged(node, msg.sender, target, isAuthorised);\\n  }\\n\\n  function isAuthorised(bytes32 node) internal view returns (bool) {\\n    address owner = ens.owner(node);\\n    return owner == msg.sender || authorisations[node][owner][msg.sender];\\n  }\\n\\n  function multicall(bytes[] calldata data)\\n    external\\n    returns (bytes[] memory results)\\n  {\\n    results = new bytes[](data.length);\\n    for (uint256 i = 0; i < data.length; i++) {\\n      (bool success, bytes memory result) = address(this).delegatecall(data[i]);\\n      require(success);\\n      results[i] = result;\\n    }\\n    return results;\\n  }\\n}\\n\",\"keccak256\":\"0x29ca7d322ab7177f187f9bfc310e6dfc94049e9beaaafe958bead081fd90ad76\"}},\"version\":1}",
          "storageLayout": {
            "storage": [
              {
                "astId": 3017,
                "contract": "contracts/legacy/PublicResolver_mainnet_9412610.sol:PubkeyResolver",
                "label": "pubkeys",
                "offset": 0,
                "slot": "0",
                "type": "t_mapping(t_bytes32,t_struct(PublicKey)3013_storage)"
              }
            ],
            "types": {
              "t_bytes32": {
                "encoding": "inplace",
                "label": "bytes32",
                "numberOfBytes": "32"
              },
              "t_mapping(t_bytes32,t_struct(PublicKey)3013_storage)": {
                "encoding": "mapping",
                "key": "t_bytes32",
                "label": "mapping(bytes32 => struct PubkeyResolver.PublicKey)",
                "numberOfBytes": "32",
                "value": "t_struct(PublicKey)3013_storage"
              },
              "t_struct(PublicKey)3013_storage": {
                "encoding": "inplace",
                "label": "struct PubkeyResolver.PublicKey",
                "members": [
                  {
                    "astId": 3010,
                    "contract": "contracts/legacy/PublicResolver_mainnet_9412610.sol:PubkeyResolver",
                    "label": "x",
                    "offset": 0,
                    "slot": "0",
                    "type": "t_bytes32"
                  },
                  {
                    "astId": 3012,
                    "contract": "contracts/legacy/PublicResolver_mainnet_9412610.sol:PubkeyResolver",
                    "label": "y",
                    "offset": 0,
                    "slot": "1",
                    "type": "t_bytes32"
                  }
                ],
                "numberOfBytes": "64"
              }
            }
          },
          "userdoc": {
            "methods": {
              "pubkey(bytes32)": {
                "notice": "Returns the SECP256k1 public key associated with an ENS node. Defined in EIP 619."
              },
              "setPubkey(bytes32,bytes32,bytes32)": {
                "notice": "Sets the SECP256k1 public key associated with an ENS node."
              }
            }
          }
        },
        "PublicResolver_mainnet_9412610": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "contract ENS",
                  "name": "_ens",
                  "type": "address"
                }
              ],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "constructor"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "node",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "uint256",
                  "name": "contentType",
                  "type": "uint256"
                }
              ],
              "name": "ABIChanged",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "node",
                  "type": "bytes32"
                },
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "a",
                  "type": "address"
                }
              ],
              "name": "AddrChanged",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "node",
                  "type": "bytes32"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "coinType",
                  "type": "uint256"
                },
                {
                  "indexed": false,
                  "internalType": "bytes",
                  "name": "newAddress",
                  "type": "bytes"
                }
              ],
              "name": "AddressChanged",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "node",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "target",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "bool",
                  "name": "isAuthorised",
                  "type": "bool"
                }
              ],
              "name": "AuthorisationChanged",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "node",
                  "type": "bytes32"
                },
                {
                  "indexed": false,
                  "internalType": "bytes",
                  "name": "hash",
                  "type": "bytes"
                }
              ],
              "name": "ContenthashChanged",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "node",
                  "type": "bytes32"
                },
                {
                  "indexed": false,
                  "internalType": "bytes",
                  "name": "name",
                  "type": "bytes"
                },
                {
                  "indexed": false,
                  "internalType": "uint16",
                  "name": "resource",
                  "type": "uint16"
                },
                {
                  "indexed": false,
                  "internalType": "bytes",
                  "name": "record",
                  "type": "bytes"
                }
              ],
              "name": "DNSRecordChanged",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "node",
                  "type": "bytes32"
                },
                {
                  "indexed": false,
                  "internalType": "bytes",
                  "name": "name",
                  "type": "bytes"
                },
                {
                  "indexed": false,
                  "internalType": "uint16",
                  "name": "resource",
                  "type": "uint16"
                }
              ],
              "name": "DNSRecordDeleted",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "node",
                  "type": "bytes32"
                }
              ],
              "name": "DNSZoneCleared",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "node",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "bytes4",
                  "name": "interfaceID",
                  "type": "bytes4"
                },
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "implementer",
                  "type": "address"
                }
              ],
              "name": "InterfaceChanged",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "node",
                  "type": "bytes32"
                },
                {
                  "indexed": false,
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                }
              ],
              "name": "NameChanged",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "node",
                  "type": "bytes32"
                },
                {
                  "indexed": false,
                  "internalType": "bytes32",
                  "name": "x",
                  "type": "bytes32"
                },
                {
                  "indexed": false,
                  "internalType": "bytes32",
                  "name": "y",
                  "type": "bytes32"
                }
              ],
              "name": "PubkeyChanged",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "node",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "string",
                  "name": "indexedKey",
                  "type": "string"
                },
                {
                  "indexed": false,
                  "internalType": "string",
                  "name": "key",
                  "type": "string"
                }
              ],
              "name": "TextChanged",
              "type": "event"
            },
            {
              "constant": true,
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "node",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "contentTypes",
                  "type": "uint256"
                }
              ],
              "name": "ABI",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "",
                  "type": "bytes"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "node",
                  "type": "bytes32"
                }
              ],
              "name": "addr",
              "outputs": [
                {
                  "internalType": "address payable",
                  "name": "",
                  "type": "address"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "node",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "coinType",
                  "type": "uint256"
                }
              ],
              "name": "addr",
              "outputs": [
                {
                  "internalType": "bytes",
                  "name": "",
                  "type": "bytes"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "name": "authorisations",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "node",
                  "type": "bytes32"
                }
              ],
              "name": "clearDNSZone",
              "outputs": [],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "node",
                  "type": "bytes32"
                }
              ],
              "name": "contenthash",
              "outputs": [
                {
                  "internalType": "bytes",
                  "name": "",
                  "type": "bytes"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "node",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "name",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint16",
                  "name": "resource",
                  "type": "uint16"
                }
              ],
              "name": "dnsRecord",
              "outputs": [
                {
                  "internalType": "bytes",
                  "name": "",
                  "type": "bytes"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "node",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "name",
                  "type": "bytes32"
                }
              ],
              "name": "hasDNSRecords",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "node",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes4",
                  "name": "interfaceID",
                  "type": "bytes4"
                }
              ],
              "name": "interfaceImplementer",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "internalType": "bytes[]",
                  "name": "data",
                  "type": "bytes[]"
                }
              ],
              "name": "multicall",
              "outputs": [
                {
                  "internalType": "bytes[]",
                  "name": "results",
                  "type": "bytes[]"
                }
              ],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "node",
                  "type": "bytes32"
                }
              ],
              "name": "name",
              "outputs": [
                {
                  "internalType": "string",
                  "name": "",
                  "type": "string"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "node",
                  "type": "bytes32"
                }
              ],
              "name": "pubkey",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "x",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "y",
                  "type": "bytes32"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "node",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "contentType",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ],
              "name": "setABI",
              "outputs": [],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "node",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "coinType",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "a",
                  "type": "bytes"
                }
              ],
              "name": "setAddr",
              "outputs": [],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "node",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "a",
                  "type": "address"
                }
              ],
              "name": "setAddr",
              "outputs": [],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "node",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "target",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "isAuthorised",
                  "type": "bool"
                }
              ],
              "name": "setAuthorisation",
              "outputs": [],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "node",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes",
                  "name": "hash",
                  "type": "bytes"
                }
              ],
              "name": "setContenthash",
              "outputs": [],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "node",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ],
              "name": "setDNSRecords",
              "outputs": [],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "node",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes4",
                  "name": "interfaceID",
                  "type": "bytes4"
                },
                {
                  "internalType": "address",
                  "name": "implementer",
                  "type": "address"
                }
              ],
              "name": "setInterface",
              "outputs": [],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "node",
                  "type": "bytes32"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                }
              ],
              "name": "setName",
              "outputs": [],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "node",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "x",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "y",
                  "type": "bytes32"
                }
              ],
              "name": "setPubkey",
              "outputs": [],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "node",
                  "type": "bytes32"
                },
                {
                  "internalType": "string",
                  "name": "key",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "value",
                  "type": "string"
                }
              ],
              "name": "setText",
              "outputs": [],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [
                {
                  "internalType": "bytes4",
                  "name": "interfaceID",
                  "type": "bytes4"
                }
              ],
              "name": "supportsInterface",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "payable": false,
              "stateMutability": "pure",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "node",
                  "type": "bytes32"
                },
                {
                  "internalType": "string",
                  "name": "key",
                  "type": "string"
                }
              ],
              "name": "text",
              "outputs": [
                {
                  "internalType": "string",
                  "name": "",
                  "type": "string"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "devdoc": {
            "methods": {
              "ABI(bytes32,uint256)": {
                "params": {
                  "contentTypes": "A bitwise OR of the ABI formats accepted by the caller.",
                  "node": "The ENS node to query"
                },
                "return": "contentType The content type of the return valuedata The ABI data"
              },
              "addr(bytes32)": {
                "params": {
                  "node": "The ENS node to query."
                },
                "return": "The associated address."
              },
              "clearDNSZone(bytes32)": {
                "params": {
                  "node": "the namehash of the node for which to clear the zone"
                }
              },
              "contenthash(bytes32)": {
                "params": {
                  "node": "The ENS node to query."
                },
                "return": "The associated contenthash."
              },
              "dnsRecord(bytes32,bytes32,uint16)": {
                "params": {
                  "name": "the keccak-256 hash of the fully-qualified name for which to fetch the record",
                  "node": "the namehash of the node for which to fetch the record",
                  "resource": "the ID of the resource as per https://en.wikipedia.org/wiki/List_of_DNS_record_types"
                },
                "return": "the DNS record in wire format if present, otherwise empty"
              },
              "hasDNSRecords(bytes32,bytes32)": {
                "params": {
                  "name": "the namehash of the node for which to check the records",
                  "node": "the namehash of the node for which to check the records"
                }
              },
              "interfaceImplementer(bytes32,bytes4)": {
                "params": {
                  "interfaceID": "The EIP 168 interface ID to check for.",
                  "node": "The ENS node to query."
                },
                "return": "The address that implements this interface, or 0 if the interface is unsupported."
              },
              "name(bytes32)": {
                "params": {
                  "node": "The ENS node to query."
                },
                "return": "The associated name."
              },
              "pubkey(bytes32)": {
                "params": {
                  "node": "The ENS node to query"
                },
                "return": "x, y the X and Y coordinates of the curve point for the public key."
              },
              "setABI(bytes32,uint256,bytes)": {
                "params": {
                  "contentType": "The content type of the ABI",
                  "data": "The ABI data.",
                  "node": "The node to update."
                }
              },
              "setAddr(bytes32,address)": {
                "params": {
                  "a": "The address to set.",
                  "node": "The node to update."
                }
              },
              "setAuthorisation(bytes32,address,bool)": {
                "details": "Sets or clears an authorisation. Authorisations are specific to the caller. Any account can set an authorisation for any name, but the authorisation that is checked will be that of the current owner of a name. Thus, transferring a name effectively clears any existing authorisations, and new authorisations can be set in advance of an ownership transfer if desired.",
                "params": {
                  "isAuthorised": "True if the address should be authorised, or false if it should be deauthorised.",
                  "node": "The name to change the authorisation on.",
                  "target": "The address that is to be authorised or deauthorised."
                }
              },
              "setContenthash(bytes32,bytes)": {
                "params": {
                  "hash": "The contenthash to set",
                  "node": "The node to update."
                }
              },
              "setDNSRecords(bytes32,bytes)": {
                "params": {
                  "data": "the DNS wire format records to set",
                  "node": "the namehash of the node for which to set the records"
                }
              },
              "setInterface(bytes32,bytes4,address)": {
                "params": {
                  "implementer": "The address of a contract that implements this interface for this node.",
                  "interfaceID": "The EIP 168 interface ID.",
                  "node": "The node to update."
                }
              },
              "setName(bytes32,string)": {
                "params": {
                  "name": "The name to set.",
                  "node": "The node to update."
                }
              },
              "setPubkey(bytes32,bytes32,bytes32)": {
                "params": {
                  "node": "The ENS node to query",
                  "x": "the X coordinate of the curve point for the public key.",
                  "y": "the Y coordinate of the curve point for the public key."
                }
              },
              "setText(bytes32,string,string)": {
                "params": {
                  "key": "The key to set.",
                  "node": "The node to update.",
                  "value": "The text data value to set."
                }
              },
              "text(bytes32,string)": {
                "params": {
                  "key": "The text data key to query.",
                  "node": "The ENS node to query."
                },
                "return": "The associated text data."
              }
            }
          },
          "evm": {
            "bytecode": {
              "linkReferences": {},
              "object": "60806040523480156200001157600080fd5b5060405162002abe38038062002abe83398101604081905262000034916200006d565b600a80546001600160a01b0319166001600160a01b0392909216919091179055620000d6565b80516200006781620000bc565b92915050565b6000602082840312156200008057600080fd5b60006200008e84846200005a565b949350505050565b60006200006782620000b0565b6000620000678262000096565b6001600160a01b031690565b620000c781620000a3565b8114620000d357600080fd5b50565b6129d880620000e66000396000f3fe608060405234801561001057600080fd5b50600436106101985760003560e01c8063691f3431116100e3578063bc1c58d11161008c578063e59d895d11610066578063e59d895d14610387578063f1cb7e061461039a578063f86bc879146103ad57610198565b8063bc1c58d114610340578063c869023314610353578063d5fa2b001461037457610198565b8063a8fa5682116100bd578063a8fa5682146102fa578063ac9650d81461030d578063ad5780af1461032d57610198565b8063691f3431146102c157806377372213146102d45780638b95dd71146102e757610198565b8063304e6ade116101455780634cbf6ba41161011f5780634cbf6ba41461027b57806359d1d43c1461028e578063623195b0146102ae57610198565b8063304e6ade146102425780633b3b57de146102555780633e9ce7941461026857610198565b8063124a319c11610176578063124a319c146101ee5780632203ab561461020e57806329cd62ea1461022f57610198565b806301ffc9a71461019d5780630af179d7146101c657806310f13a8c146101db575b600080fd5b6101b06101ab366004612504565b6103c0565b6040516101bd9190612730565b60405180910390f35b6101d96101d4366004612364565b61041e565b005b6101d96101e93660046123ba565b61060b565b6102016101fc366004612302565b6106b8565b6040516101bd9190612703565b61022161021c36600461224c565b6109f7565b6040516101bd9291906127f3565b6101d961023d36600461227c565b610b16565b6101d9610250366004612364565b610b96565b610201610263366004612164565b610bf5565b6101d9610276366004612209565b610c2a565b6101b061028936600461224c565b610ccf565b6102a161029c366004612364565b610d01565b6040516101bd9190612787565b6101d96102bc366004612441565b610dc3565b6102a16102cf366004612164565b610e3e565b6101d96102e2366004612364565b610edf565b6101d96102f53660046124a9565b610f3e565b6102a16103083660046122bf565b611003565b61032061031b366004612122565b611090565b6040516101bd919061271f565b6101d961033b366004612164565b6111d4565b6102a161034e366004612164565b611227565b610366610361366004612164565b61128f565b6040516101bd92919061274c565b6101d9610382366004612182565b6112a9565b6101d9610395366004612332565b6112d0565b6102a16103a836600461224c565b61139d565b6101b06103bb3660046121bc565b611446565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f59d1d43c00000000000000000000000000000000000000000000000000000000148061041657506104168261146c565b90505b919050565b82610428816114c2565b61043157600080fd5b60008060608082610440611e30565b61048a60008a8a8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929392505063ffffffff6115d1169050565b90505b610496816115ec565b6105ae5761ffff86166104ee57806040015195506104b3816115fa565b9350836040516020016104c691906126ec565b6040516020818303038152906040528051906020012091506104e781611621565b92506105a0565b60606104f9826115fa565b9050816040015161ffff168761ffff161415806105235750610521858263ffffffff61164216565b155b1561059e576105778b86898d8d8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505050602087015189518c918290039015611660565b81604001519650816020015195508094508480519060200120925061059b82611621565b93505b505b6105a9816118c7565b61048d565b50825115610600576106008984878b8b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505088518b9250828f03915015611660565b505050505050505050565b84610615816114c2565b61061e57600080fd5b82826009600089815260200190815260200160002087876040516106439291906126df565b90815260405190819003602001902061065d929091611e7b565b50848460405161066e9291906126df565b6040518091039020867fd8c9334b1a9c2f9da342a0a2b32629c1a229b6445dad78947f674b44444a755087876040516106a8929190612775565b60405180910390a3505050505050565b60008281526006602090815260408083207fffffffff000000000000000000000000000000000000000000000000000000008516845290915281205473ffffffffffffffffffffffffffffffffffffffff1680156107175790506109f1565b600061072285610bf5565b905073ffffffffffffffffffffffffffffffffffffffff811661074a576000925050506109f1565b600060608273ffffffffffffffffffffffffffffffffffffffff166301ffc9a760e01b60405160240161077d9190612767565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f01ffc9a700000000000000000000000000000000000000000000000000000000179052516107fe91906126ec565b600060405180830381855afa9150503d8060008114610839576040519150601f19603f3d011682016040523d82523d6000602084013e61083e565b606091505b5091509150811580610851575060208151105b8061088d575080601f8151811061086457fe5b01602001517fff0000000000000000000000000000000000000000000000000000000000000016155b1561089f5760009450505050506109f1565b8273ffffffffffffffffffffffffffffffffffffffff16866040516024016108c79190612767565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f01ffc9a7000000000000000000000000000000000000000000000000000000001790525161094891906126ec565b600060405180830381855afa9150503d8060008114610983576040519150601f19603f3d011682016040523d82523d6000602084013e610988565b606091505b50909250905081158061099c575060208151105b806109d8575080601f815181106109af57fe5b01602001517fff0000000000000000000000000000000000000000000000000000000000000016155b156109ea5760009450505050506109f1565b5090925050505b92915050565b600082815260208190526040812060609060015b848111610af85780851615801590610a4357506000818152602083905260409020546002600019610100600184161502019091160415155b15610af0576000818152602083815260409182902080548351601f6002600019610100600186161502019093169290920491820184900484028101840190945280845284939192839190830182828015610ade5780601f10610ab357610100808354040283529160200191610ade565b820191906000526020600020905b815481529060010190602001808311610ac157829003601f168201915b50505050509050935093505050610b0f565b60011b610a0b565b505060408051602081019091526000808252925090505b9250929050565b82610b20816114c2565b610b2957600080fd5b6040805180820182528481526020808201858152600088815260089092529083902091518255516001909101555184907f1d6f5e03d3f63eb58751986629a5439baee5079ff04f345becb66e23eb154e4690610b88908690869061274c565b60405180910390a250505050565b82610ba0816114c2565b610ba957600080fd5b6000848152600260205260409020610bc2908484611e7b565b50837fe379c1624ed7e714cc0937528a32359d69d5281337765313dba4e081b72d75788484604051610b88929190612775565b60006060610c0483603c61139d565b9050805160001415610c1a576000915050610419565b610c238161199a565b9392505050565b6000838152600b602090815260408083203380855290835281842073ffffffffffffffffffffffffffffffffffffffff871680865293529281902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00168515151790555190919085907fe1c5610a6e0cbe10764ecd182adcef1ec338dc4e199c99c32ce98f38e12791df90610cc2908690612730565b60405180910390a4505050565b600091825260056020908152604080842060038352818520548552825280842092845291905290205461ffff16151590565b6060600960008581526020019081526020016000208383604051610d269291906126df565b9081526040805160209281900383018120805460026001821615610100026000190190911604601f81018590048502830185019093528282529092909190830182828015610db55780601f10610d8a57610100808354040283529160200191610db5565b820191906000526020600020905b815481529060010190602001808311610d9857829003601f168201915b505050505090509392505050565b83610dcd816114c2565b610dd657600080fd5b6000198401841615610de757600080fd5b6000858152602081815260408083208784529091529020610e09908484611e7b565b50604051849086907faa121bbeef5f32f5961a2a28966e769023910fc9479059ee3495d4c1a696efe390600090a35050505050565b60008181526007602090815260409182902080548351601f6002600019610100600186161502019093169290920491820184900484028101840190945280845260609392830182828015610ed35780601f10610ea857610100808354040283529160200191610ed3565b820191906000526020600020905b815481529060010190602001808311610eb657829003601f168201915b50505050509050919050565b82610ee9816114c2565b610ef257600080fd5b6000848152600760205260409020610f0b908484611e7b565b50837fb7d29e911041e8d9b843369e890bcb72c9388692ba48b65ac54e7214c4c348f78484604051610b88929190612775565b82610f48816114c2565b610f5157600080fd5b837f65412581168e88a1e60c6459d7f44ae83ad0832e670826c05a4e2476b57af7528484604051610f839291906127f3565b60405180910390a2603c831415610fd557837f52d7d861f09ab3d26239d492e8968629f95e9e318cf0b73bfddc441522a15fd2610fbf8461199a565b604051610fcc9190612711565b60405180910390a25b600084815260016020908152604080832086845282529091208351610ffc92850190611f17565b5050505050565b6000838152600460209081526040808320600383528184205484528252808320858452825280832061ffff8516845282529182902080548351601f6002600019610100600186161502019093169290920491820184900484028101840190945280845260609392830182828015610db55780601f10610d8a57610100808354040283529160200191610db5565b6040805182815260208084028201019091526060908280156110c657816020015b60608152602001906001900390816110b15790505b50905060005b828110156111cd5760006060308686858181106110e557fe5b6020028201905080357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe13684900301811261111f57600080fd5b9091016020810191503567ffffffffffffffff81111561113e57600080fd5b3681900382131561114e57600080fd5b60405161115c9291906126df565b600060405180830381855af49150503d8060008114611197576040519150601f19603f3d011682016040523d82523d6000602084013e61119c565b606091505b5091509150816111ab57600080fd5b808484815181106111b857fe5b602090810291909101015250506001016110cc565b5092915050565b806111de816114c2565b6111e757600080fd5b600082815260036020526040808220805460010190555183917fb757169b8492ca2f1c6619d9d76ce22803035c3b1d5f6930dffe7b127c1a198391a25050565b600081815260026020818152604092839020805484516001821615610100026000190190911693909304601f81018390048302840183019094528383526060939091830182828015610ed35780601f10610ea857610100808354040283529160200191610ed3565b600090815260086020526040902080546001909101549091565b816112b3816114c2565b6112bc57600080fd5b6112cb83603c6102f5856119c2565b505050565b826112da816114c2565b6112e357600080fd5b60008481526006602090815260408083207fffffffff00000000000000000000000000000000000000000000000000000000871680855292529182902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8616179055905185907f7c69f06bea0bdef565b709e93a147836b0063ba2dd89f02d0b7e8d931e6a6daa9061138f908690612703565b60405180910390a350505050565b600082815260016020818152604080842085855282529283902080548451600294821615610100026000190190911693909304601f810183900483028401830190945283835260609390918301828280156114395780601f1061140e57610100808354040283529160200191611439565b820191906000526020600020905b81548152906001019060200180831161141c57829003601f168201915b5050505050905092915050565b600b60209081526000938452604080852082529284528284209052825290205460ff1681565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167fc86902330000000000000000000000000000000000000000000000000000000014806104165750610416826119fb565b600a546040517f02571be3000000000000000000000000000000000000000000000000000000008152600091829173ffffffffffffffffffffffffffffffffffffffff909116906302571be39061151d90869060040161273e565b60206040518083038186803b15801561153557600080fd5b505afa158015611549573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061156d91908101906120fc565b905073ffffffffffffffffffffffffffffffffffffffff8116331480610c2357506000838152600b6020908152604080832073ffffffffffffffffffffffffffffffffffffffff85168452825280832033845290915290205460ff16915050919050565b6115d9611e30565b82815260c081018290526109f1816118c7565b805151602090910151101590565b60208101518151606091610416916116129082611a51565b8451919063ffffffff611a9816565b60a081015160c082015182516060926104169281900363ffffffff611a9816565b600081518351148015610c235750610c238360008460008751611afa565b600087815260036020908152604090912054875191880191909120606061168e87878763ffffffff611a9816565b905083156117a85760008a81526004602090815260408083208684528252808320858452825280832061ffff8c16845290915290205460026000196101006001841615020190911604156117335760008a81526005602090815260408083208684528252808320858452909152902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000811661ffff918216600019019091161790555b60008a81526004602090815260408083208684528252808320858452825280832061ffff8c168452909152812061176991611f85565b897f03528ed0c2a3ebc993b12ce3c16bb382f9c7d88ef7d8a1bf290eaf35955a12078a8a60405161179b929190612798565b60405180910390a26118bb565b60008a81526004602090815260408083208684528252808320858452825280832061ffff8c168452909152902054600260001961010060018416150201909116046118425760008a815260056020908152604080832086845282528083208584529091529020805461ffff808216600101167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00009091161790555b60008a81526004602090815260408083208684528252808320858452825280832061ffff8c1684528252909120825161187d92840190611f17565b50897f52a608b3303a48862d07a73d82fa221318c0027fbbcfb1b2329bface3f19ff2b8a8a846040516118b2939291906127b8565b60405180910390a25b50505050505050505050565b60c081015160208201819052815151116118e057611997565b60006118f482600001518360200151611a51565b602083015183519101915061190f908263ffffffff611b1d16565b61ffff166040830152815160029190910190611931908263ffffffff611b1d16565b61ffff166060830152815160029190910190611953908263ffffffff611b3d16565b63ffffffff908116608084015282516004929092019160009161197991908490611b1d16565b600283810160a086015261ffff9190911690920190910160c0830152505b50565b600081516014146119aa57600080fd5b50602001516c01000000000000000000000000900490565b6040805160148082528183019092526060916020820181803883395050506c010000000000000000000000009290920260208301525090565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f691f3431000000000000000000000000000000000000000000000000000000001480610416575061041682611b5f565b6000815b83518110611a5f57fe5b6000611a71858363ffffffff611bc416565b60ff1691820160010191905080611a885750611a8e565b50611a55565b9190910392915050565b606083518284011115611aaa57600080fd5b6060826040519080825280601f01601f191660200182016040528015611ad7576020820181803883390190505b50905060208082019086860101611aef828287611be2565b509095945050505050565b6000611b07848484611c3e565b611b12878785611c3e565b149695505050505050565b60008251826002011115611b3057600080fd5b50016002015161ffff1690565b60008251826004011115611b5057600080fd5b50016004015163ffffffff1690565b6000604051611b6d906126f8565b60405180910390207bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610416575061041682611c5a565b6000828281518110611bd257fe5b016020015160f81c905092915050565b5b60208110611c205781518352602092830192909101907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe001611be3565b905182516020929092036101000a6000190180199091169116179052565b600083518284011115611c5057600080fd5b5091016020012090565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167fa8fa568200000000000000000000000000000000000000000000000000000000148061041657506104168260007fffffffff0000000000000000000000000000000000000000000000000000000082167fbc1c58d100000000000000000000000000000000000000000000000000000000148061041657506104168260007fffffffff0000000000000000000000000000000000000000000000000000000082167f3b3b57de000000000000000000000000000000000000000000000000000000001480611d8f57507fffffffff0000000000000000000000000000000000000000000000000000000082167ff1cb7e0600000000000000000000000000000000000000000000000000000000145b8061041657506104168260007fffffffff0000000000000000000000000000000000000000000000000000000082167f2203ab5600000000000000000000000000000000000000000000000000000000148061041657507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831614610416565b6040518060e001604052806060815260200160008152602001600061ffff168152602001600061ffff168152602001600063ffffffff16815260200160008152602001600081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611eda578280017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00823516178555611f07565b82800160010185558215611f07579182015b82811115611f07578235825591602001919060010190611eec565b50611f13929150611fc5565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611f5857805160ff1916838001178555611f07565b82800160010185558215611f07579182015b82811115611f07578251825591602001919060010190611f6a565b50805460018160011615610100020316600290046000825580601f10611fab5750611997565b601f01602090049060005260206000209081019061199791905b611fdf91905b80821115611f135760008155600101611fcb565b90565b80356109f18161295d565b80516109f18161295d565b60008083601f84011261200a57600080fd5b50813567ffffffffffffffff81111561202257600080fd5b602083019150836020820283011115610b0f57600080fd5b80356109f181612971565b80356109f18161297a565b80356109f181612983565b60008083601f84011261206d57600080fd5b50813567ffffffffffffffff81111561208557600080fd5b602083019150836001820283011115610b0f57600080fd5b600082601f8301126120ae57600080fd5b81356120c16120bc8261283a565b612813565b915080825260208301602083018583830111156120dd57600080fd5b6120e88382846128f9565b50505092915050565b80356109f18161298c565b60006020828403121561210e57600080fd5b600061211a8484611fed565b949350505050565b6000806020838503121561213557600080fd5b823567ffffffffffffffff81111561214c57600080fd5b61215885828601611ff8565b92509250509250929050565b60006020828403121561217657600080fd5b600061211a8484612045565b6000806040838503121561219557600080fd5b60006121a18585612045565b92505060206121b285828601611fe2565b9150509250929050565b6000806000606084860312156121d157600080fd5b60006121dd8686612045565b93505060206121ee86828701611fe2565b92505060406121ff86828701611fe2565b9150509250925092565b60008060006060848603121561221e57600080fd5b600061222a8686612045565b935050602061223b86828701611fe2565b92505060406121ff8682870161203a565b6000806040838503121561225f57600080fd5b600061226b8585612045565b92505060206121b285828601612045565b60008060006060848603121561229157600080fd5b600061229d8686612045565b93505060206122ae86828701612045565b92505060406121ff86828701612045565b6000806000606084860312156122d457600080fd5b60006122e08686612045565b93505060206122f186828701612045565b92505060406121ff868287016120f1565b6000806040838503121561231557600080fd5b60006123218585612045565b92505060206121b285828601612050565b60008060006060848603121561234757600080fd5b60006123538686612045565b93505060206121ee86828701612050565b60008060006040848603121561237957600080fd5b60006123858686612045565b935050602084013567ffffffffffffffff8111156123a257600080fd5b6123ae8682870161205b565b92509250509250925092565b6000806000806000606086880312156123d257600080fd5b60006123de8888612045565b955050602086013567ffffffffffffffff8111156123fb57600080fd5b6124078882890161205b565b9450945050604086013567ffffffffffffffff81111561242657600080fd5b6124328882890161205b565b92509250509295509295909350565b6000806000806060858703121561245757600080fd5b60006124638787612045565b945050602061247487828801612045565b935050604085013567ffffffffffffffff81111561249157600080fd5b61249d8782880161205b565b95989497509550505050565b6000806000606084860312156124be57600080fd5b60006124ca8686612045565b93505060206124db86828701612045565b925050604084013567ffffffffffffffff8111156124f857600080fd5b6121ff8682870161209d565b60006020828403121561251657600080fd5b600061211a8484612050565b6000610c23838361261a565b612537816128e8565b82525050565b61253781612893565b600061255182612886565b61255b818561288a565b93508360208202850161256d85612880565b8060005b858110156125a7578484038952815161258a8582612522565b945061259583612880565b60209a909a0199925050600101612571565b5091979650505050505050565b6125378161289e565b61253781611fdf565b612537816128a3565b60006125db838561288a565b93506125e88385846128f9565b6125f183612935565b9093019392505050565b60006126078385610419565b93506126148385846128f9565b50500190565b600061262582612886565b61262f818561288a565b935061263f818560208601612905565b6125f181612935565b600061265382612886565b61265d8185610419565b935061266d818560208601612905565b9290920192915050565b6000612684602483610419565b7f696e74657266616365496d706c656d656e74657228627974657333322c62797481527f6573342900000000000000000000000000000000000000000000000000000000602082015260240192915050565b612537816128c8565b600061211a8284866125fb565b6000610c238284612648565b60006109f182612677565b602081016109f1828461253d565b602081016109f1828461252e565b60208082528101610c238184612546565b602081016109f182846125b4565b602081016109f182846125bd565b6040810161275a82856125bd565b610c2360208301846125bd565b602081016109f182846125c6565b6020808252810161211a8184866125cf565b60208082528101610c23818461261a565b604080825281016127a9818561261a565b9050610c2360208301846126d6565b606080825281016127c9818661261a565b90506127d860208301856126d6565b81810360408301526127ea818461261a565b95945050505050565b6040810161280182856125bd565b818103602083015261211a818461261a565b60405181810167ffffffffffffffff8111828210171561283257600080fd5b604052919050565b600067ffffffffffffffff82111561285157600080fd5b506020601f919091017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0160190565b60200190565b5190565b90815260200190565b6000610416826128cf565b151590565b7fffffffff000000000000000000000000000000000000000000000000000000001690565b61ffff1690565b73ffffffffffffffffffffffffffffffffffffffff1690565b600061041682600061041682612893565b82818337506000910152565b60005b83811015612920578181015183820152602001612908565b8381111561292f576000848401525b50505050565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01690565b61296681612893565b811461199757600080fd5b6129668161289e565b61296681611fdf565b612966816128a3565b612966816128c856fea365627a7a7231582082927c55ed80cd2c2b4af3ecca0340c755f0257fadbdd76a4c4b6458f1c8eefc6c6578706572696d656e74616cf564736f6c63430005110040",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x2ABE CODESIZE SUB DUP1 PUSH3 0x2ABE DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x6D JUMP JUMPDEST PUSH1 0xA DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH3 0xD6 JUMP JUMPDEST DUP1 MLOAD PUSH3 0x67 DUP2 PUSH3 0xBC JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x80 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH3 0x8E DUP5 DUP5 PUSH3 0x5A JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x67 DUP3 PUSH3 0xB0 JUMP JUMPDEST PUSH1 0x0 PUSH3 0x67 DUP3 PUSH3 0x96 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH3 0xC7 DUP2 PUSH3 0xA3 JUMP JUMPDEST DUP2 EQ PUSH3 0xD3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x29D8 DUP1 PUSH3 0xE6 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x198 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x691F3431 GT PUSH2 0xE3 JUMPI DUP1 PUSH4 0xBC1C58D1 GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xE59D895D GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xE59D895D EQ PUSH2 0x387 JUMPI DUP1 PUSH4 0xF1CB7E06 EQ PUSH2 0x39A JUMPI DUP1 PUSH4 0xF86BC879 EQ PUSH2 0x3AD JUMPI PUSH2 0x198 JUMP JUMPDEST DUP1 PUSH4 0xBC1C58D1 EQ PUSH2 0x340 JUMPI DUP1 PUSH4 0xC8690233 EQ PUSH2 0x353 JUMPI DUP1 PUSH4 0xD5FA2B00 EQ PUSH2 0x374 JUMPI PUSH2 0x198 JUMP JUMPDEST DUP1 PUSH4 0xA8FA5682 GT PUSH2 0xBD JUMPI DUP1 PUSH4 0xA8FA5682 EQ PUSH2 0x2FA JUMPI DUP1 PUSH4 0xAC9650D8 EQ PUSH2 0x30D JUMPI DUP1 PUSH4 0xAD5780AF EQ PUSH2 0x32D JUMPI PUSH2 0x198 JUMP JUMPDEST DUP1 PUSH4 0x691F3431 EQ PUSH2 0x2C1 JUMPI DUP1 PUSH4 0x77372213 EQ PUSH2 0x2D4 JUMPI DUP1 PUSH4 0x8B95DD71 EQ PUSH2 0x2E7 JUMPI PUSH2 0x198 JUMP JUMPDEST DUP1 PUSH4 0x304E6ADE GT PUSH2 0x145 JUMPI DUP1 PUSH4 0x4CBF6BA4 GT PUSH2 0x11F JUMPI DUP1 PUSH4 0x4CBF6BA4 EQ PUSH2 0x27B JUMPI DUP1 PUSH4 0x59D1D43C EQ PUSH2 0x28E JUMPI DUP1 PUSH4 0x623195B0 EQ PUSH2 0x2AE JUMPI PUSH2 0x198 JUMP JUMPDEST DUP1 PUSH4 0x304E6ADE EQ PUSH2 0x242 JUMPI DUP1 PUSH4 0x3B3B57DE EQ PUSH2 0x255 JUMPI DUP1 PUSH4 0x3E9CE794 EQ PUSH2 0x268 JUMPI PUSH2 0x198 JUMP JUMPDEST DUP1 PUSH4 0x124A319C GT PUSH2 0x176 JUMPI DUP1 PUSH4 0x124A319C EQ PUSH2 0x1EE JUMPI DUP1 PUSH4 0x2203AB56 EQ PUSH2 0x20E JUMPI DUP1 PUSH4 0x29CD62EA EQ PUSH2 0x22F JUMPI PUSH2 0x198 JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x19D JUMPI DUP1 PUSH4 0xAF179D7 EQ PUSH2 0x1C6 JUMPI DUP1 PUSH4 0x10F13A8C EQ PUSH2 0x1DB JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1B0 PUSH2 0x1AB CALLDATASIZE PUSH1 0x4 PUSH2 0x2504 JUMP JUMPDEST PUSH2 0x3C0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1BD SWAP2 SWAP1 PUSH2 0x2730 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D9 PUSH2 0x1D4 CALLDATASIZE PUSH1 0x4 PUSH2 0x2364 JUMP JUMPDEST PUSH2 0x41E JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1D9 PUSH2 0x1E9 CALLDATASIZE PUSH1 0x4 PUSH2 0x23BA JUMP JUMPDEST PUSH2 0x60B JUMP JUMPDEST PUSH2 0x201 PUSH2 0x1FC CALLDATASIZE PUSH1 0x4 PUSH2 0x2302 JUMP JUMPDEST PUSH2 0x6B8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1BD SWAP2 SWAP1 PUSH2 0x2703 JUMP JUMPDEST PUSH2 0x221 PUSH2 0x21C CALLDATASIZE PUSH1 0x4 PUSH2 0x224C JUMP JUMPDEST PUSH2 0x9F7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1BD SWAP3 SWAP2 SWAP1 PUSH2 0x27F3 JUMP JUMPDEST PUSH2 0x1D9 PUSH2 0x23D CALLDATASIZE PUSH1 0x4 PUSH2 0x227C JUMP JUMPDEST PUSH2 0xB16 JUMP JUMPDEST PUSH2 0x1D9 PUSH2 0x250 CALLDATASIZE PUSH1 0x4 PUSH2 0x2364 JUMP JUMPDEST PUSH2 0xB96 JUMP JUMPDEST PUSH2 0x201 PUSH2 0x263 CALLDATASIZE PUSH1 0x4 PUSH2 0x2164 JUMP JUMPDEST PUSH2 0xBF5 JUMP JUMPDEST PUSH2 0x1D9 PUSH2 0x276 CALLDATASIZE PUSH1 0x4 PUSH2 0x2209 JUMP JUMPDEST PUSH2 0xC2A JUMP JUMPDEST PUSH2 0x1B0 PUSH2 0x289 CALLDATASIZE PUSH1 0x4 PUSH2 0x224C JUMP JUMPDEST PUSH2 0xCCF JUMP JUMPDEST PUSH2 0x2A1 PUSH2 0x29C CALLDATASIZE PUSH1 0x4 PUSH2 0x2364 JUMP JUMPDEST PUSH2 0xD01 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1BD SWAP2 SWAP1 PUSH2 0x2787 JUMP JUMPDEST PUSH2 0x1D9 PUSH2 0x2BC CALLDATASIZE PUSH1 0x4 PUSH2 0x2441 JUMP JUMPDEST PUSH2 0xDC3 JUMP JUMPDEST PUSH2 0x2A1 PUSH2 0x2CF CALLDATASIZE PUSH1 0x4 PUSH2 0x2164 JUMP JUMPDEST PUSH2 0xE3E JUMP JUMPDEST PUSH2 0x1D9 PUSH2 0x2E2 CALLDATASIZE PUSH1 0x4 PUSH2 0x2364 JUMP JUMPDEST PUSH2 0xEDF JUMP JUMPDEST PUSH2 0x1D9 PUSH2 0x2F5 CALLDATASIZE PUSH1 0x4 PUSH2 0x24A9 JUMP JUMPDEST PUSH2 0xF3E JUMP JUMPDEST PUSH2 0x2A1 PUSH2 0x308 CALLDATASIZE PUSH1 0x4 PUSH2 0x22BF JUMP JUMPDEST PUSH2 0x1003 JUMP JUMPDEST PUSH2 0x320 PUSH2 0x31B CALLDATASIZE PUSH1 0x4 PUSH2 0x2122 JUMP JUMPDEST PUSH2 0x1090 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1BD SWAP2 SWAP1 PUSH2 0x271F JUMP JUMPDEST PUSH2 0x1D9 PUSH2 0x33B CALLDATASIZE PUSH1 0x4 PUSH2 0x2164 JUMP JUMPDEST PUSH2 0x11D4 JUMP JUMPDEST PUSH2 0x2A1 PUSH2 0x34E CALLDATASIZE PUSH1 0x4 PUSH2 0x2164 JUMP JUMPDEST PUSH2 0x1227 JUMP JUMPDEST PUSH2 0x366 PUSH2 0x361 CALLDATASIZE PUSH1 0x4 PUSH2 0x2164 JUMP JUMPDEST PUSH2 0x128F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1BD SWAP3 SWAP2 SWAP1 PUSH2 0x274C JUMP JUMPDEST PUSH2 0x1D9 PUSH2 0x382 CALLDATASIZE PUSH1 0x4 PUSH2 0x2182 JUMP JUMPDEST PUSH2 0x12A9 JUMP JUMPDEST PUSH2 0x1D9 PUSH2 0x395 CALLDATASIZE PUSH1 0x4 PUSH2 0x2332 JUMP JUMPDEST PUSH2 0x12D0 JUMP JUMPDEST PUSH2 0x2A1 PUSH2 0x3A8 CALLDATASIZE PUSH1 0x4 PUSH2 0x224C JUMP JUMPDEST PUSH2 0x139D JUMP JUMPDEST PUSH2 0x1B0 PUSH2 0x3BB CALLDATASIZE PUSH1 0x4 PUSH2 0x21BC JUMP JUMPDEST PUSH2 0x1446 JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND PUSH32 0x59D1D43C00000000000000000000000000000000000000000000000000000000 EQ DUP1 PUSH2 0x416 JUMPI POP PUSH2 0x416 DUP3 PUSH2 0x146C JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 PUSH2 0x428 DUP2 PUSH2 0x14C2 JUMP JUMPDEST PUSH2 0x431 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP1 DUP3 PUSH2 0x440 PUSH2 0x1E30 JUMP JUMPDEST PUSH2 0x48A PUSH1 0x0 DUP11 DUP11 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP SWAP3 SWAP4 SWAP3 POP POP PUSH4 0xFFFFFFFF PUSH2 0x15D1 AND SWAP1 POP JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH2 0x496 DUP2 PUSH2 0x15EC JUMP JUMPDEST PUSH2 0x5AE JUMPI PUSH2 0xFFFF DUP7 AND PUSH2 0x4EE JUMPI DUP1 PUSH1 0x40 ADD MLOAD SWAP6 POP PUSH2 0x4B3 DUP2 PUSH2 0x15FA JUMP JUMPDEST SWAP4 POP DUP4 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x4C6 SWAP2 SWAP1 PUSH2 0x26EC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP2 POP PUSH2 0x4E7 DUP2 PUSH2 0x1621 JUMP JUMPDEST SWAP3 POP PUSH2 0x5A0 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x4F9 DUP3 PUSH2 0x15FA JUMP JUMPDEST SWAP1 POP DUP2 PUSH1 0x40 ADD MLOAD PUSH2 0xFFFF AND DUP8 PUSH2 0xFFFF AND EQ ISZERO DUP1 PUSH2 0x523 JUMPI POP PUSH2 0x521 DUP6 DUP3 PUSH4 0xFFFFFFFF PUSH2 0x1642 AND JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x59E JUMPI PUSH2 0x577 DUP12 DUP7 DUP10 DUP14 DUP14 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP POP POP POP PUSH1 0x20 DUP8 ADD MLOAD DUP10 MLOAD DUP13 SWAP2 DUP3 SWAP1 SUB SWAP1 ISZERO PUSH2 0x1660 JUMP JUMPDEST DUP2 PUSH1 0x40 ADD MLOAD SWAP7 POP DUP2 PUSH1 0x20 ADD MLOAD SWAP6 POP DUP1 SWAP5 POP DUP5 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP3 POP PUSH2 0x59B DUP3 PUSH2 0x1621 JUMP JUMPDEST SWAP4 POP JUMPDEST POP JUMPDEST PUSH2 0x5A9 DUP2 PUSH2 0x18C7 JUMP JUMPDEST PUSH2 0x48D JUMP JUMPDEST POP DUP3 MLOAD ISZERO PUSH2 0x600 JUMPI PUSH2 0x600 DUP10 DUP5 DUP8 DUP12 DUP12 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP POP DUP9 MLOAD DUP12 SWAP3 POP DUP3 DUP16 SUB SWAP2 POP ISZERO PUSH2 0x1660 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP5 PUSH2 0x615 DUP2 PUSH2 0x14C2 JUMP JUMPDEST PUSH2 0x61E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP3 PUSH1 0x9 PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP8 DUP8 PUSH1 0x40 MLOAD PUSH2 0x643 SWAP3 SWAP2 SWAP1 PUSH2 0x26DF JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 KECCAK256 PUSH2 0x65D SWAP3 SWAP1 SWAP2 PUSH2 0x1E7B JUMP JUMPDEST POP DUP5 DUP5 PUSH1 0x40 MLOAD PUSH2 0x66E SWAP3 SWAP2 SWAP1 PUSH2 0x26DF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP7 PUSH32 0xD8C9334B1A9C2F9DA342A0A2B32629C1A229B6445DAD78947F674B44444A7550 DUP8 DUP8 PUSH1 0x40 MLOAD PUSH2 0x6A8 SWAP3 SWAP2 SWAP1 PUSH2 0x2775 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP1 ISZERO PUSH2 0x717 JUMPI SWAP1 POP PUSH2 0x9F1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x722 DUP6 PUSH2 0xBF5 JUMP JUMPDEST SWAP1 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x74A JUMPI PUSH1 0x0 SWAP3 POP POP POP PUSH2 0x9F1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x77D SWAP2 SWAP1 PUSH2 0x2767 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 OR SWAP1 MSTORE MLOAD PUSH2 0x7FE SWAP2 SWAP1 PUSH2 0x26EC JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x839 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x83E JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO DUP1 PUSH2 0x851 JUMPI POP PUSH1 0x20 DUP2 MLOAD LT JUMPDEST DUP1 PUSH2 0x88D JUMPI POP DUP1 PUSH1 0x1F DUP2 MLOAD DUP2 LT PUSH2 0x864 JUMPI INVALID JUMPDEST ADD PUSH1 0x20 ADD MLOAD PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 AND ISZERO JUMPDEST ISZERO PUSH2 0x89F JUMPI PUSH1 0x0 SWAP5 POP POP POP POP POP PUSH2 0x9F1 JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x8C7 SWAP2 SWAP1 PUSH2 0x2767 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 OR SWAP1 MSTORE MLOAD PUSH2 0x948 SWAP2 SWAP1 PUSH2 0x26EC JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x983 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x988 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP DUP2 ISZERO DUP1 PUSH2 0x99C JUMPI POP PUSH1 0x20 DUP2 MLOAD LT JUMPDEST DUP1 PUSH2 0x9D8 JUMPI POP DUP1 PUSH1 0x1F DUP2 MLOAD DUP2 LT PUSH2 0x9AF JUMPI INVALID JUMPDEST ADD PUSH1 0x20 ADD MLOAD PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 AND ISZERO JUMPDEST ISZERO PUSH2 0x9EA JUMPI PUSH1 0x0 SWAP5 POP POP POP POP POP PUSH2 0x9F1 JUMP JUMPDEST POP SWAP1 SWAP3 POP POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x60 SWAP1 PUSH1 0x1 JUMPDEST DUP5 DUP2 GT PUSH2 0xAF8 JUMPI DUP1 DUP6 AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0xA43 JUMPI POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP4 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x2 PUSH1 0x0 NOT PUSH2 0x100 PUSH1 0x1 DUP5 AND ISZERO MUL ADD SWAP1 SWAP2 AND DIV ISZERO ISZERO JUMPDEST ISZERO PUSH2 0xAF0 JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP4 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD DUP4 MLOAD PUSH1 0x1F PUSH1 0x2 PUSH1 0x0 NOT PUSH2 0x100 PUSH1 0x1 DUP7 AND ISZERO MUL ADD SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 DIV SWAP2 DUP3 ADD DUP5 SWAP1 DIV DUP5 MUL DUP2 ADD DUP5 ADD SWAP1 SWAP5 MSTORE DUP1 DUP5 MSTORE DUP5 SWAP4 SWAP2 SWAP3 DUP4 SWAP2 SWAP1 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0xADE JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xAB3 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xADE JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xAC1 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP4 POP SWAP4 POP POP POP PUSH2 0xB0F JUMP JUMPDEST PUSH1 0x1 SHL PUSH2 0xA0B JUMP JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE SWAP3 POP SWAP1 POP JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST DUP3 PUSH2 0xB20 DUP2 PUSH2 0x14C2 JUMP JUMPDEST PUSH2 0xB29 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE DUP5 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD DUP6 DUP2 MSTORE PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x8 SWAP1 SWAP3 MSTORE SWAP1 DUP4 SWAP1 KECCAK256 SWAP2 MLOAD DUP3 SSTORE MLOAD PUSH1 0x1 SWAP1 SWAP2 ADD SSTORE MLOAD DUP5 SWAP1 PUSH32 0x1D6F5E03D3F63EB58751986629A5439BAEE5079FF04F345BECB66E23EB154E46 SWAP1 PUSH2 0xB88 SWAP1 DUP7 SWAP1 DUP7 SWAP1 PUSH2 0x274C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP JUMP JUMPDEST DUP3 PUSH2 0xBA0 DUP2 PUSH2 0x14C2 JUMP JUMPDEST PUSH2 0xBA9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0xBC2 SWAP1 DUP5 DUP5 PUSH2 0x1E7B JUMP JUMPDEST POP DUP4 PUSH32 0xE379C1624ED7E714CC0937528A32359D69D5281337765313DBA4E081B72D7578 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH2 0xB88 SWAP3 SWAP2 SWAP1 PUSH2 0x2775 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH2 0xC04 DUP4 PUSH1 0x3C PUSH2 0x139D JUMP JUMPDEST SWAP1 POP DUP1 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0xC1A JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x419 JUMP JUMPDEST PUSH2 0xC23 DUP2 PUSH2 0x199A JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE DUP2 DUP5 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND DUP1 DUP7 MSTORE SWAP4 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND DUP6 ISZERO ISZERO OR SWAP1 SSTORE MLOAD SWAP1 SWAP2 SWAP1 DUP6 SWAP1 PUSH32 0xE1C5610A6E0CBE10764ECD182ADCEF1EC338DC4E199C99C32CE98F38E12791DF SWAP1 PUSH2 0xCC2 SWAP1 DUP7 SWAP1 PUSH2 0x2730 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH1 0x3 DUP4 MSTORE DUP2 DUP6 KECCAK256 SLOAD DUP6 MSTORE DUP3 MSTORE DUP1 DUP5 KECCAK256 SWAP3 DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 SLOAD PUSH2 0xFFFF AND ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x9 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH2 0xD26 SWAP3 SWAP2 SWAP1 PUSH2 0x26DF JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 SWAP3 DUP2 SWAP1 SUB DUP4 ADD DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x2 PUSH1 0x1 DUP3 AND ISZERO PUSH2 0x100 MUL PUSH1 0x0 NOT ADD SWAP1 SWAP2 AND DIV PUSH1 0x1F DUP2 ADD DUP6 SWAP1 DIV DUP6 MUL DUP4 ADD DUP6 ADD SWAP1 SWAP4 MSTORE DUP3 DUP3 MSTORE SWAP1 SWAP3 SWAP1 SWAP2 SWAP1 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0xDB5 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xD8A JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xDB5 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xD98 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP4 PUSH2 0xDCD DUP2 PUSH2 0x14C2 JUMP JUMPDEST PUSH2 0xDD6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 NOT DUP5 ADD DUP5 AND ISZERO PUSH2 0xDE7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP8 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 PUSH2 0xE09 SWAP1 DUP5 DUP5 PUSH2 0x1E7B JUMP JUMPDEST POP PUSH1 0x40 MLOAD DUP5 SWAP1 DUP7 SWAP1 PUSH32 0xAA121BBEEF5F32F5961A2A28966E769023910FC9479059EE3495D4C1A696EFE3 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD DUP4 MLOAD PUSH1 0x1F PUSH1 0x2 PUSH1 0x0 NOT PUSH2 0x100 PUSH1 0x1 DUP7 AND ISZERO MUL ADD SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 DIV SWAP2 DUP3 ADD DUP5 SWAP1 DIV DUP5 MUL DUP2 ADD DUP5 ADD SWAP1 SWAP5 MSTORE DUP1 DUP5 MSTORE PUSH1 0x60 SWAP4 SWAP3 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0xED3 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xEA8 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xED3 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xEB6 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 PUSH2 0xEE9 DUP2 PUSH2 0x14C2 JUMP JUMPDEST PUSH2 0xEF2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0xF0B SWAP1 DUP5 DUP5 PUSH2 0x1E7B JUMP JUMPDEST POP DUP4 PUSH32 0xB7D29E911041E8D9B843369E890BCB72C9388692BA48B65AC54E7214C4C348F7 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH2 0xB88 SWAP3 SWAP2 SWAP1 PUSH2 0x2775 JUMP JUMPDEST DUP3 PUSH2 0xF48 DUP2 PUSH2 0x14C2 JUMP JUMPDEST PUSH2 0xF51 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 PUSH32 0x65412581168E88A1E60C6459D7F44AE83AD0832E670826C05A4E2476B57AF752 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH2 0xF83 SWAP3 SWAP2 SWAP1 PUSH2 0x27F3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH1 0x3C DUP4 EQ ISZERO PUSH2 0xFD5 JUMPI DUP4 PUSH32 0x52D7D861F09AB3D26239D492E8968629F95E9E318CF0B73BFDDC441522A15FD2 PUSH2 0xFBF DUP5 PUSH2 0x199A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xFCC SWAP2 SWAP1 PUSH2 0x2711 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP7 DUP5 MSTORE DUP3 MSTORE SWAP1 SWAP2 KECCAK256 DUP4 MLOAD PUSH2 0xFFC SWAP3 DUP6 ADD SWAP1 PUSH2 0x1F17 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x3 DUP4 MSTORE DUP2 DUP5 KECCAK256 SLOAD DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP6 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 PUSH2 0xFFFF DUP6 AND DUP5 MSTORE DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD DUP4 MLOAD PUSH1 0x1F PUSH1 0x2 PUSH1 0x0 NOT PUSH2 0x100 PUSH1 0x1 DUP7 AND ISZERO MUL ADD SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 DIV SWAP2 DUP3 ADD DUP5 SWAP1 DIV DUP5 MUL DUP2 ADD DUP5 ADD SWAP1 SWAP5 MSTORE DUP1 DUP5 MSTORE PUSH1 0x60 SWAP4 SWAP3 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0xDB5 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xD8A JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xDB5 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP3 DUP2 MSTORE PUSH1 0x20 DUP1 DUP5 MUL DUP3 ADD ADD SWAP1 SWAP2 MSTORE PUSH1 0x60 SWAP1 DUP3 DUP1 ISZERO PUSH2 0x10C6 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x10B1 JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x11CD JUMPI PUSH1 0x0 PUSH1 0x60 ADDRESS DUP7 DUP7 DUP6 DUP2 DUP2 LT PUSH2 0x10E5 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL DUP3 ADD SWAP1 POP DUP1 CALLDATALOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE1 CALLDATASIZE DUP5 SWAP1 SUB ADD DUP2 SLT PUSH2 0x111F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP2 ADD PUSH1 0x20 DUP2 ADD SWAP2 POP CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x113E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLDATASIZE DUP2 SWAP1 SUB DUP3 SGT ISZERO PUSH2 0x114E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x115C SWAP3 SWAP2 SWAP1 PUSH2 0x26DF JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1197 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x119C JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0x11AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x11B8 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP PUSH1 0x1 ADD PUSH2 0x10CC JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 PUSH2 0x11DE DUP2 PUSH2 0x14C2 JUMP JUMPDEST PUSH2 0x11E7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE MLOAD DUP4 SWAP2 PUSH32 0xB757169B8492CA2F1C6619D9D76CE22803035C3B1D5F6930DFFE7B127C1A1983 SWAP2 LOG2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 SWAP3 DUP4 SWAP1 KECCAK256 DUP1 SLOAD DUP5 MLOAD PUSH1 0x1 DUP3 AND ISZERO PUSH2 0x100 MUL PUSH1 0x0 NOT ADD SWAP1 SWAP2 AND SWAP4 SWAP1 SWAP4 DIV PUSH1 0x1F DUP2 ADD DUP4 SWAP1 DIV DUP4 MUL DUP5 ADD DUP4 ADD SWAP1 SWAP5 MSTORE DUP4 DUP4 MSTORE PUSH1 0x60 SWAP4 SWAP1 SWAP2 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0xED3 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xEA8 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xED3 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP1 SWAP2 ADD SLOAD SWAP1 SWAP2 JUMP JUMPDEST DUP2 PUSH2 0x12B3 DUP2 PUSH2 0x14C2 JUMP JUMPDEST PUSH2 0x12BC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x12CB DUP4 PUSH1 0x3C PUSH2 0x2F5 DUP6 PUSH2 0x19C2 JUMP JUMPDEST POP POP POP JUMP JUMPDEST DUP3 PUSH2 0x12DA DUP2 PUSH2 0x14C2 JUMP JUMPDEST PUSH2 0x12E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP8 AND DUP1 DUP6 MSTORE SWAP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND OR SWAP1 SSTORE SWAP1 MLOAD DUP6 SWAP1 PUSH32 0x7C69F06BEA0BDEF565B709E93A147836B0063BA2DD89F02D0B7E8D931E6A6DAA SWAP1 PUSH2 0x138F SWAP1 DUP7 SWAP1 PUSH2 0x2703 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 DUP6 DUP6 MSTORE DUP3 MSTORE SWAP3 DUP4 SWAP1 KECCAK256 DUP1 SLOAD DUP5 MLOAD PUSH1 0x2 SWAP5 DUP3 AND ISZERO PUSH2 0x100 MUL PUSH1 0x0 NOT ADD SWAP1 SWAP2 AND SWAP4 SWAP1 SWAP4 DIV PUSH1 0x1F DUP2 ADD DUP4 SWAP1 DIV DUP4 MUL DUP5 ADD DUP4 ADD SWAP1 SWAP5 MSTORE DUP4 DUP4 MSTORE PUSH1 0x60 SWAP4 SWAP1 SWAP2 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x1439 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x140E JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1439 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x141C JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0xB PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP4 DUP5 MSTORE PUSH1 0x40 DUP1 DUP6 KECCAK256 DUP3 MSTORE SWAP3 DUP5 MSTORE DUP3 DUP5 KECCAK256 SWAP1 MSTORE DUP3 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND PUSH32 0xC869023300000000000000000000000000000000000000000000000000000000 EQ DUP1 PUSH2 0x416 JUMPI POP PUSH2 0x416 DUP3 PUSH2 0x19FB JUMP JUMPDEST PUSH1 0xA SLOAD PUSH1 0x40 MLOAD PUSH32 0x2571BE300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x0 SWAP2 DUP3 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0x2571BE3 SWAP1 PUSH2 0x151D SWAP1 DUP7 SWAP1 PUSH1 0x4 ADD PUSH2 0x273E JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1535 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1549 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x156D SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x20FC JUMP JUMPDEST SWAP1 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND CALLER EQ DUP1 PUSH2 0xC23 JUMPI POP PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x15D9 PUSH2 0x1E30 JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0xC0 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x9F1 DUP2 PUSH2 0x18C7 JUMP JUMPDEST DUP1 MLOAD MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD MLOAD LT ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD DUP2 MLOAD PUSH1 0x60 SWAP2 PUSH2 0x416 SWAP2 PUSH2 0x1612 SWAP1 DUP3 PUSH2 0x1A51 JUMP JUMPDEST DUP5 MLOAD SWAP2 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x1A98 AND JUMP JUMPDEST PUSH1 0xA0 DUP2 ADD MLOAD PUSH1 0xC0 DUP3 ADD MLOAD DUP3 MLOAD PUSH1 0x60 SWAP3 PUSH2 0x416 SWAP3 DUP2 SWAP1 SUB PUSH4 0xFFFFFFFF PUSH2 0x1A98 AND JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP4 MLOAD EQ DUP1 ISZERO PUSH2 0xC23 JUMPI POP PUSH2 0xC23 DUP4 PUSH1 0x0 DUP5 PUSH1 0x0 DUP8 MLOAD PUSH2 0x1AFA JUMP JUMPDEST PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 SLOAD DUP8 MLOAD SWAP2 DUP9 ADD SWAP2 SWAP1 SWAP2 KECCAK256 PUSH1 0x60 PUSH2 0x168E DUP8 DUP8 DUP8 PUSH4 0xFFFFFFFF PUSH2 0x1A98 AND JUMP JUMPDEST SWAP1 POP DUP4 ISZERO PUSH2 0x17A8 JUMPI PUSH1 0x0 DUP11 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP7 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP6 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 PUSH2 0xFFFF DUP13 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0x2 PUSH1 0x0 NOT PUSH2 0x100 PUSH1 0x1 DUP5 AND ISZERO MUL ADD SWAP1 SWAP2 AND DIV ISZERO PUSH2 0x1733 JUMPI PUSH1 0x0 DUP11 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP7 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP6 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000 DUP2 AND PUSH2 0xFFFF SWAP2 DUP3 AND PUSH1 0x0 NOT ADD SWAP1 SWAP2 AND OR SWAP1 SSTORE JUMPDEST PUSH1 0x0 DUP11 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP7 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP6 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 PUSH2 0xFFFF DUP13 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 PUSH2 0x1769 SWAP2 PUSH2 0x1F85 JUMP JUMPDEST DUP10 PUSH32 0x3528ED0C2A3EBC993B12CE3C16BB382F9C7D88EF7D8A1BF290EAF35955A1207 DUP11 DUP11 PUSH1 0x40 MLOAD PUSH2 0x179B SWAP3 SWAP2 SWAP1 PUSH2 0x2798 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH2 0x18BB JUMP JUMPDEST PUSH1 0x0 DUP11 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP7 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP6 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 PUSH2 0xFFFF DUP13 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0x2 PUSH1 0x0 NOT PUSH2 0x100 PUSH1 0x1 DUP5 AND ISZERO MUL ADD SWAP1 SWAP2 AND DIV PUSH2 0x1842 JUMPI PUSH1 0x0 DUP11 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP7 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP6 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH2 0xFFFF DUP1 DUP3 AND PUSH1 0x1 ADD AND PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000 SWAP1 SWAP2 AND OR SWAP1 SSTORE JUMPDEST PUSH1 0x0 DUP11 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP7 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP6 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 PUSH2 0xFFFF DUP13 AND DUP5 MSTORE DUP3 MSTORE SWAP1 SWAP2 KECCAK256 DUP3 MLOAD PUSH2 0x187D SWAP3 DUP5 ADD SWAP1 PUSH2 0x1F17 JUMP JUMPDEST POP DUP10 PUSH32 0x52A608B3303A48862D07A73D82FA221318C0027FBBCFB1B2329BFACE3F19FF2B DUP11 DUP11 DUP5 PUSH1 0x40 MLOAD PUSH2 0x18B2 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x27B8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0xC0 DUP2 ADD MLOAD PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE DUP2 MLOAD MLOAD GT PUSH2 0x18E0 JUMPI PUSH2 0x1997 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x18F4 DUP3 PUSH1 0x0 ADD MLOAD DUP4 PUSH1 0x20 ADD MLOAD PUSH2 0x1A51 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MLOAD DUP4 MLOAD SWAP2 ADD SWAP2 POP PUSH2 0x190F SWAP1 DUP3 PUSH4 0xFFFFFFFF PUSH2 0x1B1D AND JUMP JUMPDEST PUSH2 0xFFFF AND PUSH1 0x40 DUP4 ADD MSTORE DUP2 MLOAD PUSH1 0x2 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH2 0x1931 SWAP1 DUP3 PUSH4 0xFFFFFFFF PUSH2 0x1B1D AND JUMP JUMPDEST PUSH2 0xFFFF AND PUSH1 0x60 DUP4 ADD MSTORE DUP2 MLOAD PUSH1 0x2 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH2 0x1953 SWAP1 DUP3 PUSH4 0xFFFFFFFF PUSH2 0x1B3D AND JUMP JUMPDEST PUSH4 0xFFFFFFFF SWAP1 DUP2 AND PUSH1 0x80 DUP5 ADD MSTORE DUP3 MLOAD PUSH1 0x4 SWAP3 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x0 SWAP2 PUSH2 0x1979 SWAP2 SWAP1 DUP5 SWAP1 PUSH2 0x1B1D AND JUMP JUMPDEST PUSH1 0x2 DUP4 DUP2 ADD PUSH1 0xA0 DUP7 ADD MSTORE PUSH2 0xFFFF SWAP2 SWAP1 SWAP2 AND SWAP1 SWAP3 ADD SWAP1 SWAP2 ADD PUSH1 0xC0 DUP4 ADD MSTORE POP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD PUSH1 0x14 EQ PUSH2 0x19AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x20 ADD MLOAD PUSH13 0x1000000000000000000000000 SWAP1 DIV SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x14 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP2 PUSH1 0x20 DUP3 ADD DUP2 DUP1 CODESIZE DUP4 CODECOPY POP POP POP PUSH13 0x1000000000000000000000000 SWAP3 SWAP1 SWAP3 MUL PUSH1 0x20 DUP4 ADD MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND PUSH32 0x691F343100000000000000000000000000000000000000000000000000000000 EQ DUP1 PUSH2 0x416 JUMPI POP PUSH2 0x416 DUP3 PUSH2 0x1B5F JUMP JUMPDEST PUSH1 0x0 DUP2 JUMPDEST DUP4 MLOAD DUP2 LT PUSH2 0x1A5F JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH2 0x1A71 DUP6 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x1BC4 AND JUMP JUMPDEST PUSH1 0xFF AND SWAP2 DUP3 ADD PUSH1 0x1 ADD SWAP2 SWAP1 POP DUP1 PUSH2 0x1A88 JUMPI POP PUSH2 0x1A8E JUMP JUMPDEST POP PUSH2 0x1A55 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 SUB SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 MLOAD DUP3 DUP5 ADD GT ISZERO PUSH2 0x1AAA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x60 DUP3 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1AD7 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x20 DUP1 DUP3 ADD SWAP1 DUP7 DUP7 ADD ADD PUSH2 0x1AEF DUP3 DUP3 DUP8 PUSH2 0x1BE2 JUMP JUMPDEST POP SWAP1 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1B07 DUP5 DUP5 DUP5 PUSH2 0x1C3E JUMP JUMPDEST PUSH2 0x1B12 DUP8 DUP8 DUP6 PUSH2 0x1C3E JUMP JUMPDEST EQ SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD DUP3 PUSH1 0x2 ADD GT ISZERO PUSH2 0x1B30 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP ADD PUSH1 0x2 ADD MLOAD PUSH2 0xFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD DUP3 PUSH1 0x4 ADD GT ISZERO PUSH2 0x1B50 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP ADD PUSH1 0x4 ADD MLOAD PUSH4 0xFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD PUSH2 0x1B6D SWAP1 PUSH2 0x26F8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x416 JUMPI POP PUSH2 0x416 DUP3 PUSH2 0x1C5A JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1BD2 JUMPI INVALID JUMPDEST ADD PUSH1 0x20 ADD MLOAD PUSH1 0xF8 SHR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP2 LT PUSH2 0x1C20 JUMPI DUP2 MLOAD DUP4 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP1 SWAP2 ADD SWAP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 ADD PUSH2 0x1BE3 JUMP JUMPDEST SWAP1 MLOAD DUP3 MLOAD PUSH1 0x20 SWAP3 SWAP1 SWAP3 SUB PUSH2 0x100 EXP PUSH1 0x0 NOT ADD DUP1 NOT SWAP1 SWAP2 AND SWAP2 AND OR SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD DUP3 DUP5 ADD GT ISZERO PUSH2 0x1C50 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SWAP2 ADD PUSH1 0x20 ADD KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND PUSH32 0xA8FA568200000000000000000000000000000000000000000000000000000000 EQ DUP1 PUSH2 0x416 JUMPI POP PUSH2 0x416 DUP3 PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND PUSH32 0xBC1C58D100000000000000000000000000000000000000000000000000000000 EQ DUP1 PUSH2 0x416 JUMPI POP PUSH2 0x416 DUP3 PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND PUSH32 0x3B3B57DE00000000000000000000000000000000000000000000000000000000 EQ DUP1 PUSH2 0x1D8F JUMPI POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND PUSH32 0xF1CB7E0600000000000000000000000000000000000000000000000000000000 EQ JUMPDEST DUP1 PUSH2 0x416 JUMPI POP PUSH2 0x416 DUP3 PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND PUSH32 0x2203AB5600000000000000000000000000000000000000000000000000000000 EQ DUP1 PUSH2 0x416 JUMPI POP PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND EQ PUSH2 0x416 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xE0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH2 0xFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH2 0xFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH1 0x1F LT PUSH2 0x1EDA JUMPI DUP3 DUP1 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 DUP3 CALLDATALOAD AND OR DUP6 SSTORE PUSH2 0x1F07 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0x1F07 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x1F07 JUMPI DUP3 CALLDATALOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x1EEC JUMP JUMPDEST POP PUSH2 0x1F13 SWAP3 SWAP2 POP PUSH2 0x1FC5 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH1 0x1F LT PUSH2 0x1F58 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 0x1F07 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0x1F07 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x1F07 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x1F6A JUMP JUMPDEST POP DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV PUSH1 0x0 DUP3 SSTORE DUP1 PUSH1 0x1F LT PUSH2 0x1FAB JUMPI POP PUSH2 0x1997 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1997 SWAP2 SWAP1 JUMPDEST PUSH2 0x1FDF SWAP2 SWAP1 JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x1F13 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x1FCB JUMP JUMPDEST SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x9F1 DUP2 PUSH2 0x295D JUMP JUMPDEST DUP1 MLOAD PUSH2 0x9F1 DUP2 PUSH2 0x295D JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x200A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2022 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 MUL DUP4 ADD GT ISZERO PUSH2 0xB0F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH2 0x9F1 DUP2 PUSH2 0x2971 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x9F1 DUP2 PUSH2 0x297A JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x9F1 DUP2 PUSH2 0x2983 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x206D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2085 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x1 DUP3 MUL DUP4 ADD GT ISZERO PUSH2 0xB0F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x20AE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x20C1 PUSH2 0x20BC DUP3 PUSH2 0x283A JUMP JUMPDEST PUSH2 0x2813 JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP4 ADD DUP6 DUP4 DUP4 ADD GT ISZERO PUSH2 0x20DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x20E8 DUP4 DUP3 DUP5 PUSH2 0x28F9 JUMP JUMPDEST POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x9F1 DUP2 PUSH2 0x298C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x210E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x211A DUP5 DUP5 PUSH2 0x1FED JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2135 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x214C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2158 DUP6 DUP3 DUP7 ADD PUSH2 0x1FF8 JUMP JUMPDEST SWAP3 POP SWAP3 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2176 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x211A DUP5 DUP5 PUSH2 0x2045 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2195 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x21A1 DUP6 DUP6 PUSH2 0x2045 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x21B2 DUP6 DUP3 DUP7 ADD PUSH2 0x1FE2 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x21D1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x21DD DUP7 DUP7 PUSH2 0x2045 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x21EE DUP7 DUP3 DUP8 ADD PUSH2 0x1FE2 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x21FF DUP7 DUP3 DUP8 ADD PUSH2 0x1FE2 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x221E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x222A DUP7 DUP7 PUSH2 0x2045 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x223B DUP7 DUP3 DUP8 ADD PUSH2 0x1FE2 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x21FF DUP7 DUP3 DUP8 ADD PUSH2 0x203A JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x225F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x226B DUP6 DUP6 PUSH2 0x2045 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x21B2 DUP6 DUP3 DUP7 ADD PUSH2 0x2045 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2291 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x229D DUP7 DUP7 PUSH2 0x2045 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x22AE DUP7 DUP3 DUP8 ADD PUSH2 0x2045 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x21FF DUP7 DUP3 DUP8 ADD PUSH2 0x2045 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x22D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x22E0 DUP7 DUP7 PUSH2 0x2045 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x22F1 DUP7 DUP3 DUP8 ADD PUSH2 0x2045 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x21FF DUP7 DUP3 DUP8 ADD PUSH2 0x20F1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2315 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2321 DUP6 DUP6 PUSH2 0x2045 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x21B2 DUP6 DUP3 DUP7 ADD PUSH2 0x2050 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2347 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2353 DUP7 DUP7 PUSH2 0x2045 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x21EE DUP7 DUP3 DUP8 ADD PUSH2 0x2050 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x40 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2379 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2385 DUP7 DUP7 PUSH2 0x2045 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x23A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x23AE DUP7 DUP3 DUP8 ADD PUSH2 0x205B JUMP JUMPDEST SWAP3 POP SWAP3 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x23D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x23DE DUP9 DUP9 PUSH2 0x2045 JUMP JUMPDEST SWAP6 POP POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x23FB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2407 DUP9 DUP3 DUP10 ADD PUSH2 0x205B JUMP JUMPDEST SWAP5 POP SWAP5 POP POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2426 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2432 DUP9 DUP3 DUP10 ADD PUSH2 0x205B JUMP JUMPDEST SWAP3 POP SWAP3 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x2457 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2463 DUP8 DUP8 PUSH2 0x2045 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x2474 DUP8 DUP3 DUP9 ADD PUSH2 0x2045 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2491 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x249D DUP8 DUP3 DUP9 ADD PUSH2 0x205B JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x24BE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x24CA DUP7 DUP7 PUSH2 0x2045 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x24DB DUP7 DUP3 DUP8 ADD PUSH2 0x2045 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x24F8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x21FF DUP7 DUP3 DUP8 ADD PUSH2 0x209D JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2516 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x211A DUP5 DUP5 PUSH2 0x2050 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC23 DUP4 DUP4 PUSH2 0x261A JUMP JUMPDEST PUSH2 0x2537 DUP2 PUSH2 0x28E8 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x2537 DUP2 PUSH2 0x2893 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2551 DUP3 PUSH2 0x2886 JUMP JUMPDEST PUSH2 0x255B DUP2 DUP6 PUSH2 0x288A JUMP JUMPDEST SWAP4 POP DUP4 PUSH1 0x20 DUP3 MUL DUP6 ADD PUSH2 0x256D DUP6 PUSH2 0x2880 JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x25A7 JUMPI DUP5 DUP5 SUB DUP10 MSTORE DUP2 MLOAD PUSH2 0x258A DUP6 DUP3 PUSH2 0x2522 JUMP JUMPDEST SWAP5 POP PUSH2 0x2595 DUP4 PUSH2 0x2880 JUMP JUMPDEST PUSH1 0x20 SWAP11 SWAP1 SWAP11 ADD SWAP10 SWAP3 POP POP PUSH1 0x1 ADD PUSH2 0x2571 JUMP JUMPDEST POP SWAP2 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x2537 DUP2 PUSH2 0x289E JUMP JUMPDEST PUSH2 0x2537 DUP2 PUSH2 0x1FDF JUMP JUMPDEST PUSH2 0x2537 DUP2 PUSH2 0x28A3 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x25DB DUP4 DUP6 PUSH2 0x288A JUMP JUMPDEST SWAP4 POP PUSH2 0x25E8 DUP4 DUP6 DUP5 PUSH2 0x28F9 JUMP JUMPDEST PUSH2 0x25F1 DUP4 PUSH2 0x2935 JUMP JUMPDEST SWAP1 SWAP4 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2607 DUP4 DUP6 PUSH2 0x419 JUMP JUMPDEST SWAP4 POP PUSH2 0x2614 DUP4 DUP6 DUP5 PUSH2 0x28F9 JUMP JUMPDEST POP POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2625 DUP3 PUSH2 0x2886 JUMP JUMPDEST PUSH2 0x262F DUP2 DUP6 PUSH2 0x288A JUMP JUMPDEST SWAP4 POP PUSH2 0x263F DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x2905 JUMP JUMPDEST PUSH2 0x25F1 DUP2 PUSH2 0x2935 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2653 DUP3 PUSH2 0x2886 JUMP JUMPDEST PUSH2 0x265D DUP2 DUP6 PUSH2 0x419 JUMP JUMPDEST SWAP4 POP PUSH2 0x266D DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x2905 JUMP JUMPDEST SWAP3 SWAP1 SWAP3 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2684 PUSH1 0x24 DUP4 PUSH2 0x419 JUMP JUMPDEST PUSH32 0x696E74657266616365496D706C656D656E74657228627974657333322C627974 DUP2 MSTORE PUSH32 0x6573342900000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x24 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2537 DUP2 PUSH2 0x28C8 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x211A DUP3 DUP5 DUP7 PUSH2 0x25FB JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC23 DUP3 DUP5 PUSH2 0x2648 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x9F1 DUP3 PUSH2 0x2677 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x9F1 DUP3 DUP5 PUSH2 0x253D JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x9F1 DUP3 DUP5 PUSH2 0x252E JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0xC23 DUP2 DUP5 PUSH2 0x2546 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x9F1 DUP3 DUP5 PUSH2 0x25B4 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x9F1 DUP3 DUP5 PUSH2 0x25BD JUMP JUMPDEST PUSH1 0x40 DUP2 ADD PUSH2 0x275A DUP3 DUP6 PUSH2 0x25BD JUMP JUMPDEST PUSH2 0xC23 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x25BD JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x9F1 DUP3 DUP5 PUSH2 0x25C6 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x211A DUP2 DUP5 DUP7 PUSH2 0x25CF JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0xC23 DUP2 DUP5 PUSH2 0x261A JUMP JUMPDEST PUSH1 0x40 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x27A9 DUP2 DUP6 PUSH2 0x261A JUMP JUMPDEST SWAP1 POP PUSH2 0xC23 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x26D6 JUMP JUMPDEST PUSH1 0x60 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x27C9 DUP2 DUP7 PUSH2 0x261A JUMP JUMPDEST SWAP1 POP PUSH2 0x27D8 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x26D6 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x27EA DUP2 DUP5 PUSH2 0x261A JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP2 ADD PUSH2 0x2801 DUP3 DUP6 PUSH2 0x25BD JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x211A DUP2 DUP5 PUSH2 0x261A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x2832 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x2851 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x20 PUSH1 0x1F SWAP2 SWAP1 SWAP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x416 DUP3 PUSH2 0x28CF JUMP JUMPDEST ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND SWAP1 JUMP JUMPDEST PUSH2 0xFFFF AND SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x416 DUP3 PUSH1 0x0 PUSH2 0x416 DUP3 PUSH2 0x2893 JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2920 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x2908 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x292F JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP1 JUMP JUMPDEST PUSH2 0x2966 DUP2 PUSH2 0x2893 JUMP JUMPDEST DUP2 EQ PUSH2 0x1997 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2966 DUP2 PUSH2 0x289E JUMP JUMPDEST PUSH2 0x2966 DUP2 PUSH2 0x1FDF JUMP JUMPDEST PUSH2 0x2966 DUP2 PUSH2 0x28A3 JUMP JUMPDEST PUSH2 0x2966 DUP2 PUSH2 0x28C8 JUMP INVALID LOG3 PUSH6 0x627A7A723158 KECCAK256 DUP3 SWAP3 PUSH29 0x55ED80CD2C2B4AF3ECCA0340C755F0257FADBDD76A4C4B6458F1C8EEFC PUSH13 0x6578706572696D656E74616CF5 PUSH5 0x736F6C6343 STOP SDIV GT STOP BLOCKHASH ",
              "sourceMap": "46735:2156:0:-;;;47408:50;8:9:-1;5:2;;;30:1;27;20:12;5:2;47408:50:0;;;;;;;;;;;;;;;;;;;;;47443:3;:10;;-1:-1:-1;;;;;;47443:10:0;-1:-1:-1;;;;;47443:10:0;;;;;;;;;;46735:2156;;5:154:-1;93:13;;111:43;93:13;111:43;;;78:81;;;;;166:283;;291:2;279:9;270:7;266:23;262:32;259:2;;;307:1;304;297:12;259:2;342:1;359:74;425:7;405:9;359:74;;;349:84;253:196;-1:-1;;;;253:196;456:91;;518:24;536:5;518:24;;554:101;;626:24;644:5;626:24;;662:121;-1:-1;;;;;724:54;;707:76;790:137;869:34;897:5;869:34;;;862:5;859:45;849:2;;918:1;915;908:12;849:2;843:84;;;46735:2156:0;;;;;;"
            },
            "deployedBytecode": {
              "linkReferences": {},
              "object": "608060405234801561001057600080fd5b50600436106101985760003560e01c8063691f3431116100e3578063bc1c58d11161008c578063e59d895d11610066578063e59d895d14610387578063f1cb7e061461039a578063f86bc879146103ad57610198565b8063bc1c58d114610340578063c869023314610353578063d5fa2b001461037457610198565b8063a8fa5682116100bd578063a8fa5682146102fa578063ac9650d81461030d578063ad5780af1461032d57610198565b8063691f3431146102c157806377372213146102d45780638b95dd71146102e757610198565b8063304e6ade116101455780634cbf6ba41161011f5780634cbf6ba41461027b57806359d1d43c1461028e578063623195b0146102ae57610198565b8063304e6ade146102425780633b3b57de146102555780633e9ce7941461026857610198565b8063124a319c11610176578063124a319c146101ee5780632203ab561461020e57806329cd62ea1461022f57610198565b806301ffc9a71461019d5780630af179d7146101c657806310f13a8c146101db575b600080fd5b6101b06101ab366004612504565b6103c0565b6040516101bd9190612730565b60405180910390f35b6101d96101d4366004612364565b61041e565b005b6101d96101e93660046123ba565b61060b565b6102016101fc366004612302565b6106b8565b6040516101bd9190612703565b61022161021c36600461224c565b6109f7565b6040516101bd9291906127f3565b6101d961023d36600461227c565b610b16565b6101d9610250366004612364565b610b96565b610201610263366004612164565b610bf5565b6101d9610276366004612209565b610c2a565b6101b061028936600461224c565b610ccf565b6102a161029c366004612364565b610d01565b6040516101bd9190612787565b6101d96102bc366004612441565b610dc3565b6102a16102cf366004612164565b610e3e565b6101d96102e2366004612364565b610edf565b6101d96102f53660046124a9565b610f3e565b6102a16103083660046122bf565b611003565b61032061031b366004612122565b611090565b6040516101bd919061271f565b6101d961033b366004612164565b6111d4565b6102a161034e366004612164565b611227565b610366610361366004612164565b61128f565b6040516101bd92919061274c565b6101d9610382366004612182565b6112a9565b6101d9610395366004612332565b6112d0565b6102a16103a836600461224c565b61139d565b6101b06103bb3660046121bc565b611446565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f59d1d43c00000000000000000000000000000000000000000000000000000000148061041657506104168261146c565b90505b919050565b82610428816114c2565b61043157600080fd5b60008060608082610440611e30565b61048a60008a8a8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929392505063ffffffff6115d1169050565b90505b610496816115ec565b6105ae5761ffff86166104ee57806040015195506104b3816115fa565b9350836040516020016104c691906126ec565b6040516020818303038152906040528051906020012091506104e781611621565b92506105a0565b60606104f9826115fa565b9050816040015161ffff168761ffff161415806105235750610521858263ffffffff61164216565b155b1561059e576105778b86898d8d8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505050602087015189518c918290039015611660565b81604001519650816020015195508094508480519060200120925061059b82611621565b93505b505b6105a9816118c7565b61048d565b50825115610600576106008984878b8b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505088518b9250828f03915015611660565b505050505050505050565b84610615816114c2565b61061e57600080fd5b82826009600089815260200190815260200160002087876040516106439291906126df565b90815260405190819003602001902061065d929091611e7b565b50848460405161066e9291906126df565b6040518091039020867fd8c9334b1a9c2f9da342a0a2b32629c1a229b6445dad78947f674b44444a755087876040516106a8929190612775565b60405180910390a3505050505050565b60008281526006602090815260408083207fffffffff000000000000000000000000000000000000000000000000000000008516845290915281205473ffffffffffffffffffffffffffffffffffffffff1680156107175790506109f1565b600061072285610bf5565b905073ffffffffffffffffffffffffffffffffffffffff811661074a576000925050506109f1565b600060608273ffffffffffffffffffffffffffffffffffffffff166301ffc9a760e01b60405160240161077d9190612767565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f01ffc9a700000000000000000000000000000000000000000000000000000000179052516107fe91906126ec565b600060405180830381855afa9150503d8060008114610839576040519150601f19603f3d011682016040523d82523d6000602084013e61083e565b606091505b5091509150811580610851575060208151105b8061088d575080601f8151811061086457fe5b01602001517fff0000000000000000000000000000000000000000000000000000000000000016155b1561089f5760009450505050506109f1565b8273ffffffffffffffffffffffffffffffffffffffff16866040516024016108c79190612767565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f01ffc9a7000000000000000000000000000000000000000000000000000000001790525161094891906126ec565b600060405180830381855afa9150503d8060008114610983576040519150601f19603f3d011682016040523d82523d6000602084013e610988565b606091505b50909250905081158061099c575060208151105b806109d8575080601f815181106109af57fe5b01602001517fff0000000000000000000000000000000000000000000000000000000000000016155b156109ea5760009450505050506109f1565b5090925050505b92915050565b600082815260208190526040812060609060015b848111610af85780851615801590610a4357506000818152602083905260409020546002600019610100600184161502019091160415155b15610af0576000818152602083815260409182902080548351601f6002600019610100600186161502019093169290920491820184900484028101840190945280845284939192839190830182828015610ade5780601f10610ab357610100808354040283529160200191610ade565b820191906000526020600020905b815481529060010190602001808311610ac157829003601f168201915b50505050509050935093505050610b0f565b60011b610a0b565b505060408051602081019091526000808252925090505b9250929050565b82610b20816114c2565b610b2957600080fd5b6040805180820182528481526020808201858152600088815260089092529083902091518255516001909101555184907f1d6f5e03d3f63eb58751986629a5439baee5079ff04f345becb66e23eb154e4690610b88908690869061274c565b60405180910390a250505050565b82610ba0816114c2565b610ba957600080fd5b6000848152600260205260409020610bc2908484611e7b565b50837fe379c1624ed7e714cc0937528a32359d69d5281337765313dba4e081b72d75788484604051610b88929190612775565b60006060610c0483603c61139d565b9050805160001415610c1a576000915050610419565b610c238161199a565b9392505050565b6000838152600b602090815260408083203380855290835281842073ffffffffffffffffffffffffffffffffffffffff871680865293529281902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00168515151790555190919085907fe1c5610a6e0cbe10764ecd182adcef1ec338dc4e199c99c32ce98f38e12791df90610cc2908690612730565b60405180910390a4505050565b600091825260056020908152604080842060038352818520548552825280842092845291905290205461ffff16151590565b6060600960008581526020019081526020016000208383604051610d269291906126df565b9081526040805160209281900383018120805460026001821615610100026000190190911604601f81018590048502830185019093528282529092909190830182828015610db55780601f10610d8a57610100808354040283529160200191610db5565b820191906000526020600020905b815481529060010190602001808311610d9857829003601f168201915b505050505090509392505050565b83610dcd816114c2565b610dd657600080fd5b6000198401841615610de757600080fd5b6000858152602081815260408083208784529091529020610e09908484611e7b565b50604051849086907faa121bbeef5f32f5961a2a28966e769023910fc9479059ee3495d4c1a696efe390600090a35050505050565b60008181526007602090815260409182902080548351601f6002600019610100600186161502019093169290920491820184900484028101840190945280845260609392830182828015610ed35780601f10610ea857610100808354040283529160200191610ed3565b820191906000526020600020905b815481529060010190602001808311610eb657829003601f168201915b50505050509050919050565b82610ee9816114c2565b610ef257600080fd5b6000848152600760205260409020610f0b908484611e7b565b50837fb7d29e911041e8d9b843369e890bcb72c9388692ba48b65ac54e7214c4c348f78484604051610b88929190612775565b82610f48816114c2565b610f5157600080fd5b837f65412581168e88a1e60c6459d7f44ae83ad0832e670826c05a4e2476b57af7528484604051610f839291906127f3565b60405180910390a2603c831415610fd557837f52d7d861f09ab3d26239d492e8968629f95e9e318cf0b73bfddc441522a15fd2610fbf8461199a565b604051610fcc9190612711565b60405180910390a25b600084815260016020908152604080832086845282529091208351610ffc92850190611f17565b5050505050565b6000838152600460209081526040808320600383528184205484528252808320858452825280832061ffff8516845282529182902080548351601f6002600019610100600186161502019093169290920491820184900484028101840190945280845260609392830182828015610db55780601f10610d8a57610100808354040283529160200191610db5565b6040805182815260208084028201019091526060908280156110c657816020015b60608152602001906001900390816110b15790505b50905060005b828110156111cd5760006060308686858181106110e557fe5b6020028201905080357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe13684900301811261111f57600080fd5b9091016020810191503567ffffffffffffffff81111561113e57600080fd5b3681900382131561114e57600080fd5b60405161115c9291906126df565b600060405180830381855af49150503d8060008114611197576040519150601f19603f3d011682016040523d82523d6000602084013e61119c565b606091505b5091509150816111ab57600080fd5b808484815181106111b857fe5b602090810291909101015250506001016110cc565b5092915050565b806111de816114c2565b6111e757600080fd5b600082815260036020526040808220805460010190555183917fb757169b8492ca2f1c6619d9d76ce22803035c3b1d5f6930dffe7b127c1a198391a25050565b600081815260026020818152604092839020805484516001821615610100026000190190911693909304601f81018390048302840183019094528383526060939091830182828015610ed35780601f10610ea857610100808354040283529160200191610ed3565b600090815260086020526040902080546001909101549091565b816112b3816114c2565b6112bc57600080fd5b6112cb83603c6102f5856119c2565b505050565b826112da816114c2565b6112e357600080fd5b60008481526006602090815260408083207fffffffff00000000000000000000000000000000000000000000000000000000871680855292529182902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8616179055905185907f7c69f06bea0bdef565b709e93a147836b0063ba2dd89f02d0b7e8d931e6a6daa9061138f908690612703565b60405180910390a350505050565b600082815260016020818152604080842085855282529283902080548451600294821615610100026000190190911693909304601f810183900483028401830190945283835260609390918301828280156114395780601f1061140e57610100808354040283529160200191611439565b820191906000526020600020905b81548152906001019060200180831161141c57829003601f168201915b5050505050905092915050565b600b60209081526000938452604080852082529284528284209052825290205460ff1681565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167fc86902330000000000000000000000000000000000000000000000000000000014806104165750610416826119fb565b600a546040517f02571be3000000000000000000000000000000000000000000000000000000008152600091829173ffffffffffffffffffffffffffffffffffffffff909116906302571be39061151d90869060040161273e565b60206040518083038186803b15801561153557600080fd5b505afa158015611549573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061156d91908101906120fc565b905073ffffffffffffffffffffffffffffffffffffffff8116331480610c2357506000838152600b6020908152604080832073ffffffffffffffffffffffffffffffffffffffff85168452825280832033845290915290205460ff16915050919050565b6115d9611e30565b82815260c081018290526109f1816118c7565b805151602090910151101590565b60208101518151606091610416916116129082611a51565b8451919063ffffffff611a9816565b60a081015160c082015182516060926104169281900363ffffffff611a9816565b600081518351148015610c235750610c238360008460008751611afa565b600087815260036020908152604090912054875191880191909120606061168e87878763ffffffff611a9816565b905083156117a85760008a81526004602090815260408083208684528252808320858452825280832061ffff8c16845290915290205460026000196101006001841615020190911604156117335760008a81526005602090815260408083208684528252808320858452909152902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000811661ffff918216600019019091161790555b60008a81526004602090815260408083208684528252808320858452825280832061ffff8c168452909152812061176991611f85565b897f03528ed0c2a3ebc993b12ce3c16bb382f9c7d88ef7d8a1bf290eaf35955a12078a8a60405161179b929190612798565b60405180910390a26118bb565b60008a81526004602090815260408083208684528252808320858452825280832061ffff8c168452909152902054600260001961010060018416150201909116046118425760008a815260056020908152604080832086845282528083208584529091529020805461ffff808216600101167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00009091161790555b60008a81526004602090815260408083208684528252808320858452825280832061ffff8c1684528252909120825161187d92840190611f17565b50897f52a608b3303a48862d07a73d82fa221318c0027fbbcfb1b2329bface3f19ff2b8a8a846040516118b2939291906127b8565b60405180910390a25b50505050505050505050565b60c081015160208201819052815151116118e057611997565b60006118f482600001518360200151611a51565b602083015183519101915061190f908263ffffffff611b1d16565b61ffff166040830152815160029190910190611931908263ffffffff611b1d16565b61ffff166060830152815160029190910190611953908263ffffffff611b3d16565b63ffffffff908116608084015282516004929092019160009161197991908490611b1d16565b600283810160a086015261ffff9190911690920190910160c0830152505b50565b600081516014146119aa57600080fd5b50602001516c01000000000000000000000000900490565b6040805160148082528183019092526060916020820181803883395050506c010000000000000000000000009290920260208301525090565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f691f3431000000000000000000000000000000000000000000000000000000001480610416575061041682611b5f565b6000815b83518110611a5f57fe5b6000611a71858363ffffffff611bc416565b60ff1691820160010191905080611a885750611a8e565b50611a55565b9190910392915050565b606083518284011115611aaa57600080fd5b6060826040519080825280601f01601f191660200182016040528015611ad7576020820181803883390190505b50905060208082019086860101611aef828287611be2565b509095945050505050565b6000611b07848484611c3e565b611b12878785611c3e565b149695505050505050565b60008251826002011115611b3057600080fd5b50016002015161ffff1690565b60008251826004011115611b5057600080fd5b50016004015163ffffffff1690565b6000604051611b6d906126f8565b60405180910390207bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610416575061041682611c5a565b6000828281518110611bd257fe5b016020015160f81c905092915050565b5b60208110611c205781518352602092830192909101907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe001611be3565b905182516020929092036101000a6000190180199091169116179052565b600083518284011115611c5057600080fd5b5091016020012090565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167fa8fa568200000000000000000000000000000000000000000000000000000000148061041657506104168260007fffffffff0000000000000000000000000000000000000000000000000000000082167fbc1c58d100000000000000000000000000000000000000000000000000000000148061041657506104168260007fffffffff0000000000000000000000000000000000000000000000000000000082167f3b3b57de000000000000000000000000000000000000000000000000000000001480611d8f57507fffffffff0000000000000000000000000000000000000000000000000000000082167ff1cb7e0600000000000000000000000000000000000000000000000000000000145b8061041657506104168260007fffffffff0000000000000000000000000000000000000000000000000000000082167f2203ab5600000000000000000000000000000000000000000000000000000000148061041657507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831614610416565b6040518060e001604052806060815260200160008152602001600061ffff168152602001600061ffff168152602001600063ffffffff16815260200160008152602001600081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611eda578280017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00823516178555611f07565b82800160010185558215611f07579182015b82811115611f07578235825591602001919060010190611eec565b50611f13929150611fc5565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611f5857805160ff1916838001178555611f07565b82800160010185558215611f07579182015b82811115611f07578251825591602001919060010190611f6a565b50805460018160011615610100020316600290046000825580601f10611fab5750611997565b601f01602090049060005260206000209081019061199791905b611fdf91905b80821115611f135760008155600101611fcb565b90565b80356109f18161295d565b80516109f18161295d565b60008083601f84011261200a57600080fd5b50813567ffffffffffffffff81111561202257600080fd5b602083019150836020820283011115610b0f57600080fd5b80356109f181612971565b80356109f18161297a565b80356109f181612983565b60008083601f84011261206d57600080fd5b50813567ffffffffffffffff81111561208557600080fd5b602083019150836001820283011115610b0f57600080fd5b600082601f8301126120ae57600080fd5b81356120c16120bc8261283a565b612813565b915080825260208301602083018583830111156120dd57600080fd5b6120e88382846128f9565b50505092915050565b80356109f18161298c565b60006020828403121561210e57600080fd5b600061211a8484611fed565b949350505050565b6000806020838503121561213557600080fd5b823567ffffffffffffffff81111561214c57600080fd5b61215885828601611ff8565b92509250509250929050565b60006020828403121561217657600080fd5b600061211a8484612045565b6000806040838503121561219557600080fd5b60006121a18585612045565b92505060206121b285828601611fe2565b9150509250929050565b6000806000606084860312156121d157600080fd5b60006121dd8686612045565b93505060206121ee86828701611fe2565b92505060406121ff86828701611fe2565b9150509250925092565b60008060006060848603121561221e57600080fd5b600061222a8686612045565b935050602061223b86828701611fe2565b92505060406121ff8682870161203a565b6000806040838503121561225f57600080fd5b600061226b8585612045565b92505060206121b285828601612045565b60008060006060848603121561229157600080fd5b600061229d8686612045565b93505060206122ae86828701612045565b92505060406121ff86828701612045565b6000806000606084860312156122d457600080fd5b60006122e08686612045565b93505060206122f186828701612045565b92505060406121ff868287016120f1565b6000806040838503121561231557600080fd5b60006123218585612045565b92505060206121b285828601612050565b60008060006060848603121561234757600080fd5b60006123538686612045565b93505060206121ee86828701612050565b60008060006040848603121561237957600080fd5b60006123858686612045565b935050602084013567ffffffffffffffff8111156123a257600080fd5b6123ae8682870161205b565b92509250509250925092565b6000806000806000606086880312156123d257600080fd5b60006123de8888612045565b955050602086013567ffffffffffffffff8111156123fb57600080fd5b6124078882890161205b565b9450945050604086013567ffffffffffffffff81111561242657600080fd5b6124328882890161205b565b92509250509295509295909350565b6000806000806060858703121561245757600080fd5b60006124638787612045565b945050602061247487828801612045565b935050604085013567ffffffffffffffff81111561249157600080fd5b61249d8782880161205b565b95989497509550505050565b6000806000606084860312156124be57600080fd5b60006124ca8686612045565b93505060206124db86828701612045565b925050604084013567ffffffffffffffff8111156124f857600080fd5b6121ff8682870161209d565b60006020828403121561251657600080fd5b600061211a8484612050565b6000610c23838361261a565b612537816128e8565b82525050565b61253781612893565b600061255182612886565b61255b818561288a565b93508360208202850161256d85612880565b8060005b858110156125a7578484038952815161258a8582612522565b945061259583612880565b60209a909a0199925050600101612571565b5091979650505050505050565b6125378161289e565b61253781611fdf565b612537816128a3565b60006125db838561288a565b93506125e88385846128f9565b6125f183612935565b9093019392505050565b60006126078385610419565b93506126148385846128f9565b50500190565b600061262582612886565b61262f818561288a565b935061263f818560208601612905565b6125f181612935565b600061265382612886565b61265d8185610419565b935061266d818560208601612905565b9290920192915050565b6000612684602483610419565b7f696e74657266616365496d706c656d656e74657228627974657333322c62797481527f6573342900000000000000000000000000000000000000000000000000000000602082015260240192915050565b612537816128c8565b600061211a8284866125fb565b6000610c238284612648565b60006109f182612677565b602081016109f1828461253d565b602081016109f1828461252e565b60208082528101610c238184612546565b602081016109f182846125b4565b602081016109f182846125bd565b6040810161275a82856125bd565b610c2360208301846125bd565b602081016109f182846125c6565b6020808252810161211a8184866125cf565b60208082528101610c23818461261a565b604080825281016127a9818561261a565b9050610c2360208301846126d6565b606080825281016127c9818661261a565b90506127d860208301856126d6565b81810360408301526127ea818461261a565b95945050505050565b6040810161280182856125bd565b818103602083015261211a818461261a565b60405181810167ffffffffffffffff8111828210171561283257600080fd5b604052919050565b600067ffffffffffffffff82111561285157600080fd5b506020601f919091017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0160190565b60200190565b5190565b90815260200190565b6000610416826128cf565b151590565b7fffffffff000000000000000000000000000000000000000000000000000000001690565b61ffff1690565b73ffffffffffffffffffffffffffffffffffffffff1690565b600061041682600061041682612893565b82818337506000910152565b60005b83811015612920578181015183820152602001612908565b8381111561292f576000848401525b50505050565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01690565b61296681612893565b811461199757600080fd5b6129668161289e565b61296681611fdf565b612966816128a3565b612966816128c856fea365627a7a7231582082927c55ed80cd2c2b4af3ecca0340c755f0257fadbdd76a4c4b6458f1c8eefc6c6578706572696d656e74616cf564736f6c63430005110040",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x198 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x691F3431 GT PUSH2 0xE3 JUMPI DUP1 PUSH4 0xBC1C58D1 GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xE59D895D GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xE59D895D EQ PUSH2 0x387 JUMPI DUP1 PUSH4 0xF1CB7E06 EQ PUSH2 0x39A JUMPI DUP1 PUSH4 0xF86BC879 EQ PUSH2 0x3AD JUMPI PUSH2 0x198 JUMP JUMPDEST DUP1 PUSH4 0xBC1C58D1 EQ PUSH2 0x340 JUMPI DUP1 PUSH4 0xC8690233 EQ PUSH2 0x353 JUMPI DUP1 PUSH4 0xD5FA2B00 EQ PUSH2 0x374 JUMPI PUSH2 0x198 JUMP JUMPDEST DUP1 PUSH4 0xA8FA5682 GT PUSH2 0xBD JUMPI DUP1 PUSH4 0xA8FA5682 EQ PUSH2 0x2FA JUMPI DUP1 PUSH4 0xAC9650D8 EQ PUSH2 0x30D JUMPI DUP1 PUSH4 0xAD5780AF EQ PUSH2 0x32D JUMPI PUSH2 0x198 JUMP JUMPDEST DUP1 PUSH4 0x691F3431 EQ PUSH2 0x2C1 JUMPI DUP1 PUSH4 0x77372213 EQ PUSH2 0x2D4 JUMPI DUP1 PUSH4 0x8B95DD71 EQ PUSH2 0x2E7 JUMPI PUSH2 0x198 JUMP JUMPDEST DUP1 PUSH4 0x304E6ADE GT PUSH2 0x145 JUMPI DUP1 PUSH4 0x4CBF6BA4 GT PUSH2 0x11F JUMPI DUP1 PUSH4 0x4CBF6BA4 EQ PUSH2 0x27B JUMPI DUP1 PUSH4 0x59D1D43C EQ PUSH2 0x28E JUMPI DUP1 PUSH4 0x623195B0 EQ PUSH2 0x2AE JUMPI PUSH2 0x198 JUMP JUMPDEST DUP1 PUSH4 0x304E6ADE EQ PUSH2 0x242 JUMPI DUP1 PUSH4 0x3B3B57DE EQ PUSH2 0x255 JUMPI DUP1 PUSH4 0x3E9CE794 EQ PUSH2 0x268 JUMPI PUSH2 0x198 JUMP JUMPDEST DUP1 PUSH4 0x124A319C GT PUSH2 0x176 JUMPI DUP1 PUSH4 0x124A319C EQ PUSH2 0x1EE JUMPI DUP1 PUSH4 0x2203AB56 EQ PUSH2 0x20E JUMPI DUP1 PUSH4 0x29CD62EA EQ PUSH2 0x22F JUMPI PUSH2 0x198 JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x19D JUMPI DUP1 PUSH4 0xAF179D7 EQ PUSH2 0x1C6 JUMPI DUP1 PUSH4 0x10F13A8C EQ PUSH2 0x1DB JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1B0 PUSH2 0x1AB CALLDATASIZE PUSH1 0x4 PUSH2 0x2504 JUMP JUMPDEST PUSH2 0x3C0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1BD SWAP2 SWAP1 PUSH2 0x2730 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D9 PUSH2 0x1D4 CALLDATASIZE PUSH1 0x4 PUSH2 0x2364 JUMP JUMPDEST PUSH2 0x41E JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1D9 PUSH2 0x1E9 CALLDATASIZE PUSH1 0x4 PUSH2 0x23BA JUMP JUMPDEST PUSH2 0x60B JUMP JUMPDEST PUSH2 0x201 PUSH2 0x1FC CALLDATASIZE PUSH1 0x4 PUSH2 0x2302 JUMP JUMPDEST PUSH2 0x6B8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1BD SWAP2 SWAP1 PUSH2 0x2703 JUMP JUMPDEST PUSH2 0x221 PUSH2 0x21C CALLDATASIZE PUSH1 0x4 PUSH2 0x224C JUMP JUMPDEST PUSH2 0x9F7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1BD SWAP3 SWAP2 SWAP1 PUSH2 0x27F3 JUMP JUMPDEST PUSH2 0x1D9 PUSH2 0x23D CALLDATASIZE PUSH1 0x4 PUSH2 0x227C JUMP JUMPDEST PUSH2 0xB16 JUMP JUMPDEST PUSH2 0x1D9 PUSH2 0x250 CALLDATASIZE PUSH1 0x4 PUSH2 0x2364 JUMP JUMPDEST PUSH2 0xB96 JUMP JUMPDEST PUSH2 0x201 PUSH2 0x263 CALLDATASIZE PUSH1 0x4 PUSH2 0x2164 JUMP JUMPDEST PUSH2 0xBF5 JUMP JUMPDEST PUSH2 0x1D9 PUSH2 0x276 CALLDATASIZE PUSH1 0x4 PUSH2 0x2209 JUMP JUMPDEST PUSH2 0xC2A JUMP JUMPDEST PUSH2 0x1B0 PUSH2 0x289 CALLDATASIZE PUSH1 0x4 PUSH2 0x224C JUMP JUMPDEST PUSH2 0xCCF JUMP JUMPDEST PUSH2 0x2A1 PUSH2 0x29C CALLDATASIZE PUSH1 0x4 PUSH2 0x2364 JUMP JUMPDEST PUSH2 0xD01 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1BD SWAP2 SWAP1 PUSH2 0x2787 JUMP JUMPDEST PUSH2 0x1D9 PUSH2 0x2BC CALLDATASIZE PUSH1 0x4 PUSH2 0x2441 JUMP JUMPDEST PUSH2 0xDC3 JUMP JUMPDEST PUSH2 0x2A1 PUSH2 0x2CF CALLDATASIZE PUSH1 0x4 PUSH2 0x2164 JUMP JUMPDEST PUSH2 0xE3E JUMP JUMPDEST PUSH2 0x1D9 PUSH2 0x2E2 CALLDATASIZE PUSH1 0x4 PUSH2 0x2364 JUMP JUMPDEST PUSH2 0xEDF JUMP JUMPDEST PUSH2 0x1D9 PUSH2 0x2F5 CALLDATASIZE PUSH1 0x4 PUSH2 0x24A9 JUMP JUMPDEST PUSH2 0xF3E JUMP JUMPDEST PUSH2 0x2A1 PUSH2 0x308 CALLDATASIZE PUSH1 0x4 PUSH2 0x22BF JUMP JUMPDEST PUSH2 0x1003 JUMP JUMPDEST PUSH2 0x320 PUSH2 0x31B CALLDATASIZE PUSH1 0x4 PUSH2 0x2122 JUMP JUMPDEST PUSH2 0x1090 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1BD SWAP2 SWAP1 PUSH2 0x271F JUMP JUMPDEST PUSH2 0x1D9 PUSH2 0x33B CALLDATASIZE PUSH1 0x4 PUSH2 0x2164 JUMP JUMPDEST PUSH2 0x11D4 JUMP JUMPDEST PUSH2 0x2A1 PUSH2 0x34E CALLDATASIZE PUSH1 0x4 PUSH2 0x2164 JUMP JUMPDEST PUSH2 0x1227 JUMP JUMPDEST PUSH2 0x366 PUSH2 0x361 CALLDATASIZE PUSH1 0x4 PUSH2 0x2164 JUMP JUMPDEST PUSH2 0x128F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1BD SWAP3 SWAP2 SWAP1 PUSH2 0x274C JUMP JUMPDEST PUSH2 0x1D9 PUSH2 0x382 CALLDATASIZE PUSH1 0x4 PUSH2 0x2182 JUMP JUMPDEST PUSH2 0x12A9 JUMP JUMPDEST PUSH2 0x1D9 PUSH2 0x395 CALLDATASIZE PUSH1 0x4 PUSH2 0x2332 JUMP JUMPDEST PUSH2 0x12D0 JUMP JUMPDEST PUSH2 0x2A1 PUSH2 0x3A8 CALLDATASIZE PUSH1 0x4 PUSH2 0x224C JUMP JUMPDEST PUSH2 0x139D JUMP JUMPDEST PUSH2 0x1B0 PUSH2 0x3BB CALLDATASIZE PUSH1 0x4 PUSH2 0x21BC JUMP JUMPDEST PUSH2 0x1446 JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND PUSH32 0x59D1D43C00000000000000000000000000000000000000000000000000000000 EQ DUP1 PUSH2 0x416 JUMPI POP PUSH2 0x416 DUP3 PUSH2 0x146C JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 PUSH2 0x428 DUP2 PUSH2 0x14C2 JUMP JUMPDEST PUSH2 0x431 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP1 DUP3 PUSH2 0x440 PUSH2 0x1E30 JUMP JUMPDEST PUSH2 0x48A PUSH1 0x0 DUP11 DUP11 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP SWAP3 SWAP4 SWAP3 POP POP PUSH4 0xFFFFFFFF PUSH2 0x15D1 AND SWAP1 POP JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH2 0x496 DUP2 PUSH2 0x15EC JUMP JUMPDEST PUSH2 0x5AE JUMPI PUSH2 0xFFFF DUP7 AND PUSH2 0x4EE JUMPI DUP1 PUSH1 0x40 ADD MLOAD SWAP6 POP PUSH2 0x4B3 DUP2 PUSH2 0x15FA JUMP JUMPDEST SWAP4 POP DUP4 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x4C6 SWAP2 SWAP1 PUSH2 0x26EC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP2 POP PUSH2 0x4E7 DUP2 PUSH2 0x1621 JUMP JUMPDEST SWAP3 POP PUSH2 0x5A0 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x4F9 DUP3 PUSH2 0x15FA JUMP JUMPDEST SWAP1 POP DUP2 PUSH1 0x40 ADD MLOAD PUSH2 0xFFFF AND DUP8 PUSH2 0xFFFF AND EQ ISZERO DUP1 PUSH2 0x523 JUMPI POP PUSH2 0x521 DUP6 DUP3 PUSH4 0xFFFFFFFF PUSH2 0x1642 AND JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x59E JUMPI PUSH2 0x577 DUP12 DUP7 DUP10 DUP14 DUP14 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP POP POP POP PUSH1 0x20 DUP8 ADD MLOAD DUP10 MLOAD DUP13 SWAP2 DUP3 SWAP1 SUB SWAP1 ISZERO PUSH2 0x1660 JUMP JUMPDEST DUP2 PUSH1 0x40 ADD MLOAD SWAP7 POP DUP2 PUSH1 0x20 ADD MLOAD SWAP6 POP DUP1 SWAP5 POP DUP5 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP3 POP PUSH2 0x59B DUP3 PUSH2 0x1621 JUMP JUMPDEST SWAP4 POP JUMPDEST POP JUMPDEST PUSH2 0x5A9 DUP2 PUSH2 0x18C7 JUMP JUMPDEST PUSH2 0x48D JUMP JUMPDEST POP DUP3 MLOAD ISZERO PUSH2 0x600 JUMPI PUSH2 0x600 DUP10 DUP5 DUP8 DUP12 DUP12 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP POP DUP9 MLOAD DUP12 SWAP3 POP DUP3 DUP16 SUB SWAP2 POP ISZERO PUSH2 0x1660 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP5 PUSH2 0x615 DUP2 PUSH2 0x14C2 JUMP JUMPDEST PUSH2 0x61E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP3 PUSH1 0x9 PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP8 DUP8 PUSH1 0x40 MLOAD PUSH2 0x643 SWAP3 SWAP2 SWAP1 PUSH2 0x26DF JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 KECCAK256 PUSH2 0x65D SWAP3 SWAP1 SWAP2 PUSH2 0x1E7B JUMP JUMPDEST POP DUP5 DUP5 PUSH1 0x40 MLOAD PUSH2 0x66E SWAP3 SWAP2 SWAP1 PUSH2 0x26DF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP7 PUSH32 0xD8C9334B1A9C2F9DA342A0A2B32629C1A229B6445DAD78947F674B44444A7550 DUP8 DUP8 PUSH1 0x40 MLOAD PUSH2 0x6A8 SWAP3 SWAP2 SWAP1 PUSH2 0x2775 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP1 ISZERO PUSH2 0x717 JUMPI SWAP1 POP PUSH2 0x9F1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x722 DUP6 PUSH2 0xBF5 JUMP JUMPDEST SWAP1 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x74A JUMPI PUSH1 0x0 SWAP3 POP POP POP PUSH2 0x9F1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x77D SWAP2 SWAP1 PUSH2 0x2767 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 OR SWAP1 MSTORE MLOAD PUSH2 0x7FE SWAP2 SWAP1 PUSH2 0x26EC JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x839 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x83E JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO DUP1 PUSH2 0x851 JUMPI POP PUSH1 0x20 DUP2 MLOAD LT JUMPDEST DUP1 PUSH2 0x88D JUMPI POP DUP1 PUSH1 0x1F DUP2 MLOAD DUP2 LT PUSH2 0x864 JUMPI INVALID JUMPDEST ADD PUSH1 0x20 ADD MLOAD PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 AND ISZERO JUMPDEST ISZERO PUSH2 0x89F JUMPI PUSH1 0x0 SWAP5 POP POP POP POP POP PUSH2 0x9F1 JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x8C7 SWAP2 SWAP1 PUSH2 0x2767 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 OR SWAP1 MSTORE MLOAD PUSH2 0x948 SWAP2 SWAP1 PUSH2 0x26EC JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x983 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x988 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP DUP2 ISZERO DUP1 PUSH2 0x99C JUMPI POP PUSH1 0x20 DUP2 MLOAD LT JUMPDEST DUP1 PUSH2 0x9D8 JUMPI POP DUP1 PUSH1 0x1F DUP2 MLOAD DUP2 LT PUSH2 0x9AF JUMPI INVALID JUMPDEST ADD PUSH1 0x20 ADD MLOAD PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 AND ISZERO JUMPDEST ISZERO PUSH2 0x9EA JUMPI PUSH1 0x0 SWAP5 POP POP POP POP POP PUSH2 0x9F1 JUMP JUMPDEST POP SWAP1 SWAP3 POP POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x60 SWAP1 PUSH1 0x1 JUMPDEST DUP5 DUP2 GT PUSH2 0xAF8 JUMPI DUP1 DUP6 AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0xA43 JUMPI POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP4 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x2 PUSH1 0x0 NOT PUSH2 0x100 PUSH1 0x1 DUP5 AND ISZERO MUL ADD SWAP1 SWAP2 AND DIV ISZERO ISZERO JUMPDEST ISZERO PUSH2 0xAF0 JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP4 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD DUP4 MLOAD PUSH1 0x1F PUSH1 0x2 PUSH1 0x0 NOT PUSH2 0x100 PUSH1 0x1 DUP7 AND ISZERO MUL ADD SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 DIV SWAP2 DUP3 ADD DUP5 SWAP1 DIV DUP5 MUL DUP2 ADD DUP5 ADD SWAP1 SWAP5 MSTORE DUP1 DUP5 MSTORE DUP5 SWAP4 SWAP2 SWAP3 DUP4 SWAP2 SWAP1 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0xADE JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xAB3 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xADE JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xAC1 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP4 POP SWAP4 POP POP POP PUSH2 0xB0F JUMP JUMPDEST PUSH1 0x1 SHL PUSH2 0xA0B JUMP JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE SWAP3 POP SWAP1 POP JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST DUP3 PUSH2 0xB20 DUP2 PUSH2 0x14C2 JUMP JUMPDEST PUSH2 0xB29 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE DUP5 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD DUP6 DUP2 MSTORE PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x8 SWAP1 SWAP3 MSTORE SWAP1 DUP4 SWAP1 KECCAK256 SWAP2 MLOAD DUP3 SSTORE MLOAD PUSH1 0x1 SWAP1 SWAP2 ADD SSTORE MLOAD DUP5 SWAP1 PUSH32 0x1D6F5E03D3F63EB58751986629A5439BAEE5079FF04F345BECB66E23EB154E46 SWAP1 PUSH2 0xB88 SWAP1 DUP7 SWAP1 DUP7 SWAP1 PUSH2 0x274C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP JUMP JUMPDEST DUP3 PUSH2 0xBA0 DUP2 PUSH2 0x14C2 JUMP JUMPDEST PUSH2 0xBA9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0xBC2 SWAP1 DUP5 DUP5 PUSH2 0x1E7B JUMP JUMPDEST POP DUP4 PUSH32 0xE379C1624ED7E714CC0937528A32359D69D5281337765313DBA4E081B72D7578 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH2 0xB88 SWAP3 SWAP2 SWAP1 PUSH2 0x2775 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH2 0xC04 DUP4 PUSH1 0x3C PUSH2 0x139D JUMP JUMPDEST SWAP1 POP DUP1 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0xC1A JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x419 JUMP JUMPDEST PUSH2 0xC23 DUP2 PUSH2 0x199A JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE DUP2 DUP5 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND DUP1 DUP7 MSTORE SWAP4 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND DUP6 ISZERO ISZERO OR SWAP1 SSTORE MLOAD SWAP1 SWAP2 SWAP1 DUP6 SWAP1 PUSH32 0xE1C5610A6E0CBE10764ECD182ADCEF1EC338DC4E199C99C32CE98F38E12791DF SWAP1 PUSH2 0xCC2 SWAP1 DUP7 SWAP1 PUSH2 0x2730 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH1 0x3 DUP4 MSTORE DUP2 DUP6 KECCAK256 SLOAD DUP6 MSTORE DUP3 MSTORE DUP1 DUP5 KECCAK256 SWAP3 DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 SLOAD PUSH2 0xFFFF AND ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x9 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH2 0xD26 SWAP3 SWAP2 SWAP1 PUSH2 0x26DF JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 SWAP3 DUP2 SWAP1 SUB DUP4 ADD DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x2 PUSH1 0x1 DUP3 AND ISZERO PUSH2 0x100 MUL PUSH1 0x0 NOT ADD SWAP1 SWAP2 AND DIV PUSH1 0x1F DUP2 ADD DUP6 SWAP1 DIV DUP6 MUL DUP4 ADD DUP6 ADD SWAP1 SWAP4 MSTORE DUP3 DUP3 MSTORE SWAP1 SWAP3 SWAP1 SWAP2 SWAP1 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0xDB5 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xD8A JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xDB5 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xD98 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP4 PUSH2 0xDCD DUP2 PUSH2 0x14C2 JUMP JUMPDEST PUSH2 0xDD6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 NOT DUP5 ADD DUP5 AND ISZERO PUSH2 0xDE7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP8 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 PUSH2 0xE09 SWAP1 DUP5 DUP5 PUSH2 0x1E7B JUMP JUMPDEST POP PUSH1 0x40 MLOAD DUP5 SWAP1 DUP7 SWAP1 PUSH32 0xAA121BBEEF5F32F5961A2A28966E769023910FC9479059EE3495D4C1A696EFE3 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD DUP4 MLOAD PUSH1 0x1F PUSH1 0x2 PUSH1 0x0 NOT PUSH2 0x100 PUSH1 0x1 DUP7 AND ISZERO MUL ADD SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 DIV SWAP2 DUP3 ADD DUP5 SWAP1 DIV DUP5 MUL DUP2 ADD DUP5 ADD SWAP1 SWAP5 MSTORE DUP1 DUP5 MSTORE PUSH1 0x60 SWAP4 SWAP3 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0xED3 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xEA8 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xED3 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xEB6 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 PUSH2 0xEE9 DUP2 PUSH2 0x14C2 JUMP JUMPDEST PUSH2 0xEF2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0xF0B SWAP1 DUP5 DUP5 PUSH2 0x1E7B JUMP JUMPDEST POP DUP4 PUSH32 0xB7D29E911041E8D9B843369E890BCB72C9388692BA48B65AC54E7214C4C348F7 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH2 0xB88 SWAP3 SWAP2 SWAP1 PUSH2 0x2775 JUMP JUMPDEST DUP3 PUSH2 0xF48 DUP2 PUSH2 0x14C2 JUMP JUMPDEST PUSH2 0xF51 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 PUSH32 0x65412581168E88A1E60C6459D7F44AE83AD0832E670826C05A4E2476B57AF752 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH2 0xF83 SWAP3 SWAP2 SWAP1 PUSH2 0x27F3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH1 0x3C DUP4 EQ ISZERO PUSH2 0xFD5 JUMPI DUP4 PUSH32 0x52D7D861F09AB3D26239D492E8968629F95E9E318CF0B73BFDDC441522A15FD2 PUSH2 0xFBF DUP5 PUSH2 0x199A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xFCC SWAP2 SWAP1 PUSH2 0x2711 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP7 DUP5 MSTORE DUP3 MSTORE SWAP1 SWAP2 KECCAK256 DUP4 MLOAD PUSH2 0xFFC SWAP3 DUP6 ADD SWAP1 PUSH2 0x1F17 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x3 DUP4 MSTORE DUP2 DUP5 KECCAK256 SLOAD DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP6 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 PUSH2 0xFFFF DUP6 AND DUP5 MSTORE DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD DUP4 MLOAD PUSH1 0x1F PUSH1 0x2 PUSH1 0x0 NOT PUSH2 0x100 PUSH1 0x1 DUP7 AND ISZERO MUL ADD SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 DIV SWAP2 DUP3 ADD DUP5 SWAP1 DIV DUP5 MUL DUP2 ADD DUP5 ADD SWAP1 SWAP5 MSTORE DUP1 DUP5 MSTORE PUSH1 0x60 SWAP4 SWAP3 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0xDB5 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xD8A JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xDB5 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP3 DUP2 MSTORE PUSH1 0x20 DUP1 DUP5 MUL DUP3 ADD ADD SWAP1 SWAP2 MSTORE PUSH1 0x60 SWAP1 DUP3 DUP1 ISZERO PUSH2 0x10C6 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x10B1 JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x11CD JUMPI PUSH1 0x0 PUSH1 0x60 ADDRESS DUP7 DUP7 DUP6 DUP2 DUP2 LT PUSH2 0x10E5 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL DUP3 ADD SWAP1 POP DUP1 CALLDATALOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE1 CALLDATASIZE DUP5 SWAP1 SUB ADD DUP2 SLT PUSH2 0x111F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP2 ADD PUSH1 0x20 DUP2 ADD SWAP2 POP CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x113E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLDATASIZE DUP2 SWAP1 SUB DUP3 SGT ISZERO PUSH2 0x114E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x115C SWAP3 SWAP2 SWAP1 PUSH2 0x26DF JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1197 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x119C JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0x11AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x11B8 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP PUSH1 0x1 ADD PUSH2 0x10CC JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 PUSH2 0x11DE DUP2 PUSH2 0x14C2 JUMP JUMPDEST PUSH2 0x11E7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE MLOAD DUP4 SWAP2 PUSH32 0xB757169B8492CA2F1C6619D9D76CE22803035C3B1D5F6930DFFE7B127C1A1983 SWAP2 LOG2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 SWAP3 DUP4 SWAP1 KECCAK256 DUP1 SLOAD DUP5 MLOAD PUSH1 0x1 DUP3 AND ISZERO PUSH2 0x100 MUL PUSH1 0x0 NOT ADD SWAP1 SWAP2 AND SWAP4 SWAP1 SWAP4 DIV PUSH1 0x1F DUP2 ADD DUP4 SWAP1 DIV DUP4 MUL DUP5 ADD DUP4 ADD SWAP1 SWAP5 MSTORE DUP4 DUP4 MSTORE PUSH1 0x60 SWAP4 SWAP1 SWAP2 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0xED3 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xEA8 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xED3 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP1 SWAP2 ADD SLOAD SWAP1 SWAP2 JUMP JUMPDEST DUP2 PUSH2 0x12B3 DUP2 PUSH2 0x14C2 JUMP JUMPDEST PUSH2 0x12BC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x12CB DUP4 PUSH1 0x3C PUSH2 0x2F5 DUP6 PUSH2 0x19C2 JUMP JUMPDEST POP POP POP JUMP JUMPDEST DUP3 PUSH2 0x12DA DUP2 PUSH2 0x14C2 JUMP JUMPDEST PUSH2 0x12E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP8 AND DUP1 DUP6 MSTORE SWAP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND OR SWAP1 SSTORE SWAP1 MLOAD DUP6 SWAP1 PUSH32 0x7C69F06BEA0BDEF565B709E93A147836B0063BA2DD89F02D0B7E8D931E6A6DAA SWAP1 PUSH2 0x138F SWAP1 DUP7 SWAP1 PUSH2 0x2703 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 DUP6 DUP6 MSTORE DUP3 MSTORE SWAP3 DUP4 SWAP1 KECCAK256 DUP1 SLOAD DUP5 MLOAD PUSH1 0x2 SWAP5 DUP3 AND ISZERO PUSH2 0x100 MUL PUSH1 0x0 NOT ADD SWAP1 SWAP2 AND SWAP4 SWAP1 SWAP4 DIV PUSH1 0x1F DUP2 ADD DUP4 SWAP1 DIV DUP4 MUL DUP5 ADD DUP4 ADD SWAP1 SWAP5 MSTORE DUP4 DUP4 MSTORE PUSH1 0x60 SWAP4 SWAP1 SWAP2 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x1439 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x140E JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1439 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x141C JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0xB PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP4 DUP5 MSTORE PUSH1 0x40 DUP1 DUP6 KECCAK256 DUP3 MSTORE SWAP3 DUP5 MSTORE DUP3 DUP5 KECCAK256 SWAP1 MSTORE DUP3 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND PUSH32 0xC869023300000000000000000000000000000000000000000000000000000000 EQ DUP1 PUSH2 0x416 JUMPI POP PUSH2 0x416 DUP3 PUSH2 0x19FB JUMP JUMPDEST PUSH1 0xA SLOAD PUSH1 0x40 MLOAD PUSH32 0x2571BE300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x0 SWAP2 DUP3 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0x2571BE3 SWAP1 PUSH2 0x151D SWAP1 DUP7 SWAP1 PUSH1 0x4 ADD PUSH2 0x273E JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1535 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1549 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x156D SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x20FC JUMP JUMPDEST SWAP1 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND CALLER EQ DUP1 PUSH2 0xC23 JUMPI POP PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x15D9 PUSH2 0x1E30 JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0xC0 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x9F1 DUP2 PUSH2 0x18C7 JUMP JUMPDEST DUP1 MLOAD MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD MLOAD LT ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD DUP2 MLOAD PUSH1 0x60 SWAP2 PUSH2 0x416 SWAP2 PUSH2 0x1612 SWAP1 DUP3 PUSH2 0x1A51 JUMP JUMPDEST DUP5 MLOAD SWAP2 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x1A98 AND JUMP JUMPDEST PUSH1 0xA0 DUP2 ADD MLOAD PUSH1 0xC0 DUP3 ADD MLOAD DUP3 MLOAD PUSH1 0x60 SWAP3 PUSH2 0x416 SWAP3 DUP2 SWAP1 SUB PUSH4 0xFFFFFFFF PUSH2 0x1A98 AND JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP4 MLOAD EQ DUP1 ISZERO PUSH2 0xC23 JUMPI POP PUSH2 0xC23 DUP4 PUSH1 0x0 DUP5 PUSH1 0x0 DUP8 MLOAD PUSH2 0x1AFA JUMP JUMPDEST PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 SLOAD DUP8 MLOAD SWAP2 DUP9 ADD SWAP2 SWAP1 SWAP2 KECCAK256 PUSH1 0x60 PUSH2 0x168E DUP8 DUP8 DUP8 PUSH4 0xFFFFFFFF PUSH2 0x1A98 AND JUMP JUMPDEST SWAP1 POP DUP4 ISZERO PUSH2 0x17A8 JUMPI PUSH1 0x0 DUP11 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP7 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP6 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 PUSH2 0xFFFF DUP13 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0x2 PUSH1 0x0 NOT PUSH2 0x100 PUSH1 0x1 DUP5 AND ISZERO MUL ADD SWAP1 SWAP2 AND DIV ISZERO PUSH2 0x1733 JUMPI PUSH1 0x0 DUP11 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP7 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP6 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000 DUP2 AND PUSH2 0xFFFF SWAP2 DUP3 AND PUSH1 0x0 NOT ADD SWAP1 SWAP2 AND OR SWAP1 SSTORE JUMPDEST PUSH1 0x0 DUP11 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP7 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP6 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 PUSH2 0xFFFF DUP13 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 PUSH2 0x1769 SWAP2 PUSH2 0x1F85 JUMP JUMPDEST DUP10 PUSH32 0x3528ED0C2A3EBC993B12CE3C16BB382F9C7D88EF7D8A1BF290EAF35955A1207 DUP11 DUP11 PUSH1 0x40 MLOAD PUSH2 0x179B SWAP3 SWAP2 SWAP1 PUSH2 0x2798 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH2 0x18BB JUMP JUMPDEST PUSH1 0x0 DUP11 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP7 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP6 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 PUSH2 0xFFFF DUP13 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0x2 PUSH1 0x0 NOT PUSH2 0x100 PUSH1 0x1 DUP5 AND ISZERO MUL ADD SWAP1 SWAP2 AND DIV PUSH2 0x1842 JUMPI PUSH1 0x0 DUP11 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP7 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP6 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH2 0xFFFF DUP1 DUP3 AND PUSH1 0x1 ADD AND PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000 SWAP1 SWAP2 AND OR SWAP1 SSTORE JUMPDEST PUSH1 0x0 DUP11 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP7 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP6 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 PUSH2 0xFFFF DUP13 AND DUP5 MSTORE DUP3 MSTORE SWAP1 SWAP2 KECCAK256 DUP3 MLOAD PUSH2 0x187D SWAP3 DUP5 ADD SWAP1 PUSH2 0x1F17 JUMP JUMPDEST POP DUP10 PUSH32 0x52A608B3303A48862D07A73D82FA221318C0027FBBCFB1B2329BFACE3F19FF2B DUP11 DUP11 DUP5 PUSH1 0x40 MLOAD PUSH2 0x18B2 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x27B8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0xC0 DUP2 ADD MLOAD PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE DUP2 MLOAD MLOAD GT PUSH2 0x18E0 JUMPI PUSH2 0x1997 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x18F4 DUP3 PUSH1 0x0 ADD MLOAD DUP4 PUSH1 0x20 ADD MLOAD PUSH2 0x1A51 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MLOAD DUP4 MLOAD SWAP2 ADD SWAP2 POP PUSH2 0x190F SWAP1 DUP3 PUSH4 0xFFFFFFFF PUSH2 0x1B1D AND JUMP JUMPDEST PUSH2 0xFFFF AND PUSH1 0x40 DUP4 ADD MSTORE DUP2 MLOAD PUSH1 0x2 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH2 0x1931 SWAP1 DUP3 PUSH4 0xFFFFFFFF PUSH2 0x1B1D AND JUMP JUMPDEST PUSH2 0xFFFF AND PUSH1 0x60 DUP4 ADD MSTORE DUP2 MLOAD PUSH1 0x2 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH2 0x1953 SWAP1 DUP3 PUSH4 0xFFFFFFFF PUSH2 0x1B3D AND JUMP JUMPDEST PUSH4 0xFFFFFFFF SWAP1 DUP2 AND PUSH1 0x80 DUP5 ADD MSTORE DUP3 MLOAD PUSH1 0x4 SWAP3 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x0 SWAP2 PUSH2 0x1979 SWAP2 SWAP1 DUP5 SWAP1 PUSH2 0x1B1D AND JUMP JUMPDEST PUSH1 0x2 DUP4 DUP2 ADD PUSH1 0xA0 DUP7 ADD MSTORE PUSH2 0xFFFF SWAP2 SWAP1 SWAP2 AND SWAP1 SWAP3 ADD SWAP1 SWAP2 ADD PUSH1 0xC0 DUP4 ADD MSTORE POP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD PUSH1 0x14 EQ PUSH2 0x19AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x20 ADD MLOAD PUSH13 0x1000000000000000000000000 SWAP1 DIV SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x14 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP2 PUSH1 0x20 DUP3 ADD DUP2 DUP1 CODESIZE DUP4 CODECOPY POP POP POP PUSH13 0x1000000000000000000000000 SWAP3 SWAP1 SWAP3 MUL PUSH1 0x20 DUP4 ADD MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND PUSH32 0x691F343100000000000000000000000000000000000000000000000000000000 EQ DUP1 PUSH2 0x416 JUMPI POP PUSH2 0x416 DUP3 PUSH2 0x1B5F JUMP JUMPDEST PUSH1 0x0 DUP2 JUMPDEST DUP4 MLOAD DUP2 LT PUSH2 0x1A5F JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH2 0x1A71 DUP6 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x1BC4 AND JUMP JUMPDEST PUSH1 0xFF AND SWAP2 DUP3 ADD PUSH1 0x1 ADD SWAP2 SWAP1 POP DUP1 PUSH2 0x1A88 JUMPI POP PUSH2 0x1A8E JUMP JUMPDEST POP PUSH2 0x1A55 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 SUB SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 MLOAD DUP3 DUP5 ADD GT ISZERO PUSH2 0x1AAA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x60 DUP3 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1AD7 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x20 DUP1 DUP3 ADD SWAP1 DUP7 DUP7 ADD ADD PUSH2 0x1AEF DUP3 DUP3 DUP8 PUSH2 0x1BE2 JUMP JUMPDEST POP SWAP1 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1B07 DUP5 DUP5 DUP5 PUSH2 0x1C3E JUMP JUMPDEST PUSH2 0x1B12 DUP8 DUP8 DUP6 PUSH2 0x1C3E JUMP JUMPDEST EQ SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD DUP3 PUSH1 0x2 ADD GT ISZERO PUSH2 0x1B30 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP ADD PUSH1 0x2 ADD MLOAD PUSH2 0xFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD DUP3 PUSH1 0x4 ADD GT ISZERO PUSH2 0x1B50 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP ADD PUSH1 0x4 ADD MLOAD PUSH4 0xFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD PUSH2 0x1B6D SWAP1 PUSH2 0x26F8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x416 JUMPI POP PUSH2 0x416 DUP3 PUSH2 0x1C5A JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1BD2 JUMPI INVALID JUMPDEST ADD PUSH1 0x20 ADD MLOAD PUSH1 0xF8 SHR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP2 LT PUSH2 0x1C20 JUMPI DUP2 MLOAD DUP4 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP1 SWAP2 ADD SWAP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 ADD PUSH2 0x1BE3 JUMP JUMPDEST SWAP1 MLOAD DUP3 MLOAD PUSH1 0x20 SWAP3 SWAP1 SWAP3 SUB PUSH2 0x100 EXP PUSH1 0x0 NOT ADD DUP1 NOT SWAP1 SWAP2 AND SWAP2 AND OR SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD DUP3 DUP5 ADD GT ISZERO PUSH2 0x1C50 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SWAP2 ADD PUSH1 0x20 ADD KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND PUSH32 0xA8FA568200000000000000000000000000000000000000000000000000000000 EQ DUP1 PUSH2 0x416 JUMPI POP PUSH2 0x416 DUP3 PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND PUSH32 0xBC1C58D100000000000000000000000000000000000000000000000000000000 EQ DUP1 PUSH2 0x416 JUMPI POP PUSH2 0x416 DUP3 PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND PUSH32 0x3B3B57DE00000000000000000000000000000000000000000000000000000000 EQ DUP1 PUSH2 0x1D8F JUMPI POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND PUSH32 0xF1CB7E0600000000000000000000000000000000000000000000000000000000 EQ JUMPDEST DUP1 PUSH2 0x416 JUMPI POP PUSH2 0x416 DUP3 PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND PUSH32 0x2203AB5600000000000000000000000000000000000000000000000000000000 EQ DUP1 PUSH2 0x416 JUMPI POP PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND EQ PUSH2 0x416 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xE0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH2 0xFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH2 0xFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH1 0x1F LT PUSH2 0x1EDA JUMPI DUP3 DUP1 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 DUP3 CALLDATALOAD AND OR DUP6 SSTORE PUSH2 0x1F07 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0x1F07 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x1F07 JUMPI DUP3 CALLDATALOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x1EEC JUMP JUMPDEST POP PUSH2 0x1F13 SWAP3 SWAP2 POP PUSH2 0x1FC5 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH1 0x1F LT PUSH2 0x1F58 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 0x1F07 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0x1F07 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x1F07 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x1F6A JUMP JUMPDEST POP DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV PUSH1 0x0 DUP3 SSTORE DUP1 PUSH1 0x1F LT PUSH2 0x1FAB JUMPI POP PUSH2 0x1997 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1997 SWAP2 SWAP1 JUMPDEST PUSH2 0x1FDF SWAP2 SWAP1 JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x1F13 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x1FCB JUMP JUMPDEST SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x9F1 DUP2 PUSH2 0x295D JUMP JUMPDEST DUP1 MLOAD PUSH2 0x9F1 DUP2 PUSH2 0x295D JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x200A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2022 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 MUL DUP4 ADD GT ISZERO PUSH2 0xB0F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH2 0x9F1 DUP2 PUSH2 0x2971 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x9F1 DUP2 PUSH2 0x297A JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x9F1 DUP2 PUSH2 0x2983 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x206D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2085 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x1 DUP3 MUL DUP4 ADD GT ISZERO PUSH2 0xB0F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x20AE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x20C1 PUSH2 0x20BC DUP3 PUSH2 0x283A JUMP JUMPDEST PUSH2 0x2813 JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP4 ADD DUP6 DUP4 DUP4 ADD GT ISZERO PUSH2 0x20DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x20E8 DUP4 DUP3 DUP5 PUSH2 0x28F9 JUMP JUMPDEST POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x9F1 DUP2 PUSH2 0x298C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x210E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x211A DUP5 DUP5 PUSH2 0x1FED JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2135 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x214C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2158 DUP6 DUP3 DUP7 ADD PUSH2 0x1FF8 JUMP JUMPDEST SWAP3 POP SWAP3 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2176 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x211A DUP5 DUP5 PUSH2 0x2045 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2195 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x21A1 DUP6 DUP6 PUSH2 0x2045 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x21B2 DUP6 DUP3 DUP7 ADD PUSH2 0x1FE2 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x21D1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x21DD DUP7 DUP7 PUSH2 0x2045 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x21EE DUP7 DUP3 DUP8 ADD PUSH2 0x1FE2 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x21FF DUP7 DUP3 DUP8 ADD PUSH2 0x1FE2 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x221E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x222A DUP7 DUP7 PUSH2 0x2045 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x223B DUP7 DUP3 DUP8 ADD PUSH2 0x1FE2 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x21FF DUP7 DUP3 DUP8 ADD PUSH2 0x203A JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x225F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x226B DUP6 DUP6 PUSH2 0x2045 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x21B2 DUP6 DUP3 DUP7 ADD PUSH2 0x2045 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2291 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x229D DUP7 DUP7 PUSH2 0x2045 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x22AE DUP7 DUP3 DUP8 ADD PUSH2 0x2045 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x21FF DUP7 DUP3 DUP8 ADD PUSH2 0x2045 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x22D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x22E0 DUP7 DUP7 PUSH2 0x2045 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x22F1 DUP7 DUP3 DUP8 ADD PUSH2 0x2045 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x21FF DUP7 DUP3 DUP8 ADD PUSH2 0x20F1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2315 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2321 DUP6 DUP6 PUSH2 0x2045 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x21B2 DUP6 DUP3 DUP7 ADD PUSH2 0x2050 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2347 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2353 DUP7 DUP7 PUSH2 0x2045 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x21EE DUP7 DUP3 DUP8 ADD PUSH2 0x2050 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x40 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2379 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2385 DUP7 DUP7 PUSH2 0x2045 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x23A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x23AE DUP7 DUP3 DUP8 ADD PUSH2 0x205B JUMP JUMPDEST SWAP3 POP SWAP3 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x23D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x23DE DUP9 DUP9 PUSH2 0x2045 JUMP JUMPDEST SWAP6 POP POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x23FB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2407 DUP9 DUP3 DUP10 ADD PUSH2 0x205B JUMP JUMPDEST SWAP5 POP SWAP5 POP POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2426 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2432 DUP9 DUP3 DUP10 ADD PUSH2 0x205B JUMP JUMPDEST SWAP3 POP SWAP3 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x2457 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2463 DUP8 DUP8 PUSH2 0x2045 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x2474 DUP8 DUP3 DUP9 ADD PUSH2 0x2045 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2491 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x249D DUP8 DUP3 DUP9 ADD PUSH2 0x205B JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x24BE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x24CA DUP7 DUP7 PUSH2 0x2045 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x24DB DUP7 DUP3 DUP8 ADD PUSH2 0x2045 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x24F8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x21FF DUP7 DUP3 DUP8 ADD PUSH2 0x209D JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2516 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x211A DUP5 DUP5 PUSH2 0x2050 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC23 DUP4 DUP4 PUSH2 0x261A JUMP JUMPDEST PUSH2 0x2537 DUP2 PUSH2 0x28E8 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x2537 DUP2 PUSH2 0x2893 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2551 DUP3 PUSH2 0x2886 JUMP JUMPDEST PUSH2 0x255B DUP2 DUP6 PUSH2 0x288A JUMP JUMPDEST SWAP4 POP DUP4 PUSH1 0x20 DUP3 MUL DUP6 ADD PUSH2 0x256D DUP6 PUSH2 0x2880 JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x25A7 JUMPI DUP5 DUP5 SUB DUP10 MSTORE DUP2 MLOAD PUSH2 0x258A DUP6 DUP3 PUSH2 0x2522 JUMP JUMPDEST SWAP5 POP PUSH2 0x2595 DUP4 PUSH2 0x2880 JUMP JUMPDEST PUSH1 0x20 SWAP11 SWAP1 SWAP11 ADD SWAP10 SWAP3 POP POP PUSH1 0x1 ADD PUSH2 0x2571 JUMP JUMPDEST POP SWAP2 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x2537 DUP2 PUSH2 0x289E JUMP JUMPDEST PUSH2 0x2537 DUP2 PUSH2 0x1FDF JUMP JUMPDEST PUSH2 0x2537 DUP2 PUSH2 0x28A3 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x25DB DUP4 DUP6 PUSH2 0x288A JUMP JUMPDEST SWAP4 POP PUSH2 0x25E8 DUP4 DUP6 DUP5 PUSH2 0x28F9 JUMP JUMPDEST PUSH2 0x25F1 DUP4 PUSH2 0x2935 JUMP JUMPDEST SWAP1 SWAP4 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2607 DUP4 DUP6 PUSH2 0x419 JUMP JUMPDEST SWAP4 POP PUSH2 0x2614 DUP4 DUP6 DUP5 PUSH2 0x28F9 JUMP JUMPDEST POP POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2625 DUP3 PUSH2 0x2886 JUMP JUMPDEST PUSH2 0x262F DUP2 DUP6 PUSH2 0x288A JUMP JUMPDEST SWAP4 POP PUSH2 0x263F DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x2905 JUMP JUMPDEST PUSH2 0x25F1 DUP2 PUSH2 0x2935 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2653 DUP3 PUSH2 0x2886 JUMP JUMPDEST PUSH2 0x265D DUP2 DUP6 PUSH2 0x419 JUMP JUMPDEST SWAP4 POP PUSH2 0x266D DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x2905 JUMP JUMPDEST SWAP3 SWAP1 SWAP3 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2684 PUSH1 0x24 DUP4 PUSH2 0x419 JUMP JUMPDEST PUSH32 0x696E74657266616365496D706C656D656E74657228627974657333322C627974 DUP2 MSTORE PUSH32 0x6573342900000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x24 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2537 DUP2 PUSH2 0x28C8 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x211A DUP3 DUP5 DUP7 PUSH2 0x25FB JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC23 DUP3 DUP5 PUSH2 0x2648 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x9F1 DUP3 PUSH2 0x2677 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x9F1 DUP3 DUP5 PUSH2 0x253D JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x9F1 DUP3 DUP5 PUSH2 0x252E JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0xC23 DUP2 DUP5 PUSH2 0x2546 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x9F1 DUP3 DUP5 PUSH2 0x25B4 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x9F1 DUP3 DUP5 PUSH2 0x25BD JUMP JUMPDEST PUSH1 0x40 DUP2 ADD PUSH2 0x275A DUP3 DUP6 PUSH2 0x25BD JUMP JUMPDEST PUSH2 0xC23 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x25BD JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x9F1 DUP3 DUP5 PUSH2 0x25C6 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x211A DUP2 DUP5 DUP7 PUSH2 0x25CF JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0xC23 DUP2 DUP5 PUSH2 0x261A JUMP JUMPDEST PUSH1 0x40 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x27A9 DUP2 DUP6 PUSH2 0x261A JUMP JUMPDEST SWAP1 POP PUSH2 0xC23 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x26D6 JUMP JUMPDEST PUSH1 0x60 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x27C9 DUP2 DUP7 PUSH2 0x261A JUMP JUMPDEST SWAP1 POP PUSH2 0x27D8 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x26D6 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x27EA DUP2 DUP5 PUSH2 0x261A JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP2 ADD PUSH2 0x2801 DUP3 DUP6 PUSH2 0x25BD JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x211A DUP2 DUP5 PUSH2 0x261A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x2832 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x2851 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x20 PUSH1 0x1F SWAP2 SWAP1 SWAP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x416 DUP3 PUSH2 0x28CF JUMP JUMPDEST ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND SWAP1 JUMP JUMPDEST PUSH2 0xFFFF AND SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x416 DUP3 PUSH1 0x0 PUSH2 0x416 DUP3 PUSH2 0x2893 JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2920 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x2908 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x292F JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP1 JUMP JUMPDEST PUSH2 0x2966 DUP2 PUSH2 0x2893 JUMP JUMPDEST DUP2 EQ PUSH2 0x1997 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2966 DUP2 PUSH2 0x289E JUMP JUMPDEST PUSH2 0x2966 DUP2 PUSH2 0x1FDF JUMP JUMPDEST PUSH2 0x2966 DUP2 PUSH2 0x28A3 JUMP JUMPDEST PUSH2 0x2966 DUP2 PUSH2 0x28C8 JUMP INVALID LOG3 PUSH6 0x627A7A723158 KECCAK256 DUP3 SWAP3 PUSH29 0x55ED80CD2C2B4AF3ECCA0340C755F0257FADBDD76A4C4B6458F1C8EEFC PUSH13 0x6578706572696D656E74616CF5 PUSH5 0x736F6C6343 STOP SDIV GT STOP BLOCKHASH ",
              "sourceMap": "46735:2156:0:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;46735:2156:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;46363:170;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;36550:1275;;;;;;;;;:::i;:::-;;45831:190;;;;;;;;;:::i;41736:905::-;;;;;;;;;:::i;:::-;;;;;;;;3091:456;;;;;;;;;:::i;:::-;;;;;;;;;44529:175;;;;;;;;;:::i;6068:166::-;;;;;;;;;:::i;4696:205::-;;;;;;;;;:::i;48117:237::-;;;;;;;;;:::i;38591:161::-;;;;;;;;;:::i;46224:135::-;;;;;;;;;:::i;:::-;;;;;;;;2498:290;;;;;;;;;:::i;43657:95::-;;;;;;;;;:::i;43319:152::-;;;;;;;;;:::i;4905:282::-;;;;;;;;;:::i;38211:178::-;;;;;;;;;:::i;48544:345::-;;;;;;;;;:::i;:::-;;;;;;;;38881:118;;;;;;;;;:::i;6389:102::-;;;;;;;;;:::i;44932:127::-;;;;;;;;;:::i;:::-;;;;;;;;;4423:126;;;;;;;;;:::i;40889:232::-;;;;;;;;;:::i;5191:139::-;;;;;;;;;:::i;47174:90::-;;;;;;;;;:::i;46363:170::-;46431:4;46456:32;;;46471:17;46456:32;;:72;;;46492:36;46516:11;46492:23;:36::i;:::-;46443:85;;46363:170;;;;:::o;36550:1275::-;36636:4;1510:18;1523:4;1510:12;:18::i;:::-;1502:27;;;;;;36650:15;;36699:17;;36650:15;36837:30;;:::i;:::-;36870:18;36886:1;36870:4;;:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;81:16;;74:27;;;;-1:-1;36870:15:0;;:18;-1:-1:-1;;36870:18:0;:15;:18;;-1:-1:-1;36870:18:0:i;:::-;36837:51;;36825:803;36897:11;:4;:9;:11::i;:::-;36825:803;;36946:13;;;36942:680;;36982:4;:12;;;36971:23;;37011:11;:4;:9;:11::i;:::-;37004:18;;37070:4;37053:22;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;37053:22:0;;;37043:33;;;;;;37032:44;;37100:12;:4;:10;:12::i;:::-;37086:27;;36942:680;;;37138:20;37161:11;:4;:9;:11::i;:::-;37138:34;;37198:4;:12;;;37186:24;;:8;:24;;;;:49;;;-1:-1:-1;37215:20:0;:4;37227:7;37215:20;:11;:20;:::i;:::-;37214:21;37186:49;37182:432;;;37249:184;37274:4;37292;37310:8;37332:4;;37249:184;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;81:16;;74:27;;;;-1:-1;;;;37370:11:0;;;;37404:12;;37350:6;;37370:20;;;;37404:17;37249:11;:184::i;:::-;37456:4;:12;;;37445:23;;37489:4;:11;;;37480:20;;37519:7;37512:14;;37559:4;37549:15;;;;;;37538:26;;37590:12;:4;:10;:12::i;:::-;37576:27;;37182:432;36942:680;;36916:11;:4;:9;:11::i;:::-;36825:803;;;-1:-1:-1;37637:11:0;;:15;37633:188;;37662:152;37683:4;37697;37711:8;37729:4;;37662:152;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;81:16;;74:27;;;;-1:-1;;37789:12:0;;37743:6;;-1:-1:-1;37759:20:0;;;;-1:-1:-1;37789:17:0;37662:11;:152::i;:::-;1535:1;;;;;36550:1275;;;;:::o;45831:190::-;45942:4;1510:18;1523:4;1510:12;:18::i;:::-;1502:27;;;;;;45973:5;;45954;:11;45960:4;45954:11;;;;;;;;;;;45966:3;;45954:16;;;;;;;;;;;;;;;;;;;;;;:24;;:16;;:24;:::i;:::-;;46007:3;;45989:27;;;;;;;;;;;;;;;;46001:4;45989:27;46012:3;;45989:27;;;;;;;;;;;;;;;;45831:190;;;;;;:::o;41736:905::-;41835:7;41874:16;;;:10;:16;;;;;;;;:29;;;;;;;;;;;;;41913:25;;41909:64;;41955:11;-1:-1:-1;41948:18:0;;41909:64;41979:9;41991:10;41996:4;41991;:10::i;:::-;41979:22;-1:-1:-1;42011:15:0;;;42007:53;;42051:1;42036:17;;;;;;42007:53;42067:12;42081:23;42108:1;:12;;40335:10;42181:17;;42128:71;;;;;;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;42128:71:0;;;49:4:-1;25:18;;61:17;;42128:71:0;182:15:-1;42128:71:0;179:29:-1;160:49;;42108:97:0;;;42128:71;42108:97;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;42066:139:0;;;;42216:7;42215:8;:34;;;;42247:2;42227:10;:17;:22;42215:34;:57;;;;42253:10;42264:2;42253:14;;;;;;;;;;;;;;:19;42215:57;42211:136;;;42338:1;42323:17;;;;;;;;42211:136;42377:1;:12;;42450:11;42397:65;;;;;;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;42397:65:0;;;49:4:-1;25:18;;61:17;;42397:65:0;182:15:-1;42397:65:0;179:29:-1;160:49;;42377:91:0;;;42397:65;42377:91;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;-1:-1;42353:115:0;;-1:-1:-1;42353:115:0;-1:-1:-1;42478:8:0;;;:34;;;42510:2;42490:10;:17;:22;42478:34;:57;;;;42516:10;42527:2;42516:14;;;;;;;;;;;;;;:19;42478:57;42474:148;;;42613:1;42598:17;;;;;;;;42474:148;-1:-1:-1;42635:1:0;;-1:-1:-1;;;41736:905:0;;;;;:::o;3091:456::-;3175:7;3249:10;;;;;;;;;;3184:12;;3300:1;3266:249;3324:12;3309:11;:27;3266:249;;3381:26;;;3380:33;;;;:67;;-1:-1:-1;3446:1:0;3417:19;;;;;;;;;;:26;;-1:-1:-1;;3417:26:0;;;;;;;;;;;:30;;3380:67;3376:133;;;3480:19;;;;;;;;;;;;;3459:41;;;;;;-1:-1:-1;;3459:41:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3467:11;;3480:19;;;;3459:41;;;3480:19;3459:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3376:133;3360:1;3344:17;3266:249;;;-1:-1:-1;;3532:9:0;;;;;;;;;3529:1;3532:9;;;3529:1;-1:-1:-1;3532:9:0;-1:-1:-1;3091:456:0;;;;;;:::o;44529:175::-;44620:4;1510:18;1523:4;1510:12;:18::i;:::-;1502:27;;;;;;44648:15;;;;;;;;;;;;;;;;;;-1:-1:-1;44632:13:0;;;:7;:13;;;;;;;:31;;;;;;;;;;44674:25;44640:4;;44674:25;;;;44658:1;;44661;;44674:25;;;;;;;;;;44529:175;;;;:::o;6068:166::-;6155:4;1510:18;1523:4;1510:12;:18::i;:::-;1502:27;;;;;;6169:12;;;;:6;:12;;;;;:19;;6184:4;;6169:19;:::i;:::-;;6218:4;6199:30;6224:4;;6199:30;;;;;;;;4696:205;4745:15;4768:14;4785:25;4790:4;3997:2;4785:4;:25::i;:::-;4768:42;;4820:1;:8;4832:1;4820:13;4816:51;;;4858:1;4843:17;;;;;4816:51;4879:17;4894:1;4879:14;:17::i;:::-;4872:24;4696:205;-1:-1:-1;;;4696:205:0:o;48117:237::-;48223:20;;;;:14;:20;;;;;;;;48244:10;48223:32;;;;;;;;;;:40;;;;;;;;;;;:55;;;;;;;;;;48289:60;48223:40;;48244:10;48223:20;;48289:60;;;;48223:55;;48289:60;;;;;;;;;;48117:237;;;:::o;38591:161::-;38675:4;38697:22;;;:16;:22;;;;;;;;38720:8;:14;;;;;;38697:38;;;;;;;:44;;;;;;;;;;;:49;;;38591:161::o;46224:135::-;46308:13;46338:5;:11;46344:4;46338:11;;;;;;;;;;;46350:3;;46338:16;;;;;;;;;;;;;;;;;;;;;;;;46331:23;;;;;;;;;-1:-1:-1;;46331:23:0;;;;;;;;;;;;;;;;;;;;;;;46338:16;;;;46331:23;;;46338:16;46331:23;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;46224:135;;;;;:::o;2498:290::-;2606:4;1510:18;1523:4;1510:12;:18::i;:::-;1502:27;;;;;;-1:-1:-1;;2669:15:0;;2668:31;;2667:38;2659:47;;;;;;2713:4;:10;;;;;;;;;;;:23;;;;;;;;:30;;2739:4;;2713:30;:::i;:::-;-1:-1:-1;2754:29:0;;2771:11;;2765:4;;2754:29;;;;;2498:290;;;;;:::o;43657:95::-;43736:11;;;;:5;:11;;;;;;;;;43729:18;;;;;;-1:-1:-1;;43729:18:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;43708:13;;43729:18;;;43736:11;43729:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;43657:95;;;:::o;43319:152::-;43400:4;1510:18;1523:4;1510:12;:18::i;:::-;1502:27;;;;;;43414:11;;;;:5;:11;;;;;:18;;43428:4;;43414:18;:::i;:::-;;43455:4;43443:23;43461:4;;43443:23;;;;;;;;4905:282;5004:4;1510:18;1523:4;1510:12;:18::i;:::-;1502:27;;;;;;5036:4;5021:33;5042:8;5052:1;5021:33;;;;;;;;;;;;;;;;3997:2;5064:8;:25;5060:87;;;5116:4;5104:36;5122:17;5137:1;5122:14;:17::i;:::-;5104:36;;;;;;;;;;;;;;;5060:87;5152:16;;;;:10;:16;;;;;;;;:26;;;;;;;;:30;;;;;;;;:::i;:::-;;4905:282;;;;:::o;38211:178::-;38339:13;;;;:7;:13;;;;;;;;38353:8;:14;;;;;;38339:29;;;;;;;:35;;;;;;;;:45;;;;;;;;;;;38332:52;;;;;;-1:-1:-1;;38332:52:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;38312:12;;38332:52;;;38339:45;38332:52;;;;;;;;;;;;;;;;;;;;;;;;48544:345;48654:24;;;;;;;;;;;;;;;;48612:22;;48666:4;48654:24;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;48644:34:0;-1:-1:-1;48689:9:0;48684:181;48704:15;;;48684:181;;;48735:12;48749:19;48780:4;48799;;48804:1;48799:7;;;;;;;;;;;;-1:-1:-1;30:25;;92:48;100:14;96:29;;;92:48;68:73;;58:2;;155:1;152;145:12;58:2;174:33;;;69:4;55:19;;;-1:-1;16:22;93:18;82:30;;79:2;;;125:1;122;115:12;79:2;155:14;151:38;;;137:53;;134:2;;;203:1;200;193:12;134:2;48772:35:0;;;;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;48734:73:0;;;;48823:7;48815:16;;;;;;48852:6;48839:7;48847:1;48839:10;;;;;;;;;;;;;;;;;:19;-1:-1:-1;;48721:3:0;;48684:181;;;-1:-1:-1;48544:345:0;;;;:::o;38881:118::-;38935:4;1510:18;1523:4;1510:12;:18::i;:::-;1502:27;;;;;;38947:14;;;;:8;:14;;;;;;:16;;;;;;38974:20;38956:4;;38974:20;;;38881:118;;:::o;6389:102::-;6474:12;;;;:6;:12;;;;;;;;;6467:19;;;;;;;;;;-1:-1:-1;;6467:19:0;;;;;;;;;;;;;;;;;;;;;;;;;;6447:12;;6474;;6467:19;;6474:12;6467:19;;;;;;;;;;;;;;;;;;;;;;;;44932:127;44985:9;45021:13;;;:7;:13;;;;;:15;;45038;;;;;45021;;44932:127::o;4423:126::-;4485:4;1510:18;1523:4;1510:12;:18::i;:::-;1502:27;;;;;;4497:47;4505:4;3997:2;4526:17;4541:1;4526:14;:17::i;4497:47::-;4423:126;;;:::o;40889:232::-;41002:4;1510:18;1523:4;1510:12;:18::i;:::-;1502:27;;;;;;41014:16;;;;:10;:16;;;;;;;;:29;;;;;;;;;;;;:43;;;;;;;;;;41068:48;;41014:16;;41068:48;;;;41014:43;;41068:48;;;;;;;;;;40889:232;;;;:::o;5191:139::-;5299:16;;;;:10;:16;;;;;;;;:26;;;;;;;;;5292:33;;;;;;;;;;;-1:-1:-1;;5292:33:0;;;;;;;;;;;;;;;;;;;;;;;;;;5270:12;;5299:26;;5292:33;;5299:26;5292:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5191:139;;;;:::o;47174:90::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;45063:178::-;45131:4;45156:34;;;45171:19;45156:34;;:80;;;45200:36;45224:11;45200:23;:36::i;48358:182::-;48445:3;;:15;;;;;48417:4;;;;48445:3;;;;;:9;;:15;;48455:4;;48445:15;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;48445:15:0;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;48445:15:0;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;48445:15:0;;;;;;;;;48429:31;-1:-1:-1;48473:19:0;;;48482:10;48473:19;;:62;;-1:-1:-1;48496:20:0;;;;:14;:20;;;;;;;;:27;;;;;;;;;;48524:10;48496:39;;;;;;;;;;48466:69;;;48358:182;;;:::o;29767:185::-;29857:21;;:::i;:::-;29888:15;;;29909:14;;;:23;;;29938:9;29888:3;29938:4;:9::i;30115:116::-;30210:9;;:16;30195:11;;;;;:31;;;30115:116::o;31127:161::-;31235:11;;;;31259:9;;31188:12;;31215:68;;31248:34;;31235:11;31248:10;:34::i;:::-;31215:9;;;:68;;:19;:68;:::i;31453:173::-;31568:16;;;;31586:15;;;;31548:9;;31515:12;;31548:73;;31586:34;;;31548:73;:19;:73;:::i;11532:191::-;11622:4;11664:5;:12;11649:4;:11;:27;:69;;;;;11680:38;11687:4;11693:1;11696:5;11703:1;11706:4;:11;11680:6;:38::i;39189:847::-;39374:15;39392:14;;;:8;:14;;;;;;;;;39431:15;;;;;;;;;39452:19;39474:28;:4;39489:6;39497:4;39474:28;:14;:28;:::i;:::-;39452:50;;39512:12;39508:524;;;39538:13;;;;:7;:13;;;;;;;;:22;;;;;;;;:32;;;;;;;;:42;;;;;;;;;;:49;;-1:-1:-1;;39538:49:0;;;;;;;;;;;:54;39534:122;;39604:22;;;;:16;:22;;;;;;;;:31;;;;;;;;:41;;;;;;;;:43;;;;;;;;;-1:-1:-1;;39604:43:0;;;;;;;39534:122;39671:13;;;;:7;:13;;;;;;;;:22;;;;;;;;:32;;;;;;;;:42;;;;;;;;;;39663:51;;;:::i;:::-;39744:4;39727:38;39750:4;39756:8;39727:38;;;;;;;;;;;;;;;;39508:524;;;39790:13;;;;:7;:13;;;;;;;;:22;;;;;;;;:32;;;;;;;;:42;;;;;;;;;;:49;;-1:-1:-1;;39790:49:0;;;;;;;;;;;39786:122;;39856:22;;;;:16;:22;;;;;;;;:31;;;;;;;;:41;;;;;;;;:43;;;;;;;;;;;;;;;;39786:122;39915:13;;;;:7;:13;;;;;;;;:22;;;;;;;;:32;;;;;;;;:42;;;;;;;;;;:51;;;;;;;;:::i;:::-;;39996:4;39979:46;40002:4;40008:8;40018:6;39979:46;;;;;;;;;;;;;;;;;39508:524;39189:847;;;;;;;;;;:::o;30347:612::-;30419:15;;;;30405:11;;;:29;;;30459:9;;:16;-1:-1:-1;30440:58:0;;30485:7;;30440:58;30525:11;30553:34;30564:4;:9;;;30575:4;:11;;;30553:10;:34::i;:::-;30539:11;;;;30642:9;;30539:48;;;-1:-1:-1;30642:25:0;;30539:48;30642:25;:20;:25;:::i;:::-;30627:40;;:12;;;:40;30700:9;;30680:1;30673:8;;;;;30700:25;;30673:8;30700:25;:20;:25;:::i;:::-;30687:38;;:10;;;:38;30756:9;;30738:1;30731:8;;;;;30756:25;;30731:8;30756:25;:20;:25;:::i;:::-;30745:36;;;;:8;;;:36;30846:9;;30794:1;30787:8;;;;;30824:19;;30846:25;;:9;30787:8;;30846:20;:25;:::i;:::-;30884:1;30877:8;;;30891:16;;;:22;30824:47;;;;;30937:17;;;;;;30919:15;;;:35;-1:-1:-1;30347:612:0;;:::o;1545:199::-;1620:17;1655:1;:8;1667:2;1655:14;1647:23;;;;;;-1:-1:-1;1715:2:0;1708:10;1702:17;1721:12;1698:36;;;1685:55::o;1748:170::-;1832:13;;;1842:2;1832:13;;;;;;;;;1806:14;;1832:13;;;21:6:-1;;104:10;1832:13:0;87:34:-1;-1:-1;;;1894:12:0;1887:20;;;;1882:2;1875:10;;1868:40;-1:-1:-1;1887:20:0;1860:54::o;43756:170::-;43824:4;43849:32;;;43864:17;43849:32;;:72;;;43885:36;43909:11;43885:23;:36::i;27974:338::-;28064:7;28095:6;28107:176;28141:4;:11;28135:3;:17;28128:25;;;;28161:16;28180:19;:4;28195:3;28180:19;:14;:19;:::i;:::-;28161:38;;28207:19;;;28225:1;28207:19;;28161:38;-1:-1:-1;28238:13:0;28234:43;;28263:5;;;28234:43;28107:176;;;;28295:12;;;;;27974:338;-1:-1:-1;;27974:338:0:o;15211:376::-;15317:12;15361:4;:11;15354:3;15345:6;:12;:27;;15337:36;;;;;;15380:16;15409:3;15399:14;;;;;;;;;;;;;;;;;;;;;;;;;21:6:-1;;104:10;15399:14:0;87:34:-1;135:17;;-1:-1;15399:14:0;-1:-1:-1;15380:33:0;-1:-1:-1;15489:2:0;15480:12;;;;15506:26;;;;15543:22;15480:12;15506:26;15561:3;15543:6;:22::i;:::-;-1:-1:-1;15579:3:0;;15211:376;-1:-1:-1;;;;;15211:376:0:o;9843:236::-;9995:4;10043:31;10050:5;10057:11;10070:3;10043:6;:31::i;:::-;10014:25;10021:4;10027:6;10035:3;10014:6;:25::i;:::-;:60;;9843:236;-1:-1:-1;;;;;;9843:236:0:o;12324:220::-;12411:10;12450:4;:11;12439:3;12445:1;12439:7;:22;;12431:31;;;;;;-1:-1:-1;12502:22:0;12516:1;12502:22;12496:29;12527:6;12492:42;;12477:63::o;12779:224::-;12866:10;12905:4;:11;12894:3;12900:1;12894:7;:22;;12886:31;;;;;;-1:-1:-1;12957:22:0;12971:1;12957:22;12951:29;12982:10;12947:46;;12932:67::o;42645:181::-;42713:4;40237:49;;;;;;;;;;;;;;42738:37;;;:11;:37;;;;:83;;;;42785:36;42809:11;42785:23;:36::i;11956:133::-;12042:9;12074:4;12079:3;12074:9;;;;;;;;;;;;;;;-1:-1:-1;11956:133:0;;;;:::o;14505:495::-;14642:129;14656:2;14649:3;:9;14642:129;;14711:10;;14698:24;;14745:2;14737:10;;;;14755:9;;;;14660;;14642:129;;;14881:10;;14930:11;;14826:2;:8;;;;14820:3;:15;-1:-1:-1;;14820:19:0;14893:9;;14877:26;;;14926:22;;14968:21;14955:35;;14854:142::o;7040:240::-;7143:11;7186:4;:11;7179:3;7170:6;:12;:27;;7162:36;;;;;;-1:-1:-1;7238:26:0;;7252:2;7238:26;7228:42;;7213:63::o;39003:182::-;39071:4;39096:38;;;39111:23;39096:38;;:84;;;39144:36;39168:11;6563:4;6588:40;;;6603:25;6588:40;;:86;;;6638:36;6662:11;5402:4;5427:32;;;5442:17;5427:32;;:77;;-1:-1:-1;5469:35:0;;;5484:20;5469:35;5427:77;:123;;;;5514:36;5538:11;3619:4;3644:31;;;3659:16;3644:31;;:71;;-1:-1:-1;1367:17:0;1352:32;;;;3679:36;1265:124::o;46735:2156::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;46735:2156:0;;;-1:-1:-1;46735:2156:0;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;5:130:-1:-;72:20;;97:33;72:20;97:33;;142:134;220:13;;238:33;220:13;238:33;;299:359;;;436:3;429:4;421:6;417:17;413:27;403:2;;454:1;451;444:12;403:2;-1:-1;474:20;;514:18;503:30;;500:2;;;546:1;543;536:12;500:2;580:4;572:6;568:17;556:29;;631:3;623:4;615:6;611:17;601:8;597:32;594:41;591:2;;;648:1;645;638:12;666:124;730:20;;755:30;730:20;755:30;;797:130;864:20;;889:33;864:20;889:33;;934:128;1000:20;;1025:32;1000:20;1025:32;;1083:336;;;1197:3;1190:4;1182:6;1178:17;1174:27;1164:2;;1215:1;1212;1205:12;1164:2;-1:-1;1235:20;;1275:18;1264:30;;1261:2;;;1307:1;1304;1297:12;1261:2;1341:4;1333:6;1329:17;1317:29;;1392:3;1384:4;1376:6;1372:17;1362:8;1358:32;1355:41;1352:2;;;1409:1;1406;1399:12;1428:440;;1529:3;1522:4;1514:6;1510:17;1506:27;1496:2;;1547:1;1544;1537:12;1496:2;1584:6;1571:20;1606:64;1621:48;1662:6;1621:48;;;1606:64;;;1597:73;;1690:6;1683:5;1676:21;1726:4;1718:6;1714:17;1759:4;1752:5;1748:16;1794:3;1785:6;1780:3;1776:16;1773:25;1770:2;;;1811:1;1808;1801:12;1770:2;1821:41;1855:6;1850:3;1845;1821:41;;;1489:379;;;;;;;;2236:128;2302:20;;2327:32;2302:20;2327:32;;2508:263;;2623:2;2611:9;2602:7;2598:23;2594:32;2591:2;;;2639:1;2636;2629:12;2591:2;2674:1;2691:64;2747:7;2727:9;2691:64;;;2681:74;2585:186;-1:-1;;;;2585:186;2778:411;;;2924:2;2912:9;2903:7;2899:23;2895:32;2892:2;;;2940:1;2937;2930:12;2892:2;2975:31;;3026:18;3015:30;;3012:2;;;3058:1;3055;3048:12;3012:2;3086:87;3165:7;3156:6;3145:9;3141:22;3086:87;;;3076:97;;;;2954:225;2886:303;;;;;;3196:241;;3300:2;3288:9;3279:7;3275:23;3271:32;3268:2;;;3316:1;3313;3306:12;3268:2;3351:1;3368:53;3413:7;3393:9;3368:53;;3444:366;;;3565:2;3553:9;3544:7;3540:23;3536:32;3533:2;;;3581:1;3578;3571:12;3533:2;3616:1;3633:53;3678:7;3658:9;3633:53;;;3623:63;;3595:97;3723:2;3741:53;3786:7;3777:6;3766:9;3762:22;3741:53;;;3731:63;;3702:98;3527:283;;;;;;3817:491;;;;3955:2;3943:9;3934:7;3930:23;3926:32;3923:2;;;3971:1;3968;3961:12;3923:2;4006:1;4023:53;4068:7;4048:9;4023:53;;;4013:63;;3985:97;4113:2;4131:53;4176:7;4167:6;4156:9;4152:22;4131:53;;;4121:63;;4092:98;4221:2;4239:53;4284:7;4275:6;4264:9;4260:22;4239:53;;;4229:63;;4200:98;3917:391;;;;;;4315:485;;;;4450:2;4438:9;4429:7;4425:23;4421:32;4418:2;;;4466:1;4463;4456:12;4418:2;4501:1;4518:53;4563:7;4543:9;4518:53;;;4508:63;;4480:97;4608:2;4626:53;4671:7;4662:6;4651:9;4647:22;4626:53;;;4616:63;;4587:98;4716:2;4734:50;4776:7;4767:6;4756:9;4752:22;4734:50;;4807:366;;;4928:2;4916:9;4907:7;4903:23;4899:32;4896:2;;;4944:1;4941;4934:12;4896:2;4979:1;4996:53;5041:7;5021:9;4996:53;;;4986:63;;4958:97;5086:2;5104:53;5149:7;5140:6;5129:9;5125:22;5104:53;;5180:491;;;;5318:2;5306:9;5297:7;5293:23;5289:32;5286:2;;;5334:1;5331;5324:12;5286:2;5369:1;5386:53;5431:7;5411:9;5386:53;;;5376:63;;5348:97;5476:2;5494:53;5539:7;5530:6;5519:9;5515:22;5494:53;;;5484:63;;5455:98;5584:2;5602:53;5647:7;5638:6;5627:9;5623:22;5602:53;;5678:489;;;;5815:2;5803:9;5794:7;5790:23;5786:32;5783:2;;;5831:1;5828;5821:12;5783:2;5866:1;5883:53;5928:7;5908:9;5883:53;;;5873:63;;5845:97;5973:2;5991:53;6036:7;6027:6;6016:9;6012:22;5991:53;;;5981:63;;5952:98;6081:2;6099:52;6143:7;6134:6;6123:9;6119:22;6099:52;;6174:364;;;6294:2;6282:9;6273:7;6269:23;6265:32;6262:2;;;6310:1;6307;6300:12;6262:2;6345:1;6362:53;6407:7;6387:9;6362:53;;;6352:63;;6324:97;6452:2;6470:52;6514:7;6505:6;6494:9;6490:22;6470:52;;6545:489;;;;6682:2;6670:9;6661:7;6657:23;6653:32;6650:2;;;6698:1;6695;6688:12;6650:2;6733:1;6750:53;6795:7;6775:9;6750:53;;;6740:63;;6712:97;6840:2;6858:52;6902:7;6893:6;6882:9;6878:22;6858:52;;7041:490;;;;7181:2;7169:9;7160:7;7156:23;7152:32;7149:2;;;7197:1;7194;7187:12;7149:2;7232:1;7249:53;7294:7;7274:9;7249:53;;;7239:63;;7211:97;7367:2;7356:9;7352:18;7339:32;7391:18;7383:6;7380:30;7377:2;;;7423:1;7420;7413:12;7377:2;7451:64;7507:7;7498:6;7487:9;7483:22;7451:64;;;7441:74;;;;7318:203;7143:388;;;;;;8037:743;;;;;;8215:2;8203:9;8194:7;8190:23;8186:32;8183:2;;;8231:1;8228;8221:12;8183:2;8266:1;8283:53;8328:7;8308:9;8283:53;;;8273:63;;8245:97;8401:2;8390:9;8386:18;8373:32;8425:18;8417:6;8414:30;8411:2;;;8457:1;8454;8447:12;8411:2;8485:65;8542:7;8533:6;8522:9;8518:22;8485:65;;;8475:75;;;;8352:204;8615:2;8604:9;8600:18;8587:32;8639:18;8631:6;8628:30;8625:2;;;8671:1;8668;8661:12;8625:2;8699:65;8756:7;8747:6;8736:9;8732:22;8699:65;;;8689:75;;;;8566:204;8177:603;;;;;;;;;9160:615;;;;;9317:2;9305:9;9296:7;9292:23;9288:32;9285:2;;;9333:1;9330;9323:12;9285:2;9368:1;9385:53;9430:7;9410:9;9385:53;;;9375:63;;9347:97;9475:2;9493:53;9538:7;9529:6;9518:9;9514:22;9493:53;;;9483:63;;9454:98;9611:2;9600:9;9596:18;9583:32;9635:18;9627:6;9624:30;9621:2;;;9667:1;9664;9657:12;9621:2;9695:64;9751:7;9742:6;9731:9;9727:22;9695:64;;;9279:496;;;;-1:-1;9685:74;-1:-1;;;;9279:496;9782:595;;;;9929:2;9917:9;9908:7;9904:23;9900:32;9897:2;;;9945:1;9942;9935:12;9897:2;9980:1;9997:53;10042:7;10022:9;9997:53;;;9987:63;;9959:97;10087:2;10105:53;10150:7;10141:6;10130:9;10126:22;10105:53;;;10095:63;;10066:98;10223:2;10212:9;10208:18;10195:32;10247:18;10239:6;10236:30;10233:2;;;10279:1;10276;10269:12;10233:2;10299:62;10353:7;10344:6;10333:9;10329:22;10299:62;;10384:239;;10487:2;10475:9;10466:7;10462:23;10458:32;10455:2;;;10503:1;10500;10493:12;10455:2;10538:1;10555:52;10599:7;10579:9;10555:52;;10631:177;;10742:60;10798:3;10790:6;10742:60;;10816:142;10907:45;10946:5;10907:45;;;10902:3;10895:58;10889:69;;;10965:137;11064:32;11090:5;11064:32;;11256:888;;11411:59;11464:5;11411:59;;;11483:91;11567:6;11562:3;11483:91;;;11476:98;;11597:3;11639:4;11631:6;11627:17;11622:3;11618:27;11666:61;11721:5;11666:61;;;11747:7;11775:1;11760:345;11785:6;11782:1;11779:13;11760:345;;;11847:9;11841:4;11837:20;11832:3;11825:33;11892:6;11886:13;11914:74;11983:4;11968:13;11914:74;;;11906:82;;12005:65;12063:6;12005:65;;;12093:4;12084:14;;;;;11995:75;-1:-1;;11807:1;11800:9;11760:345;;;-1:-1;12118:4;;11390:754;-1:-1;;;;;;;11390:754;12152:104;12229:21;12244:5;12229:21;;12263:113;12346:24;12364:5;12346:24;;12383:110;12464:23;12481:5;12464:23;;12523:297;;12637:70;12700:6;12695:3;12637:70;;;12630:77;;12719:43;12755:6;12750:3;12743:5;12719:43;;;12784:29;12806:6;12784:29;;;12775:39;;;;12623:197;-1:-1;;;12623:197;12851:306;;12979:88;13060:6;13055:3;12979:88;;;12972:95;;13079:43;13115:6;13110:3;13103:5;13079:43;;;-1:-1;;13135:16;;12965:192;13165:343;;13275:38;13307:5;13275:38;;;13325:70;13388:6;13383:3;13325:70;;;13318:77;;13400:52;13445:6;13440:3;13433:4;13426:5;13422:16;13400:52;;;13473:29;13495:6;13473:29;;13515:356;;13643:38;13675:5;13643:38;;;13693:88;13774:6;13769:3;13693:88;;;13686:95;;13786:52;13831:6;13826:3;13819:4;13812:5;13808:16;13786:52;;;13850:16;;;;;13623:248;-1:-1;;13623:248;15234:409;;15412:85;15494:2;15489:3;15412:85;;;15530:34;15510:55;;15599:6;15594:2;15585:12;;15578:28;15634:2;15625:12;;15398:245;-1:-1;;15398:245;15651:110;15732:23;15749:5;15732:23;;15888:274;;16038:99;16133:3;16124:6;16116;16038:99;;16169:262;;16313:93;16402:3;16393:6;16313:93;;16731:372;;16930:148;17074:3;16930:148;;17110:213;17228:2;17213:18;;17242:71;17217:9;17286:6;17242:71;;17330:229;17456:2;17441:18;;17470:79;17445:9;17522:6;17470:79;;17818:381;17996:2;18010:47;;;17981:18;;18071:118;17981:18;18175:6;18071:118;;18206:201;18318:2;18303:18;;18332:65;18307:9;18370:6;18332:65;;18414:213;18532:2;18517:18;;18546:71;18521:9;18590:6;18546:71;;18634:324;18780:2;18765:18;;18794:71;18769:9;18838:6;18794:71;;;18876:72;18944:2;18933:9;18929:18;18920:6;18876:72;;18965:209;19081:2;19066:18;;19095:69;19070:9;19137:6;19095:69;;19181:317;19327:2;19341:47;;;19312:18;;19402:86;19312:18;19474:6;19466;19402:86;;19505:297;19641:2;19655:47;;;19626:18;;19716:76;19626:18;19778:6;19716:76;;19809:404;19971:2;19985:47;;;19956:18;;20046:76;19956:18;20108:6;20046:76;;;20038:84;;20133:70;20199:2;20188:9;20184:18;20175:6;20133:70;;20220:599;20428:2;20442:47;;;20413:18;;20503:76;20413:18;20565:6;20503:76;;;20495:84;;20590:70;20656:2;20645:9;20641:18;20632:6;20590:70;;;20708:9;20702:4;20698:20;20693:2;20682:9;20678:18;20671:48;20733:76;20804:4;20795:6;20733:76;;;20725:84;20399:420;-1:-1;;;;;20399:420;21462:408;21626:2;21611:18;;21640:71;21615:9;21684:6;21640:71;;;21759:9;21753:4;21749:20;21744:2;21733:9;21729:18;21722:48;21784:76;21855:4;21846:6;21784:76;;21877:256;21939:2;21933:9;21965:17;;;22040:18;22025:34;;22061:22;;;22022:62;22019:2;;;22097:1;22094;22087:12;22019:2;22113;22106:22;21917:216;;-1:-1;21917:216;22140:321;;22283:18;22275:6;22272:30;22269:2;;;22315:1;22312;22305:12;22269:2;-1:-1;22446:4;22382;22359:17;;;;22378:9;22355:33;22436:15;;22206:255;22468:156;22597:4;22588:14;;22545:79;22631:142;22739:12;;22710:63;23282:183;23405:19;;;23454:4;23445:14;;23398:67;24284:91;;24346:24;24364:5;24346:24;;24488:85;24554:13;24547:21;;24530:43;24659:144;24731:66;24720:78;;24703:100;24810:84;24882:6;24871:18;;24854:40;24901:121;24974:42;24963:54;;24946:76;25108:129;;25195:37;25226:5;25244:121;25323:37;25354:5;25323:37;;25488:145;25569:6;25564:3;25559;25546:30;-1:-1;25625:1;25607:16;;25600:27;25539:94;25642:268;25707:1;25714:101;25728:6;25725:1;25722:13;25714:101;;;25795:11;;;25789:18;25776:11;;;25769:39;25750:2;25743:10;25714:101;;;25830:6;25827:1;25824:13;25821:2;;;25895:1;25886:6;25881:3;25877:16;25870:27;25821:2;25691:219;;;;;25918:97;26006:2;25986:14;26002:7;25982:28;;25966:49;26023:117;26092:24;26110:5;26092:24;;;26085:5;26082:35;26072:2;;26131:1;26128;26121:12;26147:111;26213:21;26228:5;26213:21;;26265:117;26334:24;26352:5;26334:24;;26389:115;26457:23;26474:5;26457:23;;26511:115;26579:23;26596:5;26579:23;"
            },
            "gasEstimates": {
              "creation": {
                "codeDepositCost": "2142400",
                "executionCost": "infinite",
                "totalCost": "infinite"
              },
              "external": {
                "ABI(bytes32,uint256)": "infinite",
                "addr(bytes32)": "infinite",
                "addr(bytes32,uint256)": "infinite",
                "authorisations(bytes32,address,address)": "infinite",
                "clearDNSZone(bytes32)": "infinite",
                "contenthash(bytes32)": "infinite",
                "dnsRecord(bytes32,bytes32,uint16)": "infinite",
                "hasDNSRecords(bytes32,bytes32)": "infinite",
                "interfaceImplementer(bytes32,bytes4)": "infinite",
                "multicall(bytes[])": "infinite",
                "name(bytes32)": "infinite",
                "pubkey(bytes32)": "infinite",
                "setABI(bytes32,uint256,bytes)": "infinite",
                "setAddr(bytes32,address)": "infinite",
                "setAddr(bytes32,uint256,bytes)": "infinite",
                "setAuthorisation(bytes32,address,bool)": "infinite",
                "setContenthash(bytes32,bytes)": "infinite",
                "setDNSRecords(bytes32,bytes)": "infinite",
                "setInterface(bytes32,bytes4,address)": "infinite",
                "setName(bytes32,string)": "infinite",
                "setPubkey(bytes32,bytes32,bytes32)": "infinite",
                "setText(bytes32,string,string)": "infinite",
                "supportsInterface(bytes4)": "infinite",
                "text(bytes32,string)": "infinite"
              },
              "internal": {
                "isAuthorised(bytes32)": "infinite"
              }
            },
            "methodIdentifiers": {
              "ABI(bytes32,uint256)": "2203ab56",
              "addr(bytes32)": "3b3b57de",
              "addr(bytes32,uint256)": "f1cb7e06",
              "authorisations(bytes32,address,address)": "f86bc879",
              "clearDNSZone(bytes32)": "ad5780af",
              "contenthash(bytes32)": "bc1c58d1",
              "dnsRecord(bytes32,bytes32,uint16)": "a8fa5682",
              "hasDNSRecords(bytes32,bytes32)": "4cbf6ba4",
              "interfaceImplementer(bytes32,bytes4)": "124a319c",
              "multicall(bytes[])": "ac9650d8",
              "name(bytes32)": "691f3431",
              "pubkey(bytes32)": "c8690233",
              "setABI(bytes32,uint256,bytes)": "623195b0",
              "setAddr(bytes32,address)": "d5fa2b00",
              "setAddr(bytes32,uint256,bytes)": "8b95dd71",
              "setAuthorisation(bytes32,address,bool)": "3e9ce794",
              "setContenthash(bytes32,bytes)": "304e6ade",
              "setDNSRecords(bytes32,bytes)": "0af179d7",
              "setInterface(bytes32,bytes4,address)": "e59d895d",
              "setName(bytes32,string)": "77372213",
              "setPubkey(bytes32,bytes32,bytes32)": "29cd62ea",
              "setText(bytes32,string,string)": "10f13a8c",
              "supportsInterface(bytes4)": "01ffc9a7",
              "text(bytes32,string)": "59d1d43c"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.5.17+commit.d19bba13\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ENS\",\"name\":\"_ens\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"contentType\",\"type\":\"uint256\"}],\"name\":\"ABIChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"AddrChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"coinType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"newAddress\",\"type\":\"bytes\"}],\"name\":\"AddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isAuthorised\",\"type\":\"bool\"}],\"name\":\"AuthorisationChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"hash\",\"type\":\"bytes\"}],\"name\":\"ContenthashChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"resource\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"record\",\"type\":\"bytes\"}],\"name\":\"DNSRecordChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"resource\",\"type\":\"uint16\"}],\"name\":\"DNSRecordDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"DNSZoneCleared\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"implementer\",\"type\":\"address\"}],\"name\":\"InterfaceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"NameChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"x\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"y\",\"type\":\"bytes32\"}],\"name\":\"PubkeyChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"indexedKey\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"TextChanged\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"contentTypes\",\"type\":\"uint256\"}],\"name\":\"ABI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"addr\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"coinType\",\"type\":\"uint256\"}],\"name\":\"addr\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorisations\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"clearDNSZone\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"contenthash\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"resource\",\"type\":\"uint16\"}],\"name\":\"dnsRecord\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"hasDNSRecords\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"interfaceImplementer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"pubkey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"x\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"y\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"contentType\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"setABI\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"coinType\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"a\",\"type\":\"bytes\"}],\"name\":\"setAddr\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"setAddr\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isAuthorised\",\"type\":\"bool\"}],\"name\":\"setAuthorisation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"hash\",\"type\":\"bytes\"}],\"name\":\"setContenthash\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"setDNSRecords\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"},{\"internalType\":\"address\",\"name\":\"implementer\",\"type\":\"address\"}],\"name\":\"setInterface\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"x\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"y\",\"type\":\"bytes32\"}],\"name\":\"setPubkey\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"name\":\"setText\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"text\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"ABI(bytes32,uint256)\":{\"params\":{\"contentTypes\":\"A bitwise OR of the ABI formats accepted by the caller.\",\"node\":\"The ENS node to query\"},\"return\":\"contentType The content type of the return valuedata The ABI data\"},\"addr(bytes32)\":{\"params\":{\"node\":\"The ENS node to query.\"},\"return\":\"The associated address.\"},\"clearDNSZone(bytes32)\":{\"params\":{\"node\":\"the namehash of the node for which to clear the zone\"}},\"contenthash(bytes32)\":{\"params\":{\"node\":\"The ENS node to query.\"},\"return\":\"The associated contenthash.\"},\"dnsRecord(bytes32,bytes32,uint16)\":{\"params\":{\"name\":\"the keccak-256 hash of the fully-qualified name for which to fetch the record\",\"node\":\"the namehash of the node for which to fetch the record\",\"resource\":\"the ID of the resource as per https://en.wikipedia.org/wiki/List_of_DNS_record_types\"},\"return\":\"the DNS record in wire format if present, otherwise empty\"},\"hasDNSRecords(bytes32,bytes32)\":{\"params\":{\"name\":\"the namehash of the node for which to check the records\",\"node\":\"the namehash of the node for which to check the records\"}},\"interfaceImplementer(bytes32,bytes4)\":{\"params\":{\"interfaceID\":\"The EIP 168 interface ID to check for.\",\"node\":\"The ENS node to query.\"},\"return\":\"The address that implements this interface, or 0 if the interface is unsupported.\"},\"name(bytes32)\":{\"params\":{\"node\":\"The ENS node to query.\"},\"return\":\"The associated name.\"},\"pubkey(bytes32)\":{\"params\":{\"node\":\"The ENS node to query\"},\"return\":\"x, y the X and Y coordinates of the curve point for the public key.\"},\"setABI(bytes32,uint256,bytes)\":{\"params\":{\"contentType\":\"The content type of the ABI\",\"data\":\"The ABI data.\",\"node\":\"The node to update.\"}},\"setAddr(bytes32,address)\":{\"params\":{\"a\":\"The address to set.\",\"node\":\"The node to update.\"}},\"setAuthorisation(bytes32,address,bool)\":{\"details\":\"Sets or clears an authorisation. Authorisations are specific to the caller. Any account can set an authorisation for any name, but the authorisation that is checked will be that of the current owner of a name. Thus, transferring a name effectively clears any existing authorisations, and new authorisations can be set in advance of an ownership transfer if desired.\",\"params\":{\"isAuthorised\":\"True if the address should be authorised, or false if it should be deauthorised.\",\"node\":\"The name to change the authorisation on.\",\"target\":\"The address that is to be authorised or deauthorised.\"}},\"setContenthash(bytes32,bytes)\":{\"params\":{\"hash\":\"The contenthash to set\",\"node\":\"The node to update.\"}},\"setDNSRecords(bytes32,bytes)\":{\"params\":{\"data\":\"the DNS wire format records to set\",\"node\":\"the namehash of the node for which to set the records\"}},\"setInterface(bytes32,bytes4,address)\":{\"params\":{\"implementer\":\"The address of a contract that implements this interface for this node.\",\"interfaceID\":\"The EIP 168 interface ID.\",\"node\":\"The node to update.\"}},\"setName(bytes32,string)\":{\"params\":{\"name\":\"The name to set.\",\"node\":\"The node to update.\"}},\"setPubkey(bytes32,bytes32,bytes32)\":{\"params\":{\"node\":\"The ENS node to query\",\"x\":\"the X coordinate of the curve point for the public key.\",\"y\":\"the Y coordinate of the curve point for the public key.\"}},\"setText(bytes32,string,string)\":{\"params\":{\"key\":\"The key to set.\",\"node\":\"The node to update.\",\"value\":\"The text data value to set.\"}},\"text(bytes32,string)\":{\"params\":{\"key\":\"The text data key to query.\",\"node\":\"The ENS node to query.\"},\"return\":\"The associated text data.\"}}},\"userdoc\":{\"methods\":{\"ABI(bytes32,uint256)\":{\"notice\":\"Returns the ABI associated with an ENS node. Defined in EIP205.\"},\"addr(bytes32)\":{\"notice\":\"Returns the address associated with an ENS node.\"},\"clearDNSZone(bytes32)\":{\"notice\":\"Clear all information for a DNS zone.\"},\"contenthash(bytes32)\":{\"notice\":\"Returns the contenthash associated with an ENS node.\"},\"dnsRecord(bytes32,bytes32,uint16)\":{\"notice\":\"Obtain a DNS record.\"},\"hasDNSRecords(bytes32,bytes32)\":{\"notice\":\"Check if a given node has records.\"},\"interfaceImplementer(bytes32,bytes4)\":{\"notice\":\"Returns the address of a contract that implements the specified interface for this name. If an implementer has not been set for this interfaceID and name, the resolver will query the contract at `addr()`. If `addr()` is set, a contract exists at that address, and that contract implements EIP168 and returns `true` for the specified interfaceID, its address will be returned.\"},\"name(bytes32)\":{\"notice\":\"Returns the name associated with an ENS node, for reverse records. Defined in EIP181.\"},\"pubkey(bytes32)\":{\"notice\":\"Returns the SECP256k1 public key associated with an ENS node. Defined in EIP 619.\"},\"setABI(bytes32,uint256,bytes)\":{\"notice\":\"Sets the ABI associated with an ENS node. Nodes may have one ABI of each content type. To remove an ABI, set it to the empty string.\"},\"setAddr(bytes32,address)\":{\"notice\":\"Sets the address associated with an ENS node. May only be called by the owner of that node in the ENS registry.\"},\"setContenthash(bytes32,bytes)\":{\"notice\":\"Sets the contenthash associated with an ENS node. May only be called by the owner of that node in the ENS registry.\"},\"setDNSRecords(bytes32,bytes)\":{\"notice\":\"Set one or more DNS records.  Records are supplied in wire-format. Records with the same node/name/resource must be supplied one after the other to ensure the data is updated correctly. For example, if the data was supplied:    a.example.com IN A 1.2.3.4    a.example.com IN A 5.6.7.8    www.example.com IN CNAME a.example.com. then this would store the two A records for a.example.com correctly as a single RRSET, however if the data was supplied:    a.example.com IN A 1.2.3.4    www.example.com IN CNAME a.example.com.    a.example.com IN A 5.6.7.8 then this would store the first A record, the CNAME, then the second A record which would overwrite the first.\"},\"setInterface(bytes32,bytes4,address)\":{\"notice\":\"Sets an interface associated with a name. Setting the address to 0 restores the default behaviour of querying the contract at `addr()` for interface support.\"},\"setName(bytes32,string)\":{\"notice\":\"Sets the name associated with an ENS node, for reverse records. May only be called by the owner of that node in the ENS registry.\"},\"setPubkey(bytes32,bytes32,bytes32)\":{\"notice\":\"Sets the SECP256k1 public key associated with an ENS node.\"},\"setText(bytes32,string,string)\":{\"notice\":\"Sets the text data associated with an ENS node and key. May only be called by the owner of that node in the ENS registry.\"},\"text(bytes32,string)\":{\"notice\":\"Returns the text data associated with an ENS node and key.\"}},\"notice\":\"A simple resolver anyone can use; only allows the owner of a node to set its address.\"}},\"settings\":{\"compilationTarget\":{\"contracts/legacy/PublicResolver_mainnet_9412610.sol\":\"PublicResolver_mainnet_9412610\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"contracts/legacy/PublicResolver_mainnet_9412610.sol\":{\"content\":\"/**\\n *Submitted for verification at Etherscan.io on 2020-02-03\\n */\\n\\n// File: @ensdomains/ens/contracts/ENS.sol\\n\\npragma solidity >=0.4.24;\\n\\ninterface ENS {\\n  // Logged when the owner of a node assigns a new owner to a subnode.\\n  event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n  // Logged when the owner of a node transfers ownership to a new account.\\n  event Transfer(bytes32 indexed node, address owner);\\n\\n  // Logged when the resolver for a node changes.\\n  event NewResolver(bytes32 indexed node, address resolver);\\n\\n  // Logged when the TTL of a node changes\\n  event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n  function setSubnodeOwner(\\n    bytes32 node,\\n    bytes32 label,\\n    address owner\\n  ) external;\\n\\n  function setResolver(bytes32 node, address resolver) external;\\n\\n  function setOwner(bytes32 node, address owner) external;\\n\\n  function setTTL(bytes32 node, uint64 ttl) external;\\n\\n  function owner(bytes32 node) external view returns (address);\\n\\n  function resolver(bytes32 node) external view returns (address);\\n\\n  function ttl(bytes32 node) external view returns (uint64);\\n}\\n\\n// File: contracts/ResolverBase.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract ResolverBase {\\n  bytes4 private constant INTERFACE_META_ID = 0x01ffc9a7;\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return interfaceID == INTERFACE_META_ID;\\n  }\\n\\n  function isAuthorised(bytes32 node) internal view returns (bool);\\n\\n  modifier authorised(bytes32 node) {\\n    require(isAuthorised(node));\\n    _;\\n  }\\n\\n  function bytesToAddress(bytes memory b)\\n    internal\\n    pure\\n    returns (address payable a)\\n  {\\n    require(b.length == 20);\\n    assembly {\\n      a := div(mload(add(b, 32)), exp(256, 12))\\n    }\\n  }\\n\\n  function addressToBytes(address a) internal pure returns (bytes memory b) {\\n    b = new bytes(20);\\n    assembly {\\n      mstore(add(b, 32), mul(a, exp(256, 12)))\\n    }\\n  }\\n}\\n\\n// File: contracts/profiles/ABIResolver.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract ABIResolver is ResolverBase {\\n  bytes4 private constant ABI_INTERFACE_ID = 0x2203ab56;\\n\\n  event ABIChanged(bytes32 indexed node, uint256 indexed contentType);\\n\\n  mapping(bytes32 => mapping(uint256 => bytes)) abis;\\n\\n  /**\\n   * Sets the ABI associated with an ENS node.\\n   * Nodes may have one ABI of each content type. To remove an ABI, set it to\\n   * the empty string.\\n   * @param node The node to update.\\n   * @param contentType The content type of the ABI\\n   * @param data The ABI data.\\n   */\\n  function setABI(\\n    bytes32 node,\\n    uint256 contentType,\\n    bytes calldata data\\n  ) external authorised(node) {\\n    // Content types must be powers of 2\\n    require(((contentType - 1) & contentType) == 0);\\n\\n    abis[node][contentType] = data;\\n    emit ABIChanged(node, contentType);\\n  }\\n\\n  /**\\n   * Returns the ABI associated with an ENS node.\\n   * Defined in EIP205.\\n   * @param node The ENS node to query\\n   * @param contentTypes A bitwise OR of the ABI formats accepted by the caller.\\n   * @return contentType The content type of the return value\\n   * @return data The ABI data\\n   */\\n  function ABI(bytes32 node, uint256 contentTypes)\\n    external\\n    view\\n    returns (uint256, bytes memory)\\n  {\\n    mapping(uint256 => bytes) storage abiset = abis[node];\\n\\n    for (\\n      uint256 contentType = 1;\\n      contentType <= contentTypes;\\n      contentType <<= 1\\n    ) {\\n      if ((contentType & contentTypes) != 0 && abiset[contentType].length > 0) {\\n        return (contentType, abiset[contentType]);\\n      }\\n    }\\n\\n    return (0, bytes(''));\\n  }\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return\\n      interfaceID == ABI_INTERFACE_ID || super.supportsInterface(interfaceID);\\n  }\\n}\\n\\n// File: contracts/profiles/AddrResolver.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract AddrResolver is ResolverBase {\\n  bytes4 private constant ADDR_INTERFACE_ID = 0x3b3b57de;\\n  bytes4 private constant ADDRESS_INTERFACE_ID = 0xf1cb7e06;\\n  uint256 private constant COIN_TYPE_ETH = 60;\\n\\n  event AddrChanged(bytes32 indexed node, address a);\\n  event AddressChanged(\\n    bytes32 indexed node,\\n    uint256 coinType,\\n    bytes newAddress\\n  );\\n\\n  mapping(bytes32 => mapping(uint256 => bytes)) _addresses;\\n\\n  /**\\n   * Sets the address associated with an ENS node.\\n   * May only be called by the owner of that node in the ENS registry.\\n   * @param node The node to update.\\n   * @param a The address to set.\\n   */\\n  function setAddr(bytes32 node, address a) external authorised(node) {\\n    setAddr(node, COIN_TYPE_ETH, addressToBytes(a));\\n  }\\n\\n  /**\\n   * Returns the address associated with an ENS node.\\n   * @param node The ENS node to query.\\n   * @return The associated address.\\n   */\\n  function addr(bytes32 node) public view returns (address payable) {\\n    bytes memory a = addr(node, COIN_TYPE_ETH);\\n    if (a.length == 0) {\\n      return address(0);\\n    }\\n    return bytesToAddress(a);\\n  }\\n\\n  function setAddr(\\n    bytes32 node,\\n    uint256 coinType,\\n    bytes memory a\\n  ) public authorised(node) {\\n    emit AddressChanged(node, coinType, a);\\n    if (coinType == COIN_TYPE_ETH) {\\n      emit AddrChanged(node, bytesToAddress(a));\\n    }\\n    _addresses[node][coinType] = a;\\n  }\\n\\n  function addr(bytes32 node, uint256 coinType)\\n    public\\n    view\\n    returns (bytes memory)\\n  {\\n    return _addresses[node][coinType];\\n  }\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return\\n      interfaceID == ADDR_INTERFACE_ID ||\\n      interfaceID == ADDRESS_INTERFACE_ID ||\\n      super.supportsInterface(interfaceID);\\n  }\\n}\\n\\n// File: contracts/profiles/ContentHashResolver.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract ContentHashResolver is ResolverBase {\\n  bytes4 private constant CONTENT_HASH_INTERFACE_ID = 0xbc1c58d1;\\n\\n  event ContenthashChanged(bytes32 indexed node, bytes hash);\\n\\n  mapping(bytes32 => bytes) hashes;\\n\\n  /**\\n   * Sets the contenthash associated with an ENS node.\\n   * May only be called by the owner of that node in the ENS registry.\\n   * @param node The node to update.\\n   * @param hash The contenthash to set\\n   */\\n  function setContenthash(bytes32 node, bytes calldata hash)\\n    external\\n    authorised(node)\\n  {\\n    hashes[node] = hash;\\n    emit ContenthashChanged(node, hash);\\n  }\\n\\n  /**\\n   * Returns the contenthash associated with an ENS node.\\n   * @param node The ENS node to query.\\n   * @return The associated contenthash.\\n   */\\n  function contenthash(bytes32 node) external view returns (bytes memory) {\\n    return hashes[node];\\n  }\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return\\n      interfaceID == CONTENT_HASH_INTERFACE_ID ||\\n      super.supportsInterface(interfaceID);\\n  }\\n}\\n\\n// File: @ensdomains/dnssec-oracle/contracts/BytesUtils.sol\\n\\npragma solidity >0.4.23;\\n\\nlibrary BytesUtils {\\n  /*\\n   * @dev Returns the keccak-256 hash of a byte range.\\n   * @param self The byte string to hash.\\n   * @param offset The position to start hashing at.\\n   * @param len The number of bytes to hash.\\n   * @return The hash of the byte range.\\n   */\\n  function keccak(\\n    bytes memory self,\\n    uint256 offset,\\n    uint256 len\\n  ) internal pure returns (bytes32 ret) {\\n    require(offset + len <= self.length);\\n    assembly {\\n      ret := keccak256(add(add(self, 32), offset), len)\\n    }\\n  }\\n\\n  /*\\n   * @dev Returns a positive number if `other` comes lexicographically after\\n   *      `self`, a negative number if it comes before, or zero if the\\n   *      contents of the two bytes are equal.\\n   * @param self The first bytes to compare.\\n   * @param other The second bytes to compare.\\n   * @return The result of the comparison.\\n   */\\n  function compare(bytes memory self, bytes memory other)\\n    internal\\n    pure\\n    returns (int256)\\n  {\\n    return compare(self, 0, self.length, other, 0, other.length);\\n  }\\n\\n  /*\\n   * @dev Returns a positive number if `other` comes lexicographically after\\n   *      `self`, a negative number if it comes before, or zero if the\\n   *      contents of the two bytes are equal. Comparison is done per-rune,\\n   *      on unicode codepoints.\\n   * @param self The first bytes to compare.\\n   * @param offset The offset of self.\\n   * @param len    The length of self.\\n   * @param other The second bytes to compare.\\n   * @param otheroffset The offset of the other string.\\n   * @param otherlen    The length of the other string.\\n   * @return The result of the comparison.\\n   */\\n  function compare(\\n    bytes memory self,\\n    uint256 offset,\\n    uint256 len,\\n    bytes memory other,\\n    uint256 otheroffset,\\n    uint256 otherlen\\n  ) internal pure returns (int256) {\\n    uint256 shortest = len;\\n    if (otherlen < len) shortest = otherlen;\\n\\n    uint256 selfptr;\\n    uint256 otherptr;\\n\\n    assembly {\\n      selfptr := add(self, add(offset, 32))\\n      otherptr := add(other, add(otheroffset, 32))\\n    }\\n    for (uint256 idx = 0; idx < shortest; idx += 32) {\\n      uint256 a;\\n      uint256 b;\\n      assembly {\\n        a := mload(selfptr)\\n        b := mload(otherptr)\\n      }\\n      if (a != b) {\\n        // Mask out irrelevant bytes and check again\\n        uint256 mask;\\n        if (shortest > 32) {\\n          mask = uint256(-1); // aka 0xffffff....\\n        } else {\\n          mask = ~(2**(8 * (32 - shortest + idx)) - 1);\\n        }\\n        uint256 diff = (a & mask) - (b & mask);\\n        if (diff != 0) return int256(diff);\\n      }\\n      selfptr += 32;\\n      otherptr += 32;\\n    }\\n\\n    return int256(len) - int256(otherlen);\\n  }\\n\\n  /*\\n   * @dev Returns true if the two byte ranges are equal.\\n   * @param self The first byte range to compare.\\n   * @param offset The offset into the first byte range.\\n   * @param other The second byte range to compare.\\n   * @param otherOffset The offset into the second byte range.\\n   * @param len The number of bytes to compare\\n   * @return True if the byte ranges are equal, false otherwise.\\n   */\\n  function equals(\\n    bytes memory self,\\n    uint256 offset,\\n    bytes memory other,\\n    uint256 otherOffset,\\n    uint256 len\\n  ) internal pure returns (bool) {\\n    return keccak(self, offset, len) == keccak(other, otherOffset, len);\\n  }\\n\\n  /*\\n   * @dev Returns true if the two byte ranges are equal with offsets.\\n   * @param self The first byte range to compare.\\n   * @param offset The offset into the first byte range.\\n   * @param other The second byte range to compare.\\n   * @param otherOffset The offset into the second byte range.\\n   * @return True if the byte ranges are equal, false otherwise.\\n   */\\n  function equals(\\n    bytes memory self,\\n    uint256 offset,\\n    bytes memory other,\\n    uint256 otherOffset\\n  ) internal pure returns (bool) {\\n    return\\n      keccak(self, offset, self.length - offset) ==\\n      keccak(other, otherOffset, other.length - otherOffset);\\n  }\\n\\n  /*\\n   * @dev Compares a range of 'self' to all of 'other' and returns True iff\\n   *      they are equal.\\n   * @param self The first byte range to compare.\\n   * @param offset The offset into the first byte range.\\n   * @param other The second byte range to compare.\\n   * @return True if the byte ranges are equal, false otherwise.\\n   */\\n  function equals(\\n    bytes memory self,\\n    uint256 offset,\\n    bytes memory other\\n  ) internal pure returns (bool) {\\n    return\\n      self.length >= offset + other.length &&\\n      equals(self, offset, other, 0, other.length);\\n  }\\n\\n  /*\\n   * @dev Returns true if the two byte ranges are equal.\\n   * @param self The first byte range to compare.\\n   * @param other The second byte range to compare.\\n   * @return True if the byte ranges are equal, false otherwise.\\n   */\\n  function equals(bytes memory self, bytes memory other)\\n    internal\\n    pure\\n    returns (bool)\\n  {\\n    return\\n      self.length == other.length && equals(self, 0, other, 0, self.length);\\n  }\\n\\n  /*\\n   * @dev Returns the 8-bit number at the specified index of self.\\n   * @param self The byte string.\\n   * @param idx The index into the bytes\\n   * @return The specified 8 bits of the string, interpreted as an integer.\\n   */\\n  function readUint8(bytes memory self, uint256 idx)\\n    internal\\n    pure\\n    returns (uint8 ret)\\n  {\\n    return uint8(self[idx]);\\n  }\\n\\n  /*\\n   * @dev Returns the 16-bit number at the specified index of self.\\n   * @param self The byte string.\\n   * @param idx The index into the bytes\\n   * @return The specified 16 bits of the string, interpreted as an integer.\\n   */\\n  function readUint16(bytes memory self, uint256 idx)\\n    internal\\n    pure\\n    returns (uint16 ret)\\n  {\\n    require(idx + 2 <= self.length);\\n    assembly {\\n      ret := and(mload(add(add(self, 2), idx)), 0xFFFF)\\n    }\\n  }\\n\\n  /*\\n   * @dev Returns the 32-bit number at the specified index of self.\\n   * @param self The byte string.\\n   * @param idx The index into the bytes\\n   * @return The specified 32 bits of the string, interpreted as an integer.\\n   */\\n  function readUint32(bytes memory self, uint256 idx)\\n    internal\\n    pure\\n    returns (uint32 ret)\\n  {\\n    require(idx + 4 <= self.length);\\n    assembly {\\n      ret := and(mload(add(add(self, 4), idx)), 0xFFFFFFFF)\\n    }\\n  }\\n\\n  /*\\n   * @dev Returns the 32 byte value at the specified index of self.\\n   * @param self The byte string.\\n   * @param idx The index into the bytes\\n   * @return The specified 32 bytes of the string.\\n   */\\n  function readBytes32(bytes memory self, uint256 idx)\\n    internal\\n    pure\\n    returns (bytes32 ret)\\n  {\\n    require(idx + 32 <= self.length);\\n    assembly {\\n      ret := mload(add(add(self, 32), idx))\\n    }\\n  }\\n\\n  /*\\n   * @dev Returns the 32 byte value at the specified index of self.\\n   * @param self The byte string.\\n   * @param idx The index into the bytes\\n   * @return The specified 32 bytes of the string.\\n   */\\n  function readBytes20(bytes memory self, uint256 idx)\\n    internal\\n    pure\\n    returns (bytes20 ret)\\n  {\\n    require(idx + 20 <= self.length);\\n    assembly {\\n      ret := and(\\n        mload(add(add(self, 32), idx)),\\n        0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000\\n      )\\n    }\\n  }\\n\\n  /*\\n   * @dev Returns the n byte value at the specified index of self.\\n   * @param self The byte string.\\n   * @param idx The index into the bytes.\\n   * @param len The number of bytes.\\n   * @return The specified 32 bytes of the string.\\n   */\\n  function readBytesN(\\n    bytes memory self,\\n    uint256 idx,\\n    uint256 len\\n  ) internal pure returns (bytes32 ret) {\\n    require(len <= 32);\\n    require(idx + len <= self.length);\\n    assembly {\\n      let mask := not(sub(exp(256, sub(32, len)), 1))\\n      ret := and(mload(add(add(self, 32), idx)), mask)\\n    }\\n  }\\n\\n  function memcpy(\\n    uint256 dest,\\n    uint256 src,\\n    uint256 len\\n  ) private pure {\\n    // Copy word-length chunks while possible\\n    for (; len >= 32; len -= 32) {\\n      assembly {\\n        mstore(dest, mload(src))\\n      }\\n      dest += 32;\\n      src += 32;\\n    }\\n\\n    // Copy remaining bytes\\n    uint256 mask = 256**(32 - len) - 1;\\n    assembly {\\n      let srcpart := and(mload(src), not(mask))\\n      let destpart := and(mload(dest), mask)\\n      mstore(dest, or(destpart, srcpart))\\n    }\\n  }\\n\\n  /*\\n   * @dev Copies a substring into a new byte string.\\n   * @param self The byte string to copy from.\\n   * @param offset The offset to start copying at.\\n   * @param len The number of bytes to copy.\\n   */\\n  function substring(\\n    bytes memory self,\\n    uint256 offset,\\n    uint256 len\\n  ) internal pure returns (bytes memory) {\\n    require(offset + len <= self.length);\\n\\n    bytes memory ret = new bytes(len);\\n    uint256 dest;\\n    uint256 src;\\n\\n    assembly {\\n      dest := add(ret, 32)\\n      src := add(add(self, 32), offset)\\n    }\\n    memcpy(dest, src, len);\\n\\n    return ret;\\n  }\\n\\n  // Maps characters from 0x30 to 0x7A to their base32 values.\\n  // 0xFF represents invalid characters in that range.\\n  bytes constant base32HexTable =\\n    hex'00010203040506070809FFFFFFFFFFFFFF0A0B0C0D0E0F101112131415161718191A1B1C1D1E1FFFFFFFFFFFFFFFFFFFFF0A0B0C0D0E0F101112131415161718191A1B1C1D1E1F';\\n\\n  /**\\n   * @dev Decodes unpadded base32 data of up to one word in length.\\n   * @param self The data to decode.\\n   * @param off Offset into the string to start at.\\n   * @param len Number of characters to decode.\\n   * @return The decoded data, left aligned.\\n   */\\n  function base32HexDecodeWord(\\n    bytes memory self,\\n    uint256 off,\\n    uint256 len\\n  ) internal pure returns (bytes32) {\\n    require(len <= 52);\\n\\n    uint256 ret = 0;\\n    uint8 decoded;\\n    for (uint256 i = 0; i < len; i++) {\\n      bytes1 char = self[off + i];\\n      require(char >= 0x30 && char <= 0x7A);\\n      decoded = uint8(base32HexTable[uint256(uint8(char)) - 0x30]);\\n      require(decoded <= 0x20);\\n      if (i == len - 1) {\\n        break;\\n      }\\n      ret = (ret << 5) | decoded;\\n    }\\n\\n    uint256 bitlen = len * 5;\\n    if (len % 8 == 0) {\\n      // Multiple of 8 characters, no padding\\n      ret = (ret << 5) | decoded;\\n    } else if (len % 8 == 2) {\\n      // Two extra characters - 1 byte\\n      ret = (ret << 3) | (decoded >> 2);\\n      bitlen -= 2;\\n    } else if (len % 8 == 4) {\\n      // Four extra characters - 2 bytes\\n      ret = (ret << 1) | (decoded >> 4);\\n      bitlen -= 4;\\n    } else if (len % 8 == 5) {\\n      // Five extra characters - 3 bytes\\n      ret = (ret << 4) | (decoded >> 1);\\n      bitlen -= 1;\\n    } else if (len % 8 == 7) {\\n      // Seven extra characters - 4 bytes\\n      ret = (ret << 2) | (decoded >> 3);\\n      bitlen -= 3;\\n    } else {\\n      revert();\\n    }\\n\\n    return bytes32(ret << (256 - bitlen));\\n  }\\n}\\n\\n// File: @ensdomains/buffer/contracts/Buffer.sol\\n\\npragma solidity >0.4.18;\\n\\n/**\\n * @dev A library for working with mutable byte buffers in Solidity.\\n *\\n * Byte buffers are mutable and expandable, and provide a variety of primitives\\n * for writing to them. At any time you can fetch a bytes object containing the\\n * current contents of the buffer. The bytes object should not be stored between\\n * operations, as it may change due to resizing of the buffer.\\n */\\nlibrary Buffer {\\n  /**\\n   * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n   *      a capacity. The capacity may be longer than the current value, in\\n   *      which case it can be extended without the need to allocate more memory.\\n   */\\n  struct buffer {\\n    bytes buf;\\n    uint256 capacity;\\n  }\\n\\n  /**\\n   * @dev Initializes a buffer with an initial capacity.\\n   * @param buf The buffer to initialize.\\n   * @param capacity The number of bytes of space to allocate the buffer.\\n   * @return The buffer, for chaining.\\n   */\\n  function init(buffer memory buf, uint256 capacity)\\n    internal\\n    pure\\n    returns (buffer memory)\\n  {\\n    if (capacity % 32 != 0) {\\n      capacity += 32 - (capacity % 32);\\n    }\\n    // Allocate space for the buffer data\\n    buf.capacity = capacity;\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(buf, ptr)\\n      mstore(ptr, 0)\\n      mstore(0x40, add(32, add(ptr, capacity)))\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Initializes a new buffer from an existing bytes object.\\n   *      Changes to the buffer may mutate the original value.\\n   * @param b The bytes object to initialize the buffer with.\\n   * @return A new buffer.\\n   */\\n  function fromBytes(bytes memory b) internal pure returns (buffer memory) {\\n    buffer memory buf;\\n    buf.buf = b;\\n    buf.capacity = b.length;\\n    return buf;\\n  }\\n\\n  function resize(buffer memory buf, uint256 capacity) private pure {\\n    bytes memory oldbuf = buf.buf;\\n    init(buf, capacity);\\n    append(buf, oldbuf);\\n  }\\n\\n  function max(uint256 a, uint256 b) private pure returns (uint256) {\\n    if (a > b) {\\n      return a;\\n    }\\n    return b;\\n  }\\n\\n  /**\\n   * @dev Sets buffer length to 0.\\n   * @param buf The buffer to truncate.\\n   * @return The original buffer, for chaining..\\n   */\\n  function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n    assembly {\\n      let bufptr := mload(buf)\\n      mstore(bufptr, 0)\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Writes a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The start offset to write to.\\n   * @param data The data to append.\\n   * @param len The number of bytes to copy.\\n   * @return The original buffer, for chaining.\\n   */\\n  function write(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes memory data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    require(len <= data.length);\\n\\n    if (off + len > buf.capacity) {\\n      resize(buf, max(buf.capacity, len + off) * 2);\\n    }\\n\\n    uint256 dest;\\n    uint256 src;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Start address = buffer address + offset + sizeof(buffer length)\\n      dest := add(add(bufptr, 32), off)\\n      // Update buffer length if we're extending it\\n      if gt(add(len, off), buflen) {\\n        mstore(bufptr, add(len, off))\\n      }\\n      src := add(data, 32)\\n    }\\n\\n    // Copy word-length chunks while possible\\n    for (; len >= 32; len -= 32) {\\n      assembly {\\n        mstore(dest, mload(src))\\n      }\\n      dest += 32;\\n      src += 32;\\n    }\\n\\n    // Copy remaining bytes\\n    uint256 mask = 256**(32 - len) - 1;\\n    assembly {\\n      let srcpart := and(mload(src), not(mask))\\n      let destpart := and(mload(dest), mask)\\n      mstore(dest, or(destpart, srcpart))\\n    }\\n\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @param len The number of bytes to copy.\\n   * @return The original buffer, for chaining.\\n   */\\n  function append(\\n    buffer memory buf,\\n    bytes memory data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, len);\\n  }\\n\\n  /**\\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function append(buffer memory buf, bytes memory data)\\n    internal\\n    pure\\n    returns (buffer memory)\\n  {\\n    return write(buf, buf.buf.length, data, data.length);\\n  }\\n\\n  /**\\n   * @dev Writes a byte to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write the byte at.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeUint8(\\n    buffer memory buf,\\n    uint256 off,\\n    uint8 data\\n  ) internal pure returns (buffer memory) {\\n    if (off >= buf.capacity) {\\n      resize(buf, buf.capacity * 2);\\n    }\\n\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Address = buffer address + sizeof(buffer length) + off\\n      let dest := add(add(bufptr, off), 32)\\n      mstore8(dest, data)\\n      // Update buffer length if we extended it\\n      if eq(off, buflen) {\\n        mstore(bufptr, add(buflen, 1))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function appendUint8(buffer memory buf, uint8 data)\\n    internal\\n    pure\\n    returns (buffer memory)\\n  {\\n    return writeUint8(buf, buf.buf.length, data);\\n  }\\n\\n  /**\\n   * @dev Writes up to 32 bytes to the buffer. Resizes if doing so would\\n   *      exceed the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @param len The number of bytes to write (left-aligned).\\n   * @return The original buffer, for chaining.\\n   */\\n  function write(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes32 data,\\n    uint256 len\\n  ) private pure returns (buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    uint256 mask = 256**len - 1;\\n    // Right-align data\\n    data = data >> (8 * (32 - len));\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Address = buffer address + sizeof(buffer length) + off + len\\n      let dest := add(add(bufptr, off), len)\\n      mstore(dest, or(and(mload(dest), not(mask)), data))\\n      // Update buffer length if we extended it\\n      if gt(add(off, len), mload(bufptr)) {\\n        mstore(bufptr, add(off, len))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Writes a bytes20 to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeBytes20(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes20 data\\n  ) internal pure returns (buffer memory) {\\n    return write(buf, off, bytes32(data), 20);\\n  }\\n\\n  /**\\n   * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chhaining.\\n   */\\n  function appendBytes20(buffer memory buf, bytes20 data)\\n    internal\\n    pure\\n    returns (buffer memory)\\n  {\\n    return write(buf, buf.buf.length, bytes32(data), 20);\\n  }\\n\\n  /**\\n   * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function appendBytes32(buffer memory buf, bytes32 data)\\n    internal\\n    pure\\n    returns (buffer memory)\\n  {\\n    return write(buf, buf.buf.length, data, 32);\\n  }\\n\\n  /**\\n   * @dev Writes an integer to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @param len The number of bytes to write (right-aligned).\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeInt(\\n    buffer memory buf,\\n    uint256 off,\\n    uint256 data,\\n    uint256 len\\n  ) private pure returns (buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    uint256 mask = 256**len - 1;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Address = buffer address + off + sizeof(buffer length) + len\\n      let dest := add(add(bufptr, off), len)\\n      mstore(dest, or(and(mload(dest), not(mask)), data))\\n      // Update buffer length if we extended it\\n      if gt(add(off, len), mload(bufptr)) {\\n        mstore(bufptr, add(off, len))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n   * exceed the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer.\\n   */\\n  function appendInt(\\n    buffer memory buf,\\n    uint256 data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    return writeInt(buf, buf.buf.length, data, len);\\n  }\\n}\\n\\n// File: @ensdomains/dnssec-oracle/contracts/RRUtils.sol\\n\\npragma solidity >0.4.23;\\n\\n/**\\n * @dev RRUtils is a library that provides utilities for parsing DNS resource records.\\n */\\nlibrary RRUtils {\\n  using BytesUtils for *;\\n  using Buffer for *;\\n\\n  /**\\n   * @dev Returns the number of bytes in the DNS name at 'offset' in 'self'.\\n   * @param self The byte array to read a name from.\\n   * @param offset The offset to start reading at.\\n   * @return The length of the DNS name at 'offset', in bytes.\\n   */\\n  function nameLength(bytes memory self, uint256 offset)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    uint256 idx = offset;\\n    while (true) {\\n      assert(idx < self.length);\\n      uint256 labelLen = self.readUint8(idx);\\n      idx += labelLen + 1;\\n      if (labelLen == 0) {\\n        break;\\n      }\\n    }\\n    return idx - offset;\\n  }\\n\\n  /**\\n   * @dev Returns a DNS format name at the specified offset of self.\\n   * @param self The byte array to read a name from.\\n   * @param offset The offset to start reading at.\\n   * @return The name.\\n   */\\n  function readName(bytes memory self, uint256 offset)\\n    internal\\n    pure\\n    returns (bytes memory ret)\\n  {\\n    uint256 len = nameLength(self, offset);\\n    return self.substring(offset, len);\\n  }\\n\\n  /**\\n   * @dev Returns the number of labels in the DNS name at 'offset' in 'self'.\\n   * @param self The byte array to read a name from.\\n   * @param offset The offset to start reading at.\\n   * @return The number of labels in the DNS name at 'offset', in bytes.\\n   */\\n  function labelCount(bytes memory self, uint256 offset)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    uint256 count = 0;\\n    while (true) {\\n      assert(offset < self.length);\\n      uint256 labelLen = self.readUint8(offset);\\n      offset += labelLen + 1;\\n      if (labelLen == 0) {\\n        break;\\n      }\\n      count += 1;\\n    }\\n    return count;\\n  }\\n\\n  /**\\n   * @dev An iterator over resource records.\\n   */\\n  struct RRIterator {\\n    bytes data;\\n    uint256 offset;\\n    uint16 dnstype;\\n    uint16 class;\\n    uint32 ttl;\\n    uint256 rdataOffset;\\n    uint256 nextOffset;\\n  }\\n\\n  /**\\n   * @dev Begins iterating over resource records.\\n   * @param self The byte string to read from.\\n   * @param offset The offset to start reading at.\\n   * @return An iterator object.\\n   */\\n  function iterateRRs(bytes memory self, uint256 offset)\\n    internal\\n    pure\\n    returns (RRIterator memory ret)\\n  {\\n    ret.data = self;\\n    ret.nextOffset = offset;\\n    next(ret);\\n  }\\n\\n  /**\\n   * @dev Returns true iff there are more RRs to iterate.\\n   * @param iter The iterator to check.\\n   * @return True iff the iterator has finished.\\n   */\\n  function done(RRIterator memory iter) internal pure returns (bool) {\\n    return iter.offset >= iter.data.length;\\n  }\\n\\n  /**\\n   * @dev Moves the iterator to the next resource record.\\n   * @param iter The iterator to advance.\\n   */\\n  function next(RRIterator memory iter) internal pure {\\n    iter.offset = iter.nextOffset;\\n    if (iter.offset >= iter.data.length) {\\n      return;\\n    }\\n\\n    // Skip the name\\n    uint256 off = iter.offset + nameLength(iter.data, iter.offset);\\n\\n    // Read type, class, and ttl\\n    iter.dnstype = iter.data.readUint16(off);\\n    off += 2;\\n    iter.class = iter.data.readUint16(off);\\n    off += 2;\\n    iter.ttl = iter.data.readUint32(off);\\n    off += 4;\\n\\n    // Read the rdata\\n    uint256 rdataLength = iter.data.readUint16(off);\\n    off += 2;\\n    iter.rdataOffset = off;\\n    iter.nextOffset = off + rdataLength;\\n  }\\n\\n  /**\\n   * @dev Returns the name of the current record.\\n   * @param iter The iterator.\\n   * @return A new bytes object containing the owner name from the RR.\\n   */\\n  function name(RRIterator memory iter) internal pure returns (bytes memory) {\\n    return iter.data.substring(iter.offset, nameLength(iter.data, iter.offset));\\n  }\\n\\n  /**\\n   * @dev Returns the rdata portion of the current record.\\n   * @param iter The iterator.\\n   * @return A new bytes object containing the RR's RDATA.\\n   */\\n  function rdata(RRIterator memory iter) internal pure returns (bytes memory) {\\n    return\\n      iter.data.substring(iter.rdataOffset, iter.nextOffset - iter.rdataOffset);\\n  }\\n\\n  /**\\n   * @dev Checks if a given RR type exists in a type bitmap.\\n   * @param self The byte string to read the type bitmap from.\\n   * @param offset The offset to start reading at.\\n   * @param rrtype The RR type to check for.\\n   * @return True if the type is found in the bitmap, false otherwise.\\n   */\\n  function checkTypeBitmap(\\n    bytes memory self,\\n    uint256 offset,\\n    uint16 rrtype\\n  ) internal pure returns (bool) {\\n    uint8 typeWindow = uint8(rrtype >> 8);\\n    uint8 windowByte = uint8((rrtype & 0xff) / 8);\\n    uint8 windowBitmask = uint8(uint8(1) << (uint8(7) - uint8(rrtype & 0x7)));\\n    for (uint256 off = offset; off < self.length; ) {\\n      uint8 window = self.readUint8(off);\\n      uint8 len = self.readUint8(off + 1);\\n      if (typeWindow < window) {\\n        // We've gone past our window; it's not here.\\n        return false;\\n      } else if (typeWindow == window) {\\n        // Check this type bitmap\\n        if (len * 8 <= windowByte) {\\n          // Our type is past the end of the bitmap\\n          return false;\\n        }\\n        return (self.readUint8(off + windowByte + 2) & windowBitmask) != 0;\\n      } else {\\n        // Skip this type bitmap\\n        off += len + 2;\\n      }\\n    }\\n\\n    return false;\\n  }\\n\\n  function compareNames(bytes memory self, bytes memory other)\\n    internal\\n    pure\\n    returns (int256)\\n  {\\n    if (self.equals(other)) {\\n      return 0;\\n    }\\n\\n    uint256 off;\\n    uint256 otheroff;\\n    uint256 prevoff;\\n    uint256 otherprevoff;\\n    uint256 counts = labelCount(self, 0);\\n    uint256 othercounts = labelCount(other, 0);\\n\\n    // Keep removing labels from the front of the name until both names are equal length\\n    while (counts > othercounts) {\\n      prevoff = off;\\n      off = progress(self, off);\\n      counts--;\\n    }\\n\\n    while (othercounts > counts) {\\n      otherprevoff = otheroff;\\n      otheroff = progress(other, otheroff);\\n      othercounts--;\\n    }\\n\\n    // Compare the last nonequal labels to each other\\n    while (counts > 0 && !self.equals(off, other, otheroff)) {\\n      prevoff = off;\\n      off = progress(self, off);\\n      otherprevoff = otheroff;\\n      otheroff = progress(other, otheroff);\\n      counts -= 1;\\n    }\\n\\n    if (off == 0) {\\n      return -1;\\n    }\\n    if (otheroff == 0) {\\n      return 1;\\n    }\\n\\n    return\\n      self.compare(\\n        prevoff + 1,\\n        self.readUint8(prevoff),\\n        other,\\n        otherprevoff + 1,\\n        other.readUint8(otherprevoff)\\n      );\\n  }\\n\\n  function progress(bytes memory body, uint256 off)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    return off + 1 + body.readUint8(off);\\n  }\\n}\\n\\n// File: contracts/profiles/DNSResolver.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract DNSResolver is ResolverBase {\\n  using RRUtils for *;\\n  using BytesUtils for bytes;\\n\\n  bytes4 private constant DNS_RECORD_INTERFACE_ID = 0xa8fa5682;\\n\\n  // DNSRecordChanged is emitted whenever a given node/name/resource's RRSET is updated.\\n  event DNSRecordChanged(\\n    bytes32 indexed node,\\n    bytes name,\\n    uint16 resource,\\n    bytes record\\n  );\\n  // DNSRecordDeleted is emitted whenever a given node/name/resource's RRSET is deleted.\\n  event DNSRecordDeleted(bytes32 indexed node, bytes name, uint16 resource);\\n  // DNSZoneCleared is emitted whenever a given node's zone information is cleared.\\n  event DNSZoneCleared(bytes32 indexed node);\\n\\n  // Version the mapping for each zone.  This allows users who have lost\\n  // track of their entries to effectively delete an entire zone by bumping\\n  // the version number.\\n  // node => version\\n  mapping(bytes32 => uint256) private versions;\\n\\n  // The records themselves.  Stored as binary RRSETs\\n  // node => version => name => resource => data\\n  mapping(bytes32 => mapping(uint256 => mapping(bytes32 => mapping(uint16 => bytes))))\\n    private records;\\n\\n  // Count of number of entries for a given name.  Required for DNS resolvers\\n  // when resolving wildcards.\\n  // node => version => name => number of records\\n  mapping(bytes32 => mapping(uint256 => mapping(bytes32 => uint16)))\\n    private nameEntriesCount;\\n\\n  /**\\n   * Set one or more DNS records.  Records are supplied in wire-format.\\n   * Records with the same node/name/resource must be supplied one after the\\n   * other to ensure the data is updated correctly. For example, if the data\\n   * was supplied:\\n   *     a.example.com IN A 1.2.3.4\\n   *     a.example.com IN A 5.6.7.8\\n   *     www.example.com IN CNAME a.example.com.\\n   * then this would store the two A records for a.example.com correctly as a\\n   * single RRSET, however if the data was supplied:\\n   *     a.example.com IN A 1.2.3.4\\n   *     www.example.com IN CNAME a.example.com.\\n   *     a.example.com IN A 5.6.7.8\\n   * then this would store the first A record, the CNAME, then the second A\\n   * record which would overwrite the first.\\n   *\\n   * @param node the namehash of the node for which to set the records\\n   * @param data the DNS wire format records to set\\n   */\\n  function setDNSRecords(bytes32 node, bytes calldata data)\\n    external\\n    authorised(node)\\n  {\\n    uint16 resource = 0;\\n    uint256 offset = 0;\\n    bytes memory name;\\n    bytes memory value;\\n    bytes32 nameHash;\\n    // Iterate over the data to add the resource records\\n    for (\\n      RRUtils.RRIterator memory iter = data.iterateRRs(0);\\n      !iter.done();\\n      iter.next()\\n    ) {\\n      if (resource == 0) {\\n        resource = iter.dnstype;\\n        name = iter.name();\\n        nameHash = keccak256(abi.encodePacked(name));\\n        value = bytes(iter.rdata());\\n      } else {\\n        bytes memory newName = iter.name();\\n        if (resource != iter.dnstype || !name.equals(newName)) {\\n          setDNSRRSet(\\n            node,\\n            name,\\n            resource,\\n            data,\\n            offset,\\n            iter.offset - offset,\\n            value.length == 0\\n          );\\n          resource = iter.dnstype;\\n          offset = iter.offset;\\n          name = newName;\\n          nameHash = keccak256(name);\\n          value = bytes(iter.rdata());\\n        }\\n      }\\n    }\\n    if (name.length > 0) {\\n      setDNSRRSet(\\n        node,\\n        name,\\n        resource,\\n        data,\\n        offset,\\n        data.length - offset,\\n        value.length == 0\\n      );\\n    }\\n  }\\n\\n  /**\\n   * Obtain a DNS record.\\n   * @param node the namehash of the node for which to fetch the record\\n   * @param name the keccak-256 hash of the fully-qualified name for which to fetch the record\\n   * @param resource the ID of the resource as per https://en.wikipedia.org/wiki/List_of_DNS_record_types\\n   * @return the DNS record in wire format if present, otherwise empty\\n   */\\n  function dnsRecord(\\n    bytes32 node,\\n    bytes32 name,\\n    uint16 resource\\n  ) public view returns (bytes memory) {\\n    return records[node][versions[node]][name][resource];\\n  }\\n\\n  /**\\n   * Check if a given node has records.\\n   * @param node the namehash of the node for which to check the records\\n   * @param name the namehash of the node for which to check the records\\n   */\\n  function hasDNSRecords(bytes32 node, bytes32 name)\\n    public\\n    view\\n    returns (bool)\\n  {\\n    return (nameEntriesCount[node][versions[node]][name] != 0);\\n  }\\n\\n  /**\\n   * Clear all information for a DNS zone.\\n   * @param node the namehash of the node for which to clear the zone\\n   */\\n  function clearDNSZone(bytes32 node) public authorised(node) {\\n    versions[node]++;\\n    emit DNSZoneCleared(node);\\n  }\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return\\n      interfaceID == DNS_RECORD_INTERFACE_ID ||\\n      super.supportsInterface(interfaceID);\\n  }\\n\\n  function setDNSRRSet(\\n    bytes32 node,\\n    bytes memory name,\\n    uint16 resource,\\n    bytes memory data,\\n    uint256 offset,\\n    uint256 size,\\n    bool deleteRecord\\n  ) private {\\n    uint256 version = versions[node];\\n    bytes32 nameHash = keccak256(name);\\n    bytes memory rrData = data.substring(offset, size);\\n    if (deleteRecord) {\\n      if (records[node][version][nameHash][resource].length != 0) {\\n        nameEntriesCount[node][version][nameHash]--;\\n      }\\n      delete (records[node][version][nameHash][resource]);\\n      emit DNSRecordDeleted(node, name, resource);\\n    } else {\\n      if (records[node][version][nameHash][resource].length == 0) {\\n        nameEntriesCount[node][version][nameHash]++;\\n      }\\n      records[node][version][nameHash][resource] = rrData;\\n      emit DNSRecordChanged(node, name, resource, rrData);\\n    }\\n  }\\n}\\n\\n// File: contracts/profiles/InterfaceResolver.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract InterfaceResolver is ResolverBase, AddrResolver {\\n  bytes4 private constant INTERFACE_INTERFACE_ID =\\n    bytes4(keccak256('interfaceImplementer(bytes32,bytes4)'));\\n  bytes4 private constant INTERFACE_META_ID = 0x01ffc9a7;\\n\\n  event InterfaceChanged(\\n    bytes32 indexed node,\\n    bytes4 indexed interfaceID,\\n    address implementer\\n  );\\n\\n  mapping(bytes32 => mapping(bytes4 => address)) interfaces;\\n\\n  /**\\n   * Sets an interface associated with a name.\\n   * Setting the address to 0 restores the default behaviour of querying the contract at `addr()` for interface support.\\n   * @param node The node to update.\\n   * @param interfaceID The EIP 168 interface ID.\\n   * @param implementer The address of a contract that implements this interface for this node.\\n   */\\n  function setInterface(\\n    bytes32 node,\\n    bytes4 interfaceID,\\n    address implementer\\n  ) external authorised(node) {\\n    interfaces[node][interfaceID] = implementer;\\n    emit InterfaceChanged(node, interfaceID, implementer);\\n  }\\n\\n  /**\\n   * Returns the address of a contract that implements the specified interface for this name.\\n   * If an implementer has not been set for this interfaceID and name, the resolver will query\\n   * the contract at `addr()`. If `addr()` is set, a contract exists at that address, and that\\n   * contract implements EIP168 and returns `true` for the specified interfaceID, its address\\n   * will be returned.\\n   * @param node The ENS node to query.\\n   * @param interfaceID The EIP 168 interface ID to check for.\\n   * @return The address that implements this interface, or 0 if the interface is unsupported.\\n   */\\n  function interfaceImplementer(bytes32 node, bytes4 interfaceID)\\n    external\\n    view\\n    returns (address)\\n  {\\n    address implementer = interfaces[node][interfaceID];\\n    if (implementer != address(0)) {\\n      return implementer;\\n    }\\n\\n    address a = addr(node);\\n    if (a == address(0)) {\\n      return address(0);\\n    }\\n\\n    (bool success, bytes memory returnData) = a.staticcall(\\n      abi.encodeWithSignature('supportsInterface(bytes4)', INTERFACE_META_ID)\\n    );\\n    if (!success || returnData.length < 32 || returnData[31] == 0) {\\n      // EIP 168 not supported by target\\n      return address(0);\\n    }\\n\\n    (success, returnData) = a.staticcall(\\n      abi.encodeWithSignature('supportsInterface(bytes4)', interfaceID)\\n    );\\n    if (!success || returnData.length < 32 || returnData[31] == 0) {\\n      // Specified interface not supported by target\\n      return address(0);\\n    }\\n\\n    return a;\\n  }\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return\\n      interfaceID == INTERFACE_INTERFACE_ID ||\\n      super.supportsInterface(interfaceID);\\n  }\\n}\\n\\n// File: contracts/profiles/NameResolver.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract NameResolver is ResolverBase {\\n  bytes4 private constant NAME_INTERFACE_ID = 0x691f3431;\\n\\n  event NameChanged(bytes32 indexed node, string name);\\n\\n  mapping(bytes32 => string) names;\\n\\n  /**\\n   * Sets the name associated with an ENS node, for reverse records.\\n   * May only be called by the owner of that node in the ENS registry.\\n   * @param node The node to update.\\n   * @param name The name to set.\\n   */\\n  function setName(bytes32 node, string calldata name)\\n    external\\n    authorised(node)\\n  {\\n    names[node] = name;\\n    emit NameChanged(node, name);\\n  }\\n\\n  /**\\n   * Returns the name associated with an ENS node, for reverse records.\\n   * Defined in EIP181.\\n   * @param node The ENS node to query.\\n   * @return The associated name.\\n   */\\n  function name(bytes32 node) external view returns (string memory) {\\n    return names[node];\\n  }\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return\\n      interfaceID == NAME_INTERFACE_ID || super.supportsInterface(interfaceID);\\n  }\\n}\\n\\n// File: contracts/profiles/PubkeyResolver.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract PubkeyResolver is ResolverBase {\\n  bytes4 private constant PUBKEY_INTERFACE_ID = 0xc8690233;\\n\\n  event PubkeyChanged(bytes32 indexed node, bytes32 x, bytes32 y);\\n\\n  struct PublicKey {\\n    bytes32 x;\\n    bytes32 y;\\n  }\\n\\n  mapping(bytes32 => PublicKey) pubkeys;\\n\\n  /**\\n   * Sets the SECP256k1 public key associated with an ENS node.\\n   * @param node The ENS node to query\\n   * @param x the X coordinate of the curve point for the public key.\\n   * @param y the Y coordinate of the curve point for the public key.\\n   */\\n  function setPubkey(\\n    bytes32 node,\\n    bytes32 x,\\n    bytes32 y\\n  ) external authorised(node) {\\n    pubkeys[node] = PublicKey(x, y);\\n    emit PubkeyChanged(node, x, y);\\n  }\\n\\n  /**\\n   * Returns the SECP256k1 public key associated with an ENS node.\\n   * Defined in EIP 619.\\n   * @param node The ENS node to query\\n   * @return x, y the X and Y coordinates of the curve point for the public key.\\n   */\\n  function pubkey(bytes32 node) external view returns (bytes32 x, bytes32 y) {\\n    return (pubkeys[node].x, pubkeys[node].y);\\n  }\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return\\n      interfaceID == PUBKEY_INTERFACE_ID ||\\n      super.supportsInterface(interfaceID);\\n  }\\n}\\n\\n// File: contracts/profiles/TextResolver.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract TextResolver is ResolverBase {\\n  bytes4 private constant TEXT_INTERFACE_ID = 0x59d1d43c;\\n\\n  event TextChanged(\\n    bytes32 indexed node,\\n    string indexed indexedKey,\\n    string key\\n  );\\n\\n  mapping(bytes32 => mapping(string => string)) texts;\\n\\n  /**\\n   * Sets the text data associated with an ENS node and key.\\n   * May only be called by the owner of that node in the ENS registry.\\n   * @param node The node to update.\\n   * @param key The key to set.\\n   * @param value The text data value to set.\\n   */\\n  function setText(\\n    bytes32 node,\\n    string calldata key,\\n    string calldata value\\n  ) external authorised(node) {\\n    texts[node][key] = value;\\n    emit TextChanged(node, key, key);\\n  }\\n\\n  /**\\n   * Returns the text data associated with an ENS node and key.\\n   * @param node The ENS node to query.\\n   * @param key The text data key to query.\\n   * @return The associated text data.\\n   */\\n  function text(bytes32 node, string calldata key)\\n    external\\n    view\\n    returns (string memory)\\n  {\\n    return texts[node][key];\\n  }\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return\\n      interfaceID == TEXT_INTERFACE_ID || super.supportsInterface(interfaceID);\\n  }\\n}\\n\\n// File: contracts/PublicResolver.sol\\n\\npragma solidity ^0.5.0;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * A simple resolver anyone can use; only allows the owner of a node to set its\\n * address.\\n */\\ncontract PublicResolver_mainnet_9412610 is\\n  ABIResolver,\\n  AddrResolver,\\n  ContentHashResolver,\\n  DNSResolver,\\n  InterfaceResolver,\\n  NameResolver,\\n  PubkeyResolver,\\n  TextResolver\\n{\\n  ENS ens;\\n\\n  /**\\n   * A mapping of authorisations. An address that is authorised for a name\\n   * may make any changes to the name that the owner could, but may not update\\n   * the set of authorisations.\\n   * (node, owner, caller) => isAuthorised\\n   */\\n  mapping(bytes32 => mapping(address => mapping(address => bool)))\\n    public authorisations;\\n\\n  event AuthorisationChanged(\\n    bytes32 indexed node,\\n    address indexed owner,\\n    address indexed target,\\n    bool isAuthorised\\n  );\\n\\n  constructor(ENS _ens) public {\\n    ens = _ens;\\n  }\\n\\n  /**\\n   * @dev Sets or clears an authorisation.\\n   * Authorisations are specific to the caller. Any account can set an authorisation\\n   * for any name, but the authorisation that is checked will be that of the\\n   * current owner of a name. Thus, transferring a name effectively clears any\\n   * existing authorisations, and new authorisations can be set in advance of\\n   * an ownership transfer if desired.\\n   *\\n   * @param node The name to change the authorisation on.\\n   * @param target The address that is to be authorised or deauthorised.\\n   * @param isAuthorised True if the address should be authorised, or false if it should be deauthorised.\\n   */\\n  function setAuthorisation(\\n    bytes32 node,\\n    address target,\\n    bool isAuthorised\\n  ) external {\\n    authorisations[node][msg.sender][target] = isAuthorised;\\n    emit AuthorisationChanged(node, msg.sender, target, isAuthorised);\\n  }\\n\\n  function isAuthorised(bytes32 node) internal view returns (bool) {\\n    address owner = ens.owner(node);\\n    return owner == msg.sender || authorisations[node][owner][msg.sender];\\n  }\\n\\n  function multicall(bytes[] calldata data)\\n    external\\n    returns (bytes[] memory results)\\n  {\\n    results = new bytes[](data.length);\\n    for (uint256 i = 0; i < data.length; i++) {\\n      (bool success, bytes memory result) = address(this).delegatecall(data[i]);\\n      require(success);\\n      results[i] = result;\\n    }\\n    return results;\\n  }\\n}\\n\",\"keccak256\":\"0x29ca7d322ab7177f187f9bfc310e6dfc94049e9beaaafe958bead081fd90ad76\"}},\"version\":1}",
          "storageLayout": {
            "storage": [
              {
                "astId": 165,
                "contract": "contracts/legacy/PublicResolver_mainnet_9412610.sol:PublicResolver_mainnet_9412610",
                "label": "abis",
                "offset": 0,
                "slot": "0",
                "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_bytes_storage))"
              },
              {
                "astId": 313,
                "contract": "contracts/legacy/PublicResolver_mainnet_9412610.sol:PublicResolver_mainnet_9412610",
                "label": "_addresses",
                "offset": 0,
                "slot": "1",
                "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_bytes_storage))"
              },
              {
                "astId": 454,
                "contract": "contracts/legacy/PublicResolver_mainnet_9412610.sol:PublicResolver_mainnet_9412610",
                "label": "hashes",
                "offset": 0,
                "slot": "2",
                "type": "t_mapping(t_bytes32,t_bytes_storage)"
              },
              {
                "astId": 2351,
                "contract": "contracts/legacy/PublicResolver_mainnet_9412610.sol:PublicResolver_mainnet_9412610",
                "label": "versions",
                "offset": 0,
                "slot": "3",
                "type": "t_mapping(t_bytes32,t_uint256)"
              },
              {
                "astId": 2361,
                "contract": "contracts/legacy/PublicResolver_mainnet_9412610.sol:PublicResolver_mainnet_9412610",
                "label": "records",
                "offset": 0,
                "slot": "4",
                "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_mapping(t_bytes32,t_mapping(t_uint16,t_bytes_storage))))"
              },
              {
                "astId": 2369,
                "contract": "contracts/legacy/PublicResolver_mainnet_9412610.sol:PublicResolver_mainnet_9412610",
                "label": "nameEntriesCount",
                "offset": 0,
                "slot": "5",
                "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_mapping(t_bytes32,t_uint16)))"
              },
              {
                "astId": 2771,
                "contract": "contracts/legacy/PublicResolver_mainnet_9412610.sol:PublicResolver_mainnet_9412610",
                "label": "interfaces",
                "offset": 0,
                "slot": "6",
                "type": "t_mapping(t_bytes32,t_mapping(t_bytes4,t_address))"
              },
              {
                "astId": 2942,
                "contract": "contracts/legacy/PublicResolver_mainnet_9412610.sol:PublicResolver_mainnet_9412610",
                "label": "names",
                "offset": 0,
                "slot": "7",
                "type": "t_mapping(t_bytes32,t_string_storage)"
              },
              {
                "astId": 3017,
                "contract": "contracts/legacy/PublicResolver_mainnet_9412610.sol:PublicResolver_mainnet_9412610",
                "label": "pubkeys",
                "offset": 0,
                "slot": "8",
                "type": "t_mapping(t_bytes32,t_struct(PublicKey)3013_storage)"
              },
              {
                "astId": 3103,
                "contract": "contracts/legacy/PublicResolver_mainnet_9412610.sol:PublicResolver_mainnet_9412610",
                "label": "texts",
                "offset": 0,
                "slot": "9",
                "type": "t_mapping(t_bytes32,t_mapping(t_string_memory,t_string_storage))"
              },
              {
                "astId": 3184,
                "contract": "contracts/legacy/PublicResolver_mainnet_9412610.sol:PublicResolver_mainnet_9412610",
                "label": "ens",
                "offset": 0,
                "slot": "10",
                "type": "t_contract(ENS)79"
              },
              {
                "astId": 3192,
                "contract": "contracts/legacy/PublicResolver_mainnet_9412610.sol:PublicResolver_mainnet_9412610",
                "label": "authorisations",
                "offset": 0,
                "slot": "11",
                "type": "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_address,t_bool)))"
              }
            ],
            "types": {
              "t_address": {
                "encoding": "inplace",
                "label": "address",
                "numberOfBytes": "20"
              },
              "t_bool": {
                "encoding": "inplace",
                "label": "bool",
                "numberOfBytes": "1"
              },
              "t_bytes32": {
                "encoding": "inplace",
                "label": "bytes32",
                "numberOfBytes": "32"
              },
              "t_bytes4": {
                "encoding": "inplace",
                "label": "bytes4",
                "numberOfBytes": "4"
              },
              "t_bytes_storage": {
                "encoding": "bytes",
                "label": "bytes",
                "numberOfBytes": "32"
              },
              "t_contract(ENS)79": {
                "encoding": "inplace",
                "label": "contract ENS",
                "numberOfBytes": "20"
              },
              "t_mapping(t_address,t_bool)": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => bool)",
                "numberOfBytes": "32",
                "value": "t_bool"
              },
              "t_mapping(t_address,t_mapping(t_address,t_bool))": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => mapping(address => bool))",
                "numberOfBytes": "32",
                "value": "t_mapping(t_address,t_bool)"
              },
              "t_mapping(t_bytes32,t_bytes_storage)": {
                "encoding": "mapping",
                "key": "t_bytes32",
                "label": "mapping(bytes32 => bytes)",
                "numberOfBytes": "32",
                "value": "t_bytes_storage"
              },
              "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_address,t_bool)))": {
                "encoding": "mapping",
                "key": "t_bytes32",
                "label": "mapping(bytes32 => mapping(address => mapping(address => bool)))",
                "numberOfBytes": "32",
                "value": "t_mapping(t_address,t_mapping(t_address,t_bool))"
              },
              "t_mapping(t_bytes32,t_mapping(t_bytes4,t_address))": {
                "encoding": "mapping",
                "key": "t_bytes32",
                "label": "mapping(bytes32 => mapping(bytes4 => address))",
                "numberOfBytes": "32",
                "value": "t_mapping(t_bytes4,t_address)"
              },
              "t_mapping(t_bytes32,t_mapping(t_string_memory,t_string_storage))": {
                "encoding": "mapping",
                "key": "t_bytes32",
                "label": "mapping(bytes32 => mapping(string => string))",
                "numberOfBytes": "32",
                "value": "t_mapping(t_string_memory,t_string_storage)"
              },
              "t_mapping(t_bytes32,t_mapping(t_uint16,t_bytes_storage))": {
                "encoding": "mapping",
                "key": "t_bytes32",
                "label": "mapping(bytes32 => mapping(uint16 => bytes))",
                "numberOfBytes": "32",
                "value": "t_mapping(t_uint16,t_bytes_storage)"
              },
              "t_mapping(t_bytes32,t_mapping(t_uint256,t_bytes_storage))": {
                "encoding": "mapping",
                "key": "t_bytes32",
                "label": "mapping(bytes32 => mapping(uint256 => bytes))",
                "numberOfBytes": "32",
                "value": "t_mapping(t_uint256,t_bytes_storage)"
              },
              "t_mapping(t_bytes32,t_mapping(t_uint256,t_mapping(t_bytes32,t_mapping(t_uint16,t_bytes_storage))))": {
                "encoding": "mapping",
                "key": "t_bytes32",
                "label": "mapping(bytes32 => mapping(uint256 => mapping(bytes32 => mapping(uint16 => bytes))))",
                "numberOfBytes": "32",
                "value": "t_mapping(t_uint256,t_mapping(t_bytes32,t_mapping(t_uint16,t_bytes_storage)))"
              },
              "t_mapping(t_bytes32,t_mapping(t_uint256,t_mapping(t_bytes32,t_uint16)))": {
                "encoding": "mapping",
                "key": "t_bytes32",
                "label": "mapping(bytes32 => mapping(uint256 => mapping(bytes32 => uint16)))",
                "numberOfBytes": "32",
                "value": "t_mapping(t_uint256,t_mapping(t_bytes32,t_uint16))"
              },
              "t_mapping(t_bytes32,t_string_storage)": {
                "encoding": "mapping",
                "key": "t_bytes32",
                "label": "mapping(bytes32 => string)",
                "numberOfBytes": "32",
                "value": "t_string_storage"
              },
              "t_mapping(t_bytes32,t_struct(PublicKey)3013_storage)": {
                "encoding": "mapping",
                "key": "t_bytes32",
                "label": "mapping(bytes32 => struct PubkeyResolver.PublicKey)",
                "numberOfBytes": "32",
                "value": "t_struct(PublicKey)3013_storage"
              },
              "t_mapping(t_bytes32,t_uint16)": {
                "encoding": "mapping",
                "key": "t_bytes32",
                "label": "mapping(bytes32 => uint16)",
                "numberOfBytes": "32",
                "value": "t_uint16"
              },
              "t_mapping(t_bytes32,t_uint256)": {
                "encoding": "mapping",
                "key": "t_bytes32",
                "label": "mapping(bytes32 => uint256)",
                "numberOfBytes": "32",
                "value": "t_uint256"
              },
              "t_mapping(t_bytes4,t_address)": {
                "encoding": "mapping",
                "key": "t_bytes4",
                "label": "mapping(bytes4 => address)",
                "numberOfBytes": "32",
                "value": "t_address"
              },
              "t_mapping(t_string_memory,t_string_storage)": {
                "encoding": "mapping",
                "key": "t_string_memory",
                "label": "mapping(string => string)",
                "numberOfBytes": "32",
                "value": "t_string_storage"
              },
              "t_mapping(t_uint16,t_bytes_storage)": {
                "encoding": "mapping",
                "key": "t_uint16",
                "label": "mapping(uint16 => bytes)",
                "numberOfBytes": "32",
                "value": "t_bytes_storage"
              },
              "t_mapping(t_uint256,t_bytes_storage)": {
                "encoding": "mapping",
                "key": "t_uint256",
                "label": "mapping(uint256 => bytes)",
                "numberOfBytes": "32",
                "value": "t_bytes_storage"
              },
              "t_mapping(t_uint256,t_mapping(t_bytes32,t_mapping(t_uint16,t_bytes_storage)))": {
                "encoding": "mapping",
                "key": "t_uint256",
                "label": "mapping(uint256 => mapping(bytes32 => mapping(uint16 => bytes)))",
                "numberOfBytes": "32",
                "value": "t_mapping(t_bytes32,t_mapping(t_uint16,t_bytes_storage))"
              },
              "t_mapping(t_uint256,t_mapping(t_bytes32,t_uint16))": {
                "encoding": "mapping",
                "key": "t_uint256",
                "label": "mapping(uint256 => mapping(bytes32 => uint16))",
                "numberOfBytes": "32",
                "value": "t_mapping(t_bytes32,t_uint16)"
              },
              "t_string_memory": {
                "encoding": "bytes",
                "label": "string",
                "numberOfBytes": "32"
              },
              "t_string_storage": {
                "encoding": "bytes",
                "label": "string",
                "numberOfBytes": "32"
              },
              "t_struct(PublicKey)3013_storage": {
                "encoding": "inplace",
                "label": "struct PubkeyResolver.PublicKey",
                "members": [
                  {
                    "astId": 3010,
                    "contract": "contracts/legacy/PublicResolver_mainnet_9412610.sol:PublicResolver_mainnet_9412610",
                    "label": "x",
                    "offset": 0,
                    "slot": "0",
                    "type": "t_bytes32"
                  },
                  {
                    "astId": 3012,
                    "contract": "contracts/legacy/PublicResolver_mainnet_9412610.sol:PublicResolver_mainnet_9412610",
                    "label": "y",
                    "offset": 0,
                    "slot": "1",
                    "type": "t_bytes32"
                  }
                ],
                "numberOfBytes": "64"
              },
              "t_uint16": {
                "encoding": "inplace",
                "label": "uint16",
                "numberOfBytes": "2"
              },
              "t_uint256": {
                "encoding": "inplace",
                "label": "uint256",
                "numberOfBytes": "32"
              }
            }
          },
          "userdoc": {
            "methods": {
              "ABI(bytes32,uint256)": {
                "notice": "Returns the ABI associated with an ENS node. Defined in EIP205."
              },
              "addr(bytes32)": {
                "notice": "Returns the address associated with an ENS node."
              },
              "clearDNSZone(bytes32)": {
                "notice": "Clear all information for a DNS zone."
              },
              "contenthash(bytes32)": {
                "notice": "Returns the contenthash associated with an ENS node."
              },
              "dnsRecord(bytes32,bytes32,uint16)": {
                "notice": "Obtain a DNS record."
              },
              "hasDNSRecords(bytes32,bytes32)": {
                "notice": "Check if a given node has records."
              },
              "interfaceImplementer(bytes32,bytes4)": {
                "notice": "Returns the address of a contract that implements the specified interface for this name. If an implementer has not been set for this interfaceID and name, the resolver will query the contract at `addr()`. If `addr()` is set, a contract exists at that address, and that contract implements EIP168 and returns `true` for the specified interfaceID, its address will be returned."
              },
              "name(bytes32)": {
                "notice": "Returns the name associated with an ENS node, for reverse records. Defined in EIP181."
              },
              "pubkey(bytes32)": {
                "notice": "Returns the SECP256k1 public key associated with an ENS node. Defined in EIP 619."
              },
              "setABI(bytes32,uint256,bytes)": {
                "notice": "Sets the ABI associated with an ENS node. Nodes may have one ABI of each content type. To remove an ABI, set it to the empty string."
              },
              "setAddr(bytes32,address)": {
                "notice": "Sets the address associated with an ENS node. May only be called by the owner of that node in the ENS registry."
              },
              "setContenthash(bytes32,bytes)": {
                "notice": "Sets the contenthash associated with an ENS node. May only be called by the owner of that node in the ENS registry."
              },
              "setDNSRecords(bytes32,bytes)": {
                "notice": "Set one or more DNS records.  Records are supplied in wire-format. Records with the same node/name/resource must be supplied one after the other to ensure the data is updated correctly. For example, if the data was supplied:    a.example.com IN A 1.2.3.4    a.example.com IN A 5.6.7.8    www.example.com IN CNAME a.example.com. then this would store the two A records for a.example.com correctly as a single RRSET, however if the data was supplied:    a.example.com IN A 1.2.3.4    www.example.com IN CNAME a.example.com.    a.example.com IN A 5.6.7.8 then this would store the first A record, the CNAME, then the second A record which would overwrite the first."
              },
              "setInterface(bytes32,bytes4,address)": {
                "notice": "Sets an interface associated with a name. Setting the address to 0 restores the default behaviour of querying the contract at `addr()` for interface support."
              },
              "setName(bytes32,string)": {
                "notice": "Sets the name associated with an ENS node, for reverse records. May only be called by the owner of that node in the ENS registry."
              },
              "setPubkey(bytes32,bytes32,bytes32)": {
                "notice": "Sets the SECP256k1 public key associated with an ENS node."
              },
              "setText(bytes32,string,string)": {
                "notice": "Sets the text data associated with an ENS node and key. May only be called by the owner of that node in the ENS registry."
              },
              "text(bytes32,string)": {
                "notice": "Returns the text data associated with an ENS node and key."
              }
            },
            "notice": "A simple resolver anyone can use; only allows the owner of a node to set its address."
          }
        },
        "RRUtils": {
          "abi": [],
          "devdoc": {
            "details": "RRUtils is a library that provides utilities for parsing DNS resource records.",
            "methods": {}
          },
          "evm": {
            "bytecode": {
              "linkReferences": {},
              "object": "60636023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea365627a7a7231582098d5f02c44eb8d313e0e0facc49aaed1a8bc1bbd3e93d6164d69215694892aee6c6578706572696d656e74616cf564736f6c63430005110040",
              "opcodes": "PUSH1 0x63 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG3 PUSH6 0x627A7A723158 KECCAK256 SWAP9 0xD5 CREATE 0x2C DIFFICULTY 0xEB DUP14 BALANCE RETURNDATACOPY 0xE 0xF 0xAC 0xC4 SWAP11 0xAE 0xD1 0xA8 0xBC SHL 0xBD RETURNDATACOPY SWAP4 0xD6 AND 0x4D PUSH10 0x215694892AEE6C657870 PUSH6 0x72696D656E74 PUSH2 0x6CF5 PUSH5 0x736F6C6343 STOP SDIV GT STOP BLOCKHASH ",
              "sourceMap": "27649:6578:0:-;;132:2:-1;166:7;155:9;146:7;137:37;255:7;249:14;246:1;241:23;235:4;232:33;222:2;;269:9;222:2;293:9;290:1;283:20;323:4;314:7;306:22;347:7;338;331:24"
            },
            "deployedBytecode": {
              "linkReferences": {},
              "object": "73000000000000000000000000000000000000000030146080604052600080fdfea365627a7a7231582098d5f02c44eb8d313e0e0facc49aaed1a8bc1bbd3e93d6164d69215694892aee6c6578706572696d656e74616cf564736f6c63430005110040",
              "opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG3 PUSH6 0x627A7A723158 KECCAK256 SWAP9 0xD5 CREATE 0x2C DIFFICULTY 0xEB DUP14 BALANCE RETURNDATACOPY 0xE 0xF 0xAC 0xC4 SWAP11 0xAE 0xD1 0xA8 0xBC SHL 0xBD RETURNDATACOPY SWAP4 0xD6 AND 0x4D PUSH10 0x215694892AEE6C657870 PUSH6 0x72696D656E74 PUSH2 0x6CF5 PUSH5 0x736F6C6343 STOP SDIV GT STOP BLOCKHASH ",
              "sourceMap": "27649:6578:0:-;;;;;;;;"
            },
            "gasEstimates": {
              "creation": {
                "codeDepositCost": "19800",
                "executionCost": "100",
                "totalCost": "19900"
              },
              "internal": {
                "checkTypeBitmap(bytes memory,uint256,uint16)": "infinite",
                "compareNames(bytes memory,bytes memory)": "infinite",
                "done(struct RRUtils.RRIterator memory)": "infinite",
                "iterateRRs(bytes memory,uint256)": "infinite",
                "labelCount(bytes memory,uint256)": "infinite",
                "name(struct RRUtils.RRIterator memory)": "infinite",
                "nameLength(bytes memory,uint256)": "infinite",
                "next(struct RRUtils.RRIterator memory)": "infinite",
                "progress(bytes memory,uint256)": "infinite",
                "rdata(struct RRUtils.RRIterator memory)": "infinite",
                "readName(bytes memory,uint256)": "infinite"
              }
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.5.17+commit.d19bba13\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"RRUtils is a library that provides utilities for parsing DNS resource records.\",\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/legacy/PublicResolver_mainnet_9412610.sol\":\"RRUtils\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"contracts/legacy/PublicResolver_mainnet_9412610.sol\":{\"content\":\"/**\\n *Submitted for verification at Etherscan.io on 2020-02-03\\n */\\n\\n// File: @ensdomains/ens/contracts/ENS.sol\\n\\npragma solidity >=0.4.24;\\n\\ninterface ENS {\\n  // Logged when the owner of a node assigns a new owner to a subnode.\\n  event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n  // Logged when the owner of a node transfers ownership to a new account.\\n  event Transfer(bytes32 indexed node, address owner);\\n\\n  // Logged when the resolver for a node changes.\\n  event NewResolver(bytes32 indexed node, address resolver);\\n\\n  // Logged when the TTL of a node changes\\n  event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n  function setSubnodeOwner(\\n    bytes32 node,\\n    bytes32 label,\\n    address owner\\n  ) external;\\n\\n  function setResolver(bytes32 node, address resolver) external;\\n\\n  function setOwner(bytes32 node, address owner) external;\\n\\n  function setTTL(bytes32 node, uint64 ttl) external;\\n\\n  function owner(bytes32 node) external view returns (address);\\n\\n  function resolver(bytes32 node) external view returns (address);\\n\\n  function ttl(bytes32 node) external view returns (uint64);\\n}\\n\\n// File: contracts/ResolverBase.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract ResolverBase {\\n  bytes4 private constant INTERFACE_META_ID = 0x01ffc9a7;\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return interfaceID == INTERFACE_META_ID;\\n  }\\n\\n  function isAuthorised(bytes32 node) internal view returns (bool);\\n\\n  modifier authorised(bytes32 node) {\\n    require(isAuthorised(node));\\n    _;\\n  }\\n\\n  function bytesToAddress(bytes memory b)\\n    internal\\n    pure\\n    returns (address payable a)\\n  {\\n    require(b.length == 20);\\n    assembly {\\n      a := div(mload(add(b, 32)), exp(256, 12))\\n    }\\n  }\\n\\n  function addressToBytes(address a) internal pure returns (bytes memory b) {\\n    b = new bytes(20);\\n    assembly {\\n      mstore(add(b, 32), mul(a, exp(256, 12)))\\n    }\\n  }\\n}\\n\\n// File: contracts/profiles/ABIResolver.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract ABIResolver is ResolverBase {\\n  bytes4 private constant ABI_INTERFACE_ID = 0x2203ab56;\\n\\n  event ABIChanged(bytes32 indexed node, uint256 indexed contentType);\\n\\n  mapping(bytes32 => mapping(uint256 => bytes)) abis;\\n\\n  /**\\n   * Sets the ABI associated with an ENS node.\\n   * Nodes may have one ABI of each content type. To remove an ABI, set it to\\n   * the empty string.\\n   * @param node The node to update.\\n   * @param contentType The content type of the ABI\\n   * @param data The ABI data.\\n   */\\n  function setABI(\\n    bytes32 node,\\n    uint256 contentType,\\n    bytes calldata data\\n  ) external authorised(node) {\\n    // Content types must be powers of 2\\n    require(((contentType - 1) & contentType) == 0);\\n\\n    abis[node][contentType] = data;\\n    emit ABIChanged(node, contentType);\\n  }\\n\\n  /**\\n   * Returns the ABI associated with an ENS node.\\n   * Defined in EIP205.\\n   * @param node The ENS node to query\\n   * @param contentTypes A bitwise OR of the ABI formats accepted by the caller.\\n   * @return contentType The content type of the return value\\n   * @return data The ABI data\\n   */\\n  function ABI(bytes32 node, uint256 contentTypes)\\n    external\\n    view\\n    returns (uint256, bytes memory)\\n  {\\n    mapping(uint256 => bytes) storage abiset = abis[node];\\n\\n    for (\\n      uint256 contentType = 1;\\n      contentType <= contentTypes;\\n      contentType <<= 1\\n    ) {\\n      if ((contentType & contentTypes) != 0 && abiset[contentType].length > 0) {\\n        return (contentType, abiset[contentType]);\\n      }\\n    }\\n\\n    return (0, bytes(''));\\n  }\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return\\n      interfaceID == ABI_INTERFACE_ID || super.supportsInterface(interfaceID);\\n  }\\n}\\n\\n// File: contracts/profiles/AddrResolver.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract AddrResolver is ResolverBase {\\n  bytes4 private constant ADDR_INTERFACE_ID = 0x3b3b57de;\\n  bytes4 private constant ADDRESS_INTERFACE_ID = 0xf1cb7e06;\\n  uint256 private constant COIN_TYPE_ETH = 60;\\n\\n  event AddrChanged(bytes32 indexed node, address a);\\n  event AddressChanged(\\n    bytes32 indexed node,\\n    uint256 coinType,\\n    bytes newAddress\\n  );\\n\\n  mapping(bytes32 => mapping(uint256 => bytes)) _addresses;\\n\\n  /**\\n   * Sets the address associated with an ENS node.\\n   * May only be called by the owner of that node in the ENS registry.\\n   * @param node The node to update.\\n   * @param a The address to set.\\n   */\\n  function setAddr(bytes32 node, address a) external authorised(node) {\\n    setAddr(node, COIN_TYPE_ETH, addressToBytes(a));\\n  }\\n\\n  /**\\n   * Returns the address associated with an ENS node.\\n   * @param node The ENS node to query.\\n   * @return The associated address.\\n   */\\n  function addr(bytes32 node) public view returns (address payable) {\\n    bytes memory a = addr(node, COIN_TYPE_ETH);\\n    if (a.length == 0) {\\n      return address(0);\\n    }\\n    return bytesToAddress(a);\\n  }\\n\\n  function setAddr(\\n    bytes32 node,\\n    uint256 coinType,\\n    bytes memory a\\n  ) public authorised(node) {\\n    emit AddressChanged(node, coinType, a);\\n    if (coinType == COIN_TYPE_ETH) {\\n      emit AddrChanged(node, bytesToAddress(a));\\n    }\\n    _addresses[node][coinType] = a;\\n  }\\n\\n  function addr(bytes32 node, uint256 coinType)\\n    public\\n    view\\n    returns (bytes memory)\\n  {\\n    return _addresses[node][coinType];\\n  }\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return\\n      interfaceID == ADDR_INTERFACE_ID ||\\n      interfaceID == ADDRESS_INTERFACE_ID ||\\n      super.supportsInterface(interfaceID);\\n  }\\n}\\n\\n// File: contracts/profiles/ContentHashResolver.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract ContentHashResolver is ResolverBase {\\n  bytes4 private constant CONTENT_HASH_INTERFACE_ID = 0xbc1c58d1;\\n\\n  event ContenthashChanged(bytes32 indexed node, bytes hash);\\n\\n  mapping(bytes32 => bytes) hashes;\\n\\n  /**\\n   * Sets the contenthash associated with an ENS node.\\n   * May only be called by the owner of that node in the ENS registry.\\n   * @param node The node to update.\\n   * @param hash The contenthash to set\\n   */\\n  function setContenthash(bytes32 node, bytes calldata hash)\\n    external\\n    authorised(node)\\n  {\\n    hashes[node] = hash;\\n    emit ContenthashChanged(node, hash);\\n  }\\n\\n  /**\\n   * Returns the contenthash associated with an ENS node.\\n   * @param node The ENS node to query.\\n   * @return The associated contenthash.\\n   */\\n  function contenthash(bytes32 node) external view returns (bytes memory) {\\n    return hashes[node];\\n  }\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return\\n      interfaceID == CONTENT_HASH_INTERFACE_ID ||\\n      super.supportsInterface(interfaceID);\\n  }\\n}\\n\\n// File: @ensdomains/dnssec-oracle/contracts/BytesUtils.sol\\n\\npragma solidity >0.4.23;\\n\\nlibrary BytesUtils {\\n  /*\\n   * @dev Returns the keccak-256 hash of a byte range.\\n   * @param self The byte string to hash.\\n   * @param offset The position to start hashing at.\\n   * @param len The number of bytes to hash.\\n   * @return The hash of the byte range.\\n   */\\n  function keccak(\\n    bytes memory self,\\n    uint256 offset,\\n    uint256 len\\n  ) internal pure returns (bytes32 ret) {\\n    require(offset + len <= self.length);\\n    assembly {\\n      ret := keccak256(add(add(self, 32), offset), len)\\n    }\\n  }\\n\\n  /*\\n   * @dev Returns a positive number if `other` comes lexicographically after\\n   *      `self`, a negative number if it comes before, or zero if the\\n   *      contents of the two bytes are equal.\\n   * @param self The first bytes to compare.\\n   * @param other The second bytes to compare.\\n   * @return The result of the comparison.\\n   */\\n  function compare(bytes memory self, bytes memory other)\\n    internal\\n    pure\\n    returns (int256)\\n  {\\n    return compare(self, 0, self.length, other, 0, other.length);\\n  }\\n\\n  /*\\n   * @dev Returns a positive number if `other` comes lexicographically after\\n   *      `self`, a negative number if it comes before, or zero if the\\n   *      contents of the two bytes are equal. Comparison is done per-rune,\\n   *      on unicode codepoints.\\n   * @param self The first bytes to compare.\\n   * @param offset The offset of self.\\n   * @param len    The length of self.\\n   * @param other The second bytes to compare.\\n   * @param otheroffset The offset of the other string.\\n   * @param otherlen    The length of the other string.\\n   * @return The result of the comparison.\\n   */\\n  function compare(\\n    bytes memory self,\\n    uint256 offset,\\n    uint256 len,\\n    bytes memory other,\\n    uint256 otheroffset,\\n    uint256 otherlen\\n  ) internal pure returns (int256) {\\n    uint256 shortest = len;\\n    if (otherlen < len) shortest = otherlen;\\n\\n    uint256 selfptr;\\n    uint256 otherptr;\\n\\n    assembly {\\n      selfptr := add(self, add(offset, 32))\\n      otherptr := add(other, add(otheroffset, 32))\\n    }\\n    for (uint256 idx = 0; idx < shortest; idx += 32) {\\n      uint256 a;\\n      uint256 b;\\n      assembly {\\n        a := mload(selfptr)\\n        b := mload(otherptr)\\n      }\\n      if (a != b) {\\n        // Mask out irrelevant bytes and check again\\n        uint256 mask;\\n        if (shortest > 32) {\\n          mask = uint256(-1); // aka 0xffffff....\\n        } else {\\n          mask = ~(2**(8 * (32 - shortest + idx)) - 1);\\n        }\\n        uint256 diff = (a & mask) - (b & mask);\\n        if (diff != 0) return int256(diff);\\n      }\\n      selfptr += 32;\\n      otherptr += 32;\\n    }\\n\\n    return int256(len) - int256(otherlen);\\n  }\\n\\n  /*\\n   * @dev Returns true if the two byte ranges are equal.\\n   * @param self The first byte range to compare.\\n   * @param offset The offset into the first byte range.\\n   * @param other The second byte range to compare.\\n   * @param otherOffset The offset into the second byte range.\\n   * @param len The number of bytes to compare\\n   * @return True if the byte ranges are equal, false otherwise.\\n   */\\n  function equals(\\n    bytes memory self,\\n    uint256 offset,\\n    bytes memory other,\\n    uint256 otherOffset,\\n    uint256 len\\n  ) internal pure returns (bool) {\\n    return keccak(self, offset, len) == keccak(other, otherOffset, len);\\n  }\\n\\n  /*\\n   * @dev Returns true if the two byte ranges are equal with offsets.\\n   * @param self The first byte range to compare.\\n   * @param offset The offset into the first byte range.\\n   * @param other The second byte range to compare.\\n   * @param otherOffset The offset into the second byte range.\\n   * @return True if the byte ranges are equal, false otherwise.\\n   */\\n  function equals(\\n    bytes memory self,\\n    uint256 offset,\\n    bytes memory other,\\n    uint256 otherOffset\\n  ) internal pure returns (bool) {\\n    return\\n      keccak(self, offset, self.length - offset) ==\\n      keccak(other, otherOffset, other.length - otherOffset);\\n  }\\n\\n  /*\\n   * @dev Compares a range of 'self' to all of 'other' and returns True iff\\n   *      they are equal.\\n   * @param self The first byte range to compare.\\n   * @param offset The offset into the first byte range.\\n   * @param other The second byte range to compare.\\n   * @return True if the byte ranges are equal, false otherwise.\\n   */\\n  function equals(\\n    bytes memory self,\\n    uint256 offset,\\n    bytes memory other\\n  ) internal pure returns (bool) {\\n    return\\n      self.length >= offset + other.length &&\\n      equals(self, offset, other, 0, other.length);\\n  }\\n\\n  /*\\n   * @dev Returns true if the two byte ranges are equal.\\n   * @param self The first byte range to compare.\\n   * @param other The second byte range to compare.\\n   * @return True if the byte ranges are equal, false otherwise.\\n   */\\n  function equals(bytes memory self, bytes memory other)\\n    internal\\n    pure\\n    returns (bool)\\n  {\\n    return\\n      self.length == other.length && equals(self, 0, other, 0, self.length);\\n  }\\n\\n  /*\\n   * @dev Returns the 8-bit number at the specified index of self.\\n   * @param self The byte string.\\n   * @param idx The index into the bytes\\n   * @return The specified 8 bits of the string, interpreted as an integer.\\n   */\\n  function readUint8(bytes memory self, uint256 idx)\\n    internal\\n    pure\\n    returns (uint8 ret)\\n  {\\n    return uint8(self[idx]);\\n  }\\n\\n  /*\\n   * @dev Returns the 16-bit number at the specified index of self.\\n   * @param self The byte string.\\n   * @param idx The index into the bytes\\n   * @return The specified 16 bits of the string, interpreted as an integer.\\n   */\\n  function readUint16(bytes memory self, uint256 idx)\\n    internal\\n    pure\\n    returns (uint16 ret)\\n  {\\n    require(idx + 2 <= self.length);\\n    assembly {\\n      ret := and(mload(add(add(self, 2), idx)), 0xFFFF)\\n    }\\n  }\\n\\n  /*\\n   * @dev Returns the 32-bit number at the specified index of self.\\n   * @param self The byte string.\\n   * @param idx The index into the bytes\\n   * @return The specified 32 bits of the string, interpreted as an integer.\\n   */\\n  function readUint32(bytes memory self, uint256 idx)\\n    internal\\n    pure\\n    returns (uint32 ret)\\n  {\\n    require(idx + 4 <= self.length);\\n    assembly {\\n      ret := and(mload(add(add(self, 4), idx)), 0xFFFFFFFF)\\n    }\\n  }\\n\\n  /*\\n   * @dev Returns the 32 byte value at the specified index of self.\\n   * @param self The byte string.\\n   * @param idx The index into the bytes\\n   * @return The specified 32 bytes of the string.\\n   */\\n  function readBytes32(bytes memory self, uint256 idx)\\n    internal\\n    pure\\n    returns (bytes32 ret)\\n  {\\n    require(idx + 32 <= self.length);\\n    assembly {\\n      ret := mload(add(add(self, 32), idx))\\n    }\\n  }\\n\\n  /*\\n   * @dev Returns the 32 byte value at the specified index of self.\\n   * @param self The byte string.\\n   * @param idx The index into the bytes\\n   * @return The specified 32 bytes of the string.\\n   */\\n  function readBytes20(bytes memory self, uint256 idx)\\n    internal\\n    pure\\n    returns (bytes20 ret)\\n  {\\n    require(idx + 20 <= self.length);\\n    assembly {\\n      ret := and(\\n        mload(add(add(self, 32), idx)),\\n        0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000\\n      )\\n    }\\n  }\\n\\n  /*\\n   * @dev Returns the n byte value at the specified index of self.\\n   * @param self The byte string.\\n   * @param idx The index into the bytes.\\n   * @param len The number of bytes.\\n   * @return The specified 32 bytes of the string.\\n   */\\n  function readBytesN(\\n    bytes memory self,\\n    uint256 idx,\\n    uint256 len\\n  ) internal pure returns (bytes32 ret) {\\n    require(len <= 32);\\n    require(idx + len <= self.length);\\n    assembly {\\n      let mask := not(sub(exp(256, sub(32, len)), 1))\\n      ret := and(mload(add(add(self, 32), idx)), mask)\\n    }\\n  }\\n\\n  function memcpy(\\n    uint256 dest,\\n    uint256 src,\\n    uint256 len\\n  ) private pure {\\n    // Copy word-length chunks while possible\\n    for (; len >= 32; len -= 32) {\\n      assembly {\\n        mstore(dest, mload(src))\\n      }\\n      dest += 32;\\n      src += 32;\\n    }\\n\\n    // Copy remaining bytes\\n    uint256 mask = 256**(32 - len) - 1;\\n    assembly {\\n      let srcpart := and(mload(src), not(mask))\\n      let destpart := and(mload(dest), mask)\\n      mstore(dest, or(destpart, srcpart))\\n    }\\n  }\\n\\n  /*\\n   * @dev Copies a substring into a new byte string.\\n   * @param self The byte string to copy from.\\n   * @param offset The offset to start copying at.\\n   * @param len The number of bytes to copy.\\n   */\\n  function substring(\\n    bytes memory self,\\n    uint256 offset,\\n    uint256 len\\n  ) internal pure returns (bytes memory) {\\n    require(offset + len <= self.length);\\n\\n    bytes memory ret = new bytes(len);\\n    uint256 dest;\\n    uint256 src;\\n\\n    assembly {\\n      dest := add(ret, 32)\\n      src := add(add(self, 32), offset)\\n    }\\n    memcpy(dest, src, len);\\n\\n    return ret;\\n  }\\n\\n  // Maps characters from 0x30 to 0x7A to their base32 values.\\n  // 0xFF represents invalid characters in that range.\\n  bytes constant base32HexTable =\\n    hex'00010203040506070809FFFFFFFFFFFFFF0A0B0C0D0E0F101112131415161718191A1B1C1D1E1FFFFFFFFFFFFFFFFFFFFF0A0B0C0D0E0F101112131415161718191A1B1C1D1E1F';\\n\\n  /**\\n   * @dev Decodes unpadded base32 data of up to one word in length.\\n   * @param self The data to decode.\\n   * @param off Offset into the string to start at.\\n   * @param len Number of characters to decode.\\n   * @return The decoded data, left aligned.\\n   */\\n  function base32HexDecodeWord(\\n    bytes memory self,\\n    uint256 off,\\n    uint256 len\\n  ) internal pure returns (bytes32) {\\n    require(len <= 52);\\n\\n    uint256 ret = 0;\\n    uint8 decoded;\\n    for (uint256 i = 0; i < len; i++) {\\n      bytes1 char = self[off + i];\\n      require(char >= 0x30 && char <= 0x7A);\\n      decoded = uint8(base32HexTable[uint256(uint8(char)) - 0x30]);\\n      require(decoded <= 0x20);\\n      if (i == len - 1) {\\n        break;\\n      }\\n      ret = (ret << 5) | decoded;\\n    }\\n\\n    uint256 bitlen = len * 5;\\n    if (len % 8 == 0) {\\n      // Multiple of 8 characters, no padding\\n      ret = (ret << 5) | decoded;\\n    } else if (len % 8 == 2) {\\n      // Two extra characters - 1 byte\\n      ret = (ret << 3) | (decoded >> 2);\\n      bitlen -= 2;\\n    } else if (len % 8 == 4) {\\n      // Four extra characters - 2 bytes\\n      ret = (ret << 1) | (decoded >> 4);\\n      bitlen -= 4;\\n    } else if (len % 8 == 5) {\\n      // Five extra characters - 3 bytes\\n      ret = (ret << 4) | (decoded >> 1);\\n      bitlen -= 1;\\n    } else if (len % 8 == 7) {\\n      // Seven extra characters - 4 bytes\\n      ret = (ret << 2) | (decoded >> 3);\\n      bitlen -= 3;\\n    } else {\\n      revert();\\n    }\\n\\n    return bytes32(ret << (256 - bitlen));\\n  }\\n}\\n\\n// File: @ensdomains/buffer/contracts/Buffer.sol\\n\\npragma solidity >0.4.18;\\n\\n/**\\n * @dev A library for working with mutable byte buffers in Solidity.\\n *\\n * Byte buffers are mutable and expandable, and provide a variety of primitives\\n * for writing to them. At any time you can fetch a bytes object containing the\\n * current contents of the buffer. The bytes object should not be stored between\\n * operations, as it may change due to resizing of the buffer.\\n */\\nlibrary Buffer {\\n  /**\\n   * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n   *      a capacity. The capacity may be longer than the current value, in\\n   *      which case it can be extended without the need to allocate more memory.\\n   */\\n  struct buffer {\\n    bytes buf;\\n    uint256 capacity;\\n  }\\n\\n  /**\\n   * @dev Initializes a buffer with an initial capacity.\\n   * @param buf The buffer to initialize.\\n   * @param capacity The number of bytes of space to allocate the buffer.\\n   * @return The buffer, for chaining.\\n   */\\n  function init(buffer memory buf, uint256 capacity)\\n    internal\\n    pure\\n    returns (buffer memory)\\n  {\\n    if (capacity % 32 != 0) {\\n      capacity += 32 - (capacity % 32);\\n    }\\n    // Allocate space for the buffer data\\n    buf.capacity = capacity;\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(buf, ptr)\\n      mstore(ptr, 0)\\n      mstore(0x40, add(32, add(ptr, capacity)))\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Initializes a new buffer from an existing bytes object.\\n   *      Changes to the buffer may mutate the original value.\\n   * @param b The bytes object to initialize the buffer with.\\n   * @return A new buffer.\\n   */\\n  function fromBytes(bytes memory b) internal pure returns (buffer memory) {\\n    buffer memory buf;\\n    buf.buf = b;\\n    buf.capacity = b.length;\\n    return buf;\\n  }\\n\\n  function resize(buffer memory buf, uint256 capacity) private pure {\\n    bytes memory oldbuf = buf.buf;\\n    init(buf, capacity);\\n    append(buf, oldbuf);\\n  }\\n\\n  function max(uint256 a, uint256 b) private pure returns (uint256) {\\n    if (a > b) {\\n      return a;\\n    }\\n    return b;\\n  }\\n\\n  /**\\n   * @dev Sets buffer length to 0.\\n   * @param buf The buffer to truncate.\\n   * @return The original buffer, for chaining..\\n   */\\n  function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n    assembly {\\n      let bufptr := mload(buf)\\n      mstore(bufptr, 0)\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Writes a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The start offset to write to.\\n   * @param data The data to append.\\n   * @param len The number of bytes to copy.\\n   * @return The original buffer, for chaining.\\n   */\\n  function write(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes memory data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    require(len <= data.length);\\n\\n    if (off + len > buf.capacity) {\\n      resize(buf, max(buf.capacity, len + off) * 2);\\n    }\\n\\n    uint256 dest;\\n    uint256 src;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Start address = buffer address + offset + sizeof(buffer length)\\n      dest := add(add(bufptr, 32), off)\\n      // Update buffer length if we're extending it\\n      if gt(add(len, off), buflen) {\\n        mstore(bufptr, add(len, off))\\n      }\\n      src := add(data, 32)\\n    }\\n\\n    // Copy word-length chunks while possible\\n    for (; len >= 32; len -= 32) {\\n      assembly {\\n        mstore(dest, mload(src))\\n      }\\n      dest += 32;\\n      src += 32;\\n    }\\n\\n    // Copy remaining bytes\\n    uint256 mask = 256**(32 - len) - 1;\\n    assembly {\\n      let srcpart := and(mload(src), not(mask))\\n      let destpart := and(mload(dest), mask)\\n      mstore(dest, or(destpart, srcpart))\\n    }\\n\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @param len The number of bytes to copy.\\n   * @return The original buffer, for chaining.\\n   */\\n  function append(\\n    buffer memory buf,\\n    bytes memory data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, len);\\n  }\\n\\n  /**\\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function append(buffer memory buf, bytes memory data)\\n    internal\\n    pure\\n    returns (buffer memory)\\n  {\\n    return write(buf, buf.buf.length, data, data.length);\\n  }\\n\\n  /**\\n   * @dev Writes a byte to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write the byte at.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeUint8(\\n    buffer memory buf,\\n    uint256 off,\\n    uint8 data\\n  ) internal pure returns (buffer memory) {\\n    if (off >= buf.capacity) {\\n      resize(buf, buf.capacity * 2);\\n    }\\n\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Address = buffer address + sizeof(buffer length) + off\\n      let dest := add(add(bufptr, off), 32)\\n      mstore8(dest, data)\\n      // Update buffer length if we extended it\\n      if eq(off, buflen) {\\n        mstore(bufptr, add(buflen, 1))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function appendUint8(buffer memory buf, uint8 data)\\n    internal\\n    pure\\n    returns (buffer memory)\\n  {\\n    return writeUint8(buf, buf.buf.length, data);\\n  }\\n\\n  /**\\n   * @dev Writes up to 32 bytes to the buffer. Resizes if doing so would\\n   *      exceed the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @param len The number of bytes to write (left-aligned).\\n   * @return The original buffer, for chaining.\\n   */\\n  function write(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes32 data,\\n    uint256 len\\n  ) private pure returns (buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    uint256 mask = 256**len - 1;\\n    // Right-align data\\n    data = data >> (8 * (32 - len));\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Address = buffer address + sizeof(buffer length) + off + len\\n      let dest := add(add(bufptr, off), len)\\n      mstore(dest, or(and(mload(dest), not(mask)), data))\\n      // Update buffer length if we extended it\\n      if gt(add(off, len), mload(bufptr)) {\\n        mstore(bufptr, add(off, len))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Writes a bytes20 to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeBytes20(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes20 data\\n  ) internal pure returns (buffer memory) {\\n    return write(buf, off, bytes32(data), 20);\\n  }\\n\\n  /**\\n   * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chhaining.\\n   */\\n  function appendBytes20(buffer memory buf, bytes20 data)\\n    internal\\n    pure\\n    returns (buffer memory)\\n  {\\n    return write(buf, buf.buf.length, bytes32(data), 20);\\n  }\\n\\n  /**\\n   * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function appendBytes32(buffer memory buf, bytes32 data)\\n    internal\\n    pure\\n    returns (buffer memory)\\n  {\\n    return write(buf, buf.buf.length, data, 32);\\n  }\\n\\n  /**\\n   * @dev Writes an integer to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @param len The number of bytes to write (right-aligned).\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeInt(\\n    buffer memory buf,\\n    uint256 off,\\n    uint256 data,\\n    uint256 len\\n  ) private pure returns (buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    uint256 mask = 256**len - 1;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Address = buffer address + off + sizeof(buffer length) + len\\n      let dest := add(add(bufptr, off), len)\\n      mstore(dest, or(and(mload(dest), not(mask)), data))\\n      // Update buffer length if we extended it\\n      if gt(add(off, len), mload(bufptr)) {\\n        mstore(bufptr, add(off, len))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n   * exceed the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer.\\n   */\\n  function appendInt(\\n    buffer memory buf,\\n    uint256 data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    return writeInt(buf, buf.buf.length, data, len);\\n  }\\n}\\n\\n// File: @ensdomains/dnssec-oracle/contracts/RRUtils.sol\\n\\npragma solidity >0.4.23;\\n\\n/**\\n * @dev RRUtils is a library that provides utilities for parsing DNS resource records.\\n */\\nlibrary RRUtils {\\n  using BytesUtils for *;\\n  using Buffer for *;\\n\\n  /**\\n   * @dev Returns the number of bytes in the DNS name at 'offset' in 'self'.\\n   * @param self The byte array to read a name from.\\n   * @param offset The offset to start reading at.\\n   * @return The length of the DNS name at 'offset', in bytes.\\n   */\\n  function nameLength(bytes memory self, uint256 offset)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    uint256 idx = offset;\\n    while (true) {\\n      assert(idx < self.length);\\n      uint256 labelLen = self.readUint8(idx);\\n      idx += labelLen + 1;\\n      if (labelLen == 0) {\\n        break;\\n      }\\n    }\\n    return idx - offset;\\n  }\\n\\n  /**\\n   * @dev Returns a DNS format name at the specified offset of self.\\n   * @param self The byte array to read a name from.\\n   * @param offset The offset to start reading at.\\n   * @return The name.\\n   */\\n  function readName(bytes memory self, uint256 offset)\\n    internal\\n    pure\\n    returns (bytes memory ret)\\n  {\\n    uint256 len = nameLength(self, offset);\\n    return self.substring(offset, len);\\n  }\\n\\n  /**\\n   * @dev Returns the number of labels in the DNS name at 'offset' in 'self'.\\n   * @param self The byte array to read a name from.\\n   * @param offset The offset to start reading at.\\n   * @return The number of labels in the DNS name at 'offset', in bytes.\\n   */\\n  function labelCount(bytes memory self, uint256 offset)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    uint256 count = 0;\\n    while (true) {\\n      assert(offset < self.length);\\n      uint256 labelLen = self.readUint8(offset);\\n      offset += labelLen + 1;\\n      if (labelLen == 0) {\\n        break;\\n      }\\n      count += 1;\\n    }\\n    return count;\\n  }\\n\\n  /**\\n   * @dev An iterator over resource records.\\n   */\\n  struct RRIterator {\\n    bytes data;\\n    uint256 offset;\\n    uint16 dnstype;\\n    uint16 class;\\n    uint32 ttl;\\n    uint256 rdataOffset;\\n    uint256 nextOffset;\\n  }\\n\\n  /**\\n   * @dev Begins iterating over resource records.\\n   * @param self The byte string to read from.\\n   * @param offset The offset to start reading at.\\n   * @return An iterator object.\\n   */\\n  function iterateRRs(bytes memory self, uint256 offset)\\n    internal\\n    pure\\n    returns (RRIterator memory ret)\\n  {\\n    ret.data = self;\\n    ret.nextOffset = offset;\\n    next(ret);\\n  }\\n\\n  /**\\n   * @dev Returns true iff there are more RRs to iterate.\\n   * @param iter The iterator to check.\\n   * @return True iff the iterator has finished.\\n   */\\n  function done(RRIterator memory iter) internal pure returns (bool) {\\n    return iter.offset >= iter.data.length;\\n  }\\n\\n  /**\\n   * @dev Moves the iterator to the next resource record.\\n   * @param iter The iterator to advance.\\n   */\\n  function next(RRIterator memory iter) internal pure {\\n    iter.offset = iter.nextOffset;\\n    if (iter.offset >= iter.data.length) {\\n      return;\\n    }\\n\\n    // Skip the name\\n    uint256 off = iter.offset + nameLength(iter.data, iter.offset);\\n\\n    // Read type, class, and ttl\\n    iter.dnstype = iter.data.readUint16(off);\\n    off += 2;\\n    iter.class = iter.data.readUint16(off);\\n    off += 2;\\n    iter.ttl = iter.data.readUint32(off);\\n    off += 4;\\n\\n    // Read the rdata\\n    uint256 rdataLength = iter.data.readUint16(off);\\n    off += 2;\\n    iter.rdataOffset = off;\\n    iter.nextOffset = off + rdataLength;\\n  }\\n\\n  /**\\n   * @dev Returns the name of the current record.\\n   * @param iter The iterator.\\n   * @return A new bytes object containing the owner name from the RR.\\n   */\\n  function name(RRIterator memory iter) internal pure returns (bytes memory) {\\n    return iter.data.substring(iter.offset, nameLength(iter.data, iter.offset));\\n  }\\n\\n  /**\\n   * @dev Returns the rdata portion of the current record.\\n   * @param iter The iterator.\\n   * @return A new bytes object containing the RR's RDATA.\\n   */\\n  function rdata(RRIterator memory iter) internal pure returns (bytes memory) {\\n    return\\n      iter.data.substring(iter.rdataOffset, iter.nextOffset - iter.rdataOffset);\\n  }\\n\\n  /**\\n   * @dev Checks if a given RR type exists in a type bitmap.\\n   * @param self The byte string to read the type bitmap from.\\n   * @param offset The offset to start reading at.\\n   * @param rrtype The RR type to check for.\\n   * @return True if the type is found in the bitmap, false otherwise.\\n   */\\n  function checkTypeBitmap(\\n    bytes memory self,\\n    uint256 offset,\\n    uint16 rrtype\\n  ) internal pure returns (bool) {\\n    uint8 typeWindow = uint8(rrtype >> 8);\\n    uint8 windowByte = uint8((rrtype & 0xff) / 8);\\n    uint8 windowBitmask = uint8(uint8(1) << (uint8(7) - uint8(rrtype & 0x7)));\\n    for (uint256 off = offset; off < self.length; ) {\\n      uint8 window = self.readUint8(off);\\n      uint8 len = self.readUint8(off + 1);\\n      if (typeWindow < window) {\\n        // We've gone past our window; it's not here.\\n        return false;\\n      } else if (typeWindow == window) {\\n        // Check this type bitmap\\n        if (len * 8 <= windowByte) {\\n          // Our type is past the end of the bitmap\\n          return false;\\n        }\\n        return (self.readUint8(off + windowByte + 2) & windowBitmask) != 0;\\n      } else {\\n        // Skip this type bitmap\\n        off += len + 2;\\n      }\\n    }\\n\\n    return false;\\n  }\\n\\n  function compareNames(bytes memory self, bytes memory other)\\n    internal\\n    pure\\n    returns (int256)\\n  {\\n    if (self.equals(other)) {\\n      return 0;\\n    }\\n\\n    uint256 off;\\n    uint256 otheroff;\\n    uint256 prevoff;\\n    uint256 otherprevoff;\\n    uint256 counts = labelCount(self, 0);\\n    uint256 othercounts = labelCount(other, 0);\\n\\n    // Keep removing labels from the front of the name until both names are equal length\\n    while (counts > othercounts) {\\n      prevoff = off;\\n      off = progress(self, off);\\n      counts--;\\n    }\\n\\n    while (othercounts > counts) {\\n      otherprevoff = otheroff;\\n      otheroff = progress(other, otheroff);\\n      othercounts--;\\n    }\\n\\n    // Compare the last nonequal labels to each other\\n    while (counts > 0 && !self.equals(off, other, otheroff)) {\\n      prevoff = off;\\n      off = progress(self, off);\\n      otherprevoff = otheroff;\\n      otheroff = progress(other, otheroff);\\n      counts -= 1;\\n    }\\n\\n    if (off == 0) {\\n      return -1;\\n    }\\n    if (otheroff == 0) {\\n      return 1;\\n    }\\n\\n    return\\n      self.compare(\\n        prevoff + 1,\\n        self.readUint8(prevoff),\\n        other,\\n        otherprevoff + 1,\\n        other.readUint8(otherprevoff)\\n      );\\n  }\\n\\n  function progress(bytes memory body, uint256 off)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    return off + 1 + body.readUint8(off);\\n  }\\n}\\n\\n// File: contracts/profiles/DNSResolver.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract DNSResolver is ResolverBase {\\n  using RRUtils for *;\\n  using BytesUtils for bytes;\\n\\n  bytes4 private constant DNS_RECORD_INTERFACE_ID = 0xa8fa5682;\\n\\n  // DNSRecordChanged is emitted whenever a given node/name/resource's RRSET is updated.\\n  event DNSRecordChanged(\\n    bytes32 indexed node,\\n    bytes name,\\n    uint16 resource,\\n    bytes record\\n  );\\n  // DNSRecordDeleted is emitted whenever a given node/name/resource's RRSET is deleted.\\n  event DNSRecordDeleted(bytes32 indexed node, bytes name, uint16 resource);\\n  // DNSZoneCleared is emitted whenever a given node's zone information is cleared.\\n  event DNSZoneCleared(bytes32 indexed node);\\n\\n  // Version the mapping for each zone.  This allows users who have lost\\n  // track of their entries to effectively delete an entire zone by bumping\\n  // the version number.\\n  // node => version\\n  mapping(bytes32 => uint256) private versions;\\n\\n  // The records themselves.  Stored as binary RRSETs\\n  // node => version => name => resource => data\\n  mapping(bytes32 => mapping(uint256 => mapping(bytes32 => mapping(uint16 => bytes))))\\n    private records;\\n\\n  // Count of number of entries for a given name.  Required for DNS resolvers\\n  // when resolving wildcards.\\n  // node => version => name => number of records\\n  mapping(bytes32 => mapping(uint256 => mapping(bytes32 => uint16)))\\n    private nameEntriesCount;\\n\\n  /**\\n   * Set one or more DNS records.  Records are supplied in wire-format.\\n   * Records with the same node/name/resource must be supplied one after the\\n   * other to ensure the data is updated correctly. For example, if the data\\n   * was supplied:\\n   *     a.example.com IN A 1.2.3.4\\n   *     a.example.com IN A 5.6.7.8\\n   *     www.example.com IN CNAME a.example.com.\\n   * then this would store the two A records for a.example.com correctly as a\\n   * single RRSET, however if the data was supplied:\\n   *     a.example.com IN A 1.2.3.4\\n   *     www.example.com IN CNAME a.example.com.\\n   *     a.example.com IN A 5.6.7.8\\n   * then this would store the first A record, the CNAME, then the second A\\n   * record which would overwrite the first.\\n   *\\n   * @param node the namehash of the node for which to set the records\\n   * @param data the DNS wire format records to set\\n   */\\n  function setDNSRecords(bytes32 node, bytes calldata data)\\n    external\\n    authorised(node)\\n  {\\n    uint16 resource = 0;\\n    uint256 offset = 0;\\n    bytes memory name;\\n    bytes memory value;\\n    bytes32 nameHash;\\n    // Iterate over the data to add the resource records\\n    for (\\n      RRUtils.RRIterator memory iter = data.iterateRRs(0);\\n      !iter.done();\\n      iter.next()\\n    ) {\\n      if (resource == 0) {\\n        resource = iter.dnstype;\\n        name = iter.name();\\n        nameHash = keccak256(abi.encodePacked(name));\\n        value = bytes(iter.rdata());\\n      } else {\\n        bytes memory newName = iter.name();\\n        if (resource != iter.dnstype || !name.equals(newName)) {\\n          setDNSRRSet(\\n            node,\\n            name,\\n            resource,\\n            data,\\n            offset,\\n            iter.offset - offset,\\n            value.length == 0\\n          );\\n          resource = iter.dnstype;\\n          offset = iter.offset;\\n          name = newName;\\n          nameHash = keccak256(name);\\n          value = bytes(iter.rdata());\\n        }\\n      }\\n    }\\n    if (name.length > 0) {\\n      setDNSRRSet(\\n        node,\\n        name,\\n        resource,\\n        data,\\n        offset,\\n        data.length - offset,\\n        value.length == 0\\n      );\\n    }\\n  }\\n\\n  /**\\n   * Obtain a DNS record.\\n   * @param node the namehash of the node for which to fetch the record\\n   * @param name the keccak-256 hash of the fully-qualified name for which to fetch the record\\n   * @param resource the ID of the resource as per https://en.wikipedia.org/wiki/List_of_DNS_record_types\\n   * @return the DNS record in wire format if present, otherwise empty\\n   */\\n  function dnsRecord(\\n    bytes32 node,\\n    bytes32 name,\\n    uint16 resource\\n  ) public view returns (bytes memory) {\\n    return records[node][versions[node]][name][resource];\\n  }\\n\\n  /**\\n   * Check if a given node has records.\\n   * @param node the namehash of the node for which to check the records\\n   * @param name the namehash of the node for which to check the records\\n   */\\n  function hasDNSRecords(bytes32 node, bytes32 name)\\n    public\\n    view\\n    returns (bool)\\n  {\\n    return (nameEntriesCount[node][versions[node]][name] != 0);\\n  }\\n\\n  /**\\n   * Clear all information for a DNS zone.\\n   * @param node the namehash of the node for which to clear the zone\\n   */\\n  function clearDNSZone(bytes32 node) public authorised(node) {\\n    versions[node]++;\\n    emit DNSZoneCleared(node);\\n  }\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return\\n      interfaceID == DNS_RECORD_INTERFACE_ID ||\\n      super.supportsInterface(interfaceID);\\n  }\\n\\n  function setDNSRRSet(\\n    bytes32 node,\\n    bytes memory name,\\n    uint16 resource,\\n    bytes memory data,\\n    uint256 offset,\\n    uint256 size,\\n    bool deleteRecord\\n  ) private {\\n    uint256 version = versions[node];\\n    bytes32 nameHash = keccak256(name);\\n    bytes memory rrData = data.substring(offset, size);\\n    if (deleteRecord) {\\n      if (records[node][version][nameHash][resource].length != 0) {\\n        nameEntriesCount[node][version][nameHash]--;\\n      }\\n      delete (records[node][version][nameHash][resource]);\\n      emit DNSRecordDeleted(node, name, resource);\\n    } else {\\n      if (records[node][version][nameHash][resource].length == 0) {\\n        nameEntriesCount[node][version][nameHash]++;\\n      }\\n      records[node][version][nameHash][resource] = rrData;\\n      emit DNSRecordChanged(node, name, resource, rrData);\\n    }\\n  }\\n}\\n\\n// File: contracts/profiles/InterfaceResolver.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract InterfaceResolver is ResolverBase, AddrResolver {\\n  bytes4 private constant INTERFACE_INTERFACE_ID =\\n    bytes4(keccak256('interfaceImplementer(bytes32,bytes4)'));\\n  bytes4 private constant INTERFACE_META_ID = 0x01ffc9a7;\\n\\n  event InterfaceChanged(\\n    bytes32 indexed node,\\n    bytes4 indexed interfaceID,\\n    address implementer\\n  );\\n\\n  mapping(bytes32 => mapping(bytes4 => address)) interfaces;\\n\\n  /**\\n   * Sets an interface associated with a name.\\n   * Setting the address to 0 restores the default behaviour of querying the contract at `addr()` for interface support.\\n   * @param node The node to update.\\n   * @param interfaceID The EIP 168 interface ID.\\n   * @param implementer The address of a contract that implements this interface for this node.\\n   */\\n  function setInterface(\\n    bytes32 node,\\n    bytes4 interfaceID,\\n    address implementer\\n  ) external authorised(node) {\\n    interfaces[node][interfaceID] = implementer;\\n    emit InterfaceChanged(node, interfaceID, implementer);\\n  }\\n\\n  /**\\n   * Returns the address of a contract that implements the specified interface for this name.\\n   * If an implementer has not been set for this interfaceID and name, the resolver will query\\n   * the contract at `addr()`. If `addr()` is set, a contract exists at that address, and that\\n   * contract implements EIP168 and returns `true` for the specified interfaceID, its address\\n   * will be returned.\\n   * @param node The ENS node to query.\\n   * @param interfaceID The EIP 168 interface ID to check for.\\n   * @return The address that implements this interface, or 0 if the interface is unsupported.\\n   */\\n  function interfaceImplementer(bytes32 node, bytes4 interfaceID)\\n    external\\n    view\\n    returns (address)\\n  {\\n    address implementer = interfaces[node][interfaceID];\\n    if (implementer != address(0)) {\\n      return implementer;\\n    }\\n\\n    address a = addr(node);\\n    if (a == address(0)) {\\n      return address(0);\\n    }\\n\\n    (bool success, bytes memory returnData) = a.staticcall(\\n      abi.encodeWithSignature('supportsInterface(bytes4)', INTERFACE_META_ID)\\n    );\\n    if (!success || returnData.length < 32 || returnData[31] == 0) {\\n      // EIP 168 not supported by target\\n      return address(0);\\n    }\\n\\n    (success, returnData) = a.staticcall(\\n      abi.encodeWithSignature('supportsInterface(bytes4)', interfaceID)\\n    );\\n    if (!success || returnData.length < 32 || returnData[31] == 0) {\\n      // Specified interface not supported by target\\n      return address(0);\\n    }\\n\\n    return a;\\n  }\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return\\n      interfaceID == INTERFACE_INTERFACE_ID ||\\n      super.supportsInterface(interfaceID);\\n  }\\n}\\n\\n// File: contracts/profiles/NameResolver.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract NameResolver is ResolverBase {\\n  bytes4 private constant NAME_INTERFACE_ID = 0x691f3431;\\n\\n  event NameChanged(bytes32 indexed node, string name);\\n\\n  mapping(bytes32 => string) names;\\n\\n  /**\\n   * Sets the name associated with an ENS node, for reverse records.\\n   * May only be called by the owner of that node in the ENS registry.\\n   * @param node The node to update.\\n   * @param name The name to set.\\n   */\\n  function setName(bytes32 node, string calldata name)\\n    external\\n    authorised(node)\\n  {\\n    names[node] = name;\\n    emit NameChanged(node, name);\\n  }\\n\\n  /**\\n   * Returns the name associated with an ENS node, for reverse records.\\n   * Defined in EIP181.\\n   * @param node The ENS node to query.\\n   * @return The associated name.\\n   */\\n  function name(bytes32 node) external view returns (string memory) {\\n    return names[node];\\n  }\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return\\n      interfaceID == NAME_INTERFACE_ID || super.supportsInterface(interfaceID);\\n  }\\n}\\n\\n// File: contracts/profiles/PubkeyResolver.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract PubkeyResolver is ResolverBase {\\n  bytes4 private constant PUBKEY_INTERFACE_ID = 0xc8690233;\\n\\n  event PubkeyChanged(bytes32 indexed node, bytes32 x, bytes32 y);\\n\\n  struct PublicKey {\\n    bytes32 x;\\n    bytes32 y;\\n  }\\n\\n  mapping(bytes32 => PublicKey) pubkeys;\\n\\n  /**\\n   * Sets the SECP256k1 public key associated with an ENS node.\\n   * @param node The ENS node to query\\n   * @param x the X coordinate of the curve point for the public key.\\n   * @param y the Y coordinate of the curve point for the public key.\\n   */\\n  function setPubkey(\\n    bytes32 node,\\n    bytes32 x,\\n    bytes32 y\\n  ) external authorised(node) {\\n    pubkeys[node] = PublicKey(x, y);\\n    emit PubkeyChanged(node, x, y);\\n  }\\n\\n  /**\\n   * Returns the SECP256k1 public key associated with an ENS node.\\n   * Defined in EIP 619.\\n   * @param node The ENS node to query\\n   * @return x, y the X and Y coordinates of the curve point for the public key.\\n   */\\n  function pubkey(bytes32 node) external view returns (bytes32 x, bytes32 y) {\\n    return (pubkeys[node].x, pubkeys[node].y);\\n  }\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return\\n      interfaceID == PUBKEY_INTERFACE_ID ||\\n      super.supportsInterface(interfaceID);\\n  }\\n}\\n\\n// File: contracts/profiles/TextResolver.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract TextResolver is ResolverBase {\\n  bytes4 private constant TEXT_INTERFACE_ID = 0x59d1d43c;\\n\\n  event TextChanged(\\n    bytes32 indexed node,\\n    string indexed indexedKey,\\n    string key\\n  );\\n\\n  mapping(bytes32 => mapping(string => string)) texts;\\n\\n  /**\\n   * Sets the text data associated with an ENS node and key.\\n   * May only be called by the owner of that node in the ENS registry.\\n   * @param node The node to update.\\n   * @param key The key to set.\\n   * @param value The text data value to set.\\n   */\\n  function setText(\\n    bytes32 node,\\n    string calldata key,\\n    string calldata value\\n  ) external authorised(node) {\\n    texts[node][key] = value;\\n    emit TextChanged(node, key, key);\\n  }\\n\\n  /**\\n   * Returns the text data associated with an ENS node and key.\\n   * @param node The ENS node to query.\\n   * @param key The text data key to query.\\n   * @return The associated text data.\\n   */\\n  function text(bytes32 node, string calldata key)\\n    external\\n    view\\n    returns (string memory)\\n  {\\n    return texts[node][key];\\n  }\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return\\n      interfaceID == TEXT_INTERFACE_ID || super.supportsInterface(interfaceID);\\n  }\\n}\\n\\n// File: contracts/PublicResolver.sol\\n\\npragma solidity ^0.5.0;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * A simple resolver anyone can use; only allows the owner of a node to set its\\n * address.\\n */\\ncontract PublicResolver_mainnet_9412610 is\\n  ABIResolver,\\n  AddrResolver,\\n  ContentHashResolver,\\n  DNSResolver,\\n  InterfaceResolver,\\n  NameResolver,\\n  PubkeyResolver,\\n  TextResolver\\n{\\n  ENS ens;\\n\\n  /**\\n   * A mapping of authorisations. An address that is authorised for a name\\n   * may make any changes to the name that the owner could, but may not update\\n   * the set of authorisations.\\n   * (node, owner, caller) => isAuthorised\\n   */\\n  mapping(bytes32 => mapping(address => mapping(address => bool)))\\n    public authorisations;\\n\\n  event AuthorisationChanged(\\n    bytes32 indexed node,\\n    address indexed owner,\\n    address indexed target,\\n    bool isAuthorised\\n  );\\n\\n  constructor(ENS _ens) public {\\n    ens = _ens;\\n  }\\n\\n  /**\\n   * @dev Sets or clears an authorisation.\\n   * Authorisations are specific to the caller. Any account can set an authorisation\\n   * for any name, but the authorisation that is checked will be that of the\\n   * current owner of a name. Thus, transferring a name effectively clears any\\n   * existing authorisations, and new authorisations can be set in advance of\\n   * an ownership transfer if desired.\\n   *\\n   * @param node The name to change the authorisation on.\\n   * @param target The address that is to be authorised or deauthorised.\\n   * @param isAuthorised True if the address should be authorised, or false if it should be deauthorised.\\n   */\\n  function setAuthorisation(\\n    bytes32 node,\\n    address target,\\n    bool isAuthorised\\n  ) external {\\n    authorisations[node][msg.sender][target] = isAuthorised;\\n    emit AuthorisationChanged(node, msg.sender, target, isAuthorised);\\n  }\\n\\n  function isAuthorised(bytes32 node) internal view returns (bool) {\\n    address owner = ens.owner(node);\\n    return owner == msg.sender || authorisations[node][owner][msg.sender];\\n  }\\n\\n  function multicall(bytes[] calldata data)\\n    external\\n    returns (bytes[] memory results)\\n  {\\n    results = new bytes[](data.length);\\n    for (uint256 i = 0; i < data.length; i++) {\\n      (bool success, bytes memory result) = address(this).delegatecall(data[i]);\\n      require(success);\\n      results[i] = result;\\n    }\\n    return results;\\n  }\\n}\\n\",\"keccak256\":\"0x29ca7d322ab7177f187f9bfc310e6dfc94049e9beaaafe958bead081fd90ad76\"}},\"version\":1}",
          "storageLayout": {
            "storage": [],
            "types": null
          },
          "userdoc": {
            "methods": {}
          }
        },
        "ResolverBase": {
          "abi": [
            {
              "constant": true,
              "inputs": [
                {
                  "internalType": "bytes4",
                  "name": "interfaceID",
                  "type": "bytes4"
                }
              ],
              "name": "supportsInterface",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "payable": false,
              "stateMutability": "pure",
              "type": "function"
            }
          ],
          "devdoc": {
            "methods": {}
          },
          "evm": {
            "bytecode": {
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "gasEstimates": null,
            "methodIdentifiers": {
              "supportsInterface(bytes4)": "01ffc9a7"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.5.17+commit.d19bba13\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/legacy/PublicResolver_mainnet_9412610.sol\":\"ResolverBase\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"contracts/legacy/PublicResolver_mainnet_9412610.sol\":{\"content\":\"/**\\n *Submitted for verification at Etherscan.io on 2020-02-03\\n */\\n\\n// File: @ensdomains/ens/contracts/ENS.sol\\n\\npragma solidity >=0.4.24;\\n\\ninterface ENS {\\n  // Logged when the owner of a node assigns a new owner to a subnode.\\n  event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n  // Logged when the owner of a node transfers ownership to a new account.\\n  event Transfer(bytes32 indexed node, address owner);\\n\\n  // Logged when the resolver for a node changes.\\n  event NewResolver(bytes32 indexed node, address resolver);\\n\\n  // Logged when the TTL of a node changes\\n  event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n  function setSubnodeOwner(\\n    bytes32 node,\\n    bytes32 label,\\n    address owner\\n  ) external;\\n\\n  function setResolver(bytes32 node, address resolver) external;\\n\\n  function setOwner(bytes32 node, address owner) external;\\n\\n  function setTTL(bytes32 node, uint64 ttl) external;\\n\\n  function owner(bytes32 node) external view returns (address);\\n\\n  function resolver(bytes32 node) external view returns (address);\\n\\n  function ttl(bytes32 node) external view returns (uint64);\\n}\\n\\n// File: contracts/ResolverBase.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract ResolverBase {\\n  bytes4 private constant INTERFACE_META_ID = 0x01ffc9a7;\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return interfaceID == INTERFACE_META_ID;\\n  }\\n\\n  function isAuthorised(bytes32 node) internal view returns (bool);\\n\\n  modifier authorised(bytes32 node) {\\n    require(isAuthorised(node));\\n    _;\\n  }\\n\\n  function bytesToAddress(bytes memory b)\\n    internal\\n    pure\\n    returns (address payable a)\\n  {\\n    require(b.length == 20);\\n    assembly {\\n      a := div(mload(add(b, 32)), exp(256, 12))\\n    }\\n  }\\n\\n  function addressToBytes(address a) internal pure returns (bytes memory b) {\\n    b = new bytes(20);\\n    assembly {\\n      mstore(add(b, 32), mul(a, exp(256, 12)))\\n    }\\n  }\\n}\\n\\n// File: contracts/profiles/ABIResolver.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract ABIResolver is ResolverBase {\\n  bytes4 private constant ABI_INTERFACE_ID = 0x2203ab56;\\n\\n  event ABIChanged(bytes32 indexed node, uint256 indexed contentType);\\n\\n  mapping(bytes32 => mapping(uint256 => bytes)) abis;\\n\\n  /**\\n   * Sets the ABI associated with an ENS node.\\n   * Nodes may have one ABI of each content type. To remove an ABI, set it to\\n   * the empty string.\\n   * @param node The node to update.\\n   * @param contentType The content type of the ABI\\n   * @param data The ABI data.\\n   */\\n  function setABI(\\n    bytes32 node,\\n    uint256 contentType,\\n    bytes calldata data\\n  ) external authorised(node) {\\n    // Content types must be powers of 2\\n    require(((contentType - 1) & contentType) == 0);\\n\\n    abis[node][contentType] = data;\\n    emit ABIChanged(node, contentType);\\n  }\\n\\n  /**\\n   * Returns the ABI associated with an ENS node.\\n   * Defined in EIP205.\\n   * @param node The ENS node to query\\n   * @param contentTypes A bitwise OR of the ABI formats accepted by the caller.\\n   * @return contentType The content type of the return value\\n   * @return data The ABI data\\n   */\\n  function ABI(bytes32 node, uint256 contentTypes)\\n    external\\n    view\\n    returns (uint256, bytes memory)\\n  {\\n    mapping(uint256 => bytes) storage abiset = abis[node];\\n\\n    for (\\n      uint256 contentType = 1;\\n      contentType <= contentTypes;\\n      contentType <<= 1\\n    ) {\\n      if ((contentType & contentTypes) != 0 && abiset[contentType].length > 0) {\\n        return (contentType, abiset[contentType]);\\n      }\\n    }\\n\\n    return (0, bytes(''));\\n  }\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return\\n      interfaceID == ABI_INTERFACE_ID || super.supportsInterface(interfaceID);\\n  }\\n}\\n\\n// File: contracts/profiles/AddrResolver.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract AddrResolver is ResolverBase {\\n  bytes4 private constant ADDR_INTERFACE_ID = 0x3b3b57de;\\n  bytes4 private constant ADDRESS_INTERFACE_ID = 0xf1cb7e06;\\n  uint256 private constant COIN_TYPE_ETH = 60;\\n\\n  event AddrChanged(bytes32 indexed node, address a);\\n  event AddressChanged(\\n    bytes32 indexed node,\\n    uint256 coinType,\\n    bytes newAddress\\n  );\\n\\n  mapping(bytes32 => mapping(uint256 => bytes)) _addresses;\\n\\n  /**\\n   * Sets the address associated with an ENS node.\\n   * May only be called by the owner of that node in the ENS registry.\\n   * @param node The node to update.\\n   * @param a The address to set.\\n   */\\n  function setAddr(bytes32 node, address a) external authorised(node) {\\n    setAddr(node, COIN_TYPE_ETH, addressToBytes(a));\\n  }\\n\\n  /**\\n   * Returns the address associated with an ENS node.\\n   * @param node The ENS node to query.\\n   * @return The associated address.\\n   */\\n  function addr(bytes32 node) public view returns (address payable) {\\n    bytes memory a = addr(node, COIN_TYPE_ETH);\\n    if (a.length == 0) {\\n      return address(0);\\n    }\\n    return bytesToAddress(a);\\n  }\\n\\n  function setAddr(\\n    bytes32 node,\\n    uint256 coinType,\\n    bytes memory a\\n  ) public authorised(node) {\\n    emit AddressChanged(node, coinType, a);\\n    if (coinType == COIN_TYPE_ETH) {\\n      emit AddrChanged(node, bytesToAddress(a));\\n    }\\n    _addresses[node][coinType] = a;\\n  }\\n\\n  function addr(bytes32 node, uint256 coinType)\\n    public\\n    view\\n    returns (bytes memory)\\n  {\\n    return _addresses[node][coinType];\\n  }\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return\\n      interfaceID == ADDR_INTERFACE_ID ||\\n      interfaceID == ADDRESS_INTERFACE_ID ||\\n      super.supportsInterface(interfaceID);\\n  }\\n}\\n\\n// File: contracts/profiles/ContentHashResolver.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract ContentHashResolver is ResolverBase {\\n  bytes4 private constant CONTENT_HASH_INTERFACE_ID = 0xbc1c58d1;\\n\\n  event ContenthashChanged(bytes32 indexed node, bytes hash);\\n\\n  mapping(bytes32 => bytes) hashes;\\n\\n  /**\\n   * Sets the contenthash associated with an ENS node.\\n   * May only be called by the owner of that node in the ENS registry.\\n   * @param node The node to update.\\n   * @param hash The contenthash to set\\n   */\\n  function setContenthash(bytes32 node, bytes calldata hash)\\n    external\\n    authorised(node)\\n  {\\n    hashes[node] = hash;\\n    emit ContenthashChanged(node, hash);\\n  }\\n\\n  /**\\n   * Returns the contenthash associated with an ENS node.\\n   * @param node The ENS node to query.\\n   * @return The associated contenthash.\\n   */\\n  function contenthash(bytes32 node) external view returns (bytes memory) {\\n    return hashes[node];\\n  }\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return\\n      interfaceID == CONTENT_HASH_INTERFACE_ID ||\\n      super.supportsInterface(interfaceID);\\n  }\\n}\\n\\n// File: @ensdomains/dnssec-oracle/contracts/BytesUtils.sol\\n\\npragma solidity >0.4.23;\\n\\nlibrary BytesUtils {\\n  /*\\n   * @dev Returns the keccak-256 hash of a byte range.\\n   * @param self The byte string to hash.\\n   * @param offset The position to start hashing at.\\n   * @param len The number of bytes to hash.\\n   * @return The hash of the byte range.\\n   */\\n  function keccak(\\n    bytes memory self,\\n    uint256 offset,\\n    uint256 len\\n  ) internal pure returns (bytes32 ret) {\\n    require(offset + len <= self.length);\\n    assembly {\\n      ret := keccak256(add(add(self, 32), offset), len)\\n    }\\n  }\\n\\n  /*\\n   * @dev Returns a positive number if `other` comes lexicographically after\\n   *      `self`, a negative number if it comes before, or zero if the\\n   *      contents of the two bytes are equal.\\n   * @param self The first bytes to compare.\\n   * @param other The second bytes to compare.\\n   * @return The result of the comparison.\\n   */\\n  function compare(bytes memory self, bytes memory other)\\n    internal\\n    pure\\n    returns (int256)\\n  {\\n    return compare(self, 0, self.length, other, 0, other.length);\\n  }\\n\\n  /*\\n   * @dev Returns a positive number if `other` comes lexicographically after\\n   *      `self`, a negative number if it comes before, or zero if the\\n   *      contents of the two bytes are equal. Comparison is done per-rune,\\n   *      on unicode codepoints.\\n   * @param self The first bytes to compare.\\n   * @param offset The offset of self.\\n   * @param len    The length of self.\\n   * @param other The second bytes to compare.\\n   * @param otheroffset The offset of the other string.\\n   * @param otherlen    The length of the other string.\\n   * @return The result of the comparison.\\n   */\\n  function compare(\\n    bytes memory self,\\n    uint256 offset,\\n    uint256 len,\\n    bytes memory other,\\n    uint256 otheroffset,\\n    uint256 otherlen\\n  ) internal pure returns (int256) {\\n    uint256 shortest = len;\\n    if (otherlen < len) shortest = otherlen;\\n\\n    uint256 selfptr;\\n    uint256 otherptr;\\n\\n    assembly {\\n      selfptr := add(self, add(offset, 32))\\n      otherptr := add(other, add(otheroffset, 32))\\n    }\\n    for (uint256 idx = 0; idx < shortest; idx += 32) {\\n      uint256 a;\\n      uint256 b;\\n      assembly {\\n        a := mload(selfptr)\\n        b := mload(otherptr)\\n      }\\n      if (a != b) {\\n        // Mask out irrelevant bytes and check again\\n        uint256 mask;\\n        if (shortest > 32) {\\n          mask = uint256(-1); // aka 0xffffff....\\n        } else {\\n          mask = ~(2**(8 * (32 - shortest + idx)) - 1);\\n        }\\n        uint256 diff = (a & mask) - (b & mask);\\n        if (diff != 0) return int256(diff);\\n      }\\n      selfptr += 32;\\n      otherptr += 32;\\n    }\\n\\n    return int256(len) - int256(otherlen);\\n  }\\n\\n  /*\\n   * @dev Returns true if the two byte ranges are equal.\\n   * @param self The first byte range to compare.\\n   * @param offset The offset into the first byte range.\\n   * @param other The second byte range to compare.\\n   * @param otherOffset The offset into the second byte range.\\n   * @param len The number of bytes to compare\\n   * @return True if the byte ranges are equal, false otherwise.\\n   */\\n  function equals(\\n    bytes memory self,\\n    uint256 offset,\\n    bytes memory other,\\n    uint256 otherOffset,\\n    uint256 len\\n  ) internal pure returns (bool) {\\n    return keccak(self, offset, len) == keccak(other, otherOffset, len);\\n  }\\n\\n  /*\\n   * @dev Returns true if the two byte ranges are equal with offsets.\\n   * @param self The first byte range to compare.\\n   * @param offset The offset into the first byte range.\\n   * @param other The second byte range to compare.\\n   * @param otherOffset The offset into the second byte range.\\n   * @return True if the byte ranges are equal, false otherwise.\\n   */\\n  function equals(\\n    bytes memory self,\\n    uint256 offset,\\n    bytes memory other,\\n    uint256 otherOffset\\n  ) internal pure returns (bool) {\\n    return\\n      keccak(self, offset, self.length - offset) ==\\n      keccak(other, otherOffset, other.length - otherOffset);\\n  }\\n\\n  /*\\n   * @dev Compares a range of 'self' to all of 'other' and returns True iff\\n   *      they are equal.\\n   * @param self The first byte range to compare.\\n   * @param offset The offset into the first byte range.\\n   * @param other The second byte range to compare.\\n   * @return True if the byte ranges are equal, false otherwise.\\n   */\\n  function equals(\\n    bytes memory self,\\n    uint256 offset,\\n    bytes memory other\\n  ) internal pure returns (bool) {\\n    return\\n      self.length >= offset + other.length &&\\n      equals(self, offset, other, 0, other.length);\\n  }\\n\\n  /*\\n   * @dev Returns true if the two byte ranges are equal.\\n   * @param self The first byte range to compare.\\n   * @param other The second byte range to compare.\\n   * @return True if the byte ranges are equal, false otherwise.\\n   */\\n  function equals(bytes memory self, bytes memory other)\\n    internal\\n    pure\\n    returns (bool)\\n  {\\n    return\\n      self.length == other.length && equals(self, 0, other, 0, self.length);\\n  }\\n\\n  /*\\n   * @dev Returns the 8-bit number at the specified index of self.\\n   * @param self The byte string.\\n   * @param idx The index into the bytes\\n   * @return The specified 8 bits of the string, interpreted as an integer.\\n   */\\n  function readUint8(bytes memory self, uint256 idx)\\n    internal\\n    pure\\n    returns (uint8 ret)\\n  {\\n    return uint8(self[idx]);\\n  }\\n\\n  /*\\n   * @dev Returns the 16-bit number at the specified index of self.\\n   * @param self The byte string.\\n   * @param idx The index into the bytes\\n   * @return The specified 16 bits of the string, interpreted as an integer.\\n   */\\n  function readUint16(bytes memory self, uint256 idx)\\n    internal\\n    pure\\n    returns (uint16 ret)\\n  {\\n    require(idx + 2 <= self.length);\\n    assembly {\\n      ret := and(mload(add(add(self, 2), idx)), 0xFFFF)\\n    }\\n  }\\n\\n  /*\\n   * @dev Returns the 32-bit number at the specified index of self.\\n   * @param self The byte string.\\n   * @param idx The index into the bytes\\n   * @return The specified 32 bits of the string, interpreted as an integer.\\n   */\\n  function readUint32(bytes memory self, uint256 idx)\\n    internal\\n    pure\\n    returns (uint32 ret)\\n  {\\n    require(idx + 4 <= self.length);\\n    assembly {\\n      ret := and(mload(add(add(self, 4), idx)), 0xFFFFFFFF)\\n    }\\n  }\\n\\n  /*\\n   * @dev Returns the 32 byte value at the specified index of self.\\n   * @param self The byte string.\\n   * @param idx The index into the bytes\\n   * @return The specified 32 bytes of the string.\\n   */\\n  function readBytes32(bytes memory self, uint256 idx)\\n    internal\\n    pure\\n    returns (bytes32 ret)\\n  {\\n    require(idx + 32 <= self.length);\\n    assembly {\\n      ret := mload(add(add(self, 32), idx))\\n    }\\n  }\\n\\n  /*\\n   * @dev Returns the 32 byte value at the specified index of self.\\n   * @param self The byte string.\\n   * @param idx The index into the bytes\\n   * @return The specified 32 bytes of the string.\\n   */\\n  function readBytes20(bytes memory self, uint256 idx)\\n    internal\\n    pure\\n    returns (bytes20 ret)\\n  {\\n    require(idx + 20 <= self.length);\\n    assembly {\\n      ret := and(\\n        mload(add(add(self, 32), idx)),\\n        0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000\\n      )\\n    }\\n  }\\n\\n  /*\\n   * @dev Returns the n byte value at the specified index of self.\\n   * @param self The byte string.\\n   * @param idx The index into the bytes.\\n   * @param len The number of bytes.\\n   * @return The specified 32 bytes of the string.\\n   */\\n  function readBytesN(\\n    bytes memory self,\\n    uint256 idx,\\n    uint256 len\\n  ) internal pure returns (bytes32 ret) {\\n    require(len <= 32);\\n    require(idx + len <= self.length);\\n    assembly {\\n      let mask := not(sub(exp(256, sub(32, len)), 1))\\n      ret := and(mload(add(add(self, 32), idx)), mask)\\n    }\\n  }\\n\\n  function memcpy(\\n    uint256 dest,\\n    uint256 src,\\n    uint256 len\\n  ) private pure {\\n    // Copy word-length chunks while possible\\n    for (; len >= 32; len -= 32) {\\n      assembly {\\n        mstore(dest, mload(src))\\n      }\\n      dest += 32;\\n      src += 32;\\n    }\\n\\n    // Copy remaining bytes\\n    uint256 mask = 256**(32 - len) - 1;\\n    assembly {\\n      let srcpart := and(mload(src), not(mask))\\n      let destpart := and(mload(dest), mask)\\n      mstore(dest, or(destpart, srcpart))\\n    }\\n  }\\n\\n  /*\\n   * @dev Copies a substring into a new byte string.\\n   * @param self The byte string to copy from.\\n   * @param offset The offset to start copying at.\\n   * @param len The number of bytes to copy.\\n   */\\n  function substring(\\n    bytes memory self,\\n    uint256 offset,\\n    uint256 len\\n  ) internal pure returns (bytes memory) {\\n    require(offset + len <= self.length);\\n\\n    bytes memory ret = new bytes(len);\\n    uint256 dest;\\n    uint256 src;\\n\\n    assembly {\\n      dest := add(ret, 32)\\n      src := add(add(self, 32), offset)\\n    }\\n    memcpy(dest, src, len);\\n\\n    return ret;\\n  }\\n\\n  // Maps characters from 0x30 to 0x7A to their base32 values.\\n  // 0xFF represents invalid characters in that range.\\n  bytes constant base32HexTable =\\n    hex'00010203040506070809FFFFFFFFFFFFFF0A0B0C0D0E0F101112131415161718191A1B1C1D1E1FFFFFFFFFFFFFFFFFFFFF0A0B0C0D0E0F101112131415161718191A1B1C1D1E1F';\\n\\n  /**\\n   * @dev Decodes unpadded base32 data of up to one word in length.\\n   * @param self The data to decode.\\n   * @param off Offset into the string to start at.\\n   * @param len Number of characters to decode.\\n   * @return The decoded data, left aligned.\\n   */\\n  function base32HexDecodeWord(\\n    bytes memory self,\\n    uint256 off,\\n    uint256 len\\n  ) internal pure returns (bytes32) {\\n    require(len <= 52);\\n\\n    uint256 ret = 0;\\n    uint8 decoded;\\n    for (uint256 i = 0; i < len; i++) {\\n      bytes1 char = self[off + i];\\n      require(char >= 0x30 && char <= 0x7A);\\n      decoded = uint8(base32HexTable[uint256(uint8(char)) - 0x30]);\\n      require(decoded <= 0x20);\\n      if (i == len - 1) {\\n        break;\\n      }\\n      ret = (ret << 5) | decoded;\\n    }\\n\\n    uint256 bitlen = len * 5;\\n    if (len % 8 == 0) {\\n      // Multiple of 8 characters, no padding\\n      ret = (ret << 5) | decoded;\\n    } else if (len % 8 == 2) {\\n      // Two extra characters - 1 byte\\n      ret = (ret << 3) | (decoded >> 2);\\n      bitlen -= 2;\\n    } else if (len % 8 == 4) {\\n      // Four extra characters - 2 bytes\\n      ret = (ret << 1) | (decoded >> 4);\\n      bitlen -= 4;\\n    } else if (len % 8 == 5) {\\n      // Five extra characters - 3 bytes\\n      ret = (ret << 4) | (decoded >> 1);\\n      bitlen -= 1;\\n    } else if (len % 8 == 7) {\\n      // Seven extra characters - 4 bytes\\n      ret = (ret << 2) | (decoded >> 3);\\n      bitlen -= 3;\\n    } else {\\n      revert();\\n    }\\n\\n    return bytes32(ret << (256 - bitlen));\\n  }\\n}\\n\\n// File: @ensdomains/buffer/contracts/Buffer.sol\\n\\npragma solidity >0.4.18;\\n\\n/**\\n * @dev A library for working with mutable byte buffers in Solidity.\\n *\\n * Byte buffers are mutable and expandable, and provide a variety of primitives\\n * for writing to them. At any time you can fetch a bytes object containing the\\n * current contents of the buffer. The bytes object should not be stored between\\n * operations, as it may change due to resizing of the buffer.\\n */\\nlibrary Buffer {\\n  /**\\n   * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n   *      a capacity. The capacity may be longer than the current value, in\\n   *      which case it can be extended without the need to allocate more memory.\\n   */\\n  struct buffer {\\n    bytes buf;\\n    uint256 capacity;\\n  }\\n\\n  /**\\n   * @dev Initializes a buffer with an initial capacity.\\n   * @param buf The buffer to initialize.\\n   * @param capacity The number of bytes of space to allocate the buffer.\\n   * @return The buffer, for chaining.\\n   */\\n  function init(buffer memory buf, uint256 capacity)\\n    internal\\n    pure\\n    returns (buffer memory)\\n  {\\n    if (capacity % 32 != 0) {\\n      capacity += 32 - (capacity % 32);\\n    }\\n    // Allocate space for the buffer data\\n    buf.capacity = capacity;\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(buf, ptr)\\n      mstore(ptr, 0)\\n      mstore(0x40, add(32, add(ptr, capacity)))\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Initializes a new buffer from an existing bytes object.\\n   *      Changes to the buffer may mutate the original value.\\n   * @param b The bytes object to initialize the buffer with.\\n   * @return A new buffer.\\n   */\\n  function fromBytes(bytes memory b) internal pure returns (buffer memory) {\\n    buffer memory buf;\\n    buf.buf = b;\\n    buf.capacity = b.length;\\n    return buf;\\n  }\\n\\n  function resize(buffer memory buf, uint256 capacity) private pure {\\n    bytes memory oldbuf = buf.buf;\\n    init(buf, capacity);\\n    append(buf, oldbuf);\\n  }\\n\\n  function max(uint256 a, uint256 b) private pure returns (uint256) {\\n    if (a > b) {\\n      return a;\\n    }\\n    return b;\\n  }\\n\\n  /**\\n   * @dev Sets buffer length to 0.\\n   * @param buf The buffer to truncate.\\n   * @return The original buffer, for chaining..\\n   */\\n  function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n    assembly {\\n      let bufptr := mload(buf)\\n      mstore(bufptr, 0)\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Writes a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The start offset to write to.\\n   * @param data The data to append.\\n   * @param len The number of bytes to copy.\\n   * @return The original buffer, for chaining.\\n   */\\n  function write(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes memory data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    require(len <= data.length);\\n\\n    if (off + len > buf.capacity) {\\n      resize(buf, max(buf.capacity, len + off) * 2);\\n    }\\n\\n    uint256 dest;\\n    uint256 src;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Start address = buffer address + offset + sizeof(buffer length)\\n      dest := add(add(bufptr, 32), off)\\n      // Update buffer length if we're extending it\\n      if gt(add(len, off), buflen) {\\n        mstore(bufptr, add(len, off))\\n      }\\n      src := add(data, 32)\\n    }\\n\\n    // Copy word-length chunks while possible\\n    for (; len >= 32; len -= 32) {\\n      assembly {\\n        mstore(dest, mload(src))\\n      }\\n      dest += 32;\\n      src += 32;\\n    }\\n\\n    // Copy remaining bytes\\n    uint256 mask = 256**(32 - len) - 1;\\n    assembly {\\n      let srcpart := and(mload(src), not(mask))\\n      let destpart := and(mload(dest), mask)\\n      mstore(dest, or(destpart, srcpart))\\n    }\\n\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @param len The number of bytes to copy.\\n   * @return The original buffer, for chaining.\\n   */\\n  function append(\\n    buffer memory buf,\\n    bytes memory data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, len);\\n  }\\n\\n  /**\\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function append(buffer memory buf, bytes memory data)\\n    internal\\n    pure\\n    returns (buffer memory)\\n  {\\n    return write(buf, buf.buf.length, data, data.length);\\n  }\\n\\n  /**\\n   * @dev Writes a byte to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write the byte at.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeUint8(\\n    buffer memory buf,\\n    uint256 off,\\n    uint8 data\\n  ) internal pure returns (buffer memory) {\\n    if (off >= buf.capacity) {\\n      resize(buf, buf.capacity * 2);\\n    }\\n\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Address = buffer address + sizeof(buffer length) + off\\n      let dest := add(add(bufptr, off), 32)\\n      mstore8(dest, data)\\n      // Update buffer length if we extended it\\n      if eq(off, buflen) {\\n        mstore(bufptr, add(buflen, 1))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function appendUint8(buffer memory buf, uint8 data)\\n    internal\\n    pure\\n    returns (buffer memory)\\n  {\\n    return writeUint8(buf, buf.buf.length, data);\\n  }\\n\\n  /**\\n   * @dev Writes up to 32 bytes to the buffer. Resizes if doing so would\\n   *      exceed the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @param len The number of bytes to write (left-aligned).\\n   * @return The original buffer, for chaining.\\n   */\\n  function write(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes32 data,\\n    uint256 len\\n  ) private pure returns (buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    uint256 mask = 256**len - 1;\\n    // Right-align data\\n    data = data >> (8 * (32 - len));\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Address = buffer address + sizeof(buffer length) + off + len\\n      let dest := add(add(bufptr, off), len)\\n      mstore(dest, or(and(mload(dest), not(mask)), data))\\n      // Update buffer length if we extended it\\n      if gt(add(off, len), mload(bufptr)) {\\n        mstore(bufptr, add(off, len))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Writes a bytes20 to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeBytes20(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes20 data\\n  ) internal pure returns (buffer memory) {\\n    return write(buf, off, bytes32(data), 20);\\n  }\\n\\n  /**\\n   * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chhaining.\\n   */\\n  function appendBytes20(buffer memory buf, bytes20 data)\\n    internal\\n    pure\\n    returns (buffer memory)\\n  {\\n    return write(buf, buf.buf.length, bytes32(data), 20);\\n  }\\n\\n  /**\\n   * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function appendBytes32(buffer memory buf, bytes32 data)\\n    internal\\n    pure\\n    returns (buffer memory)\\n  {\\n    return write(buf, buf.buf.length, data, 32);\\n  }\\n\\n  /**\\n   * @dev Writes an integer to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @param len The number of bytes to write (right-aligned).\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeInt(\\n    buffer memory buf,\\n    uint256 off,\\n    uint256 data,\\n    uint256 len\\n  ) private pure returns (buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    uint256 mask = 256**len - 1;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Address = buffer address + off + sizeof(buffer length) + len\\n      let dest := add(add(bufptr, off), len)\\n      mstore(dest, or(and(mload(dest), not(mask)), data))\\n      // Update buffer length if we extended it\\n      if gt(add(off, len), mload(bufptr)) {\\n        mstore(bufptr, add(off, len))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n   * exceed the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer.\\n   */\\n  function appendInt(\\n    buffer memory buf,\\n    uint256 data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    return writeInt(buf, buf.buf.length, data, len);\\n  }\\n}\\n\\n// File: @ensdomains/dnssec-oracle/contracts/RRUtils.sol\\n\\npragma solidity >0.4.23;\\n\\n/**\\n * @dev RRUtils is a library that provides utilities for parsing DNS resource records.\\n */\\nlibrary RRUtils {\\n  using BytesUtils for *;\\n  using Buffer for *;\\n\\n  /**\\n   * @dev Returns the number of bytes in the DNS name at 'offset' in 'self'.\\n   * @param self The byte array to read a name from.\\n   * @param offset The offset to start reading at.\\n   * @return The length of the DNS name at 'offset', in bytes.\\n   */\\n  function nameLength(bytes memory self, uint256 offset)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    uint256 idx = offset;\\n    while (true) {\\n      assert(idx < self.length);\\n      uint256 labelLen = self.readUint8(idx);\\n      idx += labelLen + 1;\\n      if (labelLen == 0) {\\n        break;\\n      }\\n    }\\n    return idx - offset;\\n  }\\n\\n  /**\\n   * @dev Returns a DNS format name at the specified offset of self.\\n   * @param self The byte array to read a name from.\\n   * @param offset The offset to start reading at.\\n   * @return The name.\\n   */\\n  function readName(bytes memory self, uint256 offset)\\n    internal\\n    pure\\n    returns (bytes memory ret)\\n  {\\n    uint256 len = nameLength(self, offset);\\n    return self.substring(offset, len);\\n  }\\n\\n  /**\\n   * @dev Returns the number of labels in the DNS name at 'offset' in 'self'.\\n   * @param self The byte array to read a name from.\\n   * @param offset The offset to start reading at.\\n   * @return The number of labels in the DNS name at 'offset', in bytes.\\n   */\\n  function labelCount(bytes memory self, uint256 offset)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    uint256 count = 0;\\n    while (true) {\\n      assert(offset < self.length);\\n      uint256 labelLen = self.readUint8(offset);\\n      offset += labelLen + 1;\\n      if (labelLen == 0) {\\n        break;\\n      }\\n      count += 1;\\n    }\\n    return count;\\n  }\\n\\n  /**\\n   * @dev An iterator over resource records.\\n   */\\n  struct RRIterator {\\n    bytes data;\\n    uint256 offset;\\n    uint16 dnstype;\\n    uint16 class;\\n    uint32 ttl;\\n    uint256 rdataOffset;\\n    uint256 nextOffset;\\n  }\\n\\n  /**\\n   * @dev Begins iterating over resource records.\\n   * @param self The byte string to read from.\\n   * @param offset The offset to start reading at.\\n   * @return An iterator object.\\n   */\\n  function iterateRRs(bytes memory self, uint256 offset)\\n    internal\\n    pure\\n    returns (RRIterator memory ret)\\n  {\\n    ret.data = self;\\n    ret.nextOffset = offset;\\n    next(ret);\\n  }\\n\\n  /**\\n   * @dev Returns true iff there are more RRs to iterate.\\n   * @param iter The iterator to check.\\n   * @return True iff the iterator has finished.\\n   */\\n  function done(RRIterator memory iter) internal pure returns (bool) {\\n    return iter.offset >= iter.data.length;\\n  }\\n\\n  /**\\n   * @dev Moves the iterator to the next resource record.\\n   * @param iter The iterator to advance.\\n   */\\n  function next(RRIterator memory iter) internal pure {\\n    iter.offset = iter.nextOffset;\\n    if (iter.offset >= iter.data.length) {\\n      return;\\n    }\\n\\n    // Skip the name\\n    uint256 off = iter.offset + nameLength(iter.data, iter.offset);\\n\\n    // Read type, class, and ttl\\n    iter.dnstype = iter.data.readUint16(off);\\n    off += 2;\\n    iter.class = iter.data.readUint16(off);\\n    off += 2;\\n    iter.ttl = iter.data.readUint32(off);\\n    off += 4;\\n\\n    // Read the rdata\\n    uint256 rdataLength = iter.data.readUint16(off);\\n    off += 2;\\n    iter.rdataOffset = off;\\n    iter.nextOffset = off + rdataLength;\\n  }\\n\\n  /**\\n   * @dev Returns the name of the current record.\\n   * @param iter The iterator.\\n   * @return A new bytes object containing the owner name from the RR.\\n   */\\n  function name(RRIterator memory iter) internal pure returns (bytes memory) {\\n    return iter.data.substring(iter.offset, nameLength(iter.data, iter.offset));\\n  }\\n\\n  /**\\n   * @dev Returns the rdata portion of the current record.\\n   * @param iter The iterator.\\n   * @return A new bytes object containing the RR's RDATA.\\n   */\\n  function rdata(RRIterator memory iter) internal pure returns (bytes memory) {\\n    return\\n      iter.data.substring(iter.rdataOffset, iter.nextOffset - iter.rdataOffset);\\n  }\\n\\n  /**\\n   * @dev Checks if a given RR type exists in a type bitmap.\\n   * @param self The byte string to read the type bitmap from.\\n   * @param offset The offset to start reading at.\\n   * @param rrtype The RR type to check for.\\n   * @return True if the type is found in the bitmap, false otherwise.\\n   */\\n  function checkTypeBitmap(\\n    bytes memory self,\\n    uint256 offset,\\n    uint16 rrtype\\n  ) internal pure returns (bool) {\\n    uint8 typeWindow = uint8(rrtype >> 8);\\n    uint8 windowByte = uint8((rrtype & 0xff) / 8);\\n    uint8 windowBitmask = uint8(uint8(1) << (uint8(7) - uint8(rrtype & 0x7)));\\n    for (uint256 off = offset; off < self.length; ) {\\n      uint8 window = self.readUint8(off);\\n      uint8 len = self.readUint8(off + 1);\\n      if (typeWindow < window) {\\n        // We've gone past our window; it's not here.\\n        return false;\\n      } else if (typeWindow == window) {\\n        // Check this type bitmap\\n        if (len * 8 <= windowByte) {\\n          // Our type is past the end of the bitmap\\n          return false;\\n        }\\n        return (self.readUint8(off + windowByte + 2) & windowBitmask) != 0;\\n      } else {\\n        // Skip this type bitmap\\n        off += len + 2;\\n      }\\n    }\\n\\n    return false;\\n  }\\n\\n  function compareNames(bytes memory self, bytes memory other)\\n    internal\\n    pure\\n    returns (int256)\\n  {\\n    if (self.equals(other)) {\\n      return 0;\\n    }\\n\\n    uint256 off;\\n    uint256 otheroff;\\n    uint256 prevoff;\\n    uint256 otherprevoff;\\n    uint256 counts = labelCount(self, 0);\\n    uint256 othercounts = labelCount(other, 0);\\n\\n    // Keep removing labels from the front of the name until both names are equal length\\n    while (counts > othercounts) {\\n      prevoff = off;\\n      off = progress(self, off);\\n      counts--;\\n    }\\n\\n    while (othercounts > counts) {\\n      otherprevoff = otheroff;\\n      otheroff = progress(other, otheroff);\\n      othercounts--;\\n    }\\n\\n    // Compare the last nonequal labels to each other\\n    while (counts > 0 && !self.equals(off, other, otheroff)) {\\n      prevoff = off;\\n      off = progress(self, off);\\n      otherprevoff = otheroff;\\n      otheroff = progress(other, otheroff);\\n      counts -= 1;\\n    }\\n\\n    if (off == 0) {\\n      return -1;\\n    }\\n    if (otheroff == 0) {\\n      return 1;\\n    }\\n\\n    return\\n      self.compare(\\n        prevoff + 1,\\n        self.readUint8(prevoff),\\n        other,\\n        otherprevoff + 1,\\n        other.readUint8(otherprevoff)\\n      );\\n  }\\n\\n  function progress(bytes memory body, uint256 off)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    return off + 1 + body.readUint8(off);\\n  }\\n}\\n\\n// File: contracts/profiles/DNSResolver.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract DNSResolver is ResolverBase {\\n  using RRUtils for *;\\n  using BytesUtils for bytes;\\n\\n  bytes4 private constant DNS_RECORD_INTERFACE_ID = 0xa8fa5682;\\n\\n  // DNSRecordChanged is emitted whenever a given node/name/resource's RRSET is updated.\\n  event DNSRecordChanged(\\n    bytes32 indexed node,\\n    bytes name,\\n    uint16 resource,\\n    bytes record\\n  );\\n  // DNSRecordDeleted is emitted whenever a given node/name/resource's RRSET is deleted.\\n  event DNSRecordDeleted(bytes32 indexed node, bytes name, uint16 resource);\\n  // DNSZoneCleared is emitted whenever a given node's zone information is cleared.\\n  event DNSZoneCleared(bytes32 indexed node);\\n\\n  // Version the mapping for each zone.  This allows users who have lost\\n  // track of their entries to effectively delete an entire zone by bumping\\n  // the version number.\\n  // node => version\\n  mapping(bytes32 => uint256) private versions;\\n\\n  // The records themselves.  Stored as binary RRSETs\\n  // node => version => name => resource => data\\n  mapping(bytes32 => mapping(uint256 => mapping(bytes32 => mapping(uint16 => bytes))))\\n    private records;\\n\\n  // Count of number of entries for a given name.  Required for DNS resolvers\\n  // when resolving wildcards.\\n  // node => version => name => number of records\\n  mapping(bytes32 => mapping(uint256 => mapping(bytes32 => uint16)))\\n    private nameEntriesCount;\\n\\n  /**\\n   * Set one or more DNS records.  Records are supplied in wire-format.\\n   * Records with the same node/name/resource must be supplied one after the\\n   * other to ensure the data is updated correctly. For example, if the data\\n   * was supplied:\\n   *     a.example.com IN A 1.2.3.4\\n   *     a.example.com IN A 5.6.7.8\\n   *     www.example.com IN CNAME a.example.com.\\n   * then this would store the two A records for a.example.com correctly as a\\n   * single RRSET, however if the data was supplied:\\n   *     a.example.com IN A 1.2.3.4\\n   *     www.example.com IN CNAME a.example.com.\\n   *     a.example.com IN A 5.6.7.8\\n   * then this would store the first A record, the CNAME, then the second A\\n   * record which would overwrite the first.\\n   *\\n   * @param node the namehash of the node for which to set the records\\n   * @param data the DNS wire format records to set\\n   */\\n  function setDNSRecords(bytes32 node, bytes calldata data)\\n    external\\n    authorised(node)\\n  {\\n    uint16 resource = 0;\\n    uint256 offset = 0;\\n    bytes memory name;\\n    bytes memory value;\\n    bytes32 nameHash;\\n    // Iterate over the data to add the resource records\\n    for (\\n      RRUtils.RRIterator memory iter = data.iterateRRs(0);\\n      !iter.done();\\n      iter.next()\\n    ) {\\n      if (resource == 0) {\\n        resource = iter.dnstype;\\n        name = iter.name();\\n        nameHash = keccak256(abi.encodePacked(name));\\n        value = bytes(iter.rdata());\\n      } else {\\n        bytes memory newName = iter.name();\\n        if (resource != iter.dnstype || !name.equals(newName)) {\\n          setDNSRRSet(\\n            node,\\n            name,\\n            resource,\\n            data,\\n            offset,\\n            iter.offset - offset,\\n            value.length == 0\\n          );\\n          resource = iter.dnstype;\\n          offset = iter.offset;\\n          name = newName;\\n          nameHash = keccak256(name);\\n          value = bytes(iter.rdata());\\n        }\\n      }\\n    }\\n    if (name.length > 0) {\\n      setDNSRRSet(\\n        node,\\n        name,\\n        resource,\\n        data,\\n        offset,\\n        data.length - offset,\\n        value.length == 0\\n      );\\n    }\\n  }\\n\\n  /**\\n   * Obtain a DNS record.\\n   * @param node the namehash of the node for which to fetch the record\\n   * @param name the keccak-256 hash of the fully-qualified name for which to fetch the record\\n   * @param resource the ID of the resource as per https://en.wikipedia.org/wiki/List_of_DNS_record_types\\n   * @return the DNS record in wire format if present, otherwise empty\\n   */\\n  function dnsRecord(\\n    bytes32 node,\\n    bytes32 name,\\n    uint16 resource\\n  ) public view returns (bytes memory) {\\n    return records[node][versions[node]][name][resource];\\n  }\\n\\n  /**\\n   * Check if a given node has records.\\n   * @param node the namehash of the node for which to check the records\\n   * @param name the namehash of the node for which to check the records\\n   */\\n  function hasDNSRecords(bytes32 node, bytes32 name)\\n    public\\n    view\\n    returns (bool)\\n  {\\n    return (nameEntriesCount[node][versions[node]][name] != 0);\\n  }\\n\\n  /**\\n   * Clear all information for a DNS zone.\\n   * @param node the namehash of the node for which to clear the zone\\n   */\\n  function clearDNSZone(bytes32 node) public authorised(node) {\\n    versions[node]++;\\n    emit DNSZoneCleared(node);\\n  }\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return\\n      interfaceID == DNS_RECORD_INTERFACE_ID ||\\n      super.supportsInterface(interfaceID);\\n  }\\n\\n  function setDNSRRSet(\\n    bytes32 node,\\n    bytes memory name,\\n    uint16 resource,\\n    bytes memory data,\\n    uint256 offset,\\n    uint256 size,\\n    bool deleteRecord\\n  ) private {\\n    uint256 version = versions[node];\\n    bytes32 nameHash = keccak256(name);\\n    bytes memory rrData = data.substring(offset, size);\\n    if (deleteRecord) {\\n      if (records[node][version][nameHash][resource].length != 0) {\\n        nameEntriesCount[node][version][nameHash]--;\\n      }\\n      delete (records[node][version][nameHash][resource]);\\n      emit DNSRecordDeleted(node, name, resource);\\n    } else {\\n      if (records[node][version][nameHash][resource].length == 0) {\\n        nameEntriesCount[node][version][nameHash]++;\\n      }\\n      records[node][version][nameHash][resource] = rrData;\\n      emit DNSRecordChanged(node, name, resource, rrData);\\n    }\\n  }\\n}\\n\\n// File: contracts/profiles/InterfaceResolver.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract InterfaceResolver is ResolverBase, AddrResolver {\\n  bytes4 private constant INTERFACE_INTERFACE_ID =\\n    bytes4(keccak256('interfaceImplementer(bytes32,bytes4)'));\\n  bytes4 private constant INTERFACE_META_ID = 0x01ffc9a7;\\n\\n  event InterfaceChanged(\\n    bytes32 indexed node,\\n    bytes4 indexed interfaceID,\\n    address implementer\\n  );\\n\\n  mapping(bytes32 => mapping(bytes4 => address)) interfaces;\\n\\n  /**\\n   * Sets an interface associated with a name.\\n   * Setting the address to 0 restores the default behaviour of querying the contract at `addr()` for interface support.\\n   * @param node The node to update.\\n   * @param interfaceID The EIP 168 interface ID.\\n   * @param implementer The address of a contract that implements this interface for this node.\\n   */\\n  function setInterface(\\n    bytes32 node,\\n    bytes4 interfaceID,\\n    address implementer\\n  ) external authorised(node) {\\n    interfaces[node][interfaceID] = implementer;\\n    emit InterfaceChanged(node, interfaceID, implementer);\\n  }\\n\\n  /**\\n   * Returns the address of a contract that implements the specified interface for this name.\\n   * If an implementer has not been set for this interfaceID and name, the resolver will query\\n   * the contract at `addr()`. If `addr()` is set, a contract exists at that address, and that\\n   * contract implements EIP168 and returns `true` for the specified interfaceID, its address\\n   * will be returned.\\n   * @param node The ENS node to query.\\n   * @param interfaceID The EIP 168 interface ID to check for.\\n   * @return The address that implements this interface, or 0 if the interface is unsupported.\\n   */\\n  function interfaceImplementer(bytes32 node, bytes4 interfaceID)\\n    external\\n    view\\n    returns (address)\\n  {\\n    address implementer = interfaces[node][interfaceID];\\n    if (implementer != address(0)) {\\n      return implementer;\\n    }\\n\\n    address a = addr(node);\\n    if (a == address(0)) {\\n      return address(0);\\n    }\\n\\n    (bool success, bytes memory returnData) = a.staticcall(\\n      abi.encodeWithSignature('supportsInterface(bytes4)', INTERFACE_META_ID)\\n    );\\n    if (!success || returnData.length < 32 || returnData[31] == 0) {\\n      // EIP 168 not supported by target\\n      return address(0);\\n    }\\n\\n    (success, returnData) = a.staticcall(\\n      abi.encodeWithSignature('supportsInterface(bytes4)', interfaceID)\\n    );\\n    if (!success || returnData.length < 32 || returnData[31] == 0) {\\n      // Specified interface not supported by target\\n      return address(0);\\n    }\\n\\n    return a;\\n  }\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return\\n      interfaceID == INTERFACE_INTERFACE_ID ||\\n      super.supportsInterface(interfaceID);\\n  }\\n}\\n\\n// File: contracts/profiles/NameResolver.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract NameResolver is ResolverBase {\\n  bytes4 private constant NAME_INTERFACE_ID = 0x691f3431;\\n\\n  event NameChanged(bytes32 indexed node, string name);\\n\\n  mapping(bytes32 => string) names;\\n\\n  /**\\n   * Sets the name associated with an ENS node, for reverse records.\\n   * May only be called by the owner of that node in the ENS registry.\\n   * @param node The node to update.\\n   * @param name The name to set.\\n   */\\n  function setName(bytes32 node, string calldata name)\\n    external\\n    authorised(node)\\n  {\\n    names[node] = name;\\n    emit NameChanged(node, name);\\n  }\\n\\n  /**\\n   * Returns the name associated with an ENS node, for reverse records.\\n   * Defined in EIP181.\\n   * @param node The ENS node to query.\\n   * @return The associated name.\\n   */\\n  function name(bytes32 node) external view returns (string memory) {\\n    return names[node];\\n  }\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return\\n      interfaceID == NAME_INTERFACE_ID || super.supportsInterface(interfaceID);\\n  }\\n}\\n\\n// File: contracts/profiles/PubkeyResolver.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract PubkeyResolver is ResolverBase {\\n  bytes4 private constant PUBKEY_INTERFACE_ID = 0xc8690233;\\n\\n  event PubkeyChanged(bytes32 indexed node, bytes32 x, bytes32 y);\\n\\n  struct PublicKey {\\n    bytes32 x;\\n    bytes32 y;\\n  }\\n\\n  mapping(bytes32 => PublicKey) pubkeys;\\n\\n  /**\\n   * Sets the SECP256k1 public key associated with an ENS node.\\n   * @param node The ENS node to query\\n   * @param x the X coordinate of the curve point for the public key.\\n   * @param y the Y coordinate of the curve point for the public key.\\n   */\\n  function setPubkey(\\n    bytes32 node,\\n    bytes32 x,\\n    bytes32 y\\n  ) external authorised(node) {\\n    pubkeys[node] = PublicKey(x, y);\\n    emit PubkeyChanged(node, x, y);\\n  }\\n\\n  /**\\n   * Returns the SECP256k1 public key associated with an ENS node.\\n   * Defined in EIP 619.\\n   * @param node The ENS node to query\\n   * @return x, y the X and Y coordinates of the curve point for the public key.\\n   */\\n  function pubkey(bytes32 node) external view returns (bytes32 x, bytes32 y) {\\n    return (pubkeys[node].x, pubkeys[node].y);\\n  }\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return\\n      interfaceID == PUBKEY_INTERFACE_ID ||\\n      super.supportsInterface(interfaceID);\\n  }\\n}\\n\\n// File: contracts/profiles/TextResolver.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract TextResolver is ResolverBase {\\n  bytes4 private constant TEXT_INTERFACE_ID = 0x59d1d43c;\\n\\n  event TextChanged(\\n    bytes32 indexed node,\\n    string indexed indexedKey,\\n    string key\\n  );\\n\\n  mapping(bytes32 => mapping(string => string)) texts;\\n\\n  /**\\n   * Sets the text data associated with an ENS node and key.\\n   * May only be called by the owner of that node in the ENS registry.\\n   * @param node The node to update.\\n   * @param key The key to set.\\n   * @param value The text data value to set.\\n   */\\n  function setText(\\n    bytes32 node,\\n    string calldata key,\\n    string calldata value\\n  ) external authorised(node) {\\n    texts[node][key] = value;\\n    emit TextChanged(node, key, key);\\n  }\\n\\n  /**\\n   * Returns the text data associated with an ENS node and key.\\n   * @param node The ENS node to query.\\n   * @param key The text data key to query.\\n   * @return The associated text data.\\n   */\\n  function text(bytes32 node, string calldata key)\\n    external\\n    view\\n    returns (string memory)\\n  {\\n    return texts[node][key];\\n  }\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return\\n      interfaceID == TEXT_INTERFACE_ID || super.supportsInterface(interfaceID);\\n  }\\n}\\n\\n// File: contracts/PublicResolver.sol\\n\\npragma solidity ^0.5.0;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * A simple resolver anyone can use; only allows the owner of a node to set its\\n * address.\\n */\\ncontract PublicResolver_mainnet_9412610 is\\n  ABIResolver,\\n  AddrResolver,\\n  ContentHashResolver,\\n  DNSResolver,\\n  InterfaceResolver,\\n  NameResolver,\\n  PubkeyResolver,\\n  TextResolver\\n{\\n  ENS ens;\\n\\n  /**\\n   * A mapping of authorisations. An address that is authorised for a name\\n   * may make any changes to the name that the owner could, but may not update\\n   * the set of authorisations.\\n   * (node, owner, caller) => isAuthorised\\n   */\\n  mapping(bytes32 => mapping(address => mapping(address => bool)))\\n    public authorisations;\\n\\n  event AuthorisationChanged(\\n    bytes32 indexed node,\\n    address indexed owner,\\n    address indexed target,\\n    bool isAuthorised\\n  );\\n\\n  constructor(ENS _ens) public {\\n    ens = _ens;\\n  }\\n\\n  /**\\n   * @dev Sets or clears an authorisation.\\n   * Authorisations are specific to the caller. Any account can set an authorisation\\n   * for any name, but the authorisation that is checked will be that of the\\n   * current owner of a name. Thus, transferring a name effectively clears any\\n   * existing authorisations, and new authorisations can be set in advance of\\n   * an ownership transfer if desired.\\n   *\\n   * @param node The name to change the authorisation on.\\n   * @param target The address that is to be authorised or deauthorised.\\n   * @param isAuthorised True if the address should be authorised, or false if it should be deauthorised.\\n   */\\n  function setAuthorisation(\\n    bytes32 node,\\n    address target,\\n    bool isAuthorised\\n  ) external {\\n    authorisations[node][msg.sender][target] = isAuthorised;\\n    emit AuthorisationChanged(node, msg.sender, target, isAuthorised);\\n  }\\n\\n  function isAuthorised(bytes32 node) internal view returns (bool) {\\n    address owner = ens.owner(node);\\n    return owner == msg.sender || authorisations[node][owner][msg.sender];\\n  }\\n\\n  function multicall(bytes[] calldata data)\\n    external\\n    returns (bytes[] memory results)\\n  {\\n    results = new bytes[](data.length);\\n    for (uint256 i = 0; i < data.length; i++) {\\n      (bool success, bytes memory result) = address(this).delegatecall(data[i]);\\n      require(success);\\n      results[i] = result;\\n    }\\n    return results;\\n  }\\n}\\n\",\"keccak256\":\"0x29ca7d322ab7177f187f9bfc310e6dfc94049e9beaaafe958bead081fd90ad76\"}},\"version\":1}",
          "storageLayout": {
            "storage": [],
            "types": null
          },
          "userdoc": {
            "methods": {}
          }
        },
        "TextResolver": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "node",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "string",
                  "name": "indexedKey",
                  "type": "string"
                },
                {
                  "indexed": false,
                  "internalType": "string",
                  "name": "key",
                  "type": "string"
                }
              ],
              "name": "TextChanged",
              "type": "event"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "node",
                  "type": "bytes32"
                },
                {
                  "internalType": "string",
                  "name": "key",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "value",
                  "type": "string"
                }
              ],
              "name": "setText",
              "outputs": [],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [
                {
                  "internalType": "bytes4",
                  "name": "interfaceID",
                  "type": "bytes4"
                }
              ],
              "name": "supportsInterface",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "payable": false,
              "stateMutability": "pure",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "node",
                  "type": "bytes32"
                },
                {
                  "internalType": "string",
                  "name": "key",
                  "type": "string"
                }
              ],
              "name": "text",
              "outputs": [
                {
                  "internalType": "string",
                  "name": "",
                  "type": "string"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "devdoc": {
            "methods": {
              "setText(bytes32,string,string)": {
                "params": {
                  "key": "The key to set.",
                  "node": "The node to update.",
                  "value": "The text data value to set."
                }
              },
              "text(bytes32,string)": {
                "params": {
                  "key": "The text data key to query.",
                  "node": "The ENS node to query."
                },
                "return": "The associated text data."
              }
            }
          },
          "evm": {
            "bytecode": {
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "gasEstimates": null,
            "methodIdentifiers": {
              "setText(bytes32,string,string)": "10f13a8c",
              "supportsInterface(bytes4)": "01ffc9a7",
              "text(bytes32,string)": "59d1d43c"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.5.17+commit.d19bba13\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"indexedKey\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"TextChanged\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"name\":\"setText\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"text\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"setText(bytes32,string,string)\":{\"params\":{\"key\":\"The key to set.\",\"node\":\"The node to update.\",\"value\":\"The text data value to set.\"}},\"text(bytes32,string)\":{\"params\":{\"key\":\"The text data key to query.\",\"node\":\"The ENS node to query.\"},\"return\":\"The associated text data.\"}}},\"userdoc\":{\"methods\":{\"setText(bytes32,string,string)\":{\"notice\":\"Sets the text data associated with an ENS node and key. May only be called by the owner of that node in the ENS registry.\"},\"text(bytes32,string)\":{\"notice\":\"Returns the text data associated with an ENS node and key.\"}}}},\"settings\":{\"compilationTarget\":{\"contracts/legacy/PublicResolver_mainnet_9412610.sol\":\"TextResolver\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"contracts/legacy/PublicResolver_mainnet_9412610.sol\":{\"content\":\"/**\\n *Submitted for verification at Etherscan.io on 2020-02-03\\n */\\n\\n// File: @ensdomains/ens/contracts/ENS.sol\\n\\npragma solidity >=0.4.24;\\n\\ninterface ENS {\\n  // Logged when the owner of a node assigns a new owner to a subnode.\\n  event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n  // Logged when the owner of a node transfers ownership to a new account.\\n  event Transfer(bytes32 indexed node, address owner);\\n\\n  // Logged when the resolver for a node changes.\\n  event NewResolver(bytes32 indexed node, address resolver);\\n\\n  // Logged when the TTL of a node changes\\n  event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n  function setSubnodeOwner(\\n    bytes32 node,\\n    bytes32 label,\\n    address owner\\n  ) external;\\n\\n  function setResolver(bytes32 node, address resolver) external;\\n\\n  function setOwner(bytes32 node, address owner) external;\\n\\n  function setTTL(bytes32 node, uint64 ttl) external;\\n\\n  function owner(bytes32 node) external view returns (address);\\n\\n  function resolver(bytes32 node) external view returns (address);\\n\\n  function ttl(bytes32 node) external view returns (uint64);\\n}\\n\\n// File: contracts/ResolverBase.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract ResolverBase {\\n  bytes4 private constant INTERFACE_META_ID = 0x01ffc9a7;\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return interfaceID == INTERFACE_META_ID;\\n  }\\n\\n  function isAuthorised(bytes32 node) internal view returns (bool);\\n\\n  modifier authorised(bytes32 node) {\\n    require(isAuthorised(node));\\n    _;\\n  }\\n\\n  function bytesToAddress(bytes memory b)\\n    internal\\n    pure\\n    returns (address payable a)\\n  {\\n    require(b.length == 20);\\n    assembly {\\n      a := div(mload(add(b, 32)), exp(256, 12))\\n    }\\n  }\\n\\n  function addressToBytes(address a) internal pure returns (bytes memory b) {\\n    b = new bytes(20);\\n    assembly {\\n      mstore(add(b, 32), mul(a, exp(256, 12)))\\n    }\\n  }\\n}\\n\\n// File: contracts/profiles/ABIResolver.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract ABIResolver is ResolverBase {\\n  bytes4 private constant ABI_INTERFACE_ID = 0x2203ab56;\\n\\n  event ABIChanged(bytes32 indexed node, uint256 indexed contentType);\\n\\n  mapping(bytes32 => mapping(uint256 => bytes)) abis;\\n\\n  /**\\n   * Sets the ABI associated with an ENS node.\\n   * Nodes may have one ABI of each content type. To remove an ABI, set it to\\n   * the empty string.\\n   * @param node The node to update.\\n   * @param contentType The content type of the ABI\\n   * @param data The ABI data.\\n   */\\n  function setABI(\\n    bytes32 node,\\n    uint256 contentType,\\n    bytes calldata data\\n  ) external authorised(node) {\\n    // Content types must be powers of 2\\n    require(((contentType - 1) & contentType) == 0);\\n\\n    abis[node][contentType] = data;\\n    emit ABIChanged(node, contentType);\\n  }\\n\\n  /**\\n   * Returns the ABI associated with an ENS node.\\n   * Defined in EIP205.\\n   * @param node The ENS node to query\\n   * @param contentTypes A bitwise OR of the ABI formats accepted by the caller.\\n   * @return contentType The content type of the return value\\n   * @return data The ABI data\\n   */\\n  function ABI(bytes32 node, uint256 contentTypes)\\n    external\\n    view\\n    returns (uint256, bytes memory)\\n  {\\n    mapping(uint256 => bytes) storage abiset = abis[node];\\n\\n    for (\\n      uint256 contentType = 1;\\n      contentType <= contentTypes;\\n      contentType <<= 1\\n    ) {\\n      if ((contentType & contentTypes) != 0 && abiset[contentType].length > 0) {\\n        return (contentType, abiset[contentType]);\\n      }\\n    }\\n\\n    return (0, bytes(''));\\n  }\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return\\n      interfaceID == ABI_INTERFACE_ID || super.supportsInterface(interfaceID);\\n  }\\n}\\n\\n// File: contracts/profiles/AddrResolver.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract AddrResolver is ResolverBase {\\n  bytes4 private constant ADDR_INTERFACE_ID = 0x3b3b57de;\\n  bytes4 private constant ADDRESS_INTERFACE_ID = 0xf1cb7e06;\\n  uint256 private constant COIN_TYPE_ETH = 60;\\n\\n  event AddrChanged(bytes32 indexed node, address a);\\n  event AddressChanged(\\n    bytes32 indexed node,\\n    uint256 coinType,\\n    bytes newAddress\\n  );\\n\\n  mapping(bytes32 => mapping(uint256 => bytes)) _addresses;\\n\\n  /**\\n   * Sets the address associated with an ENS node.\\n   * May only be called by the owner of that node in the ENS registry.\\n   * @param node The node to update.\\n   * @param a The address to set.\\n   */\\n  function setAddr(bytes32 node, address a) external authorised(node) {\\n    setAddr(node, COIN_TYPE_ETH, addressToBytes(a));\\n  }\\n\\n  /**\\n   * Returns the address associated with an ENS node.\\n   * @param node The ENS node to query.\\n   * @return The associated address.\\n   */\\n  function addr(bytes32 node) public view returns (address payable) {\\n    bytes memory a = addr(node, COIN_TYPE_ETH);\\n    if (a.length == 0) {\\n      return address(0);\\n    }\\n    return bytesToAddress(a);\\n  }\\n\\n  function setAddr(\\n    bytes32 node,\\n    uint256 coinType,\\n    bytes memory a\\n  ) public authorised(node) {\\n    emit AddressChanged(node, coinType, a);\\n    if (coinType == COIN_TYPE_ETH) {\\n      emit AddrChanged(node, bytesToAddress(a));\\n    }\\n    _addresses[node][coinType] = a;\\n  }\\n\\n  function addr(bytes32 node, uint256 coinType)\\n    public\\n    view\\n    returns (bytes memory)\\n  {\\n    return _addresses[node][coinType];\\n  }\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return\\n      interfaceID == ADDR_INTERFACE_ID ||\\n      interfaceID == ADDRESS_INTERFACE_ID ||\\n      super.supportsInterface(interfaceID);\\n  }\\n}\\n\\n// File: contracts/profiles/ContentHashResolver.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract ContentHashResolver is ResolverBase {\\n  bytes4 private constant CONTENT_HASH_INTERFACE_ID = 0xbc1c58d1;\\n\\n  event ContenthashChanged(bytes32 indexed node, bytes hash);\\n\\n  mapping(bytes32 => bytes) hashes;\\n\\n  /**\\n   * Sets the contenthash associated with an ENS node.\\n   * May only be called by the owner of that node in the ENS registry.\\n   * @param node The node to update.\\n   * @param hash The contenthash to set\\n   */\\n  function setContenthash(bytes32 node, bytes calldata hash)\\n    external\\n    authorised(node)\\n  {\\n    hashes[node] = hash;\\n    emit ContenthashChanged(node, hash);\\n  }\\n\\n  /**\\n   * Returns the contenthash associated with an ENS node.\\n   * @param node The ENS node to query.\\n   * @return The associated contenthash.\\n   */\\n  function contenthash(bytes32 node) external view returns (bytes memory) {\\n    return hashes[node];\\n  }\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return\\n      interfaceID == CONTENT_HASH_INTERFACE_ID ||\\n      super.supportsInterface(interfaceID);\\n  }\\n}\\n\\n// File: @ensdomains/dnssec-oracle/contracts/BytesUtils.sol\\n\\npragma solidity >0.4.23;\\n\\nlibrary BytesUtils {\\n  /*\\n   * @dev Returns the keccak-256 hash of a byte range.\\n   * @param self The byte string to hash.\\n   * @param offset The position to start hashing at.\\n   * @param len The number of bytes to hash.\\n   * @return The hash of the byte range.\\n   */\\n  function keccak(\\n    bytes memory self,\\n    uint256 offset,\\n    uint256 len\\n  ) internal pure returns (bytes32 ret) {\\n    require(offset + len <= self.length);\\n    assembly {\\n      ret := keccak256(add(add(self, 32), offset), len)\\n    }\\n  }\\n\\n  /*\\n   * @dev Returns a positive number if `other` comes lexicographically after\\n   *      `self`, a negative number if it comes before, or zero if the\\n   *      contents of the two bytes are equal.\\n   * @param self The first bytes to compare.\\n   * @param other The second bytes to compare.\\n   * @return The result of the comparison.\\n   */\\n  function compare(bytes memory self, bytes memory other)\\n    internal\\n    pure\\n    returns (int256)\\n  {\\n    return compare(self, 0, self.length, other, 0, other.length);\\n  }\\n\\n  /*\\n   * @dev Returns a positive number if `other` comes lexicographically after\\n   *      `self`, a negative number if it comes before, or zero if the\\n   *      contents of the two bytes are equal. Comparison is done per-rune,\\n   *      on unicode codepoints.\\n   * @param self The first bytes to compare.\\n   * @param offset The offset of self.\\n   * @param len    The length of self.\\n   * @param other The second bytes to compare.\\n   * @param otheroffset The offset of the other string.\\n   * @param otherlen    The length of the other string.\\n   * @return The result of the comparison.\\n   */\\n  function compare(\\n    bytes memory self,\\n    uint256 offset,\\n    uint256 len,\\n    bytes memory other,\\n    uint256 otheroffset,\\n    uint256 otherlen\\n  ) internal pure returns (int256) {\\n    uint256 shortest = len;\\n    if (otherlen < len) shortest = otherlen;\\n\\n    uint256 selfptr;\\n    uint256 otherptr;\\n\\n    assembly {\\n      selfptr := add(self, add(offset, 32))\\n      otherptr := add(other, add(otheroffset, 32))\\n    }\\n    for (uint256 idx = 0; idx < shortest; idx += 32) {\\n      uint256 a;\\n      uint256 b;\\n      assembly {\\n        a := mload(selfptr)\\n        b := mload(otherptr)\\n      }\\n      if (a != b) {\\n        // Mask out irrelevant bytes and check again\\n        uint256 mask;\\n        if (shortest > 32) {\\n          mask = uint256(-1); // aka 0xffffff....\\n        } else {\\n          mask = ~(2**(8 * (32 - shortest + idx)) - 1);\\n        }\\n        uint256 diff = (a & mask) - (b & mask);\\n        if (diff != 0) return int256(diff);\\n      }\\n      selfptr += 32;\\n      otherptr += 32;\\n    }\\n\\n    return int256(len) - int256(otherlen);\\n  }\\n\\n  /*\\n   * @dev Returns true if the two byte ranges are equal.\\n   * @param self The first byte range to compare.\\n   * @param offset The offset into the first byte range.\\n   * @param other The second byte range to compare.\\n   * @param otherOffset The offset into the second byte range.\\n   * @param len The number of bytes to compare\\n   * @return True if the byte ranges are equal, false otherwise.\\n   */\\n  function equals(\\n    bytes memory self,\\n    uint256 offset,\\n    bytes memory other,\\n    uint256 otherOffset,\\n    uint256 len\\n  ) internal pure returns (bool) {\\n    return keccak(self, offset, len) == keccak(other, otherOffset, len);\\n  }\\n\\n  /*\\n   * @dev Returns true if the two byte ranges are equal with offsets.\\n   * @param self The first byte range to compare.\\n   * @param offset The offset into the first byte range.\\n   * @param other The second byte range to compare.\\n   * @param otherOffset The offset into the second byte range.\\n   * @return True if the byte ranges are equal, false otherwise.\\n   */\\n  function equals(\\n    bytes memory self,\\n    uint256 offset,\\n    bytes memory other,\\n    uint256 otherOffset\\n  ) internal pure returns (bool) {\\n    return\\n      keccak(self, offset, self.length - offset) ==\\n      keccak(other, otherOffset, other.length - otherOffset);\\n  }\\n\\n  /*\\n   * @dev Compares a range of 'self' to all of 'other' and returns True iff\\n   *      they are equal.\\n   * @param self The first byte range to compare.\\n   * @param offset The offset into the first byte range.\\n   * @param other The second byte range to compare.\\n   * @return True if the byte ranges are equal, false otherwise.\\n   */\\n  function equals(\\n    bytes memory self,\\n    uint256 offset,\\n    bytes memory other\\n  ) internal pure returns (bool) {\\n    return\\n      self.length >= offset + other.length &&\\n      equals(self, offset, other, 0, other.length);\\n  }\\n\\n  /*\\n   * @dev Returns true if the two byte ranges are equal.\\n   * @param self The first byte range to compare.\\n   * @param other The second byte range to compare.\\n   * @return True if the byte ranges are equal, false otherwise.\\n   */\\n  function equals(bytes memory self, bytes memory other)\\n    internal\\n    pure\\n    returns (bool)\\n  {\\n    return\\n      self.length == other.length && equals(self, 0, other, 0, self.length);\\n  }\\n\\n  /*\\n   * @dev Returns the 8-bit number at the specified index of self.\\n   * @param self The byte string.\\n   * @param idx The index into the bytes\\n   * @return The specified 8 bits of the string, interpreted as an integer.\\n   */\\n  function readUint8(bytes memory self, uint256 idx)\\n    internal\\n    pure\\n    returns (uint8 ret)\\n  {\\n    return uint8(self[idx]);\\n  }\\n\\n  /*\\n   * @dev Returns the 16-bit number at the specified index of self.\\n   * @param self The byte string.\\n   * @param idx The index into the bytes\\n   * @return The specified 16 bits of the string, interpreted as an integer.\\n   */\\n  function readUint16(bytes memory self, uint256 idx)\\n    internal\\n    pure\\n    returns (uint16 ret)\\n  {\\n    require(idx + 2 <= self.length);\\n    assembly {\\n      ret := and(mload(add(add(self, 2), idx)), 0xFFFF)\\n    }\\n  }\\n\\n  /*\\n   * @dev Returns the 32-bit number at the specified index of self.\\n   * @param self The byte string.\\n   * @param idx The index into the bytes\\n   * @return The specified 32 bits of the string, interpreted as an integer.\\n   */\\n  function readUint32(bytes memory self, uint256 idx)\\n    internal\\n    pure\\n    returns (uint32 ret)\\n  {\\n    require(idx + 4 <= self.length);\\n    assembly {\\n      ret := and(mload(add(add(self, 4), idx)), 0xFFFFFFFF)\\n    }\\n  }\\n\\n  /*\\n   * @dev Returns the 32 byte value at the specified index of self.\\n   * @param self The byte string.\\n   * @param idx The index into the bytes\\n   * @return The specified 32 bytes of the string.\\n   */\\n  function readBytes32(bytes memory self, uint256 idx)\\n    internal\\n    pure\\n    returns (bytes32 ret)\\n  {\\n    require(idx + 32 <= self.length);\\n    assembly {\\n      ret := mload(add(add(self, 32), idx))\\n    }\\n  }\\n\\n  /*\\n   * @dev Returns the 32 byte value at the specified index of self.\\n   * @param self The byte string.\\n   * @param idx The index into the bytes\\n   * @return The specified 32 bytes of the string.\\n   */\\n  function readBytes20(bytes memory self, uint256 idx)\\n    internal\\n    pure\\n    returns (bytes20 ret)\\n  {\\n    require(idx + 20 <= self.length);\\n    assembly {\\n      ret := and(\\n        mload(add(add(self, 32), idx)),\\n        0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000\\n      )\\n    }\\n  }\\n\\n  /*\\n   * @dev Returns the n byte value at the specified index of self.\\n   * @param self The byte string.\\n   * @param idx The index into the bytes.\\n   * @param len The number of bytes.\\n   * @return The specified 32 bytes of the string.\\n   */\\n  function readBytesN(\\n    bytes memory self,\\n    uint256 idx,\\n    uint256 len\\n  ) internal pure returns (bytes32 ret) {\\n    require(len <= 32);\\n    require(idx + len <= self.length);\\n    assembly {\\n      let mask := not(sub(exp(256, sub(32, len)), 1))\\n      ret := and(mload(add(add(self, 32), idx)), mask)\\n    }\\n  }\\n\\n  function memcpy(\\n    uint256 dest,\\n    uint256 src,\\n    uint256 len\\n  ) private pure {\\n    // Copy word-length chunks while possible\\n    for (; len >= 32; len -= 32) {\\n      assembly {\\n        mstore(dest, mload(src))\\n      }\\n      dest += 32;\\n      src += 32;\\n    }\\n\\n    // Copy remaining bytes\\n    uint256 mask = 256**(32 - len) - 1;\\n    assembly {\\n      let srcpart := and(mload(src), not(mask))\\n      let destpart := and(mload(dest), mask)\\n      mstore(dest, or(destpart, srcpart))\\n    }\\n  }\\n\\n  /*\\n   * @dev Copies a substring into a new byte string.\\n   * @param self The byte string to copy from.\\n   * @param offset The offset to start copying at.\\n   * @param len The number of bytes to copy.\\n   */\\n  function substring(\\n    bytes memory self,\\n    uint256 offset,\\n    uint256 len\\n  ) internal pure returns (bytes memory) {\\n    require(offset + len <= self.length);\\n\\n    bytes memory ret = new bytes(len);\\n    uint256 dest;\\n    uint256 src;\\n\\n    assembly {\\n      dest := add(ret, 32)\\n      src := add(add(self, 32), offset)\\n    }\\n    memcpy(dest, src, len);\\n\\n    return ret;\\n  }\\n\\n  // Maps characters from 0x30 to 0x7A to their base32 values.\\n  // 0xFF represents invalid characters in that range.\\n  bytes constant base32HexTable =\\n    hex'00010203040506070809FFFFFFFFFFFFFF0A0B0C0D0E0F101112131415161718191A1B1C1D1E1FFFFFFFFFFFFFFFFFFFFF0A0B0C0D0E0F101112131415161718191A1B1C1D1E1F';\\n\\n  /**\\n   * @dev Decodes unpadded base32 data of up to one word in length.\\n   * @param self The data to decode.\\n   * @param off Offset into the string to start at.\\n   * @param len Number of characters to decode.\\n   * @return The decoded data, left aligned.\\n   */\\n  function base32HexDecodeWord(\\n    bytes memory self,\\n    uint256 off,\\n    uint256 len\\n  ) internal pure returns (bytes32) {\\n    require(len <= 52);\\n\\n    uint256 ret = 0;\\n    uint8 decoded;\\n    for (uint256 i = 0; i < len; i++) {\\n      bytes1 char = self[off + i];\\n      require(char >= 0x30 && char <= 0x7A);\\n      decoded = uint8(base32HexTable[uint256(uint8(char)) - 0x30]);\\n      require(decoded <= 0x20);\\n      if (i == len - 1) {\\n        break;\\n      }\\n      ret = (ret << 5) | decoded;\\n    }\\n\\n    uint256 bitlen = len * 5;\\n    if (len % 8 == 0) {\\n      // Multiple of 8 characters, no padding\\n      ret = (ret << 5) | decoded;\\n    } else if (len % 8 == 2) {\\n      // Two extra characters - 1 byte\\n      ret = (ret << 3) | (decoded >> 2);\\n      bitlen -= 2;\\n    } else if (len % 8 == 4) {\\n      // Four extra characters - 2 bytes\\n      ret = (ret << 1) | (decoded >> 4);\\n      bitlen -= 4;\\n    } else if (len % 8 == 5) {\\n      // Five extra characters - 3 bytes\\n      ret = (ret << 4) | (decoded >> 1);\\n      bitlen -= 1;\\n    } else if (len % 8 == 7) {\\n      // Seven extra characters - 4 bytes\\n      ret = (ret << 2) | (decoded >> 3);\\n      bitlen -= 3;\\n    } else {\\n      revert();\\n    }\\n\\n    return bytes32(ret << (256 - bitlen));\\n  }\\n}\\n\\n// File: @ensdomains/buffer/contracts/Buffer.sol\\n\\npragma solidity >0.4.18;\\n\\n/**\\n * @dev A library for working with mutable byte buffers in Solidity.\\n *\\n * Byte buffers are mutable and expandable, and provide a variety of primitives\\n * for writing to them. At any time you can fetch a bytes object containing the\\n * current contents of the buffer. The bytes object should not be stored between\\n * operations, as it may change due to resizing of the buffer.\\n */\\nlibrary Buffer {\\n  /**\\n   * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n   *      a capacity. The capacity may be longer than the current value, in\\n   *      which case it can be extended without the need to allocate more memory.\\n   */\\n  struct buffer {\\n    bytes buf;\\n    uint256 capacity;\\n  }\\n\\n  /**\\n   * @dev Initializes a buffer with an initial capacity.\\n   * @param buf The buffer to initialize.\\n   * @param capacity The number of bytes of space to allocate the buffer.\\n   * @return The buffer, for chaining.\\n   */\\n  function init(buffer memory buf, uint256 capacity)\\n    internal\\n    pure\\n    returns (buffer memory)\\n  {\\n    if (capacity % 32 != 0) {\\n      capacity += 32 - (capacity % 32);\\n    }\\n    // Allocate space for the buffer data\\n    buf.capacity = capacity;\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(buf, ptr)\\n      mstore(ptr, 0)\\n      mstore(0x40, add(32, add(ptr, capacity)))\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Initializes a new buffer from an existing bytes object.\\n   *      Changes to the buffer may mutate the original value.\\n   * @param b The bytes object to initialize the buffer with.\\n   * @return A new buffer.\\n   */\\n  function fromBytes(bytes memory b) internal pure returns (buffer memory) {\\n    buffer memory buf;\\n    buf.buf = b;\\n    buf.capacity = b.length;\\n    return buf;\\n  }\\n\\n  function resize(buffer memory buf, uint256 capacity) private pure {\\n    bytes memory oldbuf = buf.buf;\\n    init(buf, capacity);\\n    append(buf, oldbuf);\\n  }\\n\\n  function max(uint256 a, uint256 b) private pure returns (uint256) {\\n    if (a > b) {\\n      return a;\\n    }\\n    return b;\\n  }\\n\\n  /**\\n   * @dev Sets buffer length to 0.\\n   * @param buf The buffer to truncate.\\n   * @return The original buffer, for chaining..\\n   */\\n  function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n    assembly {\\n      let bufptr := mload(buf)\\n      mstore(bufptr, 0)\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Writes a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The start offset to write to.\\n   * @param data The data to append.\\n   * @param len The number of bytes to copy.\\n   * @return The original buffer, for chaining.\\n   */\\n  function write(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes memory data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    require(len <= data.length);\\n\\n    if (off + len > buf.capacity) {\\n      resize(buf, max(buf.capacity, len + off) * 2);\\n    }\\n\\n    uint256 dest;\\n    uint256 src;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Start address = buffer address + offset + sizeof(buffer length)\\n      dest := add(add(bufptr, 32), off)\\n      // Update buffer length if we're extending it\\n      if gt(add(len, off), buflen) {\\n        mstore(bufptr, add(len, off))\\n      }\\n      src := add(data, 32)\\n    }\\n\\n    // Copy word-length chunks while possible\\n    for (; len >= 32; len -= 32) {\\n      assembly {\\n        mstore(dest, mload(src))\\n      }\\n      dest += 32;\\n      src += 32;\\n    }\\n\\n    // Copy remaining bytes\\n    uint256 mask = 256**(32 - len) - 1;\\n    assembly {\\n      let srcpart := and(mload(src), not(mask))\\n      let destpart := and(mload(dest), mask)\\n      mstore(dest, or(destpart, srcpart))\\n    }\\n\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @param len The number of bytes to copy.\\n   * @return The original buffer, for chaining.\\n   */\\n  function append(\\n    buffer memory buf,\\n    bytes memory data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, len);\\n  }\\n\\n  /**\\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function append(buffer memory buf, bytes memory data)\\n    internal\\n    pure\\n    returns (buffer memory)\\n  {\\n    return write(buf, buf.buf.length, data, data.length);\\n  }\\n\\n  /**\\n   * @dev Writes a byte to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write the byte at.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeUint8(\\n    buffer memory buf,\\n    uint256 off,\\n    uint8 data\\n  ) internal pure returns (buffer memory) {\\n    if (off >= buf.capacity) {\\n      resize(buf, buf.capacity * 2);\\n    }\\n\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Address = buffer address + sizeof(buffer length) + off\\n      let dest := add(add(bufptr, off), 32)\\n      mstore8(dest, data)\\n      // Update buffer length if we extended it\\n      if eq(off, buflen) {\\n        mstore(bufptr, add(buflen, 1))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function appendUint8(buffer memory buf, uint8 data)\\n    internal\\n    pure\\n    returns (buffer memory)\\n  {\\n    return writeUint8(buf, buf.buf.length, data);\\n  }\\n\\n  /**\\n   * @dev Writes up to 32 bytes to the buffer. Resizes if doing so would\\n   *      exceed the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @param len The number of bytes to write (left-aligned).\\n   * @return The original buffer, for chaining.\\n   */\\n  function write(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes32 data,\\n    uint256 len\\n  ) private pure returns (buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    uint256 mask = 256**len - 1;\\n    // Right-align data\\n    data = data >> (8 * (32 - len));\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Address = buffer address + sizeof(buffer length) + off + len\\n      let dest := add(add(bufptr, off), len)\\n      mstore(dest, or(and(mload(dest), not(mask)), data))\\n      // Update buffer length if we extended it\\n      if gt(add(off, len), mload(bufptr)) {\\n        mstore(bufptr, add(off, len))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Writes a bytes20 to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeBytes20(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes20 data\\n  ) internal pure returns (buffer memory) {\\n    return write(buf, off, bytes32(data), 20);\\n  }\\n\\n  /**\\n   * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chhaining.\\n   */\\n  function appendBytes20(buffer memory buf, bytes20 data)\\n    internal\\n    pure\\n    returns (buffer memory)\\n  {\\n    return write(buf, buf.buf.length, bytes32(data), 20);\\n  }\\n\\n  /**\\n   * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function appendBytes32(buffer memory buf, bytes32 data)\\n    internal\\n    pure\\n    returns (buffer memory)\\n  {\\n    return write(buf, buf.buf.length, data, 32);\\n  }\\n\\n  /**\\n   * @dev Writes an integer to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @param len The number of bytes to write (right-aligned).\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeInt(\\n    buffer memory buf,\\n    uint256 off,\\n    uint256 data,\\n    uint256 len\\n  ) private pure returns (buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    uint256 mask = 256**len - 1;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Address = buffer address + off + sizeof(buffer length) + len\\n      let dest := add(add(bufptr, off), len)\\n      mstore(dest, or(and(mload(dest), not(mask)), data))\\n      // Update buffer length if we extended it\\n      if gt(add(off, len), mload(bufptr)) {\\n        mstore(bufptr, add(off, len))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n   * exceed the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer.\\n   */\\n  function appendInt(\\n    buffer memory buf,\\n    uint256 data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    return writeInt(buf, buf.buf.length, data, len);\\n  }\\n}\\n\\n// File: @ensdomains/dnssec-oracle/contracts/RRUtils.sol\\n\\npragma solidity >0.4.23;\\n\\n/**\\n * @dev RRUtils is a library that provides utilities for parsing DNS resource records.\\n */\\nlibrary RRUtils {\\n  using BytesUtils for *;\\n  using Buffer for *;\\n\\n  /**\\n   * @dev Returns the number of bytes in the DNS name at 'offset' in 'self'.\\n   * @param self The byte array to read a name from.\\n   * @param offset The offset to start reading at.\\n   * @return The length of the DNS name at 'offset', in bytes.\\n   */\\n  function nameLength(bytes memory self, uint256 offset)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    uint256 idx = offset;\\n    while (true) {\\n      assert(idx < self.length);\\n      uint256 labelLen = self.readUint8(idx);\\n      idx += labelLen + 1;\\n      if (labelLen == 0) {\\n        break;\\n      }\\n    }\\n    return idx - offset;\\n  }\\n\\n  /**\\n   * @dev Returns a DNS format name at the specified offset of self.\\n   * @param self The byte array to read a name from.\\n   * @param offset The offset to start reading at.\\n   * @return The name.\\n   */\\n  function readName(bytes memory self, uint256 offset)\\n    internal\\n    pure\\n    returns (bytes memory ret)\\n  {\\n    uint256 len = nameLength(self, offset);\\n    return self.substring(offset, len);\\n  }\\n\\n  /**\\n   * @dev Returns the number of labels in the DNS name at 'offset' in 'self'.\\n   * @param self The byte array to read a name from.\\n   * @param offset The offset to start reading at.\\n   * @return The number of labels in the DNS name at 'offset', in bytes.\\n   */\\n  function labelCount(bytes memory self, uint256 offset)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    uint256 count = 0;\\n    while (true) {\\n      assert(offset < self.length);\\n      uint256 labelLen = self.readUint8(offset);\\n      offset += labelLen + 1;\\n      if (labelLen == 0) {\\n        break;\\n      }\\n      count += 1;\\n    }\\n    return count;\\n  }\\n\\n  /**\\n   * @dev An iterator over resource records.\\n   */\\n  struct RRIterator {\\n    bytes data;\\n    uint256 offset;\\n    uint16 dnstype;\\n    uint16 class;\\n    uint32 ttl;\\n    uint256 rdataOffset;\\n    uint256 nextOffset;\\n  }\\n\\n  /**\\n   * @dev Begins iterating over resource records.\\n   * @param self The byte string to read from.\\n   * @param offset The offset to start reading at.\\n   * @return An iterator object.\\n   */\\n  function iterateRRs(bytes memory self, uint256 offset)\\n    internal\\n    pure\\n    returns (RRIterator memory ret)\\n  {\\n    ret.data = self;\\n    ret.nextOffset = offset;\\n    next(ret);\\n  }\\n\\n  /**\\n   * @dev Returns true iff there are more RRs to iterate.\\n   * @param iter The iterator to check.\\n   * @return True iff the iterator has finished.\\n   */\\n  function done(RRIterator memory iter) internal pure returns (bool) {\\n    return iter.offset >= iter.data.length;\\n  }\\n\\n  /**\\n   * @dev Moves the iterator to the next resource record.\\n   * @param iter The iterator to advance.\\n   */\\n  function next(RRIterator memory iter) internal pure {\\n    iter.offset = iter.nextOffset;\\n    if (iter.offset >= iter.data.length) {\\n      return;\\n    }\\n\\n    // Skip the name\\n    uint256 off = iter.offset + nameLength(iter.data, iter.offset);\\n\\n    // Read type, class, and ttl\\n    iter.dnstype = iter.data.readUint16(off);\\n    off += 2;\\n    iter.class = iter.data.readUint16(off);\\n    off += 2;\\n    iter.ttl = iter.data.readUint32(off);\\n    off += 4;\\n\\n    // Read the rdata\\n    uint256 rdataLength = iter.data.readUint16(off);\\n    off += 2;\\n    iter.rdataOffset = off;\\n    iter.nextOffset = off + rdataLength;\\n  }\\n\\n  /**\\n   * @dev Returns the name of the current record.\\n   * @param iter The iterator.\\n   * @return A new bytes object containing the owner name from the RR.\\n   */\\n  function name(RRIterator memory iter) internal pure returns (bytes memory) {\\n    return iter.data.substring(iter.offset, nameLength(iter.data, iter.offset));\\n  }\\n\\n  /**\\n   * @dev Returns the rdata portion of the current record.\\n   * @param iter The iterator.\\n   * @return A new bytes object containing the RR's RDATA.\\n   */\\n  function rdata(RRIterator memory iter) internal pure returns (bytes memory) {\\n    return\\n      iter.data.substring(iter.rdataOffset, iter.nextOffset - iter.rdataOffset);\\n  }\\n\\n  /**\\n   * @dev Checks if a given RR type exists in a type bitmap.\\n   * @param self The byte string to read the type bitmap from.\\n   * @param offset The offset to start reading at.\\n   * @param rrtype The RR type to check for.\\n   * @return True if the type is found in the bitmap, false otherwise.\\n   */\\n  function checkTypeBitmap(\\n    bytes memory self,\\n    uint256 offset,\\n    uint16 rrtype\\n  ) internal pure returns (bool) {\\n    uint8 typeWindow = uint8(rrtype >> 8);\\n    uint8 windowByte = uint8((rrtype & 0xff) / 8);\\n    uint8 windowBitmask = uint8(uint8(1) << (uint8(7) - uint8(rrtype & 0x7)));\\n    for (uint256 off = offset; off < self.length; ) {\\n      uint8 window = self.readUint8(off);\\n      uint8 len = self.readUint8(off + 1);\\n      if (typeWindow < window) {\\n        // We've gone past our window; it's not here.\\n        return false;\\n      } else if (typeWindow == window) {\\n        // Check this type bitmap\\n        if (len * 8 <= windowByte) {\\n          // Our type is past the end of the bitmap\\n          return false;\\n        }\\n        return (self.readUint8(off + windowByte + 2) & windowBitmask) != 0;\\n      } else {\\n        // Skip this type bitmap\\n        off += len + 2;\\n      }\\n    }\\n\\n    return false;\\n  }\\n\\n  function compareNames(bytes memory self, bytes memory other)\\n    internal\\n    pure\\n    returns (int256)\\n  {\\n    if (self.equals(other)) {\\n      return 0;\\n    }\\n\\n    uint256 off;\\n    uint256 otheroff;\\n    uint256 prevoff;\\n    uint256 otherprevoff;\\n    uint256 counts = labelCount(self, 0);\\n    uint256 othercounts = labelCount(other, 0);\\n\\n    // Keep removing labels from the front of the name until both names are equal length\\n    while (counts > othercounts) {\\n      prevoff = off;\\n      off = progress(self, off);\\n      counts--;\\n    }\\n\\n    while (othercounts > counts) {\\n      otherprevoff = otheroff;\\n      otheroff = progress(other, otheroff);\\n      othercounts--;\\n    }\\n\\n    // Compare the last nonequal labels to each other\\n    while (counts > 0 && !self.equals(off, other, otheroff)) {\\n      prevoff = off;\\n      off = progress(self, off);\\n      otherprevoff = otheroff;\\n      otheroff = progress(other, otheroff);\\n      counts -= 1;\\n    }\\n\\n    if (off == 0) {\\n      return -1;\\n    }\\n    if (otheroff == 0) {\\n      return 1;\\n    }\\n\\n    return\\n      self.compare(\\n        prevoff + 1,\\n        self.readUint8(prevoff),\\n        other,\\n        otherprevoff + 1,\\n        other.readUint8(otherprevoff)\\n      );\\n  }\\n\\n  function progress(bytes memory body, uint256 off)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    return off + 1 + body.readUint8(off);\\n  }\\n}\\n\\n// File: contracts/profiles/DNSResolver.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract DNSResolver is ResolverBase {\\n  using RRUtils for *;\\n  using BytesUtils for bytes;\\n\\n  bytes4 private constant DNS_RECORD_INTERFACE_ID = 0xa8fa5682;\\n\\n  // DNSRecordChanged is emitted whenever a given node/name/resource's RRSET is updated.\\n  event DNSRecordChanged(\\n    bytes32 indexed node,\\n    bytes name,\\n    uint16 resource,\\n    bytes record\\n  );\\n  // DNSRecordDeleted is emitted whenever a given node/name/resource's RRSET is deleted.\\n  event DNSRecordDeleted(bytes32 indexed node, bytes name, uint16 resource);\\n  // DNSZoneCleared is emitted whenever a given node's zone information is cleared.\\n  event DNSZoneCleared(bytes32 indexed node);\\n\\n  // Version the mapping for each zone.  This allows users who have lost\\n  // track of their entries to effectively delete an entire zone by bumping\\n  // the version number.\\n  // node => version\\n  mapping(bytes32 => uint256) private versions;\\n\\n  // The records themselves.  Stored as binary RRSETs\\n  // node => version => name => resource => data\\n  mapping(bytes32 => mapping(uint256 => mapping(bytes32 => mapping(uint16 => bytes))))\\n    private records;\\n\\n  // Count of number of entries for a given name.  Required for DNS resolvers\\n  // when resolving wildcards.\\n  // node => version => name => number of records\\n  mapping(bytes32 => mapping(uint256 => mapping(bytes32 => uint16)))\\n    private nameEntriesCount;\\n\\n  /**\\n   * Set one or more DNS records.  Records are supplied in wire-format.\\n   * Records with the same node/name/resource must be supplied one after the\\n   * other to ensure the data is updated correctly. For example, if the data\\n   * was supplied:\\n   *     a.example.com IN A 1.2.3.4\\n   *     a.example.com IN A 5.6.7.8\\n   *     www.example.com IN CNAME a.example.com.\\n   * then this would store the two A records for a.example.com correctly as a\\n   * single RRSET, however if the data was supplied:\\n   *     a.example.com IN A 1.2.3.4\\n   *     www.example.com IN CNAME a.example.com.\\n   *     a.example.com IN A 5.6.7.8\\n   * then this would store the first A record, the CNAME, then the second A\\n   * record which would overwrite the first.\\n   *\\n   * @param node the namehash of the node for which to set the records\\n   * @param data the DNS wire format records to set\\n   */\\n  function setDNSRecords(bytes32 node, bytes calldata data)\\n    external\\n    authorised(node)\\n  {\\n    uint16 resource = 0;\\n    uint256 offset = 0;\\n    bytes memory name;\\n    bytes memory value;\\n    bytes32 nameHash;\\n    // Iterate over the data to add the resource records\\n    for (\\n      RRUtils.RRIterator memory iter = data.iterateRRs(0);\\n      !iter.done();\\n      iter.next()\\n    ) {\\n      if (resource == 0) {\\n        resource = iter.dnstype;\\n        name = iter.name();\\n        nameHash = keccak256(abi.encodePacked(name));\\n        value = bytes(iter.rdata());\\n      } else {\\n        bytes memory newName = iter.name();\\n        if (resource != iter.dnstype || !name.equals(newName)) {\\n          setDNSRRSet(\\n            node,\\n            name,\\n            resource,\\n            data,\\n            offset,\\n            iter.offset - offset,\\n            value.length == 0\\n          );\\n          resource = iter.dnstype;\\n          offset = iter.offset;\\n          name = newName;\\n          nameHash = keccak256(name);\\n          value = bytes(iter.rdata());\\n        }\\n      }\\n    }\\n    if (name.length > 0) {\\n      setDNSRRSet(\\n        node,\\n        name,\\n        resource,\\n        data,\\n        offset,\\n        data.length - offset,\\n        value.length == 0\\n      );\\n    }\\n  }\\n\\n  /**\\n   * Obtain a DNS record.\\n   * @param node the namehash of the node for which to fetch the record\\n   * @param name the keccak-256 hash of the fully-qualified name for which to fetch the record\\n   * @param resource the ID of the resource as per https://en.wikipedia.org/wiki/List_of_DNS_record_types\\n   * @return the DNS record in wire format if present, otherwise empty\\n   */\\n  function dnsRecord(\\n    bytes32 node,\\n    bytes32 name,\\n    uint16 resource\\n  ) public view returns (bytes memory) {\\n    return records[node][versions[node]][name][resource];\\n  }\\n\\n  /**\\n   * Check if a given node has records.\\n   * @param node the namehash of the node for which to check the records\\n   * @param name the namehash of the node for which to check the records\\n   */\\n  function hasDNSRecords(bytes32 node, bytes32 name)\\n    public\\n    view\\n    returns (bool)\\n  {\\n    return (nameEntriesCount[node][versions[node]][name] != 0);\\n  }\\n\\n  /**\\n   * Clear all information for a DNS zone.\\n   * @param node the namehash of the node for which to clear the zone\\n   */\\n  function clearDNSZone(bytes32 node) public authorised(node) {\\n    versions[node]++;\\n    emit DNSZoneCleared(node);\\n  }\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return\\n      interfaceID == DNS_RECORD_INTERFACE_ID ||\\n      super.supportsInterface(interfaceID);\\n  }\\n\\n  function setDNSRRSet(\\n    bytes32 node,\\n    bytes memory name,\\n    uint16 resource,\\n    bytes memory data,\\n    uint256 offset,\\n    uint256 size,\\n    bool deleteRecord\\n  ) private {\\n    uint256 version = versions[node];\\n    bytes32 nameHash = keccak256(name);\\n    bytes memory rrData = data.substring(offset, size);\\n    if (deleteRecord) {\\n      if (records[node][version][nameHash][resource].length != 0) {\\n        nameEntriesCount[node][version][nameHash]--;\\n      }\\n      delete (records[node][version][nameHash][resource]);\\n      emit DNSRecordDeleted(node, name, resource);\\n    } else {\\n      if (records[node][version][nameHash][resource].length == 0) {\\n        nameEntriesCount[node][version][nameHash]++;\\n      }\\n      records[node][version][nameHash][resource] = rrData;\\n      emit DNSRecordChanged(node, name, resource, rrData);\\n    }\\n  }\\n}\\n\\n// File: contracts/profiles/InterfaceResolver.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract InterfaceResolver is ResolverBase, AddrResolver {\\n  bytes4 private constant INTERFACE_INTERFACE_ID =\\n    bytes4(keccak256('interfaceImplementer(bytes32,bytes4)'));\\n  bytes4 private constant INTERFACE_META_ID = 0x01ffc9a7;\\n\\n  event InterfaceChanged(\\n    bytes32 indexed node,\\n    bytes4 indexed interfaceID,\\n    address implementer\\n  );\\n\\n  mapping(bytes32 => mapping(bytes4 => address)) interfaces;\\n\\n  /**\\n   * Sets an interface associated with a name.\\n   * Setting the address to 0 restores the default behaviour of querying the contract at `addr()` for interface support.\\n   * @param node The node to update.\\n   * @param interfaceID The EIP 168 interface ID.\\n   * @param implementer The address of a contract that implements this interface for this node.\\n   */\\n  function setInterface(\\n    bytes32 node,\\n    bytes4 interfaceID,\\n    address implementer\\n  ) external authorised(node) {\\n    interfaces[node][interfaceID] = implementer;\\n    emit InterfaceChanged(node, interfaceID, implementer);\\n  }\\n\\n  /**\\n   * Returns the address of a contract that implements the specified interface for this name.\\n   * If an implementer has not been set for this interfaceID and name, the resolver will query\\n   * the contract at `addr()`. If `addr()` is set, a contract exists at that address, and that\\n   * contract implements EIP168 and returns `true` for the specified interfaceID, its address\\n   * will be returned.\\n   * @param node The ENS node to query.\\n   * @param interfaceID The EIP 168 interface ID to check for.\\n   * @return The address that implements this interface, or 0 if the interface is unsupported.\\n   */\\n  function interfaceImplementer(bytes32 node, bytes4 interfaceID)\\n    external\\n    view\\n    returns (address)\\n  {\\n    address implementer = interfaces[node][interfaceID];\\n    if (implementer != address(0)) {\\n      return implementer;\\n    }\\n\\n    address a = addr(node);\\n    if (a == address(0)) {\\n      return address(0);\\n    }\\n\\n    (bool success, bytes memory returnData) = a.staticcall(\\n      abi.encodeWithSignature('supportsInterface(bytes4)', INTERFACE_META_ID)\\n    );\\n    if (!success || returnData.length < 32 || returnData[31] == 0) {\\n      // EIP 168 not supported by target\\n      return address(0);\\n    }\\n\\n    (success, returnData) = a.staticcall(\\n      abi.encodeWithSignature('supportsInterface(bytes4)', interfaceID)\\n    );\\n    if (!success || returnData.length < 32 || returnData[31] == 0) {\\n      // Specified interface not supported by target\\n      return address(0);\\n    }\\n\\n    return a;\\n  }\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return\\n      interfaceID == INTERFACE_INTERFACE_ID ||\\n      super.supportsInterface(interfaceID);\\n  }\\n}\\n\\n// File: contracts/profiles/NameResolver.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract NameResolver is ResolverBase {\\n  bytes4 private constant NAME_INTERFACE_ID = 0x691f3431;\\n\\n  event NameChanged(bytes32 indexed node, string name);\\n\\n  mapping(bytes32 => string) names;\\n\\n  /**\\n   * Sets the name associated with an ENS node, for reverse records.\\n   * May only be called by the owner of that node in the ENS registry.\\n   * @param node The node to update.\\n   * @param name The name to set.\\n   */\\n  function setName(bytes32 node, string calldata name)\\n    external\\n    authorised(node)\\n  {\\n    names[node] = name;\\n    emit NameChanged(node, name);\\n  }\\n\\n  /**\\n   * Returns the name associated with an ENS node, for reverse records.\\n   * Defined in EIP181.\\n   * @param node The ENS node to query.\\n   * @return The associated name.\\n   */\\n  function name(bytes32 node) external view returns (string memory) {\\n    return names[node];\\n  }\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return\\n      interfaceID == NAME_INTERFACE_ID || super.supportsInterface(interfaceID);\\n  }\\n}\\n\\n// File: contracts/profiles/PubkeyResolver.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract PubkeyResolver is ResolverBase {\\n  bytes4 private constant PUBKEY_INTERFACE_ID = 0xc8690233;\\n\\n  event PubkeyChanged(bytes32 indexed node, bytes32 x, bytes32 y);\\n\\n  struct PublicKey {\\n    bytes32 x;\\n    bytes32 y;\\n  }\\n\\n  mapping(bytes32 => PublicKey) pubkeys;\\n\\n  /**\\n   * Sets the SECP256k1 public key associated with an ENS node.\\n   * @param node The ENS node to query\\n   * @param x the X coordinate of the curve point for the public key.\\n   * @param y the Y coordinate of the curve point for the public key.\\n   */\\n  function setPubkey(\\n    bytes32 node,\\n    bytes32 x,\\n    bytes32 y\\n  ) external authorised(node) {\\n    pubkeys[node] = PublicKey(x, y);\\n    emit PubkeyChanged(node, x, y);\\n  }\\n\\n  /**\\n   * Returns the SECP256k1 public key associated with an ENS node.\\n   * Defined in EIP 619.\\n   * @param node The ENS node to query\\n   * @return x, y the X and Y coordinates of the curve point for the public key.\\n   */\\n  function pubkey(bytes32 node) external view returns (bytes32 x, bytes32 y) {\\n    return (pubkeys[node].x, pubkeys[node].y);\\n  }\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return\\n      interfaceID == PUBKEY_INTERFACE_ID ||\\n      super.supportsInterface(interfaceID);\\n  }\\n}\\n\\n// File: contracts/profiles/TextResolver.sol\\n\\npragma solidity ^0.5.0;\\n\\ncontract TextResolver is ResolverBase {\\n  bytes4 private constant TEXT_INTERFACE_ID = 0x59d1d43c;\\n\\n  event TextChanged(\\n    bytes32 indexed node,\\n    string indexed indexedKey,\\n    string key\\n  );\\n\\n  mapping(bytes32 => mapping(string => string)) texts;\\n\\n  /**\\n   * Sets the text data associated with an ENS node and key.\\n   * May only be called by the owner of that node in the ENS registry.\\n   * @param node The node to update.\\n   * @param key The key to set.\\n   * @param value The text data value to set.\\n   */\\n  function setText(\\n    bytes32 node,\\n    string calldata key,\\n    string calldata value\\n  ) external authorised(node) {\\n    texts[node][key] = value;\\n    emit TextChanged(node, key, key);\\n  }\\n\\n  /**\\n   * Returns the text data associated with an ENS node and key.\\n   * @param node The ENS node to query.\\n   * @param key The text data key to query.\\n   * @return The associated text data.\\n   */\\n  function text(bytes32 node, string calldata key)\\n    external\\n    view\\n    returns (string memory)\\n  {\\n    return texts[node][key];\\n  }\\n\\n  function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n    return\\n      interfaceID == TEXT_INTERFACE_ID || super.supportsInterface(interfaceID);\\n  }\\n}\\n\\n// File: contracts/PublicResolver.sol\\n\\npragma solidity ^0.5.0;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * A simple resolver anyone can use; only allows the owner of a node to set its\\n * address.\\n */\\ncontract PublicResolver_mainnet_9412610 is\\n  ABIResolver,\\n  AddrResolver,\\n  ContentHashResolver,\\n  DNSResolver,\\n  InterfaceResolver,\\n  NameResolver,\\n  PubkeyResolver,\\n  TextResolver\\n{\\n  ENS ens;\\n\\n  /**\\n   * A mapping of authorisations. An address that is authorised for a name\\n   * may make any changes to the name that the owner could, but may not update\\n   * the set of authorisations.\\n   * (node, owner, caller) => isAuthorised\\n   */\\n  mapping(bytes32 => mapping(address => mapping(address => bool)))\\n    public authorisations;\\n\\n  event AuthorisationChanged(\\n    bytes32 indexed node,\\n    address indexed owner,\\n    address indexed target,\\n    bool isAuthorised\\n  );\\n\\n  constructor(ENS _ens) public {\\n    ens = _ens;\\n  }\\n\\n  /**\\n   * @dev Sets or clears an authorisation.\\n   * Authorisations are specific to the caller. Any account can set an authorisation\\n   * for any name, but the authorisation that is checked will be that of the\\n   * current owner of a name. Thus, transferring a name effectively clears any\\n   * existing authorisations, and new authorisations can be set in advance of\\n   * an ownership transfer if desired.\\n   *\\n   * @param node The name to change the authorisation on.\\n   * @param target The address that is to be authorised or deauthorised.\\n   * @param isAuthorised True if the address should be authorised, or false if it should be deauthorised.\\n   */\\n  function setAuthorisation(\\n    bytes32 node,\\n    address target,\\n    bool isAuthorised\\n  ) external {\\n    authorisations[node][msg.sender][target] = isAuthorised;\\n    emit AuthorisationChanged(node, msg.sender, target, isAuthorised);\\n  }\\n\\n  function isAuthorised(bytes32 node) internal view returns (bool) {\\n    address owner = ens.owner(node);\\n    return owner == msg.sender || authorisations[node][owner][msg.sender];\\n  }\\n\\n  function multicall(bytes[] calldata data)\\n    external\\n    returns (bytes[] memory results)\\n  {\\n    results = new bytes[](data.length);\\n    for (uint256 i = 0; i < data.length; i++) {\\n      (bool success, bytes memory result) = address(this).delegatecall(data[i]);\\n      require(success);\\n      results[i] = result;\\n    }\\n    return results;\\n  }\\n}\\n\",\"keccak256\":\"0x29ca7d322ab7177f187f9bfc310e6dfc94049e9beaaafe958bead081fd90ad76\"}},\"version\":1}",
          "storageLayout": {
            "storage": [
              {
                "astId": 3103,
                "contract": "contracts/legacy/PublicResolver_mainnet_9412610.sol:TextResolver",
                "label": "texts",
                "offset": 0,
                "slot": "0",
                "type": "t_mapping(t_bytes32,t_mapping(t_string_memory,t_string_storage))"
              }
            ],
            "types": {
              "t_bytes32": {
                "encoding": "inplace",
                "label": "bytes32",
                "numberOfBytes": "32"
              },
              "t_mapping(t_bytes32,t_mapping(t_string_memory,t_string_storage))": {
                "encoding": "mapping",
                "key": "t_bytes32",
                "label": "mapping(bytes32 => mapping(string => string))",
                "numberOfBytes": "32",
                "value": "t_mapping(t_string_memory,t_string_storage)"
              },
              "t_mapping(t_string_memory,t_string_storage)": {
                "encoding": "mapping",
                "key": "t_string_memory",
                "label": "mapping(string => string)",
                "numberOfBytes": "32",
                "value": "t_string_storage"
              },
              "t_string_memory": {
                "encoding": "bytes",
                "label": "string",
                "numberOfBytes": "32"
              },
              "t_string_storage": {
                "encoding": "bytes",
                "label": "string",
                "numberOfBytes": "32"
              }
            }
          },
          "userdoc": {
            "methods": {
              "setText(bytes32,string,string)": {
                "notice": "Sets the text data associated with an ENS node and key. May only be called by the owner of that node in the ENS registry."
              },
              "text(bytes32,string)": {
                "notice": "Returns the text data associated with an ENS node and key."
              }
            }
          }
        }
      }
    },
    "errors": [
      {
        "component": "general",
        "formattedMessage": "contracts/legacy/PublicResolver_mainnet_9412610.sol:1656:1: Warning: Experimental features are turned on. Do not use experimental features on live deployments.\npragma experimental ABIEncoderV2;\n^-------------------------------^\n",
        "message": "Experimental features are turned on. Do not use experimental features on live deployments.",
        "severity": "warning",
        "sourceLocation": {
          "end": 46633,
          "file": "contracts/legacy/PublicResolver_mainnet_9412610.sol",
          "start": 46600
        },
        "type": "Warning"
      }
    ],
    "sources": {
      "contracts/legacy/PublicResolver_mainnet_9412610.sol": {
        "ast": {
          "absolutePath": "contracts/legacy/PublicResolver_mainnet_9412610.sol",
          "exportedSymbols": {
            "ABIResolver": [
              281
            ],
            "AddrResolver": [
              438
            ],
            "Buffer": [
              1696
            ],
            "BytesUtils": [
              1226
            ],
            "ContentHashResolver": [
              506
            ],
            "DNSResolver": [
              2742
            ],
            "ENS": [
              79
            ],
            "InterfaceResolver": [
              2926
            ],
            "NameResolver": [
              2994
            ],
            "PubkeyResolver": [
              3083
            ],
            "PublicResolver_mainnet_9412610": [
              3328
            ],
            "RRUtils": [
              2314
            ],
            "ResolverBase": [
              147
            ],
            "TextResolver": [
              3164
            ]
          },
          "id": 3329,
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 1,
              "literals": [
                "solidity",
                ">=",
                "0.4",
                ".24"
              ],
              "nodeType": "PragmaDirective",
              "src": "112:25:0"
            },
            {
              "baseContracts": [],
              "contractDependencies": [],
              "contractKind": "interface",
              "documentation": null,
              "fullyImplemented": false,
              "id": 79,
              "linearizedBaseContracts": [
                79
              ],
              "name": "ENS",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "anonymous": false,
                  "documentation": null,
                  "id": 9,
                  "name": "NewOwner",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 8,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3,
                        "indexed": true,
                        "name": "node",
                        "nodeType": "VariableDeclaration",
                        "scope": 9,
                        "src": "243:20:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 2,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "243:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 5,
                        "indexed": true,
                        "name": "label",
                        "nodeType": "VariableDeclaration",
                        "scope": 9,
                        "src": "265:21:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 4,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "265:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 7,
                        "indexed": false,
                        "name": "owner",
                        "nodeType": "VariableDeclaration",
                        "scope": 9,
                        "src": "288:13:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 6,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "288:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "242:60:0"
                  },
                  "src": "228:75:0"
                },
                {
                  "anonymous": false,
                  "documentation": null,
                  "id": 15,
                  "name": "Transfer",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 14,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 11,
                        "indexed": true,
                        "name": "node",
                        "nodeType": "VariableDeclaration",
                        "scope": 15,
                        "src": "397:20:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 10,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "397:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 13,
                        "indexed": false,
                        "name": "owner",
                        "nodeType": "VariableDeclaration",
                        "scope": 15,
                        "src": "419:13:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 12,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "419:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "396:37:0"
                  },
                  "src": "382:52:0"
                },
                {
                  "anonymous": false,
                  "documentation": null,
                  "id": 21,
                  "name": "NewResolver",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 20,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 17,
                        "indexed": true,
                        "name": "node",
                        "nodeType": "VariableDeclaration",
                        "scope": 21,
                        "src": "506:20:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 16,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "506:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 19,
                        "indexed": false,
                        "name": "resolver",
                        "nodeType": "VariableDeclaration",
                        "scope": 21,
                        "src": "528:16:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 18,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "528:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "505:40:0"
                  },
                  "src": "488:58:0"
                },
                {
                  "anonymous": false,
                  "documentation": null,
                  "id": 27,
                  "name": "NewTTL",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 26,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 23,
                        "indexed": true,
                        "name": "node",
                        "nodeType": "VariableDeclaration",
                        "scope": 27,
                        "src": "606:20:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 22,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "606:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 25,
                        "indexed": false,
                        "name": "ttl",
                        "nodeType": "VariableDeclaration",
                        "scope": 27,
                        "src": "628:10:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        },
                        "typeName": {
                          "id": 24,
                          "name": "uint64",
                          "nodeType": "ElementaryTypeName",
                          "src": "628:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "605:34:0"
                  },
                  "src": "593:47:0"
                },
                {
                  "body": null,
                  "documentation": null,
                  "id": 36,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "setSubnodeOwner",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 34,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 29,
                        "name": "node",
                        "nodeType": "VariableDeclaration",
                        "scope": 36,
                        "src": "674:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 28,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "674:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 31,
                        "name": "label",
                        "nodeType": "VariableDeclaration",
                        "scope": 36,
                        "src": "692:13:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 30,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "692:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 33,
                        "name": "owner",
                        "nodeType": "VariableDeclaration",
                        "scope": 36,
                        "src": "711:13:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 32,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "711:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "668:60:0"
                  },
                  "returnParameters": {
                    "id": 35,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "737:0:0"
                  },
                  "scope": 79,
                  "src": "644:94:0",
                  "stateMutability": "nonpayable",
                  "superFunction": null,
                  "visibility": "external"
                },
                {
                  "body": null,
                  "documentation": null,
                  "id": 43,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "setResolver",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 41,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 38,
                        "name": "node",
                        "nodeType": "VariableDeclaration",
                        "scope": 43,
                        "src": "763:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 37,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "763:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 40,
                        "name": "resolver",
                        "nodeType": "VariableDeclaration",
                        "scope": 43,
                        "src": "777:16:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 39,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "777:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "762:32:0"
                  },
                  "returnParameters": {
                    "id": 42,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "803:0:0"
                  },
                  "scope": 79,
                  "src": "742:62:0",
                  "stateMutability": "nonpayable",
                  "superFunction": null,
                  "visibility": "external"
                },
                {
                  "body": null,
                  "documentation": null,
                  "id": 50,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "setOwner",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 48,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 45,
                        "name": "node",
                        "nodeType": "VariableDeclaration",
                        "scope": 50,
                        "src": "826:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 44,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "826:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 47,
                        "name": "owner",
                        "nodeType": "VariableDeclaration",
                        "scope": 50,
                        "src": "840:13:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 46,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "840:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "825:29:0"
                  },
                  "returnParameters": {
                    "id": 49,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "863:0:0"
                  },
                  "scope": 79,
                  "src": "808:56:0",
                  "stateMutability": "nonpayable",
                  "superFunction": null,
                  "visibility": "external"
                },
                {
                  "body": null,
                  "documentation": null,
                  "id": 57,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "setTTL",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 55,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 52,
                        "name": "node",
                        "nodeType": "VariableDeclaration",
                        "scope": 57,
                        "src": "884:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 51,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "884:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 54,
                        "name": "ttl",
                        "nodeType": "VariableDeclaration",
                        "scope": 57,
                        "src": "898:10:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        },
                        "typeName": {
                          "id": 53,
                          "name": "uint64",
                          "nodeType": "ElementaryTypeName",
                          "src": "898:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "883:26:0"
                  },
                  "returnParameters": {
                    "id": 56,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "918:0:0"
                  },
                  "scope": 79,
                  "src": "868:51:0",
                  "stateMutability": "nonpayable",
                  "superFunction": null,
                  "visibility": "external"
                },
                {
                  "body": null,
                  "documentation": null,
                  "id": 64,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "owner",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 60,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 59,
                        "name": "node",
                        "nodeType": "VariableDeclaration",
                        "scope": 64,
                        "src": "938:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 58,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "938:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "937:14:0"
                  },
                  "returnParameters": {
                    "id": 63,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 62,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 64,
                        "src": "975:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 61,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "975:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "974:9:0"
                  },
                  "scope": 79,
                  "src": "923:61:0",
                  "stateMutability": "view",
                  "superFunction": null,
                  "visibility": "external"
                },
                {
                  "body": null,
                  "documentation": null,
                  "id": 71,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "resolver",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 67,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 66,
                        "name": "node",
                        "nodeType": "VariableDeclaration",
                        "scope": 71,
                        "src": "1006:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 65,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "1006:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "1005:14:0"
                  },
                  "returnParameters": {
                    "id": 70,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 69,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 71,
                        "src": "1043:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 68,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1043:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "1042:9:0"
                  },
                  "scope": 79,
                  "src": "988:64:0",
                  "stateMutability": "view",
                  "superFunction": null,
                  "visibility": "external"
                },
                {
                  "body": null,
                  "documentation": null,
                  "id": 78,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "ttl",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 74,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 73,
                        "name": "node",
                        "nodeType": "VariableDeclaration",
                        "scope": 78,
                        "src": "1069:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 72,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "1069:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "1068:14:0"
                  },
                  "returnParameters": {
                    "id": 77,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 76,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 78,
                        "src": "1106:6:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        },
                        "typeName": {
                          "id": 75,
                          "name": "uint64",
                          "nodeType": "ElementaryTypeName",
                          "src": "1106:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "1105:8:0"
                  },
                  "scope": 79,
                  "src": "1056:58:0",
                  "stateMutability": "view",
                  "superFunction": null,
                  "visibility": "external"
                }
              ],
              "scope": 3329,
              "src": "139:977:0"
            },
            {
              "id": 80,
              "literals": [
                "solidity",
                "^",
                "0.5",
                ".0"
              ],
              "nodeType": "PragmaDirective",
              "src": "1155:23:0"
            },
            {
              "baseContracts": [],
              "contractDependencies": [],
              "contractKind": "contract",
              "documentation": null,
              "fullyImplemented": false,
              "id": 147,
              "linearizedBaseContracts": [
                147
              ],
              "name": "ResolverBase",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "constant": true,
                  "id": 83,
                  "name": "INTERFACE_META_ID",
                  "nodeType": "VariableDeclaration",
                  "scope": 147,
                  "src": "1206:54:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes4",
                    "typeString": "bytes4"
                  },
                  "typeName": {
                    "id": 81,
                    "name": "bytes4",
                    "nodeType": "ElementaryTypeName",
                    "src": "1206:6:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes4",
                      "typeString": "bytes4"
                    }
                  },
                  "value": {
                    "argumentTypes": null,
                    "hexValue": "30783031666663396137",
                    "id": 82,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "1250:10:0",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_33540519_by_1",
                      "typeString": "int_const 33540519"
                    },
                    "value": "0x01ffc9a7"
                  },
                  "visibility": "private"
                },
                {
                  "body": {
                    "id": 94,
                    "nodeType": "Block",
                    "src": "1339:50:0",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          },
                          "id": 92,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "id": 90,
                            "name": "interfaceID",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 85,
                            "src": "1352:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes4",
                              "typeString": "bytes4"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "argumentTypes": null,
                            "id": 91,
                            "name": "INTERFACE_META_ID",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 83,
                            "src": "1367:17:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes4",
                              "typeString": "bytes4"
                            }
                          },
                          "src": "1352:32:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "functionReturnParameters": 89,
                        "id": 93,
                        "nodeType": "Return",
                        "src": "1345:39:0"
                      }
                    ]
                  },
                  "documentation": null,
                  "id": 95,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "supportsInterface",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 86,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 85,
                        "name": "interfaceID",
                        "nodeType": "VariableDeclaration",
                        "scope": 95,
                        "src": "1292:18:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        },
                        "typeName": {
                          "id": 84,
                          "name": "bytes4",
                          "nodeType": "ElementaryTypeName",
                          "src": "1292:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "1291:20:0"
                  },
                  "returnParameters": {
                    "id": 89,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 88,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 95,
                        "src": "1333:4:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 87,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "1333:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "1332:6:0"
                  },
                  "scope": 147,
                  "src": "1265:124:0",
                  "stateMutability": "pure",
                  "superFunction": null,
                  "visibility": "public"
                },
                {
                  "body": null,
                  "documentation": null,
                  "id": 102,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "isAuthorised",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 98,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 97,
                        "name": "node",
                        "nodeType": "VariableDeclaration",
                        "scope": 102,
                        "src": "1415:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 96,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "1415:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "1414:14:0"
                  },
                  "returnParameters": {
                    "id": 101,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 100,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 102,
                        "src": "1452:4:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 99,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "1452:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "1451:6:0"
                  },
                  "scope": 147,
                  "src": "1393:65:0",
                  "stateMutability": "view",
                  "superFunction": null,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 113,
                    "nodeType": "Block",
                    "src": "1496:45:0",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "id": 108,
                                  "name": "node",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 104,
                                  "src": "1523:4:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes32",
                                    "typeString": "bytes32"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_bytes32",
                                    "typeString": "bytes32"
                                  }
                                ],
                                "id": 107,
                                "name": "isAuthorised",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 102,
                                "src": "1510:12:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_view$_t_bytes32_$returns$_t_bool_$",
                                  "typeString": "function (bytes32) view returns (bool)"
                                }
                              },
                              "id": 109,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "1510:18:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            ],
                            "id": 106,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              3346,
                              3347
                            ],
                            "referencedDeclaration": 3346,
                            "src": "1502:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                              "typeString": "function (bool) pure"
                            }
                          },
                          "id": 110,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1502:27:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 111,
                        "nodeType": "ExpressionStatement",
                        "src": "1502:27:0"
                      },
                      {
                        "id": 112,
                        "nodeType": "PlaceholderStatement",
                        "src": "1535:1:0"
                      }
                    ]
                  },
                  "documentation": null,
                  "id": 114,
                  "name": "authorised",
                  "nodeType": "ModifierDefinition",
                  "parameters": {
                    "id": 105,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 104,
                        "name": "node",
                        "nodeType": "VariableDeclaration",
                        "scope": 114,
                        "src": "1482:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 103,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "1482:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "1481:14:0"
                  },
                  "src": "1462:79:0",
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 129,
                    "nodeType": "Block",
                    "src": "1641:103:0",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 125,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 122,
                                  "name": "b",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 116,
                                  "src": "1655:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes_memory_ptr",
                                    "typeString": "bytes memory"
                                  }
                                },
                                "id": 123,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "length",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": null,
                                "src": "1655:8:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "argumentTypes": null,
                                "hexValue": "3230",
                                "id": 124,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "1667:2:0",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_20_by_1",
                                  "typeString": "int_const 20"
                                },
                                "value": "20"
                              },
                              "src": "1655:14:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            ],
                            "id": 121,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              3346,
                              3347
                            ],
                            "referencedDeclaration": 3346,
                            "src": "1647:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                              "typeString": "function (bool) pure"
                            }
                          },
                          "id": 126,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1647:23:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 127,
                        "nodeType": "ExpressionStatement",
                        "src": "1647:23:0"
                      },
                      {
                        "externalReferences": [
                          {
                            "b": {
                              "declaration": 116,
                              "isOffset": false,
                              "isSlot": false,
                              "src": "1712:1:0",
                              "valueSize": 1
                            }
                          },
                          {
                            "a": {
                              "declaration": 119,
                              "isOffset": false,
                              "isSlot": false,
                              "src": "1693:1:0",
                              "valueSize": 1
                            }
                          }
                        ],
                        "id": 128,
                        "nodeType": "InlineAssembly",
                        "operations": "{\n    a := div(mload(add(b, 32)), exp(256, 12))\n}",
                        "src": "1676:64:0"
                      }
                    ]
                  },
                  "documentation": null,
                  "id": 130,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "bytesToAddress",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 117,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 116,
                        "name": "b",
                        "nodeType": "VariableDeclaration",
                        "scope": 130,
                        "src": "1569:14:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 115,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "1569:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "1568:16:0"
                  },
                  "returnParameters": {
                    "id": 120,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 119,
                        "name": "a",
                        "nodeType": "VariableDeclaration",
                        "scope": 130,
                        "src": "1620:17:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        },
                        "typeName": {
                          "id": 118,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1620:15:0",
                          "stateMutability": "payable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "1619:19:0"
                  },
                  "scope": 147,
                  "src": "1545:199:0",
                  "stateMutability": "pure",
                  "superFunction": null,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 145,
                    "nodeType": "Block",
                    "src": "1822:96:0",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 142,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "id": 137,
                            "name": "b",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 135,
                            "src": "1828:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "hexValue": "3230",
                                "id": 140,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "1842:2:0",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_20_by_1",
                                  "typeString": "int_const 20"
                                },
                                "value": "20"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_20_by_1",
                                  "typeString": "int_const 20"
                                }
                              ],
                              "id": 139,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "NewExpression",
                              "src": "1832:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_$",
                                "typeString": "function (uint256) pure returns (bytes memory)"
                              },
                              "typeName": {
                                "id": 138,
                                "name": "bytes",
                                "nodeType": "ElementaryTypeName",
                                "src": "1836:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_storage_ptr",
                                  "typeString": "bytes"
                                }
                              }
                            },
                            "id": 141,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "1832:13:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory",
                              "typeString": "bytes memory"
                            }
                          },
                          "src": "1828:17:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes memory"
                          }
                        },
                        "id": 143,
                        "nodeType": "ExpressionStatement",
                        "src": "1828:17:0"
                      },
                      {
                        "externalReferences": [
                          {
                            "b": {
                              "declaration": 135,
                              "isOffset": false,
                              "isSlot": false,
                              "src": "1879:1:0",
                              "valueSize": 1
                            }
                          },
                          {
                            "a": {
                              "declaration": 132,
                              "isOffset": false,
                              "isSlot": false,
                              "src": "1891:1:0",
                              "valueSize": 1
                            }
                          }
                        ],
                        "id": 144,
                        "nodeType": "InlineAssembly",
                        "operations": "{\n    mstore(add(b, 32), mul(a, exp(256, 12)))\n}",
                        "src": "1851:63:0"
                      }
                    ]
                  },
                  "documentation": null,
                  "id": 146,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "addressToBytes",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 133,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 132,
                        "name": "a",
                        "nodeType": "VariableDeclaration",
                        "scope": 146,
                        "src": "1772:9:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 131,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1772:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "1771:11:0"
                  },
                  "returnParameters": {
                    "id": 136,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 135,
                        "name": "b",
                        "nodeType": "VariableDeclaration",
                        "scope": 146,
                        "src": "1806:14:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 134,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "1806:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "1805:16:0"
                  },
                  "scope": 147,
                  "src": "1748:170:0",
                  "stateMutability": "pure",
                  "superFunction": null,
                  "visibility": "internal"
                }
              ],
              "scope": 3329,
              "src": "1180:740:0"
            },
            {
              "id": 148,
              "literals": [
                "solidity",
                "^",
                "0.5",
                ".0"
              ],
              "nodeType": "PragmaDirective",
              "src": "1967:23:0"
            },
            {
              "baseContracts": [
                {
                  "arguments": null,
                  "baseName": {
                    "contractScope": null,
                    "id": 149,
                    "name": "ResolverBase",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 147,
                    "src": "2016:12:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_ResolverBase_$147",
                      "typeString": "contract ResolverBase"
                    }
                  },
                  "id": 150,
                  "nodeType": "InheritanceSpecifier",
                  "src": "2016:12:0"
                }
              ],
              "contractDependencies": [
                147
              ],
              "contractKind": "contract",
              "documentation": null,
              "fullyImplemented": false,
              "id": 281,
              "linearizedBaseContracts": [
                281,
                147
              ],
              "name": "ABIResolver",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "constant": true,
                  "id": 153,
                  "name": "ABI_INTERFACE_ID",
                  "nodeType": "VariableDeclaration",
                  "scope": 281,
                  "src": "2033:53:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes4",
                    "typeString": "bytes4"
                  },
                  "typeName": {
                    "id": 151,
                    "name": "bytes4",
                    "nodeType": "ElementaryTypeName",
                    "src": "2033:6:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes4",
                      "typeString": "bytes4"
                    }
                  },
                  "value": {
                    "argumentTypes": null,
                    "hexValue": "30783232303361623536",
                    "id": 152,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "2076:10:0",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_570665814_by_1",
                      "typeString": "int_const 570665814"
                    },
                    "value": "0x2203ab56"
                  },
                  "visibility": "private"
                },
                {
                  "anonymous": false,
                  "documentation": null,
                  "id": 159,
                  "name": "ABIChanged",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 158,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 155,
                        "indexed": true,
                        "name": "node",
                        "nodeType": "VariableDeclaration",
                        "scope": 159,
                        "src": "2108:20:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 154,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "2108:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 157,
                        "indexed": true,
                        "name": "contentType",
                        "nodeType": "VariableDeclaration",
                        "scope": 159,
                        "src": "2130:27:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 156,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2130:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "2107:51:0"
                  },
                  "src": "2091:68:0"
                },
                {
                  "constant": false,
                  "id": 165,
                  "name": "abis",
                  "nodeType": "VariableDeclaration",
                  "scope": 281,
                  "src": "2163:50:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_bytes32_$_t_mapping$_t_uint256_$_t_bytes_storage_$_$",
                    "typeString": "mapping(bytes32 => mapping(uint256 => bytes))"
                  },
                  "typeName": {
                    "id": 164,
                    "keyType": {
                      "id": 160,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "2171:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "nodeType": "Mapping",
                    "src": "2163:45:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_bytes32_$_t_mapping$_t_uint256_$_t_bytes_storage_$_$",
                      "typeString": "mapping(bytes32 => mapping(uint256 => bytes))"
                    },
                    "valueType": {
                      "id": 163,
                      "keyType": {
                        "id": 161,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "2190:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "Mapping",
                      "src": "2182:25:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_uint256_$_t_bytes_storage_$",
                        "typeString": "mapping(uint256 => bytes)"
                      },
                      "valueType": {
                        "id": 162,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "2201:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      }
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 202,
                    "nodeType": "Block",
                    "src": "2612:176:0",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 186,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "components": [
                                  {
                                    "argumentTypes": null,
                                    "commonType": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    "id": 183,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "argumentTypes": null,
                                      "components": [
                                        {
                                          "argumentTypes": null,
                                          "commonType": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          },
                                          "id": 180,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "leftExpression": {
                                            "argumentTypes": null,
                                            "id": 178,
                                            "name": "contentType",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 169,
                                            "src": "2669:11:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          },
                                          "nodeType": "BinaryOperation",
                                          "operator": "-",
                                          "rightExpression": {
                                            "argumentTypes": null,
                                            "hexValue": "31",
                                            "id": 179,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": true,
                                            "kind": "number",
                                            "lValueRequested": false,
                                            "nodeType": "Literal",
                                            "src": "2683:1:0",
                                            "subdenomination": null,
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_rational_1_by_1",
                                              "typeString": "int_const 1"
                                            },
                                            "value": "1"
                                          },
                                          "src": "2669:15:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        }
                                      ],
                                      "id": 181,
                                      "isConstant": false,
                                      "isInlineArray": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "nodeType": "TupleExpression",
                                      "src": "2668:17:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "&",
                                    "rightExpression": {
                                      "argumentTypes": null,
                                      "id": 182,
                                      "name": "contentType",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 169,
                                      "src": "2688:11:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "src": "2668:31:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "id": 184,
                                "isConstant": false,
                                "isInlineArray": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "TupleExpression",
                                "src": "2667:33:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "argumentTypes": null,
                                "hexValue": "30",
                                "id": 185,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "2704:1:0",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              },
                              "src": "2667:38:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            ],
                            "id": 177,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              3346,
                              3347
                            ],
                            "referencedDeclaration": 3346,
                            "src": "2659:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                              "typeString": "function (bool) pure"
                            }
                          },
                          "id": 187,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2659:47:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 188,
                        "nodeType": "ExpressionStatement",
                        "src": "2659:47:0"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 195,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "id": 189,
                                "name": "abis",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 165,
                                "src": "2713:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_bytes32_$_t_mapping$_t_uint256_$_t_bytes_storage_$_$",
                                  "typeString": "mapping(bytes32 => mapping(uint256 => bytes storage ref))"
                                }
                              },
                              "id": 192,
                              "indexExpression": {
                                "argumentTypes": null,
                                "id": 190,
                                "name": "node",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 167,
                                "src": "2718:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes32",
                                  "typeString": "bytes32"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "2713:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_uint256_$_t_bytes_storage_$",
                                "typeString": "mapping(uint256 => bytes storage ref)"
                              }
                            },
                            "id": 193,
                            "indexExpression": {
                              "argumentTypes": null,
                              "id": 191,
                              "name": "contentType",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 169,
                              "src": "2724:11:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "2713:23:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_storage",
                              "typeString": "bytes storage ref"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "id": 194,
                            "name": "data",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 171,
                            "src": "2739:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_calldata_ptr",
                              "typeString": "bytes calldata"
                            }
                          },
                          "src": "2713:30:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage",
                            "typeString": "bytes storage ref"
                          }
                        },
                        "id": 196,
                        "nodeType": "ExpressionStatement",
                        "src": "2713:30:0"
                      },
                      {
                        "eventCall": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 198,
                              "name": "node",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 167,
                              "src": "2765:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "id": 199,
                              "name": "contentType",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 169,
                              "src": "2771:11:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 197,
                            "name": "ABIChanged",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 159,
                            "src": "2754:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_bytes32_$_t_uint256_$returns$__$",
                              "typeString": "function (bytes32,uint256)"
                            }
                          },
                          "id": 200,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2754:29:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 201,
                        "nodeType": "EmitStatement",
                        "src": "2749:34:0"
                      }
                    ]
                  },
                  "documentation": "Sets the ABI associated with an ENS node.\nNodes may have one ABI of each content type. To remove an ABI, set it to\nthe empty string.\n@param node The node to update.\n@param contentType The content type of the ABI\n@param data The ABI data.",
                  "id": 203,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "id": 174,
                          "name": "node",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 167,
                          "src": "2606:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        }
                      ],
                      "id": 175,
                      "modifierName": {
                        "argumentTypes": null,
                        "id": 173,
                        "name": "authorised",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 114,
                        "src": "2595:10:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_modifier$_t_bytes32_$",
                          "typeString": "modifier (bytes32)"
                        }
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "2595:16:0"
                    }
                  ],
                  "name": "setABI",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 172,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 167,
                        "name": "node",
                        "nodeType": "VariableDeclaration",
                        "scope": 203,
                        "src": "2519:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 166,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "2519:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 169,
                        "name": "contentType",
                        "nodeType": "VariableDeclaration",
                        "scope": 203,
                        "src": "2537:19:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 168,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2537:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 171,
                        "name": "data",
                        "nodeType": "VariableDeclaration",
                        "scope": 203,
                        "src": "2562:19:0",
                        "stateVariable": false,
                        "storageLocation": "calldata",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 170,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "2562:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "2513:72:0"
                  },
                  "returnParameters": {
                    "id": 176,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "2612:0:0"
                  },
                  "scope": 281,
                  "src": "2498:290:0",
                  "stateMutability": "nonpayable",
                  "superFunction": null,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 262,
                    "nodeType": "Block",
                    "src": "3200:347:0",
                    "statements": [
                      {
                        "assignments": [
                          217
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 217,
                            "name": "abiset",
                            "nodeType": "VariableDeclaration",
                            "scope": 262,
                            "src": "3206:40:0",
                            "stateVariable": false,
                            "storageLocation": "storage",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_uint256_$_t_bytes_storage_$",
                              "typeString": "mapping(uint256 => bytes)"
                            },
                            "typeName": {
                              "id": 216,
                              "keyType": {
                                "id": 214,
                                "name": "uint256",
                                "nodeType": "ElementaryTypeName",
                                "src": "3214:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "Mapping",
                              "src": "3206:25:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_uint256_$_t_bytes_storage_$",
                                "typeString": "mapping(uint256 => bytes)"
                              },
                              "valueType": {
                                "id": 215,
                                "name": "bytes",
                                "nodeType": "ElementaryTypeName",
                                "src": "3225:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_storage_ptr",
                                  "typeString": "bytes"
                                }
                              }
                            },
                            "value": null,
                            "visibility": "internal"
                          }
                        ],
                        "id": 221,
                        "initialValue": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "id": 218,
                            "name": "abis",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 165,
                            "src": "3249:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_bytes32_$_t_mapping$_t_uint256_$_t_bytes_storage_$_$",
                              "typeString": "mapping(bytes32 => mapping(uint256 => bytes storage ref))"
                            }
                          },
                          "id": 220,
                          "indexExpression": {
                            "argumentTypes": null,
                            "id": 219,
                            "name": "node",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 205,
                            "src": "3254:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "3249:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_uint256_$_t_bytes_storage_$",
                            "typeString": "mapping(uint256 => bytes storage ref)"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "3206:53:0"
                      },
                      {
                        "body": {
                          "id": 254,
                          "nodeType": "Block",
                          "src": "3368:147:0",
                          "statements": [
                            {
                              "condition": {
                                "argumentTypes": null,
                                "commonType": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                },
                                "id": 245,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "argumentTypes": null,
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 238,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "argumentTypes": null,
                                    "components": [
                                      {
                                        "argumentTypes": null,
                                        "commonType": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        },
                                        "id": 235,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "leftExpression": {
                                          "argumentTypes": null,
                                          "id": 233,
                                          "name": "contentType",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 223,
                                          "src": "3381:11:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "nodeType": "BinaryOperation",
                                        "operator": "&",
                                        "rightExpression": {
                                          "argumentTypes": null,
                                          "id": 234,
                                          "name": "contentTypes",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 207,
                                          "src": "3395:12:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "src": "3381:26:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      }
                                    ],
                                    "id": 236,
                                    "isConstant": false,
                                    "isInlineArray": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "TupleExpression",
                                    "src": "3380:28:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "!=",
                                  "rightExpression": {
                                    "argumentTypes": null,
                                    "hexValue": "30",
                                    "id": 237,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "3412:1:0",
                                    "subdenomination": null,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    },
                                    "value": "0"
                                  },
                                  "src": "3380:33:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "&&",
                                "rightExpression": {
                                  "argumentTypes": null,
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 244,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "argumentTypes": null,
                                    "expression": {
                                      "argumentTypes": null,
                                      "baseExpression": {
                                        "argumentTypes": null,
                                        "id": 239,
                                        "name": "abiset",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 217,
                                        "src": "3417:6:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_mapping$_t_uint256_$_t_bytes_storage_$",
                                          "typeString": "mapping(uint256 => bytes storage ref)"
                                        }
                                      },
                                      "id": 241,
                                      "indexExpression": {
                                        "argumentTypes": null,
                                        "id": 240,
                                        "name": "contentType",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 223,
                                        "src": "3424:11:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "nodeType": "IndexAccess",
                                      "src": "3417:19:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bytes_storage",
                                        "typeString": "bytes storage ref"
                                      }
                                    },
                                    "id": 242,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "length",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": null,
                                    "src": "3417:26:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": ">",
                                  "rightExpression": {
                                    "argumentTypes": null,
                                    "hexValue": "30",
                                    "id": 243,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "3446:1:0",
                                    "subdenomination": null,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    },
                                    "value": "0"
                                  },
                                  "src": "3417:30:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                },
                                "src": "3380:67:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "falseBody": null,
                              "id": 253,
                              "nodeType": "IfStatement",
                              "src": "3376:133:0",
                              "trueBody": {
                                "id": 252,
                                "nodeType": "Block",
                                "src": "3449:60:0",
                                "statements": [
                                  {
                                    "expression": {
                                      "argumentTypes": null,
                                      "components": [
                                        {
                                          "argumentTypes": null,
                                          "id": 246,
                                          "name": "contentType",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 223,
                                          "src": "3467:11:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        {
                                          "argumentTypes": null,
                                          "baseExpression": {
                                            "argumentTypes": null,
                                            "id": 247,
                                            "name": "abiset",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 217,
                                            "src": "3480:6:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_mapping$_t_uint256_$_t_bytes_storage_$",
                                              "typeString": "mapping(uint256 => bytes storage ref)"
                                            }
                                          },
                                          "id": 249,
                                          "indexExpression": {
                                            "argumentTypes": null,
                                            "id": 248,
                                            "name": "contentType",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 223,
                                            "src": "3487:11:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          },
                                          "isConstant": false,
                                          "isLValue": true,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "nodeType": "IndexAccess",
                                          "src": "3480:19:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_bytes_storage",
                                            "typeString": "bytes storage ref"
                                          }
                                        }
                                      ],
                                      "id": 250,
                                      "isConstant": false,
                                      "isInlineArray": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "nodeType": "TupleExpression",
                                      "src": "3466:34:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_tuple$_t_uint256_$_t_bytes_storage_$",
                                        "typeString": "tuple(uint256,bytes storage ref)"
                                      }
                                    },
                                    "functionReturnParameters": 213,
                                    "id": 251,
                                    "nodeType": "Return",
                                    "src": "3459:41:0"
                                  }
                                ]
                              }
                            }
                          ]
                        },
                        "condition": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 228,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "id": 226,
                            "name": "contentType",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 223,
                            "src": "3309:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "<=",
                          "rightExpression": {
                            "argumentTypes": null,
                            "id": 227,
                            "name": "contentTypes",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 207,
                            "src": "3324:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "3309:27:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 255,
                        "initializationExpression": {
                          "assignments": [
                            223
                          ],
                          "declarations": [
                            {
                              "constant": false,
                              "id": 223,
                              "name": "contentType",
                              "nodeType": "VariableDeclaration",
                              "scope": 255,
                              "src": "3278:19:0",
                              "stateVariable": false,
                              "storageLocation": "default",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "typeName": {
                                "id": 222,
                                "name": "uint256",
                                "nodeType": "ElementaryTypeName",
                                "src": "3278:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "value": null,
                              "visibility": "internal"
                            }
                          ],
                          "id": 225,
                          "initialValue": {
                            "argumentTypes": null,
                            "hexValue": "31",
                            "id": 224,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "3300:1:0",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_1_by_1",
                              "typeString": "int_const 1"
                            },
                            "value": "1"
                          },
                          "nodeType": "VariableDeclarationStatement",
                          "src": "3278:23:0"
                        },
                        "loopExpression": {
                          "expression": {
                            "argumentTypes": null,
                            "id": 231,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftHandSide": {
                              "argumentTypes": null,
                              "id": 229,
                              "name": "contentType",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 223,
                              "src": "3344:11:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "Assignment",
                            "operator": "<<=",
                            "rightHandSide": {
                              "argumentTypes": null,
                              "hexValue": "31",
                              "id": 230,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "3360:1:0",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_1_by_1",
                                "typeString": "int_const 1"
                              },
                              "value": "1"
                            },
                            "src": "3344:17:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 232,
                          "nodeType": "ExpressionStatement",
                          "src": "3344:17:0"
                        },
                        "nodeType": "ForStatement",
                        "src": "3266:249:0"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "components": [
                            {
                              "argumentTypes": null,
                              "hexValue": "30",
                              "id": 256,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "3529:1:0",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "hexValue": "",
                                  "id": 258,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "3538:2:0",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                    "typeString": "literal_string \"\""
                                  },
                                  "value": ""
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                    "typeString": "literal_string \"\""
                                  }
                                ],
                                "id": 257,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "3532:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
                                  "typeString": "type(bytes storage pointer)"
                                },
                                "typeName": "bytes"
                              },
                              "id": 259,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "3532:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            }
                          ],
                          "id": 260,
                          "isConstant": false,
                          "isInlineArray": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "TupleExpression",
                          "src": "3528:14:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$_t_rational_0_by_1_$_t_bytes_memory_ptr_$",
                            "typeString": "tuple(int_const 0,bytes memory)"
                          }
                        },
                        "functionReturnParameters": 213,
                        "id": 261,
                        "nodeType": "Return",
                        "src": "3521:21:0"
                      }
                    ]
                  },
                  "documentation": "Returns the ABI associated with an ENS node.\nDefined in EIP205.\n@param node The ENS node to query\n@param contentTypes A bitwise OR of the ABI formats accepted by the caller.\n@return contentType The content type of the return value\n@return data The ABI data",
                  "id": 263,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "ABI",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 208,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 205,
                        "name": "node",
                        "nodeType": "VariableDeclaration",
                        "scope": 263,
                        "src": "3104:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 204,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "3104:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 207,
                        "name": "contentTypes",
                        "nodeType": "VariableDeclaration",
                        "scope": 263,
                        "src": "3118:20:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 206,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "3118:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "3103:36:0"
                  },
                  "returnParameters": {
                    "id": 213,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 210,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 263,
                        "src": "3175:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 209,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "3175:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 212,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 263,
                        "src": "3184:12:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 211,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "3184:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "3174:23:0"
                  },
                  "scope": 281,
                  "src": "3091:456:0",
                  "stateMutability": "view",
                  "superFunction": null,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 279,
                    "nodeType": "Block",
                    "src": "3625:95:0",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "id": 277,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_bytes4",
                              "typeString": "bytes4"
                            },
                            "id": 272,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "id": 270,
                              "name": "interfaceID",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 265,
                              "src": "3644:11:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes4",
                                "typeString": "bytes4"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "==",
                            "rightExpression": {
                              "argumentTypes": null,
                              "id": 271,
                              "name": "ABI_INTERFACE_ID",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 153,
                              "src": "3659:16:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes4",
                                "typeString": "bytes4"
                              }
                            },
                            "src": "3644:31:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "||",
                          "rightExpression": {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "id": 275,
                                "name": "interfaceID",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 265,
                                "src": "3703:11:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes4",
                                  "typeString": "bytes4"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_bytes4",
                                  "typeString": "bytes4"
                                }
                              ],
                              "expression": {
                                "argumentTypes": null,
                                "id": 273,
                                "name": "super",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3362,
                                "src": "3679:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_super$_ABIResolver_$281",
                                  "typeString": "contract super ABIResolver"
                                }
                              },
                              "id": 274,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "supportsInterface",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 95,
                              "src": "3679:23:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_bytes4_$returns$_t_bool_$",
                                "typeString": "function (bytes4) pure returns (bool)"
                              }
                            },
                            "id": 276,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "3679:36:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "src": "3644:71:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "functionReturnParameters": 269,
                        "id": 278,
                        "nodeType": "Return",
                        "src": "3631:84:0"
                      }
                    ]
                  },
                  "documentation": null,
                  "id": 280,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "supportsInterface",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 266,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 265,
                        "name": "interfaceID",
                        "nodeType": "VariableDeclaration",
                        "scope": 280,
                        "src": "3578:18:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        },
                        "typeName": {
                          "id": 264,
                          "name": "bytes4",
                          "nodeType": "ElementaryTypeName",
                          "src": "3578:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "3577:20:0"
                  },
                  "returnParameters": {
                    "id": 269,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 268,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 280,
                        "src": "3619:4:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 267,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "3619:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "3618:6:0"
                  },
                  "scope": 281,
                  "src": "3551:169:0",
                  "stateMutability": "pure",
                  "superFunction": 95,
                  "visibility": "public"
                }
              ],
              "scope": 3329,
              "src": "1992:1730:0"
            },
            {
              "id": 282,
              "literals": [
                "solidity",
                "^",
                "0.5",
                ".0"
              ],
              "nodeType": "PragmaDirective",
              "src": "3770:23:0"
            },
            {
              "baseContracts": [
                {
                  "arguments": null,
                  "baseName": {
                    "contractScope": null,
                    "id": 283,
                    "name": "ResolverBase",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 147,
                    "src": "3820:12:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_ResolverBase_$147",
                      "typeString": "contract ResolverBase"
                    }
                  },
                  "id": 284,
                  "nodeType": "InheritanceSpecifier",
                  "src": "3820:12:0"
                }
              ],
              "contractDependencies": [
                147
              ],
              "contractKind": "contract",
              "documentation": null,
              "fullyImplemented": false,
              "id": 438,
              "linearizedBaseContracts": [
                438,
                147
              ],
              "name": "AddrResolver",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "constant": true,
                  "id": 287,
                  "name": "ADDR_INTERFACE_ID",
                  "nodeType": "VariableDeclaration",
                  "scope": 438,
                  "src": "3837:54:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes4",
                    "typeString": "bytes4"
                  },
                  "typeName": {
                    "id": 285,
                    "name": "bytes4",
                    "nodeType": "ElementaryTypeName",
                    "src": "3837:6:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes4",
                      "typeString": "bytes4"
                    }
                  },
                  "value": {
                    "argumentTypes": null,
                    "hexValue": "30783362336235376465",
                    "id": 286,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "3881:10:0",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_993744862_by_1",
                      "typeString": "int_const 993744862"
                    },
                    "value": "0x3b3b57de"
                  },
                  "visibility": "private"
                },
                {
                  "constant": true,
                  "id": 290,
                  "name": "ADDRESS_INTERFACE_ID",
                  "nodeType": "VariableDeclaration",
                  "scope": 438,
                  "src": "3895:57:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes4",
                    "typeString": "bytes4"
                  },
                  "typeName": {
                    "id": 288,
                    "name": "bytes4",
                    "nodeType": "ElementaryTypeName",
                    "src": "3895:6:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes4",
                      "typeString": "bytes4"
                    }
                  },
                  "value": {
                    "argumentTypes": null,
                    "hexValue": "30786631636237653036",
                    "id": 289,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "3942:10:0",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_4056645126_by_1",
                      "typeString": "int_const 4056645126"
                    },
                    "value": "0xf1cb7e06"
                  },
                  "visibility": "private"
                },
                {
                  "constant": true,
                  "id": 293,
                  "name": "COIN_TYPE_ETH",
                  "nodeType": "VariableDeclaration",
                  "scope": 438,
                  "src": "3956:43:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 291,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3956:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": {
                    "argumentTypes": null,
                    "hexValue": "3630",
                    "id": 292,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "3997:2:0",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_60_by_1",
                      "typeString": "int_const 60"
                    },
                    "value": "60"
                  },
                  "visibility": "private"
                },
                {
                  "anonymous": false,
                  "documentation": null,
                  "id": 299,
                  "name": "AddrChanged",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 298,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 295,
                        "indexed": true,
                        "name": "node",
                        "nodeType": "VariableDeclaration",
                        "scope": 299,
                        "src": "4022:20:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 294,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "4022:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 297,
                        "indexed": false,
                        "name": "a",
                        "nodeType": "VariableDeclaration",
                        "scope": 299,
                        "src": "4044:9:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 296,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "4044:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "4021:33:0"
                  },
                  "src": "4004:51:0"
                },
                {
                  "anonymous": false,
                  "documentation": null,
                  "id": 307,
                  "name": "AddressChanged",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 306,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 301,
                        "indexed": true,
                        "name": "node",
                        "nodeType": "VariableDeclaration",
                        "scope": 307,
                        "src": "4084:20:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 300,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "4084:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 303,
                        "indexed": false,
                        "name": "coinType",
                        "nodeType": "VariableDeclaration",
                        "scope": 307,
                        "src": "4110:16:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 302,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "4110:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 305,
                        "indexed": false,
                        "name": "newAddress",
                        "nodeType": "VariableDeclaration",
                        "scope": 307,
                        "src": "4132:16:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 304,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "4132:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "4078:74:0"
                  },
                  "src": "4058:95:0"
                },
                {
                  "constant": false,
                  "id": 313,
                  "name": "_addresses",
                  "nodeType": "VariableDeclaration",
                  "scope": 438,
                  "src": "4157:56:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_bytes32_$_t_mapping$_t_uint256_$_t_bytes_storage_$_$",
                    "typeString": "mapping(bytes32 => mapping(uint256 => bytes))"
                  },
                  "typeName": {
                    "id": 312,
                    "keyType": {
                      "id": 308,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "4165:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "nodeType": "Mapping",
                    "src": "4157:45:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_bytes32_$_t_mapping$_t_uint256_$_t_bytes_storage_$_$",
                      "typeString": "mapping(bytes32 => mapping(uint256 => bytes))"
                    },
                    "valueType": {
                      "id": 311,
                      "keyType": {
                        "id": 309,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "4184:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "Mapping",
                      "src": "4176:25:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_uint256_$_t_bytes_storage_$",
                        "typeString": "mapping(uint256 => bytes)"
                      },
                      "valueType": {
                        "id": 310,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "4195:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      }
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 331,
                    "nodeType": "Block",
                    "src": "4491:58:0",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 324,
                              "name": "node",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 315,
                              "src": "4505:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "id": 325,
                              "name": "COIN_TYPE_ETH",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 293,
                              "src": "4511:13:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "id": 327,
                                  "name": "a",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 317,
                                  "src": "4541:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                ],
                                "id": 326,
                                "name": "addressToBytes",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 146,
                                "src": "4526:14:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_pure$_t_address_$returns$_t_bytes_memory_ptr_$",
                                  "typeString": "function (address) pure returns (bytes memory)"
                                }
                              },
                              "id": 328,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "4526:17:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            ],
                            "id": 323,
                            "name": "setAddr",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 400,
                            "src": "4497:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_bytes32_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$",
                              "typeString": "function (bytes32,uint256,bytes memory)"
                            }
                          },
                          "id": 329,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4497:47:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 330,
                        "nodeType": "ExpressionStatement",
                        "src": "4497:47:0"
                      }
                    ]
                  },
                  "documentation": "Sets the address associated with an ENS node.\nMay only be called by the owner of that node in the ENS registry.\n@param node The node to update.\n@param a The address to set.",
                  "id": 332,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "id": 320,
                          "name": "node",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 315,
                          "src": "4485:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        }
                      ],
                      "id": 321,
                      "modifierName": {
                        "argumentTypes": null,
                        "id": 319,
                        "name": "authorised",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 114,
                        "src": "4474:10:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_modifier$_t_bytes32_$",
                          "typeString": "modifier (bytes32)"
                        }
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "4474:16:0"
                    }
                  ],
                  "name": "setAddr",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 318,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 315,
                        "name": "node",
                        "nodeType": "VariableDeclaration",
                        "scope": 332,
                        "src": "4440:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 314,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "4440:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 317,
                        "name": "a",
                        "nodeType": "VariableDeclaration",
                        "scope": 332,
                        "src": "4454:9:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 316,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "4454:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "4439:25:0"
                  },
                  "returnParameters": {
                    "id": 322,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "4491:0:0"
                  },
                  "scope": 438,
                  "src": "4423:126:0",
                  "stateMutability": "nonpayable",
                  "superFunction": null,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 360,
                    "nodeType": "Block",
                    "src": "4762:139:0",
                    "statements": [
                      {
                        "assignments": [
                          340
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 340,
                            "name": "a",
                            "nodeType": "VariableDeclaration",
                            "scope": 360,
                            "src": "4768:14:0",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes"
                            },
                            "typeName": {
                              "id": 339,
                              "name": "bytes",
                              "nodeType": "ElementaryTypeName",
                              "src": "4768:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_storage_ptr",
                                "typeString": "bytes"
                              }
                            },
                            "value": null,
                            "visibility": "internal"
                          }
                        ],
                        "id": 345,
                        "initialValue": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 342,
                              "name": "node",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 334,
                              "src": "4790:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "id": 343,
                              "name": "COIN_TYPE_ETH",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 293,
                              "src": "4796:13:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 341,
                            "name": "addr",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              361,
                              416
                            ],
                            "referencedDeclaration": 416,
                            "src": "4785:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_uint256_$returns$_t_bytes_memory_ptr_$",
                              "typeString": "function (bytes32,uint256) view returns (bytes memory)"
                            }
                          },
                          "id": 344,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4785:25:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes memory"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "4768:42:0"
                      },
                      {
                        "condition": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 349,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 346,
                              "name": "a",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 340,
                              "src": "4820:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            },
                            "id": 347,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "length",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "4820:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "argumentTypes": null,
                            "hexValue": "30",
                            "id": 348,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "4832:1:0",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "4820:13:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": null,
                        "id": 355,
                        "nodeType": "IfStatement",
                        "src": "4816:51:0",
                        "trueBody": {
                          "id": 354,
                          "nodeType": "Block",
                          "src": "4835:32:0",
                          "statements": [
                            {
                              "expression": {
                                "argumentTypes": null,
                                "arguments": [
                                  {
                                    "argumentTypes": null,
                                    "hexValue": "30",
                                    "id": 351,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "4858:1:0",
                                    "subdenomination": null,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    },
                                    "value": "0"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    }
                                  ],
                                  "id": 350,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "4850:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_address_$",
                                    "typeString": "type(address)"
                                  },
                                  "typeName": "address"
                                },
                                "id": 352,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "4850:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address_payable",
                                  "typeString": "address payable"
                                }
                              },
                              "functionReturnParameters": 338,
                              "id": 353,
                              "nodeType": "Return",
                              "src": "4843:17:0"
                            }
                          ]
                        }
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 357,
                              "name": "a",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 340,
                              "src": "4894:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            ],
                            "id": 356,
                            "name": "bytesToAddress",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 130,
                            "src": "4879:14:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_address_payable_$",
                              "typeString": "function (bytes memory) pure returns (address payable)"
                            }
                          },
                          "id": 358,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4879:17:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "functionReturnParameters": 338,
                        "id": 359,
                        "nodeType": "Return",
                        "src": "4872:24:0"
                      }
                    ]
                  },
                  "documentation": "Returns the address associated with an ENS node.\n@param node The ENS node to query.\n@return The associated address.",
                  "id": 361,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "addr",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 335,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 334,
                        "name": "node",
                        "nodeType": "VariableDeclaration",
                        "scope": 361,
                        "src": "4710:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 333,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "4710:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "4709:14:0"
                  },
                  "returnParameters": {
                    "id": 338,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 337,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 361,
                        "src": "4745:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        },
                        "typeName": {
                          "id": 336,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "4745:15:0",
                          "stateMutability": "payable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "4744:17:0"
                  },
                  "scope": 438,
                  "src": "4696:205:0",
                  "stateMutability": "view",
                  "superFunction": null,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 399,
                    "nodeType": "Block",
                    "src": "5010:177:0",
                    "statements": [
                      {
                        "eventCall": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 374,
                              "name": "node",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 363,
                              "src": "5036:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "id": 375,
                              "name": "coinType",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 365,
                              "src": "5042:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "id": 376,
                              "name": "a",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 367,
                              "src": "5052:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            ],
                            "id": 373,
                            "name": "AddressChanged",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 307,
                            "src": "5021:14:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_bytes32_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$",
                              "typeString": "function (bytes32,uint256,bytes memory)"
                            }
                          },
                          "id": 377,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5021:33:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 378,
                        "nodeType": "EmitStatement",
                        "src": "5016:38:0"
                      },
                      {
                        "condition": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 381,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "id": 379,
                            "name": "coinType",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 365,
                            "src": "5064:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "argumentTypes": null,
                            "id": 380,
                            "name": "COIN_TYPE_ETH",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 293,
                            "src": "5076:13:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "5064:25:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": null,
                        "id": 390,
                        "nodeType": "IfStatement",
                        "src": "5060:87:0",
                        "trueBody": {
                          "id": 389,
                          "nodeType": "Block",
                          "src": "5091:56:0",
                          "statements": [
                            {
                              "eventCall": {
                                "argumentTypes": null,
                                "arguments": [
                                  {
                                    "argumentTypes": null,
                                    "id": 383,
                                    "name": "node",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 363,
                                    "src": "5116:4:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bytes32",
                                      "typeString": "bytes32"
                                    }
                                  },
                                  {
                                    "argumentTypes": null,
                                    "arguments": [
                                      {
                                        "argumentTypes": null,
                                        "id": 385,
                                        "name": "a",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 367,
                                        "src": "5137:1:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bytes_memory_ptr",
                                          "typeString": "bytes memory"
                                        }
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_bytes_memory_ptr",
                                          "typeString": "bytes memory"
                                        }
                                      ],
                                      "id": 384,
                                      "name": "bytesToAddress",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 130,
                                      "src": "5122:14:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_address_payable_$",
                                        "typeString": "function (bytes memory) pure returns (address payable)"
                                      }
                                    },
                                    "id": 386,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "kind": "functionCall",
                                    "lValueRequested": false,
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "5122:17:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address_payable",
                                      "typeString": "address payable"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_bytes32",
                                      "typeString": "bytes32"
                                    },
                                    {
                                      "typeIdentifier": "t_address_payable",
                                      "typeString": "address payable"
                                    }
                                  ],
                                  "id": 382,
                                  "name": "AddrChanged",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 299,
                                  "src": "5104:11:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_event_nonpayable$_t_bytes32_$_t_address_$returns$__$",
                                    "typeString": "function (bytes32,address)"
                                  }
                                },
                                "id": 387,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "5104:36:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 388,
                              "nodeType": "EmitStatement",
                              "src": "5099:41:0"
                            }
                          ]
                        }
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 397,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "id": 391,
                                "name": "_addresses",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 313,
                                "src": "5152:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_bytes32_$_t_mapping$_t_uint256_$_t_bytes_storage_$_$",
                                  "typeString": "mapping(bytes32 => mapping(uint256 => bytes storage ref))"
                                }
                              },
                              "id": 394,
                              "indexExpression": {
                                "argumentTypes": null,
                                "id": 392,
                                "name": "node",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 363,
                                "src": "5163:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes32",
                                  "typeString": "bytes32"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "5152:16:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_uint256_$_t_bytes_storage_$",
                                "typeString": "mapping(uint256 => bytes storage ref)"
                              }
                            },
                            "id": 395,
                            "indexExpression": {
                              "argumentTypes": null,
                              "id": 393,
                              "name": "coinType",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 365,
                              "src": "5169:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "5152:26:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_storage",
                              "typeString": "bytes storage ref"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "id": 396,
                            "name": "a",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 367,
                            "src": "5181:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          },
                          "src": "5152:30:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage",
                            "typeString": "bytes storage ref"
                          }
                        },
                        "id": 398,
                        "nodeType": "ExpressionStatement",
                        "src": "5152:30:0"
                      }
                    ]
                  },
                  "documentation": null,
                  "id": 400,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "id": 370,
                          "name": "node",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 363,
                          "src": "5004:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        }
                      ],
                      "id": 371,
                      "modifierName": {
                        "argumentTypes": null,
                        "id": 369,
                        "name": "authorised",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 114,
                        "src": "4993:10:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_modifier$_t_bytes32_$",
                          "typeString": "modifier (bytes32)"
                        }
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "4993:16:0"
                    }
                  ],
                  "name": "setAddr",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 368,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 363,
                        "name": "node",
                        "nodeType": "VariableDeclaration",
                        "scope": 400,
                        "src": "4927:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 362,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "4927:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 365,
                        "name": "coinType",
                        "nodeType": "VariableDeclaration",
                        "scope": 400,
                        "src": "4945:16:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 364,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "4945:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 367,
                        "name": "a",
                        "nodeType": "VariableDeclaration",
                        "scope": 400,
                        "src": "4967:14:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 366,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "4967:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "4921:64:0"
                  },
                  "returnParameters": {
                    "id": 372,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "5010:0:0"
                  },
                  "scope": 438,
                  "src": "4905:282:0",
                  "stateMutability": "nonpayable",
                  "superFunction": null,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 415,
                    "nodeType": "Block",
                    "src": "5286:44:0",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "id": 409,
                              "name": "_addresses",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 313,
                              "src": "5299:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_bytes32_$_t_mapping$_t_uint256_$_t_bytes_storage_$_$",
                                "typeString": "mapping(bytes32 => mapping(uint256 => bytes storage ref))"
                              }
                            },
                            "id": 411,
                            "indexExpression": {
                              "argumentTypes": null,
                              "id": 410,
                              "name": "node",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 402,
                              "src": "5310:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "5299:16:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_uint256_$_t_bytes_storage_$",
                              "typeString": "mapping(uint256 => bytes storage ref)"
                            }
                          },
                          "id": 413,
                          "indexExpression": {
                            "argumentTypes": null,
                            "id": 412,
                            "name": "coinType",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 404,
                            "src": "5316:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "5299:26:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage",
                            "typeString": "bytes storage ref"
                          }
                        },
                        "functionReturnParameters": 408,
                        "id": 414,
                        "nodeType": "Return",
                        "src": "5292:33:0"
                      }
                    ]
                  },
                  "documentation": null,
                  "id": 416,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "addr",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 405,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 402,
                        "name": "node",
                        "nodeType": "VariableDeclaration",
                        "scope": 416,
                        "src": "5205:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 401,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "5205:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 404,
                        "name": "coinType",
                        "nodeType": "VariableDeclaration",
                        "scope": 416,
                        "src": "5219:16:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 403,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "5219:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "5204:32:0"
                  },
                  "returnParameters": {
                    "id": 408,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 407,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 416,
                        "src": "5270:12:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 406,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "5270:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "5269:14:0"
                  },
                  "scope": 438,
                  "src": "5191:139:0",
                  "stateMutability": "view",
                  "superFunction": null,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 436,
                    "nodeType": "Block",
                    "src": "5408:147:0",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "id": 434,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "id": 429,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_bytes4",
                                "typeString": "bytes4"
                              },
                              "id": 425,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "id": 423,
                                "name": "interfaceID",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 418,
                                "src": "5427:11:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes4",
                                  "typeString": "bytes4"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "argumentTypes": null,
                                "id": 424,
                                "name": "ADDR_INTERFACE_ID",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 287,
                                "src": "5442:17:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes4",
                                  "typeString": "bytes4"
                                }
                              },
                              "src": "5427:32:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "||",
                            "rightExpression": {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_bytes4",
                                "typeString": "bytes4"
                              },
                              "id": 428,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "id": 426,
                                "name": "interfaceID",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 418,
                                "src": "5469:11:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes4",
                                  "typeString": "bytes4"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "argumentTypes": null,
                                "id": 427,
                                "name": "ADDRESS_INTERFACE_ID",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 290,
                                "src": "5484:20:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes4",
                                  "typeString": "bytes4"
                                }
                              },
                              "src": "5469:35:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "src": "5427:77:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "||",
                          "rightExpression": {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "id": 432,
                                "name": "interfaceID",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 418,
                                "src": "5538:11:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes4",
                                  "typeString": "bytes4"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_bytes4",
                                  "typeString": "bytes4"
                                }
                              ],
                              "expression": {
                                "argumentTypes": null,
                                "id": 430,
                                "name": "super",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3364,
                                "src": "5514:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_super$_AddrResolver_$438",
                                  "typeString": "contract super AddrResolver"
                                }
                              },
                              "id": 431,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "supportsInterface",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 95,
                              "src": "5514:23:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_bytes4_$returns$_t_bool_$",
                                "typeString": "function (bytes4) pure returns (bool)"
                              }
                            },
                            "id": 433,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "5514:36:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "src": "5427:123:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "functionReturnParameters": 422,
                        "id": 435,
                        "nodeType": "Return",
                        "src": "5414:136:0"
                      }
                    ]
                  },
                  "documentation": null,
                  "id": 437,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "supportsInterface",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 419,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 418,
                        "name": "interfaceID",
                        "nodeType": "VariableDeclaration",
                        "scope": 437,
                        "src": "5361:18:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        },
                        "typeName": {
                          "id": 417,
                          "name": "bytes4",
                          "nodeType": "ElementaryTypeName",
                          "src": "5361:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "5360:20:0"
                  },
                  "returnParameters": {
                    "id": 422,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 421,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 437,
                        "src": "5402:4:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 420,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "5402:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "5401:6:0"
                  },
                  "scope": 438,
                  "src": "5334:221:0",
                  "stateMutability": "pure",
                  "superFunction": 95,
                  "visibility": "public"
                }
              ],
              "scope": 3329,
              "src": "3795:1762:0"
            },
            {
              "id": 439,
              "literals": [
                "solidity",
                "^",
                "0.5",
                ".0"
              ],
              "nodeType": "PragmaDirective",
              "src": "5612:23:0"
            },
            {
              "baseContracts": [
                {
                  "arguments": null,
                  "baseName": {
                    "contractScope": null,
                    "id": 440,
                    "name": "ResolverBase",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 147,
                    "src": "5669:12:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_ResolverBase_$147",
                      "typeString": "contract ResolverBase"
                    }
                  },
                  "id": 441,
                  "nodeType": "InheritanceSpecifier",
                  "src": "5669:12:0"
                }
              ],
              "contractDependencies": [
                147
              ],
              "contractKind": "contract",
              "documentation": null,
              "fullyImplemented": false,
              "id": 506,
              "linearizedBaseContracts": [
                506,
                147
              ],
              "name": "ContentHashResolver",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "constant": true,
                  "id": 444,
                  "name": "CONTENT_HASH_INTERFACE_ID",
                  "nodeType": "VariableDeclaration",
                  "scope": 506,
                  "src": "5686:62:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes4",
                    "typeString": "bytes4"
                  },
                  "typeName": {
                    "id": 442,
                    "name": "bytes4",
                    "nodeType": "ElementaryTypeName",
                    "src": "5686:6:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes4",
                      "typeString": "bytes4"
                    }
                  },
                  "value": {
                    "argumentTypes": null,
                    "hexValue": "30786263316335386431",
                    "id": 443,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "5738:10:0",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_3155974353_by_1",
                      "typeString": "int_const 3155974353"
                    },
                    "value": "0xbc1c58d1"
                  },
                  "visibility": "private"
                },
                {
                  "anonymous": false,
                  "documentation": null,
                  "id": 450,
                  "name": "ContenthashChanged",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 449,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 446,
                        "indexed": true,
                        "name": "node",
                        "nodeType": "VariableDeclaration",
                        "scope": 450,
                        "src": "5778:20:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 445,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "5778:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 448,
                        "indexed": false,
                        "name": "hash",
                        "nodeType": "VariableDeclaration",
                        "scope": 450,
                        "src": "5800:10:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 447,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "5800:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "5777:34:0"
                  },
                  "src": "5753:59:0"
                },
                {
                  "constant": false,
                  "id": 454,
                  "name": "hashes",
                  "nodeType": "VariableDeclaration",
                  "scope": 506,
                  "src": "5816:32:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_bytes32_$_t_bytes_storage_$",
                    "typeString": "mapping(bytes32 => bytes)"
                  },
                  "typeName": {
                    "id": 453,
                    "keyType": {
                      "id": 451,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "5824:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "nodeType": "Mapping",
                    "src": "5816:25:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_bytes32_$_t_bytes_storage_$",
                      "typeString": "mapping(bytes32 => bytes)"
                    },
                    "valueType": {
                      "id": 452,
                      "name": "bytes",
                      "nodeType": "ElementaryTypeName",
                      "src": "5835:5:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_storage_ptr",
                        "typeString": "bytes"
                      }
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 475,
                    "nodeType": "Block",
                    "src": "6163:71:0",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 468,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "id": 464,
                              "name": "hashes",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 454,
                              "src": "6169:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_bytes32_$_t_bytes_storage_$",
                                "typeString": "mapping(bytes32 => bytes storage ref)"
                              }
                            },
                            "id": 466,
                            "indexExpression": {
                              "argumentTypes": null,
                              "id": 465,
                              "name": "node",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 456,
                              "src": "6176:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "6169:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_storage",
                              "typeString": "bytes storage ref"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "id": 467,
                            "name": "hash",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 458,
                            "src": "6184:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_calldata_ptr",
                              "typeString": "bytes calldata"
                            }
                          },
                          "src": "6169:19:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage",
                            "typeString": "bytes storage ref"
                          }
                        },
                        "id": 469,
                        "nodeType": "ExpressionStatement",
                        "src": "6169:19:0"
                      },
                      {
                        "eventCall": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 471,
                              "name": "node",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 456,
                              "src": "6218:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "id": 472,
                              "name": "hash",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 458,
                              "src": "6224:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_calldata_ptr",
                                "typeString": "bytes calldata"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              },
                              {
                                "typeIdentifier": "t_bytes_calldata_ptr",
                                "typeString": "bytes calldata"
                              }
                            ],
                            "id": 470,
                            "name": "ContenthashChanged",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 450,
                            "src": "6199:18:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_bytes32_$_t_bytes_memory_ptr_$returns$__$",
                              "typeString": "function (bytes32,bytes memory)"
                            }
                          },
                          "id": 473,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "6199:30:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 474,
                        "nodeType": "EmitStatement",
                        "src": "6194:35:0"
                      }
                    ]
                  },
                  "documentation": "Sets the contenthash associated with an ENS node.\nMay only be called by the owner of that node in the ENS registry.\n@param node The node to update.\n@param hash The contenthash to set",
                  "id": 476,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "id": 461,
                          "name": "node",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 456,
                          "src": "6155:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        }
                      ],
                      "id": 462,
                      "modifierName": {
                        "argumentTypes": null,
                        "id": 460,
                        "name": "authorised",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 114,
                        "src": "6144:10:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_modifier$_t_bytes32_$",
                          "typeString": "modifier (bytes32)"
                        }
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "6144:16:0"
                    }
                  ],
                  "name": "setContenthash",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 459,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 456,
                        "name": "node",
                        "nodeType": "VariableDeclaration",
                        "scope": 476,
                        "src": "6092:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 455,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "6092:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 458,
                        "name": "hash",
                        "nodeType": "VariableDeclaration",
                        "scope": 476,
                        "src": "6106:19:0",
                        "stateVariable": false,
                        "storageLocation": "calldata",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 457,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "6106:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "6091:35:0"
                  },
                  "returnParameters": {
                    "id": 463,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "6163:0:0"
                  },
                  "scope": 506,
                  "src": "6068:166:0",
                  "stateMutability": "nonpayable",
                  "superFunction": null,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 487,
                    "nodeType": "Block",
                    "src": "6461:30:0",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "id": 483,
                            "name": "hashes",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 454,
                            "src": "6474:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_bytes32_$_t_bytes_storage_$",
                              "typeString": "mapping(bytes32 => bytes storage ref)"
                            }
                          },
                          "id": 485,
                          "indexExpression": {
                            "argumentTypes": null,
                            "id": 484,
                            "name": "node",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 478,
                            "src": "6481:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "6474:12:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage",
                            "typeString": "bytes storage ref"
                          }
                        },
                        "functionReturnParameters": 482,
                        "id": 486,
                        "nodeType": "Return",
                        "src": "6467:19:0"
                      }
                    ]
                  },
                  "documentation": "Returns the contenthash associated with an ENS node.\n@param node The ENS node to query.\n@return The associated contenthash.",
                  "id": 488,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "contenthash",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 479,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 478,
                        "name": "node",
                        "nodeType": "VariableDeclaration",
                        "scope": 488,
                        "src": "6410:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 477,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "6410:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "6409:14:0"
                  },
                  "returnParameters": {
                    "id": 482,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 481,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 488,
                        "src": "6447:12:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 480,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "6447:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "6446:14:0"
                  },
                  "scope": 506,
                  "src": "6389:102:0",
                  "stateMutability": "view",
                  "superFunction": null,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 504,
                    "nodeType": "Block",
                    "src": "6569:110:0",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "id": 502,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_bytes4",
                              "typeString": "bytes4"
                            },
                            "id": 497,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "id": 495,
                              "name": "interfaceID",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 490,
                              "src": "6588:11:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes4",
                                "typeString": "bytes4"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "==",
                            "rightExpression": {
                              "argumentTypes": null,
                              "id": 496,
                              "name": "CONTENT_HASH_INTERFACE_ID",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 444,
                              "src": "6603:25:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes4",
                                "typeString": "bytes4"
                              }
                            },
                            "src": "6588:40:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "||",
                          "rightExpression": {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "id": 500,
                                "name": "interfaceID",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 490,
                                "src": "6662:11:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes4",
                                  "typeString": "bytes4"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_bytes4",
                                  "typeString": "bytes4"
                                }
                              ],
                              "expression": {
                                "argumentTypes": null,
                                "id": 498,
                                "name": "super",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3366,
                                "src": "6638:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_super$_ContentHashResolver_$506",
                                  "typeString": "contract super ContentHashResolver"
                                }
                              },
                              "id": 499,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "supportsInterface",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 95,
                              "src": "6638:23:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_bytes4_$returns$_t_bool_$",
                                "typeString": "function (bytes4) pure returns (bool)"
                              }
                            },
                            "id": 501,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "6638:36:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "src": "6588:86:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "functionReturnParameters": 494,
                        "id": 503,
                        "nodeType": "Return",
                        "src": "6575:99:0"
                      }
                    ]
                  },
                  "documentation": null,
                  "id": 505,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "supportsInterface",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 491,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 490,
                        "name": "interfaceID",
                        "nodeType": "VariableDeclaration",
                        "scope": 505,
                        "src": "6522:18:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        },
                        "typeName": {
                          "id": 489,
                          "name": "bytes4",
                          "nodeType": "ElementaryTypeName",
                          "src": "6522:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "6521:20:0"
                  },
                  "returnParameters": {
                    "id": 494,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 493,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 505,
                        "src": "6563:4:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 492,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "6563:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "6562:6:0"
                  },
                  "scope": 506,
                  "src": "6495:184:0",
                  "stateMutability": "pure",
                  "superFunction": 95,
                  "visibility": "public"
                }
              ],
              "scope": 3329,
              "src": "5637:1044:0"
            },
            {
              "id": 507,
              "literals": [
                "solidity",
                ">",
                "0.4",
                ".23"
              ],
              "nodeType": "PragmaDirective",
              "src": "6744:24:0"
            },
            {
              "baseContracts": [],
              "contractDependencies": [],
              "contractKind": "library",
              "documentation": null,
              "fullyImplemented": true,
              "id": 1226,
              "linearizedBaseContracts": [
                1226
              ],
              "name": "BytesUtils",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "body": {
                    "id": 528,
                    "nodeType": "Block",
                    "src": "7156:124:0",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 524,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 521,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "argumentTypes": null,
                                  "id": 519,
                                  "name": "offset",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 511,
                                  "src": "7170:6:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "+",
                                "rightExpression": {
                                  "argumentTypes": null,
                                  "id": 520,
                                  "name": "len",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 513,
                                  "src": "7179:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "7170:12:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "<=",
                              "rightExpression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 522,
                                  "name": "self",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 509,
                                  "src": "7186:4:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes_memory_ptr",
                                    "typeString": "bytes memory"
                                  }
                                },
                                "id": 523,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "length",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": null,
                                "src": "7186:11:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "7170:27:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            ],
                            "id": 518,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              3346,
                              3347
                            ],
                            "referencedDeclaration": 3346,
                            "src": "7162:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                              "typeString": "function (bool) pure"
                            }
                          },
                          "id": 525,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "7162:36:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 526,
                        "nodeType": "ExpressionStatement",
                        "src": "7162:36:0"
                      },
                      {
                        "externalReferences": [
                          {
                            "offset": {
                              "declaration": 511,
                              "isOffset": false,
                              "isSlot": false,
                              "src": "7257:6:0",
                              "valueSize": 1
                            }
                          },
                          {
                            "self": {
                              "declaration": 509,
                              "isOffset": false,
                              "isSlot": false,
                              "src": "7246:4:0",
                              "valueSize": 1
                            }
                          },
                          {
                            "len": {
                              "declaration": 513,
                              "isOffset": false,
                              "isSlot": false,
                              "src": "7266:3:0",
                              "valueSize": 1
                            }
                          },
                          {
                            "ret": {
                              "declaration": 516,
                              "isOffset": false,
                              "isSlot": false,
                              "src": "7221:3:0",
                              "valueSize": 1
                            }
                          }
                        ],
                        "id": 527,
                        "nodeType": "InlineAssembly",
                        "operations": "{\n    ret := keccak256(add(add(self, 32), offset), len)\n}",
                        "src": "7204:72:0"
                      }
                    ]
                  },
                  "documentation": null,
                  "id": 529,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "keccak",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 514,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 509,
                        "name": "self",
                        "nodeType": "VariableDeclaration",
                        "scope": 529,
                        "src": "7061:17:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 508,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "7061:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 511,
                        "name": "offset",
                        "nodeType": "VariableDeclaration",
                        "scope": 529,
                        "src": "7084:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 510,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "7084:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 513,
                        "name": "len",
                        "nodeType": "VariableDeclaration",
                        "scope": 529,
                        "src": "7104:11:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 512,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "7104:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "7055:64:0"
                  },
                  "returnParameters": {
                    "id": 517,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 516,
                        "name": "ret",
                        "nodeType": "VariableDeclaration",
                        "scope": 529,
                        "src": "7143:11:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 515,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "7143:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "7142:13:0"
                  },
                  "scope": 1226,
                  "src": "7040:240:0",
                  "stateMutability": "pure",
                  "superFunction": null,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 549,
                    "nodeType": "Block",
                    "src": "7726:71:0",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 539,
                              "name": "self",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 531,
                              "src": "7747:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "hexValue": "30",
                              "id": 540,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "7753:1:0",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 541,
                                "name": "self",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 531,
                                "src": "7756:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              },
                              "id": 542,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "length",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "7756:11:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "id": 543,
                              "name": "other",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 533,
                              "src": "7769:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "hexValue": "30",
                              "id": 544,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "7776:1:0",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 545,
                                "name": "other",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 533,
                                "src": "7779:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              },
                              "id": 546,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "length",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "7779:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              },
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              },
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 538,
                            "name": "compare",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              550,
                              682
                            ],
                            "referencedDeclaration": 682,
                            "src": "7739:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$_t_uint256_$_t_bytes_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_int256_$",
                              "typeString": "function (bytes memory,uint256,uint256,bytes memory,uint256,uint256) pure returns (int256)"
                            }
                          },
                          "id": 547,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "7739:53:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_int256",
                            "typeString": "int256"
                          }
                        },
                        "functionReturnParameters": 537,
                        "id": 548,
                        "nodeType": "Return",
                        "src": "7732:60:0"
                      }
                    ]
                  },
                  "documentation": null,
                  "id": 550,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "compare",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 534,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 531,
                        "name": "self",
                        "nodeType": "VariableDeclaration",
                        "scope": 550,
                        "src": "7642:17:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 530,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "7642:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 533,
                        "name": "other",
                        "nodeType": "VariableDeclaration",
                        "scope": 550,
                        "src": "7661:18:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 532,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "7661:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "7641:39:0"
                  },
                  "returnParameters": {
                    "id": 537,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 536,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 550,
                        "src": "7716:6:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_int256",
                          "typeString": "int256"
                        },
                        "typeName": {
                          "id": 535,
                          "name": "int256",
                          "nodeType": "ElementaryTypeName",
                          "src": "7716:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_int256",
                            "typeString": "int256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "7715:8:0"
                  },
                  "scope": 1226,
                  "src": "7625:172:0",
                  "stateMutability": "pure",
                  "superFunction": null,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 681,
                    "nodeType": "Block",
                    "src": "8577:860:0",
                    "statements": [
                      {
                        "assignments": [
                          568
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 568,
                            "name": "shortest",
                            "nodeType": "VariableDeclaration",
                            "scope": 681,
                            "src": "8583:16:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 567,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "8583:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "value": null,
                            "visibility": "internal"
                          }
                        ],
                        "id": 570,
                        "initialValue": {
                          "argumentTypes": null,
                          "id": 569,
                          "name": "len",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 556,
                          "src": "8602:3:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "8583:22:0"
                      },
                      {
                        "condition": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 573,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "id": 571,
                            "name": "otherlen",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 562,
                            "src": "8615:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "<",
                          "rightExpression": {
                            "argumentTypes": null,
                            "id": 572,
                            "name": "len",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 556,
                            "src": "8626:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "8615:14:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": null,
                        "id": 578,
                        "nodeType": "IfStatement",
                        "src": "8611:39:0",
                        "trueBody": {
                          "expression": {
                            "argumentTypes": null,
                            "id": 576,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftHandSide": {
                              "argumentTypes": null,
                              "id": 574,
                              "name": "shortest",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 568,
                              "src": "8631:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "Assignment",
                            "operator": "=",
                            "rightHandSide": {
                              "argumentTypes": null,
                              "id": 575,
                              "name": "otherlen",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 562,
                              "src": "8642:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "8631:19:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 577,
                          "nodeType": "ExpressionStatement",
                          "src": "8631:19:0"
                        }
                      },
                      {
                        "assignments": [
                          580
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 580,
                            "name": "selfptr",
                            "nodeType": "VariableDeclaration",
                            "scope": 681,
                            "src": "8657:15:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 579,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "8657:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "value": null,
                            "visibility": "internal"
                          }
                        ],
                        "id": 581,
                        "initialValue": null,
                        "nodeType": "VariableDeclarationStatement",
                        "src": "8657:15:0"
                      },
                      {
                        "assignments": [
                          583
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 583,
                            "name": "otherptr",
                            "nodeType": "VariableDeclaration",
                            "scope": 681,
                            "src": "8678:16:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 582,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "8678:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "value": null,
                            "visibility": "internal"
                          }
                        ],
                        "id": 584,
                        "initialValue": null,
                        "nodeType": "VariableDeclarationStatement",
                        "src": "8678:16:0"
                      },
                      {
                        "externalReferences": [
                          {
                            "offset": {
                              "declaration": 554,
                              "isOffset": false,
                              "isSlot": false,
                              "src": "8743:6:0",
                              "valueSize": 1
                            }
                          },
                          {
                            "self": {
                              "declaration": 552,
                              "isOffset": false,
                              "isSlot": false,
                              "src": "8733:4:0",
                              "valueSize": 1
                            }
                          },
                          {
                            "otheroffset": {
                              "declaration": 560,
                              "isOffset": false,
                              "isSlot": false,
                              "src": "8789:11:0",
                              "valueSize": 1
                            }
                          },
                          {
                            "other": {
                              "declaration": 558,
                              "isOffset": false,
                              "isSlot": false,
                              "src": "8778:5:0",
                              "valueSize": 1
                            }
                          },
                          {
                            "selfptr": {
                              "declaration": 580,
                              "isOffset": false,
                              "isSlot": false,
                              "src": "8718:7:0",
                              "valueSize": 1
                            }
                          },
                          {
                            "otherptr": {
                              "declaration": 583,
                              "isOffset": false,
                              "isSlot": false,
                              "src": "8762:8:0",
                              "valueSize": 1
                            }
                          }
                        ],
                        "id": 585,
                        "nodeType": "InlineAssembly",
                        "operations": "{\n    selfptr := add(self, add(offset, 32))\n    otherptr := add(other, add(otheroffset, 32))\n}",
                        "src": "8701:111:0"
                      },
                      {
                        "body": {
                          "id": 671,
                          "nodeType": "Block",
                          "src": "8866:523:0",
                          "statements": [
                            {
                              "assignments": [
                                598
                              ],
                              "declarations": [
                                {
                                  "constant": false,
                                  "id": 598,
                                  "name": "a",
                                  "nodeType": "VariableDeclaration",
                                  "scope": 671,
                                  "src": "8874:9:0",
                                  "stateVariable": false,
                                  "storageLocation": "default",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "typeName": {
                                    "id": 597,
                                    "name": "uint256",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "8874:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "value": null,
                                  "visibility": "internal"
                                }
                              ],
                              "id": 599,
                              "initialValue": null,
                              "nodeType": "VariableDeclarationStatement",
                              "src": "8874:9:0"
                            },
                            {
                              "assignments": [
                                601
                              ],
                              "declarations": [
                                {
                                  "constant": false,
                                  "id": 601,
                                  "name": "b",
                                  "nodeType": "VariableDeclaration",
                                  "scope": 671,
                                  "src": "8891:9:0",
                                  "stateVariable": false,
                                  "storageLocation": "default",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "typeName": {
                                    "id": 600,
                                    "name": "uint256",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "8891:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "value": null,
                                  "visibility": "internal"
                                }
                              ],
                              "id": 602,
                              "initialValue": null,
                              "nodeType": "VariableDeclarationStatement",
                              "src": "8891:9:0"
                            },
                            {
                              "externalReferences": [
                                {
                                  "selfptr": {
                                    "declaration": 580,
                                    "isOffset": false,
                                    "isSlot": false,
                                    "src": "8938:7:0",
                                    "valueSize": 1
                                  }
                                },
                                {
                                  "otherptr": {
                                    "declaration": 583,
                                    "isOffset": false,
                                    "isSlot": false,
                                    "src": "8966:8:0",
                                    "valueSize": 1
                                  }
                                },
                                {
                                  "a": {
                                    "declaration": 598,
                                    "isOffset": false,
                                    "isSlot": false,
                                    "src": "8927:1:0",
                                    "valueSize": 1
                                  }
                                },
                                {
                                  "b": {
                                    "declaration": 601,
                                    "isOffset": false,
                                    "isSlot": false,
                                    "src": "8955:1:0",
                                    "valueSize": 1
                                  }
                                }
                              ],
                              "id": 603,
                              "nodeType": "InlineAssembly",
                              "operations": "{\n    a := mload(selfptr)\n    b := mload(otherptr)\n}",
                              "src": "8908:75:0"
                            },
                            {
                              "condition": {
                                "argumentTypes": null,
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 606,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "argumentTypes": null,
                                  "id": 604,
                                  "name": "a",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 598,
                                  "src": "8994:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "!=",
                                "rightExpression": {
                                  "argumentTypes": null,
                                  "id": 605,
                                  "name": "b",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 601,
                                  "src": "8999:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "8994:6:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "falseBody": null,
                              "id": 662,
                              "nodeType": "IfStatement",
                              "src": "8990:350:0",
                              "trueBody": {
                                "id": 661,
                                "nodeType": "Block",
                                "src": "9002:338:0",
                                "statements": [
                                  {
                                    "assignments": [
                                      608
                                    ],
                                    "declarations": [
                                      {
                                        "constant": false,
                                        "id": 608,
                                        "name": "mask",
                                        "nodeType": "VariableDeclaration",
                                        "scope": 661,
                                        "src": "9065:12:0",
                                        "stateVariable": false,
                                        "storageLocation": "default",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        },
                                        "typeName": {
                                          "id": 607,
                                          "name": "uint256",
                                          "nodeType": "ElementaryTypeName",
                                          "src": "9065:7:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "value": null,
                                        "visibility": "internal"
                                      }
                                    ],
                                    "id": 609,
                                    "initialValue": null,
                                    "nodeType": "VariableDeclarationStatement",
                                    "src": "9065:12:0"
                                  },
                                  {
                                    "condition": {
                                      "argumentTypes": null,
                                      "commonType": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      },
                                      "id": 612,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "argumentTypes": null,
                                        "id": 610,
                                        "name": "shortest",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 568,
                                        "src": "9091:8:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": ">",
                                      "rightExpression": {
                                        "argumentTypes": null,
                                        "hexValue": "3332",
                                        "id": 611,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "number",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "9102:2:0",
                                        "subdenomination": null,
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_rational_32_by_1",
                                          "typeString": "int_const 32"
                                        },
                                        "value": "32"
                                      },
                                      "src": "9091:13:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bool",
                                        "typeString": "bool"
                                      }
                                    },
                                    "falseBody": {
                                      "id": 639,
                                      "nodeType": "Block",
                                      "src": "9173:67:0",
                                      "statements": [
                                        {
                                          "expression": {
                                            "argumentTypes": null,
                                            "id": 637,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "leftHandSide": {
                                              "argumentTypes": null,
                                              "id": 621,
                                              "name": "mask",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 608,
                                              "src": "9185:4:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint256",
                                                "typeString": "uint256"
                                              }
                                            },
                                            "nodeType": "Assignment",
                                            "operator": "=",
                                            "rightHandSide": {
                                              "argumentTypes": null,
                                              "id": 636,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": false,
                                              "lValueRequested": false,
                                              "nodeType": "UnaryOperation",
                                              "operator": "~",
                                              "prefix": true,
                                              "src": "9192:37:0",
                                              "subExpression": {
                                                "argumentTypes": null,
                                                "components": [
                                                  {
                                                    "argumentTypes": null,
                                                    "commonType": {
                                                      "typeIdentifier": "t_uint256",
                                                      "typeString": "uint256"
                                                    },
                                                    "id": 634,
                                                    "isConstant": false,
                                                    "isLValue": false,
                                                    "isPure": false,
                                                    "lValueRequested": false,
                                                    "leftExpression": {
                                                      "argumentTypes": null,
                                                      "commonType": {
                                                        "typeIdentifier": "t_uint256",
                                                        "typeString": "uint256"
                                                      },
                                                      "id": 632,
                                                      "isConstant": false,
                                                      "isLValue": false,
                                                      "isPure": false,
                                                      "lValueRequested": false,
                                                      "leftExpression": {
                                                        "argumentTypes": null,
                                                        "hexValue": "32",
                                                        "id": 622,
                                                        "isConstant": false,
                                                        "isLValue": false,
                                                        "isPure": true,
                                                        "kind": "number",
                                                        "lValueRequested": false,
                                                        "nodeType": "Literal",
                                                        "src": "9194:1:0",
                                                        "subdenomination": null,
                                                        "typeDescriptions": {
                                                          "typeIdentifier": "t_rational_2_by_1",
                                                          "typeString": "int_const 2"
                                                        },
                                                        "value": "2"
                                                      },
                                                      "nodeType": "BinaryOperation",
                                                      "operator": "**",
                                                      "rightExpression": {
                                                        "argumentTypes": null,
                                                        "components": [
                                                          {
                                                            "argumentTypes": null,
                                                            "commonType": {
                                                              "typeIdentifier": "t_uint256",
                                                              "typeString": "uint256"
                                                            },
                                                            "id": 630,
                                                            "isConstant": false,
                                                            "isLValue": false,
                                                            "isPure": false,
                                                            "lValueRequested": false,
                                                            "leftExpression": {
                                                              "argumentTypes": null,
                                                              "hexValue": "38",
                                                              "id": 623,
                                                              "isConstant": false,
                                                              "isLValue": false,
                                                              "isPure": true,
                                                              "kind": "number",
                                                              "lValueRequested": false,
                                                              "nodeType": "Literal",
                                                              "src": "9198:1:0",
                                                              "subdenomination": null,
                                                              "typeDescriptions": {
                                                                "typeIdentifier": "t_rational_8_by_1",
                                                                "typeString": "int_const 8"
                                                              },
                                                              "value": "8"
                                                            },
                                                            "nodeType": "BinaryOperation",
                                                            "operator": "*",
                                                            "rightExpression": {
                                                              "argumentTypes": null,
                                                              "components": [
                                                                {
                                                                  "argumentTypes": null,
                                                                  "commonType": {
                                                                    "typeIdentifier": "t_uint256",
                                                                    "typeString": "uint256"
                                                                  },
                                                                  "id": 628,
                                                                  "isConstant": false,
                                                                  "isLValue": false,
                                                                  "isPure": false,
                                                                  "lValueRequested": false,
                                                                  "leftExpression": {
                                                                    "argumentTypes": null,
                                                                    "commonType": {
                                                                      "typeIdentifier": "t_uint256",
                                                                      "typeString": "uint256"
                                                                    },
                                                                    "id": 626,
                                                                    "isConstant": false,
                                                                    "isLValue": false,
                                                                    "isPure": false,
                                                                    "lValueRequested": false,
                                                                    "leftExpression": {
                                                                      "argumentTypes": null,
                                                                      "hexValue": "3332",
                                                                      "id": 624,
                                                                      "isConstant": false,
                                                                      "isLValue": false,
                                                                      "isPure": true,
                                                                      "kind": "number",
                                                                      "lValueRequested": false,
                                                                      "nodeType": "Literal",
                                                                      "src": "9203:2:0",
                                                                      "subdenomination": null,
                                                                      "typeDescriptions": {
                                                                        "typeIdentifier": "t_rational_32_by_1",
                                                                        "typeString": "int_const 32"
                                                                      },
                                                                      "value": "32"
                                                                    },
                                                                    "nodeType": "BinaryOperation",
                                                                    "operator": "-",
                                                                    "rightExpression": {
                                                                      "argumentTypes": null,
                                                                      "id": 625,
                                                                      "name": "shortest",
                                                                      "nodeType": "Identifier",
                                                                      "overloadedDeclarations": [],
                                                                      "referencedDeclaration": 568,
                                                                      "src": "9208:8:0",
                                                                      "typeDescriptions": {
                                                                        "typeIdentifier": "t_uint256",
                                                                        "typeString": "uint256"
                                                                      }
                                                                    },
                                                                    "src": "9203:13:0",
                                                                    "typeDescriptions": {
                                                                      "typeIdentifier": "t_uint256",
                                                                      "typeString": "uint256"
                                                                    }
                                                                  },
                                                                  "nodeType": "BinaryOperation",
                                                                  "operator": "+",
                                                                  "rightExpression": {
                                                                    "argumentTypes": null,
                                                                    "id": 627,
                                                                    "name": "idx",
                                                                    "nodeType": "Identifier",
                                                                    "overloadedDeclarations": [],
                                                                    "referencedDeclaration": 587,
                                                                    "src": "9219:3:0",
                                                                    "typeDescriptions": {
                                                                      "typeIdentifier": "t_uint256",
                                                                      "typeString": "uint256"
                                                                    }
                                                                  },
                                                                  "src": "9203:19:0",
                                                                  "typeDescriptions": {
                                                                    "typeIdentifier": "t_uint256",
                                                                    "typeString": "uint256"
                                                                  }
                                                                }
                                                              ],
                                                              "id": 629,
                                                              "isConstant": false,
                                                              "isInlineArray": false,
                                                              "isLValue": false,
                                                              "isPure": false,
                                                              "lValueRequested": false,
                                                              "nodeType": "TupleExpression",
                                                              "src": "9202:21:0",
                                                              "typeDescriptions": {
                                                                "typeIdentifier": "t_uint256",
                                                                "typeString": "uint256"
                                                              }
                                                            },
                                                            "src": "9198:25:0",
                                                            "typeDescriptions": {
                                                              "typeIdentifier": "t_uint256",
                                                              "typeString": "uint256"
                                                            }
                                                          }
                                                        ],
                                                        "id": 631,
                                                        "isConstant": false,
                                                        "isInlineArray": false,
                                                        "isLValue": false,
                                                        "isPure": false,
                                                        "lValueRequested": false,
                                                        "nodeType": "TupleExpression",
                                                        "src": "9197:27:0",
                                                        "typeDescriptions": {
                                                          "typeIdentifier": "t_uint256",
                                                          "typeString": "uint256"
                                                        }
                                                      },
                                                      "src": "9194:30:0",
                                                      "typeDescriptions": {
                                                        "typeIdentifier": "t_uint256",
                                                        "typeString": "uint256"
                                                      }
                                                    },
                                                    "nodeType": "BinaryOperation",
                                                    "operator": "-",
                                                    "rightExpression": {
                                                      "argumentTypes": null,
                                                      "hexValue": "31",
                                                      "id": 633,
                                                      "isConstant": false,
                                                      "isLValue": false,
                                                      "isPure": true,
                                                      "kind": "number",
                                                      "lValueRequested": false,
                                                      "nodeType": "Literal",
                                                      "src": "9227:1:0",
                                                      "subdenomination": null,
                                                      "typeDescriptions": {
                                                        "typeIdentifier": "t_rational_1_by_1",
                                                        "typeString": "int_const 1"
                                                      },
                                                      "value": "1"
                                                    },
                                                    "src": "9194:34:0",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_uint256",
                                                      "typeString": "uint256"
                                                    }
                                                  }
                                                ],
                                                "id": 635,
                                                "isConstant": false,
                                                "isInlineArray": false,
                                                "isLValue": false,
                                                "isPure": false,
                                                "lValueRequested": false,
                                                "nodeType": "TupleExpression",
                                                "src": "9193:36:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_uint256",
                                                  "typeString": "uint256"
                                                }
                                              },
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint256",
                                                "typeString": "uint256"
                                              }
                                            },
                                            "src": "9185:44:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          },
                                          "id": 638,
                                          "nodeType": "ExpressionStatement",
                                          "src": "9185:44:0"
                                        }
                                      ]
                                    },
                                    "id": 640,
                                    "nodeType": "IfStatement",
                                    "src": "9087:153:0",
                                    "trueBody": {
                                      "id": 620,
                                      "nodeType": "Block",
                                      "src": "9106:61:0",
                                      "statements": [
                                        {
                                          "expression": {
                                            "argumentTypes": null,
                                            "id": 618,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "leftHandSide": {
                                              "argumentTypes": null,
                                              "id": 613,
                                              "name": "mask",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 608,
                                              "src": "9118:4:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint256",
                                                "typeString": "uint256"
                                              }
                                            },
                                            "nodeType": "Assignment",
                                            "operator": "=",
                                            "rightHandSide": {
                                              "argumentTypes": null,
                                              "arguments": [
                                                {
                                                  "argumentTypes": null,
                                                  "id": 616,
                                                  "isConstant": false,
                                                  "isLValue": false,
                                                  "isPure": true,
                                                  "lValueRequested": false,
                                                  "nodeType": "UnaryOperation",
                                                  "operator": "-",
                                                  "prefix": true,
                                                  "src": "9133:2:0",
                                                  "subExpression": {
                                                    "argumentTypes": null,
                                                    "hexValue": "31",
                                                    "id": 615,
                                                    "isConstant": false,
                                                    "isLValue": false,
                                                    "isPure": true,
                                                    "kind": "number",
                                                    "lValueRequested": false,
                                                    "nodeType": "Literal",
                                                    "src": "9134:1:0",
                                                    "subdenomination": null,
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_rational_1_by_1",
                                                      "typeString": "int_const 1"
                                                    },
                                                    "value": "1"
                                                  },
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_rational_minus_1_by_1",
                                                    "typeString": "int_const -1"
                                                  }
                                                }
                                              ],
                                              "expression": {
                                                "argumentTypes": [
                                                  {
                                                    "typeIdentifier": "t_rational_minus_1_by_1",
                                                    "typeString": "int_const -1"
                                                  }
                                                ],
                                                "id": 614,
                                                "isConstant": false,
                                                "isLValue": false,
                                                "isPure": true,
                                                "lValueRequested": false,
                                                "nodeType": "ElementaryTypeNameExpression",
                                                "src": "9125:7:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_type$_t_uint256_$",
                                                  "typeString": "type(uint256)"
                                                },
                                                "typeName": "uint256"
                                              },
                                              "id": 617,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": true,
                                              "kind": "typeConversion",
                                              "lValueRequested": false,
                                              "names": [],
                                              "nodeType": "FunctionCall",
                                              "src": "9125:11:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint256",
                                                "typeString": "uint256"
                                              }
                                            },
                                            "src": "9118:18:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          },
                                          "id": 619,
                                          "nodeType": "ExpressionStatement",
                                          "src": "9118:18:0"
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "assignments": [
                                      642
                                    ],
                                    "declarations": [
                                      {
                                        "constant": false,
                                        "id": 642,
                                        "name": "diff",
                                        "nodeType": "VariableDeclaration",
                                        "scope": 661,
                                        "src": "9249:12:0",
                                        "stateVariable": false,
                                        "storageLocation": "default",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        },
                                        "typeName": {
                                          "id": 641,
                                          "name": "uint256",
                                          "nodeType": "ElementaryTypeName",
                                          "src": "9249:7:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "value": null,
                                        "visibility": "internal"
                                      }
                                    ],
                                    "id": 652,
                                    "initialValue": {
                                      "argumentTypes": null,
                                      "commonType": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      },
                                      "id": 651,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "argumentTypes": null,
                                        "components": [
                                          {
                                            "argumentTypes": null,
                                            "commonType": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            },
                                            "id": 645,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "leftExpression": {
                                              "argumentTypes": null,
                                              "id": 643,
                                              "name": "a",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 598,
                                              "src": "9265:1:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint256",
                                                "typeString": "uint256"
                                              }
                                            },
                                            "nodeType": "BinaryOperation",
                                            "operator": "&",
                                            "rightExpression": {
                                              "argumentTypes": null,
                                              "id": 644,
                                              "name": "mask",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 608,
                                              "src": "9269:4:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint256",
                                                "typeString": "uint256"
                                              }
                                            },
                                            "src": "9265:8:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          }
                                        ],
                                        "id": 646,
                                        "isConstant": false,
                                        "isInlineArray": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "nodeType": "TupleExpression",
                                        "src": "9264:10:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": "-",
                                      "rightExpression": {
                                        "argumentTypes": null,
                                        "components": [
                                          {
                                            "argumentTypes": null,
                                            "commonType": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            },
                                            "id": 649,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "leftExpression": {
                                              "argumentTypes": null,
                                              "id": 647,
                                              "name": "b",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 601,
                                              "src": "9278:1:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint256",
                                                "typeString": "uint256"
                                              }
                                            },
                                            "nodeType": "BinaryOperation",
                                            "operator": "&",
                                            "rightExpression": {
                                              "argumentTypes": null,
                                              "id": 648,
                                              "name": "mask",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 608,
                                              "src": "9282:4:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint256",
                                                "typeString": "uint256"
                                              }
                                            },
                                            "src": "9278:8:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          }
                                        ],
                                        "id": 650,
                                        "isConstant": false,
                                        "isInlineArray": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "nodeType": "TupleExpression",
                                        "src": "9277:10:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "src": "9264:23:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "VariableDeclarationStatement",
                                    "src": "9249:38:0"
                                  },
                                  {
                                    "condition": {
                                      "argumentTypes": null,
                                      "commonType": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      },
                                      "id": 655,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "argumentTypes": null,
                                        "id": 653,
                                        "name": "diff",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 642,
                                        "src": "9301:4:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": "!=",
                                      "rightExpression": {
                                        "argumentTypes": null,
                                        "hexValue": "30",
                                        "id": 654,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "number",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "9309:1:0",
                                        "subdenomination": null,
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_rational_0_by_1",
                                          "typeString": "int_const 0"
                                        },
                                        "value": "0"
                                      },
                                      "src": "9301:9:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bool",
                                        "typeString": "bool"
                                      }
                                    },
                                    "falseBody": null,
                                    "id": 660,
                                    "nodeType": "IfStatement",
                                    "src": "9297:34:0",
                                    "trueBody": {
                                      "expression": {
                                        "argumentTypes": null,
                                        "arguments": [
                                          {
                                            "argumentTypes": null,
                                            "id": 657,
                                            "name": "diff",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 642,
                                            "src": "9326:4:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          }
                                        ],
                                        "expression": {
                                          "argumentTypes": [
                                            {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          ],
                                          "id": 656,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": true,
                                          "lValueRequested": false,
                                          "nodeType": "ElementaryTypeNameExpression",
                                          "src": "9319:6:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_type$_t_int256_$",
                                            "typeString": "type(int256)"
                                          },
                                          "typeName": "int256"
                                        },
                                        "id": 658,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "kind": "typeConversion",
                                        "lValueRequested": false,
                                        "names": [],
                                        "nodeType": "FunctionCall",
                                        "src": "9319:12:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_int256",
                                          "typeString": "int256"
                                        }
                                      },
                                      "functionReturnParameters": 566,
                                      "id": 659,
                                      "nodeType": "Return",
                                      "src": "9312:19:0"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "expression": {
                                "argumentTypes": null,
                                "id": 665,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "argumentTypes": null,
                                  "id": 663,
                                  "name": "selfptr",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 580,
                                  "src": "9347:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "+=",
                                "rightHandSide": {
                                  "argumentTypes": null,
                                  "hexValue": "3332",
                                  "id": 664,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "9358:2:0",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_32_by_1",
                                    "typeString": "int_const 32"
                                  },
                                  "value": "32"
                                },
                                "src": "9347:13:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 666,
                              "nodeType": "ExpressionStatement",
                              "src": "9347:13:0"
                            },
                            {
                              "expression": {
                                "argumentTypes": null,
                                "id": 669,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "argumentTypes": null,
                                  "id": 667,
                                  "name": "otherptr",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 583,
                                  "src": "9368:8:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "+=",
                                "rightHandSide": {
                                  "argumentTypes": null,
                                  "hexValue": "3332",
                                  "id": 668,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "9380:2:0",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_32_by_1",
                                    "typeString": "int_const 32"
                                  },
                                  "value": "32"
                                },
                                "src": "9368:14:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 670,
                              "nodeType": "ExpressionStatement",
                              "src": "9368:14:0"
                            }
                          ]
                        },
                        "condition": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 592,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "id": 590,
                            "name": "idx",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 587,
                            "src": "8839:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "<",
                          "rightExpression": {
                            "argumentTypes": null,
                            "id": 591,
                            "name": "shortest",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 568,
                            "src": "8845:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "8839:14:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 672,
                        "initializationExpression": {
                          "assignments": [
                            587
                          ],
                          "declarations": [
                            {
                              "constant": false,
                              "id": 587,
                              "name": "idx",
                              "nodeType": "VariableDeclaration",
                              "scope": 672,
                              "src": "8822:11:0",
                              "stateVariable": false,
                              "storageLocation": "default",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "typeName": {
                                "id": 586,
                                "name": "uint256",
                                "nodeType": "ElementaryTypeName",
                                "src": "8822:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "value": null,
                              "visibility": "internal"
                            }
                          ],
                          "id": 589,
                          "initialValue": {
                            "argumentTypes": null,
                            "hexValue": "30",
                            "id": 588,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "8836:1:0",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "nodeType": "VariableDeclarationStatement",
                          "src": "8822:15:0"
                        },
                        "loopExpression": {
                          "expression": {
                            "argumentTypes": null,
                            "id": 595,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftHandSide": {
                              "argumentTypes": null,
                              "id": 593,
                              "name": "idx",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 587,
                              "src": "8855:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "Assignment",
                            "operator": "+=",
                            "rightHandSide": {
                              "argumentTypes": null,
                              "hexValue": "3332",
                              "id": 594,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "8862:2:0",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_32_by_1",
                                "typeString": "int_const 32"
                              },
                              "value": "32"
                            },
                            "src": "8855:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 596,
                          "nodeType": "ExpressionStatement",
                          "src": "8855:9:0"
                        },
                        "nodeType": "ForStatement",
                        "src": "8817:572:0"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_int256",
                            "typeString": "int256"
                          },
                          "id": 679,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "id": 674,
                                "name": "len",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 556,
                                "src": "9409:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "id": 673,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "9402:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_int256_$",
                                "typeString": "type(int256)"
                              },
                              "typeName": "int256"
                            },
                            "id": 675,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "9402:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_int256",
                              "typeString": "int256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "-",
                          "rightExpression": {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "id": 677,
                                "name": "otherlen",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 562,
                                "src": "9423:8:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "id": 676,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "9416:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_int256_$",
                                "typeString": "type(int256)"
                              },
                              "typeName": "int256"
                            },
                            "id": 678,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "9416:16:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_int256",
                              "typeString": "int256"
                            }
                          },
                          "src": "9402:30:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_int256",
                            "typeString": "int256"
                          }
                        },
                        "functionReturnParameters": 566,
                        "id": 680,
                        "nodeType": "Return",
                        "src": "9395:37:0"
                      }
                    ]
                  },
                  "documentation": null,
                  "id": 682,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "compare",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 563,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 552,
                        "name": "self",
                        "nodeType": "VariableDeclaration",
                        "scope": 682,
                        "src": "8416:17:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 551,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "8416:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 554,
                        "name": "offset",
                        "nodeType": "VariableDeclaration",
                        "scope": 682,
                        "src": "8439:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 553,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "8439:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 556,
                        "name": "len",
                        "nodeType": "VariableDeclaration",
                        "scope": 682,
                        "src": "8459:11:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 555,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "8459:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 558,
                        "name": "other",
                        "nodeType": "VariableDeclaration",
                        "scope": 682,
                        "src": "8476:18:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 557,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "8476:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 560,
                        "name": "otheroffset",
                        "nodeType": "VariableDeclaration",
                        "scope": 682,
                        "src": "8500:19:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 559,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "8500:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 562,
                        "name": "otherlen",
                        "nodeType": "VariableDeclaration",
                        "scope": 682,
                        "src": "8525:16:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 561,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "8525:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "8410:135:0"
                  },
                  "returnParameters": {
                    "id": 566,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 565,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 682,
                        "src": "8569:6:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_int256",
                          "typeString": "int256"
                        },
                        "typeName": {
                          "id": 564,
                          "name": "int256",
                          "nodeType": "ElementaryTypeName",
                          "src": "8569:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_int256",
                            "typeString": "int256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "8568:8:0"
                  },
                  "scope": 1226,
                  "src": "8394:1043:0",
                  "stateMutability": "pure",
                  "superFunction": null,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 709,
                    "nodeType": "Block",
                    "src": "10001:78:0",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          },
                          "id": 707,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "id": 698,
                                "name": "self",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 684,
                                "src": "10021:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              },
                              {
                                "argumentTypes": null,
                                "id": 699,
                                "name": "offset",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 686,
                                "src": "10027:6:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              {
                                "argumentTypes": null,
                                "id": 700,
                                "name": "len",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 692,
                                "src": "10035:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                },
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "id": 697,
                              "name": "keccak",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 529,
                              "src": "10014:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_bytes32_$",
                                "typeString": "function (bytes memory,uint256,uint256) pure returns (bytes32)"
                              }
                            },
                            "id": 701,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "10014:25:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "id": 703,
                                "name": "other",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 688,
                                "src": "10050:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              },
                              {
                                "argumentTypes": null,
                                "id": 704,
                                "name": "otherOffset",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 690,
                                "src": "10057:11:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              {
                                "argumentTypes": null,
                                "id": 705,
                                "name": "len",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 692,
                                "src": "10070:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                },
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "id": 702,
                              "name": "keccak",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 529,
                              "src": "10043:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_bytes32_$",
                                "typeString": "function (bytes memory,uint256,uint256) pure returns (bytes32)"
                              }
                            },
                            "id": 706,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "10043:31:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "src": "10014:60:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "functionReturnParameters": 696,
                        "id": 708,
                        "nodeType": "Return",
                        "src": "10007:67:0"
                      }
                    ]
                  },
                  "documentation": null,
                  "id": 710,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "equals",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 693,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 684,
                        "name": "self",
                        "nodeType": "VariableDeclaration",
                        "scope": 710,
                        "src": "9864:17:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 683,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "9864:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 686,
                        "name": "offset",
                        "nodeType": "VariableDeclaration",
                        "scope": 710,
                        "src": "9887:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 685,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "9887:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 688,
                        "name": "other",
                        "nodeType": "VariableDeclaration",
                        "scope": 710,
                        "src": "9907:18:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 687,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "9907:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 690,
                        "name": "otherOffset",
                        "nodeType": "VariableDeclaration",
                        "scope": 710,
                        "src": "9931:19:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 689,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "9931:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 692,
                        "name": "len",
                        "nodeType": "VariableDeclaration",
                        "scope": 710,
                        "src": "9956:11:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 691,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "9956:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "9858:113:0"
                  },
                  "returnParameters": {
                    "id": 696,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 695,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 710,
                        "src": "9995:4:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 694,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "9995:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "9994:6:0"
                  },
                  "scope": 1226,
                  "src": "9843:236:0",
                  "stateMutability": "pure",
                  "superFunction": null,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 741,
                    "nodeType": "Block",
                    "src": "10592:130:0",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          },
                          "id": 739,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "id": 724,
                                "name": "self",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 712,
                                "src": "10618:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              },
                              {
                                "argumentTypes": null,
                                "id": 725,
                                "name": "offset",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 714,
                                "src": "10624:6:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              {
                                "argumentTypes": null,
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 729,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "argumentTypes": null,
                                  "expression": {
                                    "argumentTypes": null,
                                    "id": 726,
                                    "name": "self",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 712,
                                    "src": "10632:4:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bytes_memory_ptr",
                                      "typeString": "bytes memory"
                                    }
                                  },
                                  "id": 727,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "length",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": null,
                                  "src": "10632:11:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "-",
                                "rightExpression": {
                                  "argumentTypes": null,
                                  "id": 728,
                                  "name": "offset",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 714,
                                  "src": "10646:6:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "10632:20:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                },
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "id": 723,
                              "name": "keccak",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 529,
                              "src": "10611:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_bytes32_$",
                                "typeString": "function (bytes memory,uint256,uint256) pure returns (bytes32)"
                              }
                            },
                            "id": 730,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "10611:42:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "id": 732,
                                "name": "other",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 716,
                                "src": "10670:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              },
                              {
                                "argumentTypes": null,
                                "id": 733,
                                "name": "otherOffset",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 718,
                                "src": "10677:11:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              {
                                "argumentTypes": null,
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 737,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "argumentTypes": null,
                                  "expression": {
                                    "argumentTypes": null,
                                    "id": 734,
                                    "name": "other",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 716,
                                    "src": "10690:5:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bytes_memory_ptr",
                                      "typeString": "bytes memory"
                                    }
                                  },
                                  "id": 735,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "length",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": null,
                                  "src": "10690:12:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "-",
                                "rightExpression": {
                                  "argumentTypes": null,
                                  "id": 736,
                                  "name": "otherOffset",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 718,
                                  "src": "10705:11:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "10690:26:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                },
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "id": 731,
                              "name": "keccak",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 529,
                              "src": "10663:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_bytes32_$",
                                "typeString": "function (bytes memory,uint256,uint256) pure returns (bytes32)"
                              }
                            },
                            "id": 738,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "10663:54:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "src": "10611:106:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "functionReturnParameters": 722,
                        "id": 740,
                        "nodeType": "Return",
                        "src": "10598:119:0"
                      }
                    ]
                  },
                  "documentation": null,
                  "id": 742,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "equals",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 719,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 712,
                        "name": "self",
                        "nodeType": "VariableDeclaration",
                        "scope": 742,
                        "src": "10472:17:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 711,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "10472:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 714,
                        "name": "offset",
                        "nodeType": "VariableDeclaration",
                        "scope": 742,
                        "src": "10495:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 713,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "10495:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 716,
                        "name": "other",
                        "nodeType": "VariableDeclaration",
                        "scope": 742,
                        "src": "10515:18:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 715,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "10515:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 718,
                        "name": "otherOffset",
                        "nodeType": "VariableDeclaration",
                        "scope": 742,
                        "src": "10539:19:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 717,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "10539:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "10466:96:0"
                  },
                  "returnParameters": {
                    "id": 722,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 721,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 742,
                        "src": "10586:4:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 720,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "10586:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "10585:6:0"
                  },
                  "scope": 1226,
                  "src": "10451:271:0",
                  "stateMutability": "pure",
                  "superFunction": null,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 770,
                    "nodeType": "Block",
                    "src": "11179:114:0",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "id": 768,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 759,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 753,
                                "name": "self",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 744,
                                "src": "11198:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              },
                              "id": 754,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "length",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "11198:11:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": ">=",
                            "rightExpression": {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 758,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "id": 755,
                                "name": "offset",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 746,
                                "src": "11213:6:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "+",
                              "rightExpression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 756,
                                  "name": "other",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 748,
                                  "src": "11222:5:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes_memory_ptr",
                                    "typeString": "bytes memory"
                                  }
                                },
                                "id": 757,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "length",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": null,
                                "src": "11222:12:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "11213:21:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "11198:36:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "&&",
                          "rightExpression": {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "id": 761,
                                "name": "self",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 744,
                                "src": "11251:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              },
                              {
                                "argumentTypes": null,
                                "id": 762,
                                "name": "offset",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 746,
                                "src": "11257:6:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              {
                                "argumentTypes": null,
                                "id": 763,
                                "name": "other",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 748,
                                "src": "11265:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              },
                              {
                                "argumentTypes": null,
                                "hexValue": "30",
                                "id": 764,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "11272:1:0",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              },
                              {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 765,
                                  "name": "other",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 748,
                                  "src": "11275:5:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes_memory_ptr",
                                    "typeString": "bytes memory"
                                  }
                                },
                                "id": 766,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "length",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": null,
                                "src": "11275:12:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                },
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                },
                                {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "id": 760,
                              "name": "equals",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [
                                710,
                                742,
                                771,
                                796
                              ],
                              "referencedDeclaration": 710,
                              "src": "11244:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$_t_bytes_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_bool_$",
                                "typeString": "function (bytes memory,uint256,bytes memory,uint256,uint256) pure returns (bool)"
                              }
                            },
                            "id": 767,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "11244:44:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "src": "11198:90:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "functionReturnParameters": 752,
                        "id": 769,
                        "nodeType": "Return",
                        "src": "11185:103:0"
                      }
                    ]
                  },
                  "documentation": null,
                  "id": 771,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "equals",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 749,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 744,
                        "name": "self",
                        "nodeType": "VariableDeclaration",
                        "scope": 771,
                        "src": "11084:17:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 743,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "11084:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 746,
                        "name": "offset",
                        "nodeType": "VariableDeclaration",
                        "scope": 771,
                        "src": "11107:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 745,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "11107:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 748,
                        "name": "other",
                        "nodeType": "VariableDeclaration",
                        "scope": 771,
                        "src": "11127:18:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 747,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "11127:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "11078:71:0"
                  },
                  "returnParameters": {
                    "id": 752,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 751,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 771,
                        "src": "11173:4:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 750,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "11173:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "11172:6:0"
                  },
                  "scope": 1226,
                  "src": "11063:230:0",
                  "stateMutability": "pure",
                  "superFunction": null,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 795,
                    "nodeType": "Block",
                    "src": "11630:93:0",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "id": 793,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 784,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 780,
                                "name": "self",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 773,
                                "src": "11649:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              },
                              "id": 781,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "length",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "11649:11:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "==",
                            "rightExpression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 782,
                                "name": "other",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 775,
                                "src": "11664:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              },
                              "id": 783,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "length",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "11664:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "11649:27:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "&&",
                          "rightExpression": {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "id": 786,
                                "name": "self",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 773,
                                "src": "11687:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              },
                              {
                                "argumentTypes": null,
                                "hexValue": "30",
                                "id": 787,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "11693:1:0",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              },
                              {
                                "argumentTypes": null,
                                "id": 788,
                                "name": "other",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 775,
                                "src": "11696:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              },
                              {
                                "argumentTypes": null,
                                "hexValue": "30",
                                "id": 789,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "11703:1:0",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              },
                              {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 790,
                                  "name": "self",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 773,
                                  "src": "11706:4:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes_memory_ptr",
                                    "typeString": "bytes memory"
                                  }
                                },
                                "id": 791,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "length",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": null,
                                "src": "11706:11:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                },
                                {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                },
                                {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "id": 785,
                              "name": "equals",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [
                                710,
                                742,
                                771,
                                796
                              ],
                              "referencedDeclaration": 710,
                              "src": "11680:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$_t_bytes_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_bool_$",
                                "typeString": "function (bytes memory,uint256,bytes memory,uint256,uint256) pure returns (bool)"
                              }
                            },
                            "id": 792,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "11680:38:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "src": "11649:69:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "functionReturnParameters": 779,
                        "id": 794,
                        "nodeType": "Return",
                        "src": "11636:82:0"
                      }
                    ]
                  },
                  "documentation": null,
                  "id": 796,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "equals",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 776,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 773,
                        "name": "self",
                        "nodeType": "VariableDeclaration",
                        "scope": 796,
                        "src": "11548:17:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 772,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "11548:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 775,
                        "name": "other",
                        "nodeType": "VariableDeclaration",
                        "scope": 796,
                        "src": "11567:18:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 774,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "11567:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "11547:39:0"
                  },
                  "returnParameters": {
                    "id": 779,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 778,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 796,
                        "src": "11622:4:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 777,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "11622:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "11621:6:0"
                  },
                  "scope": 1226,
                  "src": "11532:191:0",
                  "stateMutability": "pure",
                  "superFunction": null,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 811,
                    "nodeType": "Block",
                    "src": "12055:34:0",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "id": 806,
                                "name": "self",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 798,
                                "src": "12074:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              },
                              "id": 808,
                              "indexExpression": {
                                "argumentTypes": null,
                                "id": 807,
                                "name": "idx",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 800,
                                "src": "12079:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "12074:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes1",
                                "typeString": "bytes1"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes1",
                                "typeString": "bytes1"
                              }
                            ],
                            "id": 805,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "12068:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_uint8_$",
                              "typeString": "type(uint8)"
                            },
                            "typeName": "uint8"
                          },
                          "id": 809,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "12068:16:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint8",
                            "typeString": "uint8"
                          }
                        },
                        "functionReturnParameters": 804,
                        "id": 810,
                        "nodeType": "Return",
                        "src": "12061:23:0"
                      }
                    ]
                  },
                  "documentation": null,
                  "id": 812,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "readUint8",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 801,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 798,
                        "name": "self",
                        "nodeType": "VariableDeclaration",
                        "scope": 812,
                        "src": "11975:17:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 797,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "11975:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 800,
                        "name": "idx",
                        "nodeType": "VariableDeclaration",
                        "scope": 812,
                        "src": "11994:11:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 799,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "11994:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "11974:32:0"
                  },
                  "returnParameters": {
                    "id": 804,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 803,
                        "name": "ret",
                        "nodeType": "VariableDeclaration",
                        "scope": 812,
                        "src": "12042:9:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        },
                        "typeName": {
                          "id": 802,
                          "name": "uint8",
                          "nodeType": "ElementaryTypeName",
                          "src": "12042:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint8",
                            "typeString": "uint8"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "12041:11:0"
                  },
                  "scope": 1226,
                  "src": "11956:133:0",
                  "stateMutability": "pure",
                  "superFunction": null,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 831,
                    "nodeType": "Block",
                    "src": "12425:119:0",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 827,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 824,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "argumentTypes": null,
                                  "id": 822,
                                  "name": "idx",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 816,
                                  "src": "12439:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "+",
                                "rightExpression": {
                                  "argumentTypes": null,
                                  "hexValue": "32",
                                  "id": 823,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "12445:1:0",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_2_by_1",
                                    "typeString": "int_const 2"
                                  },
                                  "value": "2"
                                },
                                "src": "12439:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "<=",
                              "rightExpression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 825,
                                  "name": "self",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 814,
                                  "src": "12450:4:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes_memory_ptr",
                                    "typeString": "bytes memory"
                                  }
                                },
                                "id": 826,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "length",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": null,
                                "src": "12450:11:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "12439:22:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            ],
                            "id": 821,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              3346,
                              3347
                            ],
                            "referencedDeclaration": 3346,
                            "src": "12431:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                              "typeString": "function (bool) pure"
                            }
                          },
                          "id": 828,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "12431:31:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 829,
                        "nodeType": "ExpressionStatement",
                        "src": "12431:31:0"
                      },
                      {
                        "externalReferences": [
                          {
                            "self": {
                              "declaration": 814,
                              "isOffset": false,
                              "isSlot": false,
                              "src": "12510:4:0",
                              "valueSize": 1
                            }
                          },
                          {
                            "idx": {
                              "declaration": 816,
                              "isOffset": false,
                              "isSlot": false,
                              "src": "12520:3:0",
                              "valueSize": 1
                            }
                          },
                          {
                            "ret": {
                              "declaration": 819,
                              "isOffset": false,
                              "isSlot": false,
                              "src": "12485:3:0",
                              "valueSize": 1
                            }
                          }
                        ],
                        "id": 830,
                        "nodeType": "InlineAssembly",
                        "operations": "{\n    ret := and(mload(add(add(self, 2), idx)), 0xFFFF)\n}",
                        "src": "12468:72:0"
                      }
                    ]
                  },
                  "documentation": null,
                  "id": 832,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "readUint16",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 817,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 814,
                        "name": "self",
                        "nodeType": "VariableDeclaration",
                        "scope": 832,
                        "src": "12344:17:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 813,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "12344:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 816,
                        "name": "idx",
                        "nodeType": "VariableDeclaration",
                        "scope": 832,
                        "src": "12363:11:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 815,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "12363:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "12343:32:0"
                  },
                  "returnParameters": {
                    "id": 820,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 819,
                        "name": "ret",
                        "nodeType": "VariableDeclaration",
                        "scope": 832,
                        "src": "12411:10:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint16",
                          "typeString": "uint16"
                        },
                        "typeName": {
                          "id": 818,
                          "name": "uint16",
                          "nodeType": "ElementaryTypeName",
                          "src": "12411:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint16",
                            "typeString": "uint16"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "12410:12:0"
                  },
                  "scope": 1226,
                  "src": "12324:220:0",
                  "stateMutability": "pure",
                  "superFunction": null,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 851,
                    "nodeType": "Block",
                    "src": "12880:123:0",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 847,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 844,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "argumentTypes": null,
                                  "id": 842,
                                  "name": "idx",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 836,
                                  "src": "12894:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "+",
                                "rightExpression": {
                                  "argumentTypes": null,
                                  "hexValue": "34",
                                  "id": 843,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "12900:1:0",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_4_by_1",
                                    "typeString": "int_const 4"
                                  },
                                  "value": "4"
                                },
                                "src": "12894:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "<=",
                              "rightExpression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 845,
                                  "name": "self",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 834,
                                  "src": "12905:4:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes_memory_ptr",
                                    "typeString": "bytes memory"
                                  }
                                },
                                "id": 846,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "length",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": null,
                                "src": "12905:11:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "12894:22:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            ],
                            "id": 841,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              3346,
                              3347
                            ],
                            "referencedDeclaration": 3346,
                            "src": "12886:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                              "typeString": "function (bool) pure"
                            }
                          },
                          "id": 848,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "12886:31:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 849,
                        "nodeType": "ExpressionStatement",
                        "src": "12886:31:0"
                      },
                      {
                        "externalReferences": [
                          {
                            "self": {
                              "declaration": 834,
                              "isOffset": false,
                              "isSlot": false,
                              "src": "12965:4:0",
                              "valueSize": 1
                            }
                          },
                          {
                            "idx": {
                              "declaration": 836,
                              "isOffset": false,
                              "isSlot": false,
                              "src": "12975:3:0",
                              "valueSize": 1
                            }
                          },
                          {
                            "ret": {
                              "declaration": 839,
                              "isOffset": false,
                              "isSlot": false,
                              "src": "12940:3:0",
                              "valueSize": 1
                            }
                          }
                        ],
                        "id": 850,
                        "nodeType": "InlineAssembly",
                        "operations": "{\n    ret := and(mload(add(add(self, 4), idx)), 0xFFFFFFFF)\n}",
                        "src": "12923:76:0"
                      }
                    ]
                  },
                  "documentation": null,
                  "id": 852,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "readUint32",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 837,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 834,
                        "name": "self",
                        "nodeType": "VariableDeclaration",
                        "scope": 852,
                        "src": "12799:17:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 833,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "12799:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 836,
                        "name": "idx",
                        "nodeType": "VariableDeclaration",
                        "scope": 852,
                        "src": "12818:11:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 835,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "12818:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "12798:32:0"
                  },
                  "returnParameters": {
                    "id": 840,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 839,
                        "name": "ret",
                        "nodeType": "VariableDeclaration",
                        "scope": 852,
                        "src": "12866:10:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        },
                        "typeName": {
                          "id": 838,
                          "name": "uint32",
                          "nodeType": "ElementaryTypeName",
                          "src": "12866:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "12865:12:0"
                  },
                  "scope": 1226,
                  "src": "12779:224:0",
                  "stateMutability": "pure",
                  "superFunction": null,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 871,
                    "nodeType": "Block",
                    "src": "13315:108:0",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 867,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 864,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "argumentTypes": null,
                                  "id": 862,
                                  "name": "idx",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 856,
                                  "src": "13329:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "+",
                                "rightExpression": {
                                  "argumentTypes": null,
                                  "hexValue": "3332",
                                  "id": 863,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "13335:2:0",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_32_by_1",
                                    "typeString": "int_const 32"
                                  },
                                  "value": "32"
                                },
                                "src": "13329:8:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "<=",
                              "rightExpression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 865,
                                  "name": "self",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 854,
                                  "src": "13341:4:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes_memory_ptr",
                                    "typeString": "bytes memory"
                                  }
                                },
                                "id": 866,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "length",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": null,
                                "src": "13341:11:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "13329:23:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            ],
                            "id": 861,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              3346,
                              3347
                            ],
                            "referencedDeclaration": 3346,
                            "src": "13321:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                              "typeString": "function (bool) pure"
                            }
                          },
                          "id": 868,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "13321:32:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 869,
                        "nodeType": "ExpressionStatement",
                        "src": "13321:32:0"
                      },
                      {
                        "externalReferences": [
                          {
                            "self": {
                              "declaration": 854,
                              "isOffset": false,
                              "isSlot": false,
                              "src": "13397:4:0",
                              "valueSize": 1
                            }
                          },
                          {
                            "idx": {
                              "declaration": 856,
                              "isOffset": false,
                              "isSlot": false,
                              "src": "13408:3:0",
                              "valueSize": 1
                            }
                          },
                          {
                            "ret": {
                              "declaration": 859,
                              "isOffset": false,
                              "isSlot": false,
                              "src": "13376:3:0",
                              "valueSize": 1
                            }
                          }
                        ],
                        "id": 870,
                        "nodeType": "InlineAssembly",
                        "operations": "{\n    ret := mload(add(add(self, 32), idx))\n}",
                        "src": "13359:60:0"
                      }
                    ]
                  },
                  "documentation": null,
                  "id": 872,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "readBytes32",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 857,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 854,
                        "name": "self",
                        "nodeType": "VariableDeclaration",
                        "scope": 872,
                        "src": "13233:17:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 853,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "13233:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 856,
                        "name": "idx",
                        "nodeType": "VariableDeclaration",
                        "scope": 872,
                        "src": "13252:11:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 855,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "13252:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "13232:32:0"
                  },
                  "returnParameters": {
                    "id": 860,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 859,
                        "name": "ret",
                        "nodeType": "VariableDeclaration",
                        "scope": 872,
                        "src": "13300:11:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 858,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "13300:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "13299:13:0"
                  },
                  "scope": 1226,
                  "src": "13212:211:0",
                  "stateMutability": "pure",
                  "superFunction": null,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 891,
                    "nodeType": "Block",
                    "src": "13735:205:0",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 887,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 884,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "argumentTypes": null,
                                  "id": 882,
                                  "name": "idx",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 876,
                                  "src": "13749:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "+",
                                "rightExpression": {
                                  "argumentTypes": null,
                                  "hexValue": "3230",
                                  "id": 883,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "13755:2:0",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_20_by_1",
                                    "typeString": "int_const 20"
                                  },
                                  "value": "20"
                                },
                                "src": "13749:8:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "<=",
                              "rightExpression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 885,
                                  "name": "self",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 874,
                                  "src": "13761:4:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes_memory_ptr",
                                    "typeString": "bytes memory"
                                  }
                                },
                                "id": 886,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "length",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": null,
                                "src": "13761:11:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "13749:23:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            ],
                            "id": 881,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              3346,
                              3347
                            ],
                            "referencedDeclaration": 3346,
                            "src": "13741:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                              "typeString": "function (bool) pure"
                            }
                          },
                          "id": 888,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "13741:32:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 889,
                        "nodeType": "ExpressionStatement",
                        "src": "13741:32:0"
                      },
                      {
                        "externalReferences": [
                          {
                            "self": {
                              "declaration": 874,
                              "isOffset": false,
                              "isSlot": false,
                              "src": "13830:4:0",
                              "valueSize": 1
                            }
                          },
                          {
                            "idx": {
                              "declaration": 876,
                              "isOffset": false,
                              "isSlot": false,
                              "src": "13841:3:0",
                              "valueSize": 1
                            }
                          },
                          {
                            "ret": {
                              "declaration": 879,
                              "isOffset": false,
                              "isSlot": false,
                              "src": "13796:3:0",
                              "valueSize": 1
                            }
                          }
                        ],
                        "id": 890,
                        "nodeType": "InlineAssembly",
                        "operations": "{\n    ret := and(mload(add(add(self, 32), idx)), 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000)\n}",
                        "src": "13779:157:0"
                      }
                    ]
                  },
                  "documentation": null,
                  "id": 892,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "readBytes20",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 877,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 874,
                        "name": "self",
                        "nodeType": "VariableDeclaration",
                        "scope": 892,
                        "src": "13653:17:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 873,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "13653:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 876,
                        "name": "idx",
                        "nodeType": "VariableDeclaration",
                        "scope": 892,
                        "src": "13672:11:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 875,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "13672:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "13652:32:0"
                  },
                  "returnParameters": {
                    "id": 880,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 879,
                        "name": "ret",
                        "nodeType": "VariableDeclaration",
                        "scope": 892,
                        "src": "13720:11:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes20",
                          "typeString": "bytes20"
                        },
                        "typeName": {
                          "id": 878,
                          "name": "bytes20",
                          "nodeType": "ElementaryTypeName",
                          "src": "13720:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes20",
                            "typeString": "bytes20"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "13719:13:0"
                  },
                  "scope": 1226,
                  "src": "13632:308:0",
                  "stateMutability": "pure",
                  "superFunction": null,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 919,
                    "nodeType": "Block",
                    "src": "14303:198:0",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 906,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "id": 904,
                                "name": "len",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 898,
                                "src": "14317:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "<=",
                              "rightExpression": {
                                "argumentTypes": null,
                                "hexValue": "3332",
                                "id": 905,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "14324:2:0",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_32_by_1",
                                  "typeString": "int_const 32"
                                },
                                "value": "32"
                              },
                              "src": "14317:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            ],
                            "id": 903,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              3346,
                              3347
                            ],
                            "referencedDeclaration": 3346,
                            "src": "14309:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                              "typeString": "function (bool) pure"
                            }
                          },
                          "id": 907,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "14309:18:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 908,
                        "nodeType": "ExpressionStatement",
                        "src": "14309:18:0"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 915,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 912,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "argumentTypes": null,
                                  "id": 910,
                                  "name": "idx",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 896,
                                  "src": "14341:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "+",
                                "rightExpression": {
                                  "argumentTypes": null,
                                  "id": 911,
                                  "name": "len",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 898,
                                  "src": "14347:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "14341:9:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "<=",
                              "rightExpression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 913,
                                  "name": "self",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 894,
                                  "src": "14354:4:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes_memory_ptr",
                                    "typeString": "bytes memory"
                                  }
                                },
                                "id": 914,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "length",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": null,
                                "src": "14354:11:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "14341:24:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            ],
                            "id": 909,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              3346,
                              3347
                            ],
                            "referencedDeclaration": 3346,
                            "src": "14333:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                              "typeString": "function (bool) pure"
                            }
                          },
                          "id": 916,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "14333:33:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 917,
                        "nodeType": "ExpressionStatement",
                        "src": "14333:33:0"
                      },
                      {
                        "externalReferences": [
                          {
                            "len": {
                              "declaration": 898,
                              "isOffset": false,
                              "isSlot": false,
                              "src": "14426:3:0",
                              "valueSize": 1
                            }
                          },
                          {
                            "self": {
                              "declaration": 894,
                              "isOffset": false,
                              "isSlot": false,
                              "src": "14468:4:0",
                              "valueSize": 1
                            }
                          },
                          {
                            "idx": {
                              "declaration": 896,
                              "isOffset": false,
                              "isSlot": false,
                              "src": "14479:3:0",
                              "valueSize": 1
                            }
                          },
                          {
                            "ret": {
                              "declaration": 901,
                              "isOffset": false,
                              "isSlot": false,
                              "src": "14443:3:0",
                              "valueSize": 1
                            }
                          }
                        ],
                        "id": 918,
                        "nodeType": "InlineAssembly",
                        "operations": "{\n    let mask := not(sub(exp(256, sub(32, len)), 1))\n    ret := and(mload(add(add(self, 32), idx)), mask)\n}",
                        "src": "14372:125:0"
                      }
                    ]
                  },
                  "documentation": null,
                  "id": 920,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "readBytesN",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 899,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 894,
                        "name": "self",
                        "nodeType": "VariableDeclaration",
                        "scope": 920,
                        "src": "14211:17:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 893,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "14211:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 896,
                        "name": "idx",
                        "nodeType": "VariableDeclaration",
                        "scope": 920,
                        "src": "14234:11:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 895,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "14234:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 898,
                        "name": "len",
                        "nodeType": "VariableDeclaration",
                        "scope": 920,
                        "src": "14251:11:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 897,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "14251:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "14205:61:0"
                  },
                  "returnParameters": {
                    "id": 902,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 901,
                        "name": "ret",
                        "nodeType": "VariableDeclaration",
                        "scope": 920,
                        "src": "14290:11:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 900,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "14290:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "14289:13:0"
                  },
                  "scope": 1226,
                  "src": "14186:315:0",
                  "stateMutability": "pure",
                  "superFunction": null,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 959,
                    "nodeType": "Block",
                    "src": "14590:410:0",
                    "statements": [
                      {
                        "body": {
                          "id": 945,
                          "nodeType": "Block",
                          "src": "14671:100:0",
                          "statements": [
                            {
                              "externalReferences": [
                                {
                                  "dest": {
                                    "declaration": 922,
                                    "isOffset": false,
                                    "isSlot": false,
                                    "src": "14705:4:0",
                                    "valueSize": 1
                                  }
                                },
                                {
                                  "src": {
                                    "declaration": 924,
                                    "isOffset": false,
                                    "isSlot": false,
                                    "src": "14717:3:0",
                                    "valueSize": 1
                                  }
                                }
                              ],
                              "id": 936,
                              "nodeType": "InlineAssembly",
                              "operations": "{ mstore(dest, mload(src)) }",
                              "src": "14679:51:0"
                            },
                            {
                              "expression": {
                                "argumentTypes": null,
                                "id": 939,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "argumentTypes": null,
                                  "id": 937,
                                  "name": "dest",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 922,
                                  "src": "14737:4:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "+=",
                                "rightHandSide": {
                                  "argumentTypes": null,
                                  "hexValue": "3332",
                                  "id": 938,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "14745:2:0",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_32_by_1",
                                    "typeString": "int_const 32"
                                  },
                                  "value": "32"
                                },
                                "src": "14737:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 940,
                              "nodeType": "ExpressionStatement",
                              "src": "14737:10:0"
                            },
                            {
                              "expression": {
                                "argumentTypes": null,
                                "id": 943,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "argumentTypes": null,
                                  "id": 941,
                                  "name": "src",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 924,
                                  "src": "14755:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "+=",
                                "rightHandSide": {
                                  "argumentTypes": null,
                                  "hexValue": "3332",
                                  "id": 942,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "14762:2:0",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_32_by_1",
                                    "typeString": "int_const 32"
                                  },
                                  "value": "32"
                                },
                                "src": "14755:9:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 944,
                              "nodeType": "ExpressionStatement",
                              "src": "14755:9:0"
                            }
                          ]
                        },
                        "condition": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 931,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "id": 929,
                            "name": "len",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 926,
                            "src": "14649:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": ">=",
                          "rightExpression": {
                            "argumentTypes": null,
                            "hexValue": "3332",
                            "id": 930,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "14656:2:0",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_32_by_1",
                              "typeString": "int_const 32"
                            },
                            "value": "32"
                          },
                          "src": "14649:9:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 946,
                        "initializationExpression": null,
                        "loopExpression": {
                          "expression": {
                            "argumentTypes": null,
                            "id": 934,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftHandSide": {
                              "argumentTypes": null,
                              "id": 932,
                              "name": "len",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 926,
                              "src": "14660:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "Assignment",
                            "operator": "-=",
                            "rightHandSide": {
                              "argumentTypes": null,
                              "hexValue": "3332",
                              "id": 933,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "14667:2:0",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_32_by_1",
                                "typeString": "int_const 32"
                              },
                              "value": "32"
                            },
                            "src": "14660:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 935,
                          "nodeType": "ExpressionStatement",
                          "src": "14660:9:0"
                        },
                        "nodeType": "ForStatement",
                        "src": "14642:129:0"
                      },
                      {
                        "assignments": [
                          948
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 948,
                            "name": "mask",
                            "nodeType": "VariableDeclaration",
                            "scope": 959,
                            "src": "14805:12:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 947,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "14805:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "value": null,
                            "visibility": "internal"
                          }
                        ],
                        "id": 957,
                        "initialValue": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 956,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 954,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "hexValue": "323536",
                              "id": 949,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "14820:3:0",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_256_by_1",
                                "typeString": "int_const 256"
                              },
                              "value": "256"
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "**",
                            "rightExpression": {
                              "argumentTypes": null,
                              "components": [
                                {
                                  "argumentTypes": null,
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 952,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "argumentTypes": null,
                                    "hexValue": "3332",
                                    "id": 950,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "14826:2:0",
                                    "subdenomination": null,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_32_by_1",
                                      "typeString": "int_const 32"
                                    },
                                    "value": "32"
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "-",
                                  "rightExpression": {
                                    "argumentTypes": null,
                                    "id": 951,
                                    "name": "len",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 926,
                                    "src": "14831:3:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "src": "14826:8:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "id": 953,
                              "isConstant": false,
                              "isInlineArray": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "TupleExpression",
                              "src": "14825:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "14820:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "-",
                          "rightExpression": {
                            "argumentTypes": null,
                            "hexValue": "31",
                            "id": 955,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "14838:1:0",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_1_by_1",
                              "typeString": "int_const 1"
                            },
                            "value": "1"
                          },
                          "src": "14820:19:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "14805:34:0"
                      },
                      {
                        "externalReferences": [
                          {
                            "mask": {
                              "declaration": 948,
                              "isOffset": false,
                              "isSlot": false,
                              "src": "14943:4:0",
                              "valueSize": 1
                            }
                          },
                          {
                            "dest": {
                              "declaration": 922,
                              "isOffset": false,
                              "isSlot": false,
                              "src": "14962:4:0",
                              "valueSize": 1
                            }
                          },
                          {
                            "src": {
                              "declaration": 924,
                              "isOffset": false,
                              "isSlot": false,
                              "src": "14887:3:0",
                              "valueSize": 1
                            }
                          },
                          {
                            "mask": {
                              "declaration": 948,
                              "isOffset": false,
                              "isSlot": false,
                              "src": "14897:4:0",
                              "valueSize": 1
                            }
                          },
                          {
                            "dest": {
                              "declaration": 922,
                              "isOffset": false,
                              "isSlot": false,
                              "src": "14936:4:0",
                              "valueSize": 1
                            }
                          }
                        ],
                        "id": 958,
                        "nodeType": "InlineAssembly",
                        "operations": "{\n    let srcpart := and(mload(src), not(mask))\n    let destpart := and(mload(dest), mask)\n    mstore(dest, or(destpart, srcpart))\n}",
                        "src": "14845:151:0"
                      }
                    ]
                  },
                  "documentation": null,
                  "id": 960,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "memcpy",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 927,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 922,
                        "name": "dest",
                        "nodeType": "VariableDeclaration",
                        "scope": 960,
                        "src": "14526:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 921,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "14526:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 924,
                        "name": "src",
                        "nodeType": "VariableDeclaration",
                        "scope": 960,
                        "src": "14544:11:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 923,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "14544:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 926,
                        "name": "len",
                        "nodeType": "VariableDeclaration",
                        "scope": 960,
                        "src": "14561:11:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 925,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "14561:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "14520:56:0"
                  },
                  "returnParameters": {
                    "id": 928,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "14590:0:0"
                  },
                  "scope": 1226,
                  "src": "14505:495:0",
                  "stateMutability": "pure",
                  "superFunction": null,
                  "visibility": "private"
                },
                {
                  "body": {
                    "id": 1002,
                    "nodeType": "Block",
                    "src": "15331:256:0",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 977,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 974,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "argumentTypes": null,
                                  "id": 972,
                                  "name": "offset",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 964,
                                  "src": "15345:6:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "+",
                                "rightExpression": {
                                  "argumentTypes": null,
                                  "id": 973,
                                  "name": "len",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 966,
                                  "src": "15354:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "15345:12:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "<=",
                              "rightExpression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 975,
                                  "name": "self",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 962,
                                  "src": "15361:4:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes_memory_ptr",
                                    "typeString": "bytes memory"
                                  }
                                },
                                "id": 976,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "length",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": null,
                                "src": "15361:11:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "15345:27:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            ],
                            "id": 971,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              3346,
                              3347
                            ],
                            "referencedDeclaration": 3346,
                            "src": "15337:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                              "typeString": "function (bool) pure"
                            }
                          },
                          "id": 978,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "15337:36:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 979,
                        "nodeType": "ExpressionStatement",
                        "src": "15337:36:0"
                      },
                      {
                        "assignments": [
                          981
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 981,
                            "name": "ret",
                            "nodeType": "VariableDeclaration",
                            "scope": 1002,
                            "src": "15380:16:0",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes"
                            },
                            "typeName": {
                              "id": 980,
                              "name": "bytes",
                              "nodeType": "ElementaryTypeName",
                              "src": "15380:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_storage_ptr",
                                "typeString": "bytes"
                              }
                            },
                            "value": null,
                            "visibility": "internal"
                          }
                        ],
                        "id": 986,
                        "initialValue": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 984,
                              "name": "len",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 966,
                              "src": "15409:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 983,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "NewExpression",
                            "src": "15399:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_$",
                              "typeString": "function (uint256) pure returns (bytes memory)"
                            },
                            "typeName": {
                              "id": 982,
                              "name": "bytes",
                              "nodeType": "ElementaryTypeName",
                              "src": "15403:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_storage_ptr",
                                "typeString": "bytes"
                              }
                            }
                          },
                          "id": 985,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "15399:14:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_memory",
                            "typeString": "bytes memory"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "15380:33:0"
                      },
                      {
                        "assignments": [
                          988
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 988,
                            "name": "dest",
                            "nodeType": "VariableDeclaration",
                            "scope": 1002,
                            "src": "15419:12:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 987,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "15419:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "value": null,
                            "visibility": "internal"
                          }
                        ],
                        "id": 989,
                        "initialValue": null,
                        "nodeType": "VariableDeclarationStatement",
                        "src": "15419:12:0"
                      },
                      {
                        "assignments": [
                          991
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 991,
                            "name": "src",
                            "nodeType": "VariableDeclaration",
                            "scope": 1002,
                            "src": "15437:11:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 990,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "15437:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "value": null,
                            "visibility": "internal"
                          }
                        ],
                        "id": 992,
                        "initialValue": null,
                        "nodeType": "VariableDeclarationStatement",
                        "src": "15437:11:0"
                      },
                      {
                        "externalReferences": [
                          {
                            "ret": {
                              "declaration": 981,
                              "isOffset": false,
                              "isSlot": false,
                              "src": "15484:3:0",
                              "valueSize": 1
                            }
                          },
                          {
                            "self": {
                              "declaration": 962,
                              "isOffset": false,
                              "isSlot": false,
                              "src": "15514:4:0",
                              "valueSize": 1
                            }
                          },
                          {
                            "offset": {
                              "declaration": 964,
                              "isOffset": false,
                              "isSlot": false,
                              "src": "15525:6:0",
                              "valueSize": 1
                            }
                          },
                          {
                            "dest": {
                              "declaration": 988,
                              "isOffset": false,
                              "isSlot": false,
                              "src": "15472:4:0",
                              "valueSize": 1
                            }
                          },
                          {
                            "src": {
                              "declaration": 991,
                              "isOffset": false,
                              "isSlot": false,
                              "src": "15499:3:0",
                              "valueSize": 1
                            }
                          }
                        ],
                        "id": 993,
                        "nodeType": "InlineAssembly",
                        "operations": "{\n    dest := add(ret, 32)\n    src := add(add(self, 32), offset)\n}",
                        "src": "15455:83:0"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 995,
                              "name": "dest",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 988,
                              "src": "15550:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "id": 996,
                              "name": "src",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 991,
                              "src": "15556:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "id": 997,
                              "name": "len",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 966,
                              "src": "15561:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 994,
                            "name": "memcpy",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 960,
                            "src": "15543:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$",
                              "typeString": "function (uint256,uint256,uint256) pure"
                            }
                          },
                          "id": 998,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "15543:22:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 999,
                        "nodeType": "ExpressionStatement",
                        "src": "15543:22:0"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 1000,
                          "name": "ret",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 981,
                          "src": "15579:3:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes memory"
                          }
                        },
                        "functionReturnParameters": 970,
                        "id": 1001,
                        "nodeType": "Return",
                        "src": "15572:10:0"
                      }
                    ]
                  },
                  "documentation": null,
                  "id": 1003,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "substring",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 967,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 962,
                        "name": "self",
                        "nodeType": "VariableDeclaration",
                        "scope": 1003,
                        "src": "15235:17:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 961,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "15235:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 964,
                        "name": "offset",
                        "nodeType": "VariableDeclaration",
                        "scope": 1003,
                        "src": "15258:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 963,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "15258:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 966,
                        "name": "len",
                        "nodeType": "VariableDeclaration",
                        "scope": 1003,
                        "src": "15278:11:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 965,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "15278:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "15229:64:0"
                  },
                  "returnParameters": {
                    "id": 970,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 969,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 1003,
                        "src": "15317:12:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 968,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "15317:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "15316:14:0"
                  },
                  "scope": 1226,
                  "src": "15211:376:0",
                  "stateMutability": "pure",
                  "superFunction": null,
                  "visibility": "internal"
                },
                {
                  "constant": true,
                  "id": 1006,
                  "name": "base32HexTable",
                  "nodeType": "VariableDeclaration",
                  "scope": 1226,
                  "src": "15709:183:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 1004,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "15709:5:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "value": {
                    "argumentTypes": null,
                    "hexValue": "00010203040506070809ffffffffffffff0a0b0c0d0e0f101112131415161718191a1b1c1d1e1fffffffffffffffffffff0a0b0c0d0e0f101112131415161718191a1b1c1d1e1f",
                    "id": 1005,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "15745:147:0",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_9e82410dbf01e63aa72c1e18aee3deb28d15751fdce22e55714ad62f7fde606a",
                      "typeString": "literal_string (contains invalid UTF-8 sequence at position 10)"
                    },
                    "value": null
                  },
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 1224,
                    "nodeType": "Block",
                    "src": "16281:1120:0",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 1020,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "id": 1018,
                                "name": "len",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1012,
                                "src": "16295:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "<=",
                              "rightExpression": {
                                "argumentTypes": null,
                                "hexValue": "3532",
                                "id": 1019,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "16302:2:0",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_52_by_1",
                                  "typeString": "int_const 52"
                                },
                                "value": "52"
                              },
                              "src": "16295:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            ],
                            "id": 1017,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              3346,
                              3347
                            ],
                            "referencedDeclaration": 3346,
                            "src": "16287:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                              "typeString": "function (bool) pure"
                            }
                          },
                          "id": 1021,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "16287:18:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1022,
                        "nodeType": "ExpressionStatement",
                        "src": "16287:18:0"
                      },
                      {
                        "assignments": [
                          1024
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1024,
                            "name": "ret",
                            "nodeType": "VariableDeclaration",
                            "scope": 1224,
                            "src": "16312:11:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 1023,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "16312:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "value": null,
                            "visibility": "internal"
                          }
                        ],
                        "id": 1026,
                        "initialValue": {
                          "argumentTypes": null,
                          "hexValue": "30",
                          "id": 1025,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "16326:1:0",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "16312:15:0"
                      },
                      {
                        "assignments": [
                          1028
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1028,
                            "name": "decoded",
                            "nodeType": "VariableDeclaration",
                            "scope": 1224,
                            "src": "16333:13:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint8",
                              "typeString": "uint8"
                            },
                            "typeName": {
                              "id": 1027,
                              "name": "uint8",
                              "nodeType": "ElementaryTypeName",
                              "src": "16333:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint8",
                                "typeString": "uint8"
                              }
                            },
                            "value": null,
                            "visibility": "internal"
                          }
                        ],
                        "id": 1029,
                        "initialValue": null,
                        "nodeType": "VariableDeclarationStatement",
                        "src": "16333:13:0"
                      },
                      {
                        "body": {
                          "id": 1095,
                          "nodeType": "Block",
                          "src": "16386:270:0",
                          "statements": [
                            {
                              "assignments": [
                                1041
                              ],
                              "declarations": [
                                {
                                  "constant": false,
                                  "id": 1041,
                                  "name": "char",
                                  "nodeType": "VariableDeclaration",
                                  "scope": 1095,
                                  "src": "16394:11:0",
                                  "stateVariable": false,
                                  "storageLocation": "default",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes1",
                                    "typeString": "bytes1"
                                  },
                                  "typeName": {
                                    "id": 1040,
                                    "name": "bytes1",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "16394:6:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bytes1",
                                      "typeString": "bytes1"
                                    }
                                  },
                                  "value": null,
                                  "visibility": "internal"
                                }
                              ],
                              "id": 1047,
                              "initialValue": {
                                "argumentTypes": null,
                                "baseExpression": {
                                  "argumentTypes": null,
                                  "id": 1042,
                                  "name": "self",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1008,
                                  "src": "16408:4:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes_memory_ptr",
                                    "typeString": "bytes memory"
                                  }
                                },
                                "id": 1046,
                                "indexExpression": {
                                  "argumentTypes": null,
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 1045,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "argumentTypes": null,
                                    "id": 1043,
                                    "name": "off",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1010,
                                    "src": "16413:3:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "+",
                                  "rightExpression": {
                                    "argumentTypes": null,
                                    "id": 1044,
                                    "name": "i",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1031,
                                    "src": "16419:1:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "src": "16413:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "16408:13:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes1",
                                  "typeString": "bytes1"
                                }
                              },
                              "nodeType": "VariableDeclarationStatement",
                              "src": "16394:27:0"
                            },
                            {
                              "expression": {
                                "argumentTypes": null,
                                "arguments": [
                                  {
                                    "argumentTypes": null,
                                    "commonType": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    },
                                    "id": 1055,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "argumentTypes": null,
                                      "commonType": {
                                        "typeIdentifier": "t_bytes1",
                                        "typeString": "bytes1"
                                      },
                                      "id": 1051,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "argumentTypes": null,
                                        "id": 1049,
                                        "name": "char",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 1041,
                                        "src": "16437:4:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bytes1",
                                          "typeString": "bytes1"
                                        }
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": ">=",
                                      "rightExpression": {
                                        "argumentTypes": null,
                                        "hexValue": "30783330",
                                        "id": 1050,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "number",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "16445:4:0",
                                        "subdenomination": null,
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_rational_48_by_1",
                                          "typeString": "int_const 48"
                                        },
                                        "value": "0x30"
                                      },
                                      "src": "16437:12:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bool",
                                        "typeString": "bool"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "&&",
                                    "rightExpression": {
                                      "argumentTypes": null,
                                      "commonType": {
                                        "typeIdentifier": "t_bytes1",
                                        "typeString": "bytes1"
                                      },
                                      "id": 1054,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "argumentTypes": null,
                                        "id": 1052,
                                        "name": "char",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 1041,
                                        "src": "16453:4:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bytes1",
                                          "typeString": "bytes1"
                                        }
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": "<=",
                                      "rightExpression": {
                                        "argumentTypes": null,
                                        "hexValue": "30783741",
                                        "id": 1053,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "number",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "16461:4:0",
                                        "subdenomination": null,
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_rational_122_by_1",
                                          "typeString": "int_const 122"
                                        },
                                        "value": "0x7A"
                                      },
                                      "src": "16453:12:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bool",
                                        "typeString": "bool"
                                      }
                                    },
                                    "src": "16437:28:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  ],
                                  "id": 1048,
                                  "name": "require",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [
                                    3346,
                                    3347
                                  ],
                                  "referencedDeclaration": 3346,
                                  "src": "16429:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                                    "typeString": "function (bool) pure"
                                  }
                                },
                                "id": 1056,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "16429:37:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 1057,
                              "nodeType": "ExpressionStatement",
                              "src": "16429:37:0"
                            },
                            {
                              "expression": {
                                "argumentTypes": null,
                                "id": 1070,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "argumentTypes": null,
                                  "id": 1058,
                                  "name": "decoded",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1028,
                                  "src": "16474:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint8",
                                    "typeString": "uint8"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "argumentTypes": null,
                                  "arguments": [
                                    {
                                      "argumentTypes": null,
                                      "baseExpression": {
                                        "argumentTypes": null,
                                        "id": 1060,
                                        "name": "base32HexTable",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 1006,
                                        "src": "16490:14:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bytes_memory",
                                          "typeString": "bytes memory"
                                        }
                                      },
                                      "id": 1068,
                                      "indexExpression": {
                                        "argumentTypes": null,
                                        "commonType": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        },
                                        "id": 1067,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "leftExpression": {
                                          "argumentTypes": null,
                                          "arguments": [
                                            {
                                              "argumentTypes": null,
                                              "arguments": [
                                                {
                                                  "argumentTypes": null,
                                                  "id": 1063,
                                                  "name": "char",
                                                  "nodeType": "Identifier",
                                                  "overloadedDeclarations": [],
                                                  "referencedDeclaration": 1041,
                                                  "src": "16519:4:0",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_bytes1",
                                                    "typeString": "bytes1"
                                                  }
                                                }
                                              ],
                                              "expression": {
                                                "argumentTypes": [
                                                  {
                                                    "typeIdentifier": "t_bytes1",
                                                    "typeString": "bytes1"
                                                  }
                                                ],
                                                "id": 1062,
                                                "isConstant": false,
                                                "isLValue": false,
                                                "isPure": true,
                                                "lValueRequested": false,
                                                "nodeType": "ElementaryTypeNameExpression",
                                                "src": "16513:5:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_type$_t_uint8_$",
                                                  "typeString": "type(uint8)"
                                                },
                                                "typeName": "uint8"
                                              },
                                              "id": 1064,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": false,
                                              "kind": "typeConversion",
                                              "lValueRequested": false,
                                              "names": [],
                                              "nodeType": "FunctionCall",
                                              "src": "16513:11:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint8",
                                                "typeString": "uint8"
                                              }
                                            }
                                          ],
                                          "expression": {
                                            "argumentTypes": [
                                              {
                                                "typeIdentifier": "t_uint8",
                                                "typeString": "uint8"
                                              }
                                            ],
                                            "id": 1061,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": true,
                                            "lValueRequested": false,
                                            "nodeType": "ElementaryTypeNameExpression",
                                            "src": "16505:7:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_type$_t_uint256_$",
                                              "typeString": "type(uint256)"
                                            },
                                            "typeName": "uint256"
                                          },
                                          "id": 1065,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "kind": "typeConversion",
                                          "lValueRequested": false,
                                          "names": [],
                                          "nodeType": "FunctionCall",
                                          "src": "16505:20:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "nodeType": "BinaryOperation",
                                        "operator": "-",
                                        "rightExpression": {
                                          "argumentTypes": null,
                                          "hexValue": "30783330",
                                          "id": 1066,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": true,
                                          "kind": "number",
                                          "lValueRequested": false,
                                          "nodeType": "Literal",
                                          "src": "16528:4:0",
                                          "subdenomination": null,
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_rational_48_by_1",
                                            "typeString": "int_const 48"
                                          },
                                          "value": "0x30"
                                        },
                                        "src": "16505:27:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "nodeType": "IndexAccess",
                                      "src": "16490:43:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bytes1",
                                        "typeString": "bytes1"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_bytes1",
                                        "typeString": "bytes1"
                                      }
                                    ],
                                    "id": 1059,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "16484:5:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_uint8_$",
                                      "typeString": "type(uint8)"
                                    },
                                    "typeName": "uint8"
                                  },
                                  "id": 1069,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "16484:50:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint8",
                                    "typeString": "uint8"
                                  }
                                },
                                "src": "16474:60:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint8",
                                  "typeString": "uint8"
                                }
                              },
                              "id": 1071,
                              "nodeType": "ExpressionStatement",
                              "src": "16474:60:0"
                            },
                            {
                              "expression": {
                                "argumentTypes": null,
                                "arguments": [
                                  {
                                    "argumentTypes": null,
                                    "commonType": {
                                      "typeIdentifier": "t_uint8",
                                      "typeString": "uint8"
                                    },
                                    "id": 1075,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "argumentTypes": null,
                                      "id": 1073,
                                      "name": "decoded",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1028,
                                      "src": "16550:7:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint8",
                                        "typeString": "uint8"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "<=",
                                    "rightExpression": {
                                      "argumentTypes": null,
                                      "hexValue": "30783230",
                                      "id": 1074,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "16561:4:0",
                                      "subdenomination": null,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_32_by_1",
                                        "typeString": "int_const 32"
                                      },
                                      "value": "0x20"
                                    },
                                    "src": "16550:15:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  ],
                                  "id": 1072,
                                  "name": "require",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [
                                    3346,
                                    3347
                                  ],
                                  "referencedDeclaration": 3346,
                                  "src": "16542:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                                    "typeString": "function (bool) pure"
                                  }
                                },
                                "id": 1076,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "16542:24:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 1077,
                              "nodeType": "ExpressionStatement",
                              "src": "16542:24:0"
                            },
                            {
                              "condition": {
                                "argumentTypes": null,
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 1082,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "argumentTypes": null,
                                  "id": 1078,
                                  "name": "i",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1031,
                                  "src": "16578:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "==",
                                "rightExpression": {
                                  "argumentTypes": null,
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 1081,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "argumentTypes": null,
                                    "id": 1079,
                                    "name": "len",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1012,
                                    "src": "16583:3:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "-",
                                  "rightExpression": {
                                    "argumentTypes": null,
                                    "hexValue": "31",
                                    "id": 1080,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "16589:1:0",
                                    "subdenomination": null,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_1_by_1",
                                      "typeString": "int_const 1"
                                    },
                                    "value": "1"
                                  },
                                  "src": "16583:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "16578:12:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "falseBody": null,
                              "id": 1085,
                              "nodeType": "IfStatement",
                              "src": "16574:42:0",
                              "trueBody": {
                                "id": 1084,
                                "nodeType": "Block",
                                "src": "16592:24:0",
                                "statements": [
                                  {
                                    "id": 1083,
                                    "nodeType": "Break",
                                    "src": "16602:5:0"
                                  }
                                ]
                              }
                            },
                            {
                              "expression": {
                                "argumentTypes": null,
                                "id": 1093,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "argumentTypes": null,
                                  "id": 1086,
                                  "name": "ret",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1024,
                                  "src": "16623:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "argumentTypes": null,
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 1092,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "argumentTypes": null,
                                    "components": [
                                      {
                                        "argumentTypes": null,
                                        "commonType": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        },
                                        "id": 1089,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "leftExpression": {
                                          "argumentTypes": null,
                                          "id": 1087,
                                          "name": "ret",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 1024,
                                          "src": "16630:3:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "nodeType": "BinaryOperation",
                                        "operator": "<<",
                                        "rightExpression": {
                                          "argumentTypes": null,
                                          "hexValue": "35",
                                          "id": 1088,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": true,
                                          "kind": "number",
                                          "lValueRequested": false,
                                          "nodeType": "Literal",
                                          "src": "16637:1:0",
                                          "subdenomination": null,
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_rational_5_by_1",
                                            "typeString": "int_const 5"
                                          },
                                          "value": "5"
                                        },
                                        "src": "16630:8:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      }
                                    ],
                                    "id": 1090,
                                    "isConstant": false,
                                    "isInlineArray": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "TupleExpression",
                                    "src": "16629:10:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "|",
                                  "rightExpression": {
                                    "argumentTypes": null,
                                    "id": 1091,
                                    "name": "decoded",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1028,
                                    "src": "16642:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint8",
                                      "typeString": "uint8"
                                    }
                                  },
                                  "src": "16629:20:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "16623:26:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 1094,
                              "nodeType": "ExpressionStatement",
                              "src": "16623:26:0"
                            }
                          ]
                        },
                        "condition": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1036,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "id": 1034,
                            "name": "i",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1031,
                            "src": "16372:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "<",
                          "rightExpression": {
                            "argumentTypes": null,
                            "id": 1035,
                            "name": "len",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1012,
                            "src": "16376:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "16372:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 1096,
                        "initializationExpression": {
                          "assignments": [
                            1031
                          ],
                          "declarations": [
                            {
                              "constant": false,
                              "id": 1031,
                              "name": "i",
                              "nodeType": "VariableDeclaration",
                              "scope": 1096,
                              "src": "16357:9:0",
                              "stateVariable": false,
                              "storageLocation": "default",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "typeName": {
                                "id": 1030,
                                "name": "uint256",
                                "nodeType": "ElementaryTypeName",
                                "src": "16357:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "value": null,
                              "visibility": "internal"
                            }
                          ],
                          "id": 1033,
                          "initialValue": {
                            "argumentTypes": null,
                            "hexValue": "30",
                            "id": 1032,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "16369:1:0",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "nodeType": "VariableDeclarationStatement",
                          "src": "16357:13:0"
                        },
                        "loopExpression": {
                          "expression": {
                            "argumentTypes": null,
                            "id": 1038,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "UnaryOperation",
                            "operator": "++",
                            "prefix": false,
                            "src": "16381:3:0",
                            "subExpression": {
                              "argumentTypes": null,
                              "id": 1037,
                              "name": "i",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1031,
                              "src": "16381:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 1039,
                          "nodeType": "ExpressionStatement",
                          "src": "16381:3:0"
                        },
                        "nodeType": "ForStatement",
                        "src": "16352:304:0"
                      },
                      {
                        "assignments": [
                          1098
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1098,
                            "name": "bitlen",
                            "nodeType": "VariableDeclaration",
                            "scope": 1224,
                            "src": "16662:14:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 1097,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "16662:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "value": null,
                            "visibility": "internal"
                          }
                        ],
                        "id": 1102,
                        "initialValue": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1101,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "id": 1099,
                            "name": "len",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1012,
                            "src": "16679:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "*",
                          "rightExpression": {
                            "argumentTypes": null,
                            "hexValue": "35",
                            "id": 1100,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "16685:1:0",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_5_by_1",
                              "typeString": "int_const 5"
                            },
                            "value": "5"
                          },
                          "src": "16679:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "16662:24:0"
                      },
                      {
                        "condition": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1107,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 1105,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "id": 1103,
                              "name": "len",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1012,
                              "src": "16696:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "%",
                            "rightExpression": {
                              "argumentTypes": null,
                              "hexValue": "38",
                              "id": 1104,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "16702:1:0",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_8_by_1",
                                "typeString": "int_const 8"
                              },
                              "value": "8"
                            },
                            "src": "16696:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "argumentTypes": null,
                            "hexValue": "30",
                            "id": 1106,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "16707:1:0",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "16696:12:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": {
                          "condition": {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 1122,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 1120,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "id": 1118,
                                "name": "len",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1012,
                                "src": "16807:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "%",
                              "rightExpression": {
                                "argumentTypes": null,
                                "hexValue": "38",
                                "id": 1119,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "16813:1:0",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_8_by_1",
                                  "typeString": "int_const 8"
                                },
                                "value": "8"
                              },
                              "src": "16807:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "==",
                            "rightExpression": {
                              "argumentTypes": null,
                              "hexValue": "32",
                              "id": 1121,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "16818:1:0",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_2_by_1",
                                "typeString": "int_const 2"
                              },
                              "value": "2"
                            },
                            "src": "16807:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "falseBody": {
                            "condition": {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 1144,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 1142,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "argumentTypes": null,
                                  "id": 1140,
                                  "name": "len",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1012,
                                  "src": "16937:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "%",
                                "rightExpression": {
                                  "argumentTypes": null,
                                  "hexValue": "38",
                                  "id": 1141,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "16943:1:0",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_8_by_1",
                                    "typeString": "int_const 8"
                                  },
                                  "value": "8"
                                },
                                "src": "16937:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "argumentTypes": null,
                                "hexValue": "34",
                                "id": 1143,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "16948:1:0",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_4_by_1",
                                  "typeString": "int_const 4"
                                },
                                "value": "4"
                              },
                              "src": "16937:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "falseBody": {
                              "condition": {
                                "argumentTypes": null,
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 1166,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "argumentTypes": null,
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 1164,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "argumentTypes": null,
                                    "id": 1162,
                                    "name": "len",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1012,
                                    "src": "17069:3:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "%",
                                  "rightExpression": {
                                    "argumentTypes": null,
                                    "hexValue": "38",
                                    "id": 1163,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "17075:1:0",
                                    "subdenomination": null,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_8_by_1",
                                      "typeString": "int_const 8"
                                    },
                                    "value": "8"
                                  },
                                  "src": "17069:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "==",
                                "rightExpression": {
                                  "argumentTypes": null,
                                  "hexValue": "35",
                                  "id": 1165,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "17080:1:0",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_5_by_1",
                                    "typeString": "int_const 5"
                                  },
                                  "value": "5"
                                },
                                "src": "17069:12:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "falseBody": {
                                "condition": {
                                  "argumentTypes": null,
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 1188,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "argumentTypes": null,
                                    "commonType": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    "id": 1186,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "argumentTypes": null,
                                      "id": 1184,
                                      "name": "len",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1012,
                                      "src": "17201:3:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "%",
                                    "rightExpression": {
                                      "argumentTypes": null,
                                      "hexValue": "38",
                                      "id": 1185,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "17207:1:0",
                                      "subdenomination": null,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_8_by_1",
                                        "typeString": "int_const 8"
                                      },
                                      "value": "8"
                                    },
                                    "src": "17201:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "==",
                                  "rightExpression": {
                                    "argumentTypes": null,
                                    "hexValue": "37",
                                    "id": 1187,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "17212:1:0",
                                    "subdenomination": null,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_7_by_1",
                                      "typeString": "int_const 7"
                                    },
                                    "value": "7"
                                  },
                                  "src": "17201:12:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                },
                                "falseBody": {
                                  "id": 1209,
                                  "nodeType": "Block",
                                  "src": "17330:23:0",
                                  "statements": [
                                    {
                                      "expression": {
                                        "argumentTypes": null,
                                        "arguments": [],
                                        "expression": {
                                          "argumentTypes": [],
                                          "id": 1206,
                                          "name": "revert",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [
                                            3348,
                                            3349
                                          ],
                                          "referencedDeclaration": 3348,
                                          "src": "17338:6:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_function_revert_pure$__$returns$__$",
                                            "typeString": "function () pure"
                                          }
                                        },
                                        "id": 1207,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "kind": "functionCall",
                                        "lValueRequested": false,
                                        "names": [],
                                        "nodeType": "FunctionCall",
                                        "src": "17338:8:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_tuple$__$",
                                          "typeString": "tuple()"
                                        }
                                      },
                                      "id": 1208,
                                      "nodeType": "ExpressionStatement",
                                      "src": "17338:8:0"
                                    }
                                  ]
                                },
                                "id": 1210,
                                "nodeType": "IfStatement",
                                "src": "17197:156:0",
                                "trueBody": {
                                  "id": 1205,
                                  "nodeType": "Block",
                                  "src": "17215:109:0",
                                  "statements": [
                                    {
                                      "expression": {
                                        "argumentTypes": null,
                                        "id": 1199,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "leftHandSide": {
                                          "argumentTypes": null,
                                          "id": 1189,
                                          "name": "ret",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 1024,
                                          "src": "17265:3:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "nodeType": "Assignment",
                                        "operator": "=",
                                        "rightHandSide": {
                                          "argumentTypes": null,
                                          "commonType": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          },
                                          "id": 1198,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "leftExpression": {
                                            "argumentTypes": null,
                                            "components": [
                                              {
                                                "argumentTypes": null,
                                                "commonType": {
                                                  "typeIdentifier": "t_uint256",
                                                  "typeString": "uint256"
                                                },
                                                "id": 1192,
                                                "isConstant": false,
                                                "isLValue": false,
                                                "isPure": false,
                                                "lValueRequested": false,
                                                "leftExpression": {
                                                  "argumentTypes": null,
                                                  "id": 1190,
                                                  "name": "ret",
                                                  "nodeType": "Identifier",
                                                  "overloadedDeclarations": [],
                                                  "referencedDeclaration": 1024,
                                                  "src": "17272:3:0",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_uint256",
                                                    "typeString": "uint256"
                                                  }
                                                },
                                                "nodeType": "BinaryOperation",
                                                "operator": "<<",
                                                "rightExpression": {
                                                  "argumentTypes": null,
                                                  "hexValue": "32",
                                                  "id": 1191,
                                                  "isConstant": false,
                                                  "isLValue": false,
                                                  "isPure": true,
                                                  "kind": "number",
                                                  "lValueRequested": false,
                                                  "nodeType": "Literal",
                                                  "src": "17279:1:0",
                                                  "subdenomination": null,
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_rational_2_by_1",
                                                    "typeString": "int_const 2"
                                                  },
                                                  "value": "2"
                                                },
                                                "src": "17272:8:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_uint256",
                                                  "typeString": "uint256"
                                                }
                                              }
                                            ],
                                            "id": 1193,
                                            "isConstant": false,
                                            "isInlineArray": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "nodeType": "TupleExpression",
                                            "src": "17271:10:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          },
                                          "nodeType": "BinaryOperation",
                                          "operator": "|",
                                          "rightExpression": {
                                            "argumentTypes": null,
                                            "components": [
                                              {
                                                "argumentTypes": null,
                                                "commonType": {
                                                  "typeIdentifier": "t_uint8",
                                                  "typeString": "uint8"
                                                },
                                                "id": 1196,
                                                "isConstant": false,
                                                "isLValue": false,
                                                "isPure": false,
                                                "lValueRequested": false,
                                                "leftExpression": {
                                                  "argumentTypes": null,
                                                  "id": 1194,
                                                  "name": "decoded",
                                                  "nodeType": "Identifier",
                                                  "overloadedDeclarations": [],
                                                  "referencedDeclaration": 1028,
                                                  "src": "17285:7:0",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_uint8",
                                                    "typeString": "uint8"
                                                  }
                                                },
                                                "nodeType": "BinaryOperation",
                                                "operator": ">>",
                                                "rightExpression": {
                                                  "argumentTypes": null,
                                                  "hexValue": "33",
                                                  "id": 1195,
                                                  "isConstant": false,
                                                  "isLValue": false,
                                                  "isPure": true,
                                                  "kind": "number",
                                                  "lValueRequested": false,
                                                  "nodeType": "Literal",
                                                  "src": "17296:1:0",
                                                  "subdenomination": null,
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_rational_3_by_1",
                                                    "typeString": "int_const 3"
                                                  },
                                                  "value": "3"
                                                },
                                                "src": "17285:12:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_uint8",
                                                  "typeString": "uint8"
                                                }
                                              }
                                            ],
                                            "id": 1197,
                                            "isConstant": false,
                                            "isInlineArray": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "nodeType": "TupleExpression",
                                            "src": "17284:14:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint8",
                                              "typeString": "uint8"
                                            }
                                          },
                                          "src": "17271:27:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "src": "17265:33:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "id": 1200,
                                      "nodeType": "ExpressionStatement",
                                      "src": "17265:33:0"
                                    },
                                    {
                                      "expression": {
                                        "argumentTypes": null,
                                        "id": 1203,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "leftHandSide": {
                                          "argumentTypes": null,
                                          "id": 1201,
                                          "name": "bitlen",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 1098,
                                          "src": "17306:6:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "nodeType": "Assignment",
                                        "operator": "-=",
                                        "rightHandSide": {
                                          "argumentTypes": null,
                                          "hexValue": "33",
                                          "id": 1202,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": true,
                                          "kind": "number",
                                          "lValueRequested": false,
                                          "nodeType": "Literal",
                                          "src": "17316:1:0",
                                          "subdenomination": null,
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_rational_3_by_1",
                                            "typeString": "int_const 3"
                                          },
                                          "value": "3"
                                        },
                                        "src": "17306:11:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "id": 1204,
                                      "nodeType": "ExpressionStatement",
                                      "src": "17306:11:0"
                                    }
                                  ]
                                }
                              },
                              "id": 1211,
                              "nodeType": "IfStatement",
                              "src": "17065:288:0",
                              "trueBody": {
                                "id": 1183,
                                "nodeType": "Block",
                                "src": "17083:108:0",
                                "statements": [
                                  {
                                    "expression": {
                                      "argumentTypes": null,
                                      "id": 1177,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftHandSide": {
                                        "argumentTypes": null,
                                        "id": 1167,
                                        "name": "ret",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 1024,
                                        "src": "17132:3:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "nodeType": "Assignment",
                                      "operator": "=",
                                      "rightHandSide": {
                                        "argumentTypes": null,
                                        "commonType": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        },
                                        "id": 1176,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "leftExpression": {
                                          "argumentTypes": null,
                                          "components": [
                                            {
                                              "argumentTypes": null,
                                              "commonType": {
                                                "typeIdentifier": "t_uint256",
                                                "typeString": "uint256"
                                              },
                                              "id": 1170,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": false,
                                              "lValueRequested": false,
                                              "leftExpression": {
                                                "argumentTypes": null,
                                                "id": 1168,
                                                "name": "ret",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 1024,
                                                "src": "17139:3:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_uint256",
                                                  "typeString": "uint256"
                                                }
                                              },
                                              "nodeType": "BinaryOperation",
                                              "operator": "<<",
                                              "rightExpression": {
                                                "argumentTypes": null,
                                                "hexValue": "34",
                                                "id": 1169,
                                                "isConstant": false,
                                                "isLValue": false,
                                                "isPure": true,
                                                "kind": "number",
                                                "lValueRequested": false,
                                                "nodeType": "Literal",
                                                "src": "17146:1:0",
                                                "subdenomination": null,
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_rational_4_by_1",
                                                  "typeString": "int_const 4"
                                                },
                                                "value": "4"
                                              },
                                              "src": "17139:8:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint256",
                                                "typeString": "uint256"
                                              }
                                            }
                                          ],
                                          "id": 1171,
                                          "isConstant": false,
                                          "isInlineArray": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "nodeType": "TupleExpression",
                                          "src": "17138:10:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "nodeType": "BinaryOperation",
                                        "operator": "|",
                                        "rightExpression": {
                                          "argumentTypes": null,
                                          "components": [
                                            {
                                              "argumentTypes": null,
                                              "commonType": {
                                                "typeIdentifier": "t_uint8",
                                                "typeString": "uint8"
                                              },
                                              "id": 1174,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": false,
                                              "lValueRequested": false,
                                              "leftExpression": {
                                                "argumentTypes": null,
                                                "id": 1172,
                                                "name": "decoded",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 1028,
                                                "src": "17152:7:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_uint8",
                                                  "typeString": "uint8"
                                                }
                                              },
                                              "nodeType": "BinaryOperation",
                                              "operator": ">>",
                                              "rightExpression": {
                                                "argumentTypes": null,
                                                "hexValue": "31",
                                                "id": 1173,
                                                "isConstant": false,
                                                "isLValue": false,
                                                "isPure": true,
                                                "kind": "number",
                                                "lValueRequested": false,
                                                "nodeType": "Literal",
                                                "src": "17163:1:0",
                                                "subdenomination": null,
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_rational_1_by_1",
                                                  "typeString": "int_const 1"
                                                },
                                                "value": "1"
                                              },
                                              "src": "17152:12:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint8",
                                                "typeString": "uint8"
                                              }
                                            }
                                          ],
                                          "id": 1175,
                                          "isConstant": false,
                                          "isInlineArray": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "nodeType": "TupleExpression",
                                          "src": "17151:14:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint8",
                                            "typeString": "uint8"
                                          }
                                        },
                                        "src": "17138:27:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "src": "17132:33:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "id": 1178,
                                    "nodeType": "ExpressionStatement",
                                    "src": "17132:33:0"
                                  },
                                  {
                                    "expression": {
                                      "argumentTypes": null,
                                      "id": 1181,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftHandSide": {
                                        "argumentTypes": null,
                                        "id": 1179,
                                        "name": "bitlen",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 1098,
                                        "src": "17173:6:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "nodeType": "Assignment",
                                      "operator": "-=",
                                      "rightHandSide": {
                                        "argumentTypes": null,
                                        "hexValue": "31",
                                        "id": 1180,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "number",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "17183:1:0",
                                        "subdenomination": null,
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_rational_1_by_1",
                                          "typeString": "int_const 1"
                                        },
                                        "value": "1"
                                      },
                                      "src": "17173:11:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "id": 1182,
                                    "nodeType": "ExpressionStatement",
                                    "src": "17173:11:0"
                                  }
                                ]
                              }
                            },
                            "id": 1212,
                            "nodeType": "IfStatement",
                            "src": "16933:420:0",
                            "trueBody": {
                              "id": 1161,
                              "nodeType": "Block",
                              "src": "16951:108:0",
                              "statements": [
                                {
                                  "expression": {
                                    "argumentTypes": null,
                                    "id": 1155,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftHandSide": {
                                      "argumentTypes": null,
                                      "id": 1145,
                                      "name": "ret",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1024,
                                      "src": "17000:3:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "Assignment",
                                    "operator": "=",
                                    "rightHandSide": {
                                      "argumentTypes": null,
                                      "commonType": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      },
                                      "id": 1154,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "argumentTypes": null,
                                        "components": [
                                          {
                                            "argumentTypes": null,
                                            "commonType": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            },
                                            "id": 1148,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "leftExpression": {
                                              "argumentTypes": null,
                                              "id": 1146,
                                              "name": "ret",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 1024,
                                              "src": "17007:3:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint256",
                                                "typeString": "uint256"
                                              }
                                            },
                                            "nodeType": "BinaryOperation",
                                            "operator": "<<",
                                            "rightExpression": {
                                              "argumentTypes": null,
                                              "hexValue": "31",
                                              "id": 1147,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": true,
                                              "kind": "number",
                                              "lValueRequested": false,
                                              "nodeType": "Literal",
                                              "src": "17014:1:0",
                                              "subdenomination": null,
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_rational_1_by_1",
                                                "typeString": "int_const 1"
                                              },
                                              "value": "1"
                                            },
                                            "src": "17007:8:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          }
                                        ],
                                        "id": 1149,
                                        "isConstant": false,
                                        "isInlineArray": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "nodeType": "TupleExpression",
                                        "src": "17006:10:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": "|",
                                      "rightExpression": {
                                        "argumentTypes": null,
                                        "components": [
                                          {
                                            "argumentTypes": null,
                                            "commonType": {
                                              "typeIdentifier": "t_uint8",
                                              "typeString": "uint8"
                                            },
                                            "id": 1152,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "leftExpression": {
                                              "argumentTypes": null,
                                              "id": 1150,
                                              "name": "decoded",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 1028,
                                              "src": "17020:7:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint8",
                                                "typeString": "uint8"
                                              }
                                            },
                                            "nodeType": "BinaryOperation",
                                            "operator": ">>",
                                            "rightExpression": {
                                              "argumentTypes": null,
                                              "hexValue": "34",
                                              "id": 1151,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": true,
                                              "kind": "number",
                                              "lValueRequested": false,
                                              "nodeType": "Literal",
                                              "src": "17031:1:0",
                                              "subdenomination": null,
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_rational_4_by_1",
                                                "typeString": "int_const 4"
                                              },
                                              "value": "4"
                                            },
                                            "src": "17020:12:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint8",
                                              "typeString": "uint8"
                                            }
                                          }
                                        ],
                                        "id": 1153,
                                        "isConstant": false,
                                        "isInlineArray": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "nodeType": "TupleExpression",
                                        "src": "17019:14:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint8",
                                          "typeString": "uint8"
                                        }
                                      },
                                      "src": "17006:27:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "src": "17000:33:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "id": 1156,
                                  "nodeType": "ExpressionStatement",
                                  "src": "17000:33:0"
                                },
                                {
                                  "expression": {
                                    "argumentTypes": null,
                                    "id": 1159,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftHandSide": {
                                      "argumentTypes": null,
                                      "id": 1157,
                                      "name": "bitlen",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1098,
                                      "src": "17041:6:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "Assignment",
                                    "operator": "-=",
                                    "rightHandSide": {
                                      "argumentTypes": null,
                                      "hexValue": "34",
                                      "id": 1158,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "17051:1:0",
                                      "subdenomination": null,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_4_by_1",
                                        "typeString": "int_const 4"
                                      },
                                      "value": "4"
                                    },
                                    "src": "17041:11:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "id": 1160,
                                  "nodeType": "ExpressionStatement",
                                  "src": "17041:11:0"
                                }
                              ]
                            }
                          },
                          "id": 1213,
                          "nodeType": "IfStatement",
                          "src": "16803:550:0",
                          "trueBody": {
                            "id": 1139,
                            "nodeType": "Block",
                            "src": "16821:106:0",
                            "statements": [
                              {
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 1133,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftHandSide": {
                                    "argumentTypes": null,
                                    "id": 1123,
                                    "name": "ret",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1024,
                                    "src": "16868:3:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "Assignment",
                                  "operator": "=",
                                  "rightHandSide": {
                                    "argumentTypes": null,
                                    "commonType": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    "id": 1132,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "argumentTypes": null,
                                      "components": [
                                        {
                                          "argumentTypes": null,
                                          "commonType": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          },
                                          "id": 1126,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "leftExpression": {
                                            "argumentTypes": null,
                                            "id": 1124,
                                            "name": "ret",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 1024,
                                            "src": "16875:3:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          },
                                          "nodeType": "BinaryOperation",
                                          "operator": "<<",
                                          "rightExpression": {
                                            "argumentTypes": null,
                                            "hexValue": "33",
                                            "id": 1125,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": true,
                                            "kind": "number",
                                            "lValueRequested": false,
                                            "nodeType": "Literal",
                                            "src": "16882:1:0",
                                            "subdenomination": null,
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_rational_3_by_1",
                                              "typeString": "int_const 3"
                                            },
                                            "value": "3"
                                          },
                                          "src": "16875:8:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        }
                                      ],
                                      "id": 1127,
                                      "isConstant": false,
                                      "isInlineArray": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "nodeType": "TupleExpression",
                                      "src": "16874:10:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "|",
                                    "rightExpression": {
                                      "argumentTypes": null,
                                      "components": [
                                        {
                                          "argumentTypes": null,
                                          "commonType": {
                                            "typeIdentifier": "t_uint8",
                                            "typeString": "uint8"
                                          },
                                          "id": 1130,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "leftExpression": {
                                            "argumentTypes": null,
                                            "id": 1128,
                                            "name": "decoded",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 1028,
                                            "src": "16888:7:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint8",
                                              "typeString": "uint8"
                                            }
                                          },
                                          "nodeType": "BinaryOperation",
                                          "operator": ">>",
                                          "rightExpression": {
                                            "argumentTypes": null,
                                            "hexValue": "32",
                                            "id": 1129,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": true,
                                            "kind": "number",
                                            "lValueRequested": false,
                                            "nodeType": "Literal",
                                            "src": "16899:1:0",
                                            "subdenomination": null,
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_rational_2_by_1",
                                              "typeString": "int_const 2"
                                            },
                                            "value": "2"
                                          },
                                          "src": "16888:12:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint8",
                                            "typeString": "uint8"
                                          }
                                        }
                                      ],
                                      "id": 1131,
                                      "isConstant": false,
                                      "isInlineArray": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "nodeType": "TupleExpression",
                                      "src": "16887:14:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint8",
                                        "typeString": "uint8"
                                      }
                                    },
                                    "src": "16874:27:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "src": "16868:33:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "id": 1134,
                                "nodeType": "ExpressionStatement",
                                "src": "16868:33:0"
                              },
                              {
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 1137,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftHandSide": {
                                    "argumentTypes": null,
                                    "id": 1135,
                                    "name": "bitlen",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1098,
                                    "src": "16909:6:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "Assignment",
                                  "operator": "-=",
                                  "rightHandSide": {
                                    "argumentTypes": null,
                                    "hexValue": "32",
                                    "id": 1136,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "16919:1:0",
                                    "subdenomination": null,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_2_by_1",
                                      "typeString": "int_const 2"
                                    },
                                    "value": "2"
                                  },
                                  "src": "16909:11:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "id": 1138,
                                "nodeType": "ExpressionStatement",
                                "src": "16909:11:0"
                              }
                            ]
                          }
                        },
                        "id": 1214,
                        "nodeType": "IfStatement",
                        "src": "16692:661:0",
                        "trueBody": {
                          "id": 1117,
                          "nodeType": "Block",
                          "src": "16710:87:0",
                          "statements": [
                            {
                              "expression": {
                                "argumentTypes": null,
                                "id": 1115,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "argumentTypes": null,
                                  "id": 1108,
                                  "name": "ret",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1024,
                                  "src": "16764:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "argumentTypes": null,
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 1114,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "argumentTypes": null,
                                    "components": [
                                      {
                                        "argumentTypes": null,
                                        "commonType": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        },
                                        "id": 1111,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "leftExpression": {
                                          "argumentTypes": null,
                                          "id": 1109,
                                          "name": "ret",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 1024,
                                          "src": "16771:3:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "nodeType": "BinaryOperation",
                                        "operator": "<<",
                                        "rightExpression": {
                                          "argumentTypes": null,
                                          "hexValue": "35",
                                          "id": 1110,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": true,
                                          "kind": "number",
                                          "lValueRequested": false,
                                          "nodeType": "Literal",
                                          "src": "16778:1:0",
                                          "subdenomination": null,
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_rational_5_by_1",
                                            "typeString": "int_const 5"
                                          },
                                          "value": "5"
                                        },
                                        "src": "16771:8:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      }
                                    ],
                                    "id": 1112,
                                    "isConstant": false,
                                    "isInlineArray": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "TupleExpression",
                                    "src": "16770:10:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "|",
                                  "rightExpression": {
                                    "argumentTypes": null,
                                    "id": 1113,
                                    "name": "decoded",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1028,
                                    "src": "16783:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint8",
                                      "typeString": "uint8"
                                    }
                                  },
                                  "src": "16770:20:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "16764:26:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 1116,
                              "nodeType": "ExpressionStatement",
                              "src": "16764:26:0"
                            }
                          ]
                        }
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 1221,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "id": 1216,
                                "name": "ret",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1024,
                                "src": "17374:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "<<",
                              "rightExpression": {
                                "argumentTypes": null,
                                "components": [
                                  {
                                    "argumentTypes": null,
                                    "commonType": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    "id": 1219,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "argumentTypes": null,
                                      "hexValue": "323536",
                                      "id": 1217,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "17382:3:0",
                                      "subdenomination": null,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_256_by_1",
                                        "typeString": "int_const 256"
                                      },
                                      "value": "256"
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "-",
                                    "rightExpression": {
                                      "argumentTypes": null,
                                      "id": 1218,
                                      "name": "bitlen",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1098,
                                      "src": "17388:6:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "src": "17382:12:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "id": 1220,
                                "isConstant": false,
                                "isInlineArray": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "TupleExpression",
                                "src": "17381:14:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "17374:21:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 1215,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "17366:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_bytes32_$",
                              "typeString": "type(bytes32)"
                            },
                            "typeName": "bytes32"
                          },
                          "id": 1222,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "17366:30:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "functionReturnParameters": 1016,
                        "id": 1223,
                        "nodeType": "Return",
                        "src": "17359:37:0"
                      }
                    ]
                  },
                  "documentation": "@dev Decodes unpadded base32 data of up to one word in length.\n@param self The data to decode.\n@param off Offset into the string to start at.\n@param len Number of characters to decode.\n@return The decoded data, left aligned.",
                  "id": 1225,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "base32HexDecodeWord",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1013,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1008,
                        "name": "self",
                        "nodeType": "VariableDeclaration",
                        "scope": 1225,
                        "src": "16193:17:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 1007,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "16193:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1010,
                        "name": "off",
                        "nodeType": "VariableDeclaration",
                        "scope": 1225,
                        "src": "16216:11:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1009,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "16216:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1012,
                        "name": "len",
                        "nodeType": "VariableDeclaration",
                        "scope": 1225,
                        "src": "16233:11:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1011,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "16233:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "16187:61:0"
                  },
                  "returnParameters": {
                    "id": 1016,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1015,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 1225,
                        "src": "16272:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 1014,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "16272:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "16271:9:0"
                  },
                  "scope": 1226,
                  "src": "16159:1242:0",
                  "stateMutability": "pure",
                  "superFunction": null,
                  "visibility": "internal"
                }
              ],
              "scope": 3329,
              "src": "6770:10633:0"
            },
            {
              "id": 1227,
              "literals": [
                "solidity",
                ">",
                "0.4",
                ".18"
              ],
              "nodeType": "PragmaDirective",
              "src": "17455:24:0"
            },
            {
              "baseContracts": [],
              "contractDependencies": [],
              "contractKind": "library",
              "documentation": "@dev A library for working with mutable byte buffers in Solidity.\n * Byte buffers are mutable and expandable, and provide a variety of primitives\nfor writing to them. At any time you can fetch a bytes object containing the\ncurrent contents of the buffer. The bytes object should not be stored between\noperations, as it may change due to resizing of the buffer.",
              "fullyImplemented": true,
              "id": 1696,
              "linearizedBaseContracts": [
                1696
              ],
              "name": "Buffer",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "canonicalName": "Buffer.buffer",
                  "id": 1232,
                  "members": [
                    {
                      "constant": false,
                      "id": 1229,
                      "name": "buf",
                      "nodeType": "VariableDeclaration",
                      "scope": 1232,
                      "src": "18152:9:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_storage_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 1228,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "18152:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1231,
                      "name": "capacity",
                      "nodeType": "VariableDeclaration",
                      "scope": 1232,
                      "src": "18167:16:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1230,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "18167:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "name": "buffer",
                  "nodeType": "StructDefinition",
                  "scope": 1696,
                  "src": "18132:56:0",
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 1266,
                    "nodeType": "Block",
                    "src": "18519:310:0",
                    "statements": [
                      {
                        "condition": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1245,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 1243,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "id": 1241,
                              "name": "capacity",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1236,
                              "src": "18529:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "%",
                            "rightExpression": {
                              "argumentTypes": null,
                              "hexValue": "3332",
                              "id": 1242,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "18540:2:0",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_32_by_1",
                                "typeString": "int_const 32"
                              },
                              "value": "32"
                            },
                            "src": "18529:13:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "!=",
                          "rightExpression": {
                            "argumentTypes": null,
                            "hexValue": "30",
                            "id": 1244,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "18546:1:0",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "18529:18:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": null,
                        "id": 1256,
                        "nodeType": "IfStatement",
                        "src": "18525:71:0",
                        "trueBody": {
                          "id": 1255,
                          "nodeType": "Block",
                          "src": "18549:47:0",
                          "statements": [
                            {
                              "expression": {
                                "argumentTypes": null,
                                "id": 1253,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "argumentTypes": null,
                                  "id": 1246,
                                  "name": "capacity",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1236,
                                  "src": "18557:8:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "+=",
                                "rightHandSide": {
                                  "argumentTypes": null,
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 1252,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "argumentTypes": null,
                                    "hexValue": "3332",
                                    "id": 1247,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "18569:2:0",
                                    "subdenomination": null,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_32_by_1",
                                      "typeString": "int_const 32"
                                    },
                                    "value": "32"
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "-",
                                  "rightExpression": {
                                    "argumentTypes": null,
                                    "components": [
                                      {
                                        "argumentTypes": null,
                                        "commonType": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        },
                                        "id": 1250,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "leftExpression": {
                                          "argumentTypes": null,
                                          "id": 1248,
                                          "name": "capacity",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 1236,
                                          "src": "18575:8:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "nodeType": "BinaryOperation",
                                        "operator": "%",
                                        "rightExpression": {
                                          "argumentTypes": null,
                                          "hexValue": "3332",
                                          "id": 1249,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": true,
                                          "kind": "number",
                                          "lValueRequested": false,
                                          "nodeType": "Literal",
                                          "src": "18586:2:0",
                                          "subdenomination": null,
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_rational_32_by_1",
                                            "typeString": "int_const 32"
                                          },
                                          "value": "32"
                                        },
                                        "src": "18575:13:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      }
                                    ],
                                    "id": 1251,
                                    "isConstant": false,
                                    "isInlineArray": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "TupleExpression",
                                    "src": "18574:15:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "src": "18569:20:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "18557:32:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 1254,
                              "nodeType": "ExpressionStatement",
                              "src": "18557:32:0"
                            }
                          ]
                        }
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 1261,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 1257,
                              "name": "buf",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1234,
                              "src": "18643:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_buffer_$1232_memory_ptr",
                                "typeString": "struct Buffer.buffer memory"
                              }
                            },
                            "id": 1259,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberName": "capacity",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1231,
                            "src": "18643:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "id": 1260,
                            "name": "capacity",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1236,
                            "src": "18658:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "18643:23:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 1262,
                        "nodeType": "ExpressionStatement",
                        "src": "18643:23:0"
                      },
                      {
                        "externalReferences": [
                          {
                            "buf": {
                              "declaration": 1234,
                              "isOffset": false,
                              "isSlot": false,
                              "src": "18725:3:0",
                              "valueSize": 1
                            }
                          },
                          {
                            "capacity": {
                              "declaration": 1236,
                              "isOffset": false,
                              "isSlot": false,
                              "src": "18792:8:0",
                              "valueSize": 1
                            }
                          }
                        ],
                        "id": 1263,
                        "nodeType": "InlineAssembly",
                        "operations": "{\n    let ptr := mload(0x40)\n    mstore(buf, ptr)\n    mstore(ptr, 0)\n    mstore(0x40, add(32, add(ptr, capacity)))\n}",
                        "src": "18672:137:0"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 1264,
                          "name": "buf",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1234,
                          "src": "18821:3:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_buffer_$1232_memory_ptr",
                            "typeString": "struct Buffer.buffer memory"
                          }
                        },
                        "functionReturnParameters": 1240,
                        "id": 1265,
                        "nodeType": "Return",
                        "src": "18814:10:0"
                      }
                    ]
                  },
                  "documentation": "@dev Initializes a buffer with an initial capacity.\n@param buf The buffer to initialize.\n@param capacity The number of bytes of space to allocate the buffer.\n@return The buffer, for chaining.",
                  "id": 1267,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "init",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1237,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1234,
                        "name": "buf",
                        "nodeType": "VariableDeclaration",
                        "scope": 1267,
                        "src": "18430:17:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_buffer_$1232_memory_ptr",
                          "typeString": "struct Buffer.buffer"
                        },
                        "typeName": {
                          "contractScope": null,
                          "id": 1233,
                          "name": "buffer",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 1232,
                          "src": "18430:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_buffer_$1232_storage_ptr",
                            "typeString": "struct Buffer.buffer"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1236,
                        "name": "capacity",
                        "nodeType": "VariableDeclaration",
                        "scope": 1267,
                        "src": "18449:16:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1235,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "18449:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "18429:37:0"
                  },
                  "returnParameters": {
                    "id": 1240,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1239,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 1267,
                        "src": "18502:13:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_buffer_$1232_memory_ptr",
                          "typeString": "struct Buffer.buffer"
                        },
                        "typeName": {
                          "contractScope": null,
                          "id": 1238,
                          "name": "buffer",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 1232,
                          "src": "18502:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_buffer_$1232_storage_ptr",
                            "typeString": "struct Buffer.buffer"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "18501:15:0"
                  },
                  "scope": 1696,
                  "src": "18416:413:0",
                  "stateMutability": "pure",
                  "superFunction": null,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 1292,
                    "nodeType": "Block",
                    "src": "19136:90:0",
                    "statements": [
                      {
                        "assignments": [
                          1275
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1275,
                            "name": "buf",
                            "nodeType": "VariableDeclaration",
                            "scope": 1292,
                            "src": "19142:17:0",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_buffer_$1232_memory_ptr",
                              "typeString": "struct Buffer.buffer"
                            },
                            "typeName": {
                              "contractScope": null,
                              "id": 1274,
                              "name": "buffer",
                              "nodeType": "UserDefinedTypeName",
                              "referencedDeclaration": 1232,
                              "src": "19142:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_buffer_$1232_storage_ptr",
                                "typeString": "struct Buffer.buffer"
                              }
                            },
                            "value": null,
                            "visibility": "internal"
                          }
                        ],
                        "id": 1276,
                        "initialValue": null,
                        "nodeType": "VariableDeclarationStatement",
                        "src": "19142:17:0"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 1281,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 1277,
                              "name": "buf",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1275,
                              "src": "19165:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_buffer_$1232_memory_ptr",
                                "typeString": "struct Buffer.buffer memory"
                              }
                            },
                            "id": 1279,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberName": "buf",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1229,
                            "src": "19165:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory",
                              "typeString": "bytes memory"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "id": 1280,
                            "name": "b",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1269,
                            "src": "19175:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          },
                          "src": "19165:11:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_memory",
                            "typeString": "bytes memory"
                          }
                        },
                        "id": 1282,
                        "nodeType": "ExpressionStatement",
                        "src": "19165:11:0"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 1288,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 1283,
                              "name": "buf",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1275,
                              "src": "19182:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_buffer_$1232_memory_ptr",
                                "typeString": "struct Buffer.buffer memory"
                              }
                            },
                            "id": 1285,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberName": "capacity",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1231,
                            "src": "19182:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 1286,
                              "name": "b",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1269,
                              "src": "19197:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            },
                            "id": 1287,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "length",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "19197:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "19182:23:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 1289,
                        "nodeType": "ExpressionStatement",
                        "src": "19182:23:0"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 1290,
                          "name": "buf",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1275,
                          "src": "19218:3:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_buffer_$1232_memory_ptr",
                            "typeString": "struct Buffer.buffer memory"
                          }
                        },
                        "functionReturnParameters": 1273,
                        "id": 1291,
                        "nodeType": "Return",
                        "src": "19211:10:0"
                      }
                    ]
                  },
                  "documentation": "@dev Initializes a new buffer from an existing bytes object.\n     Changes to the buffer may mutate the original value.\n@param b The bytes object to initialize the buffer with.\n@return A new buffer.",
                  "id": 1293,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "fromBytes",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1270,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1269,
                        "name": "b",
                        "nodeType": "VariableDeclaration",
                        "scope": 1293,
                        "src": "19082:14:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 1268,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "19082:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "19081:16:0"
                  },
                  "returnParameters": {
                    "id": 1273,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1272,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 1293,
                        "src": "19121:13:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_buffer_$1232_memory_ptr",
                          "typeString": "struct Buffer.buffer"
                        },
                        "typeName": {
                          "contractScope": null,
                          "id": 1271,
                          "name": "buffer",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 1232,
                          "src": "19121:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_buffer_$1232_storage_ptr",
                            "typeString": "struct Buffer.buffer"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "19120:15:0"
                  },
                  "scope": 1696,
                  "src": "19063:163:0",
                  "stateMutability": "pure",
                  "superFunction": null,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 1315,
                    "nodeType": "Block",
                    "src": "19296:90:0",
                    "statements": [
                      {
                        "assignments": [
                          1301
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1301,
                            "name": "oldbuf",
                            "nodeType": "VariableDeclaration",
                            "scope": 1315,
                            "src": "19302:19:0",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes"
                            },
                            "typeName": {
                              "id": 1300,
                              "name": "bytes",
                              "nodeType": "ElementaryTypeName",
                              "src": "19302:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_storage_ptr",
                                "typeString": "bytes"
                              }
                            },
                            "value": null,
                            "visibility": "internal"
                          }
                        ],
                        "id": 1304,
                        "initialValue": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 1302,
                            "name": "buf",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1295,
                            "src": "19324:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_buffer_$1232_memory_ptr",
                              "typeString": "struct Buffer.buffer memory"
                            }
                          },
                          "id": 1303,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "buf",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 1229,
                          "src": "19324:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_memory",
                            "typeString": "bytes memory"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "19302:29:0"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 1306,
                              "name": "buf",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1295,
                              "src": "19342:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_buffer_$1232_memory_ptr",
                                "typeString": "struct Buffer.buffer memory"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "id": 1307,
                              "name": "capacity",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1297,
                              "src": "19347:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_struct$_buffer_$1232_memory_ptr",
                                "typeString": "struct Buffer.buffer memory"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 1305,
                            "name": "init",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1267,
                            "src": "19337:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_struct$_buffer_$1232_memory_ptr_$_t_uint256_$returns$_t_struct$_buffer_$1232_memory_ptr_$",
                              "typeString": "function (struct Buffer.buffer memory,uint256) pure returns (struct Buffer.buffer memory)"
                            }
                          },
                          "id": 1308,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "19337:19:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_buffer_$1232_memory_ptr",
                            "typeString": "struct Buffer.buffer memory"
                          }
                        },
                        "id": 1309,
                        "nodeType": "ExpressionStatement",
                        "src": "19337:19:0"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 1311,
                              "name": "buf",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1295,
                              "src": "19369:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_buffer_$1232_memory_ptr",
                                "typeString": "struct Buffer.buffer memory"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "id": 1312,
                              "name": "oldbuf",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1301,
                              "src": "19374:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_struct$_buffer_$1232_memory_ptr",
                                "typeString": "struct Buffer.buffer memory"
                              },
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            ],
                            "id": 1310,
                            "name": "append",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              1448,
                              1468
                            ],
                            "referencedDeclaration": 1468,
                            "src": "19362:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_struct$_buffer_$1232_memory_ptr_$_t_bytes_memory_ptr_$returns$_t_struct$_buffer_$1232_memory_ptr_$",
                              "typeString": "function (struct Buffer.buffer memory,bytes memory) pure returns (struct Buffer.buffer memory)"
                            }
                          },
                          "id": 1313,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "19362:19:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_buffer_$1232_memory_ptr",
                            "typeString": "struct Buffer.buffer memory"
                          }
                        },
                        "id": 1314,
                        "nodeType": "ExpressionStatement",
                        "src": "19362:19:0"
                      }
                    ]
                  },
                  "documentation": null,
                  "id": 1316,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "resize",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1298,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1295,
                        "name": "buf",
                        "nodeType": "VariableDeclaration",
                        "scope": 1316,
                        "src": "19246:17:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_buffer_$1232_memory_ptr",
                          "typeString": "struct Buffer.buffer"
                        },
                        "typeName": {
                          "contractScope": null,
                          "id": 1294,
                          "name": "buffer",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 1232,
                          "src": "19246:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_buffer_$1232_storage_ptr",
                            "typeString": "struct Buffer.buffer"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1297,
                        "name": "capacity",
                        "nodeType": "VariableDeclaration",
                        "scope": 1316,
                        "src": "19265:16:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1296,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "19265:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "19245:37:0"
                  },
                  "returnParameters": {
                    "id": 1299,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "19296:0:0"
                  },
                  "scope": 1696,
                  "src": "19230:156:0",
                  "stateMutability": "pure",
                  "superFunction": null,
                  "visibility": "private"
                },
                {
                  "body": {
                    "id": 1334,
                    "nodeType": "Block",
                    "src": "19456:58:0",
                    "statements": [
                      {
                        "condition": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1327,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "id": 1325,
                            "name": "a",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1318,
                            "src": "19466:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": ">",
                          "rightExpression": {
                            "argumentTypes": null,
                            "id": 1326,
                            "name": "b",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1320,
                            "src": "19470:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "19466:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": null,
                        "id": 1331,
                        "nodeType": "IfStatement",
                        "src": "19462:34:0",
                        "trueBody": {
                          "id": 1330,
                          "nodeType": "Block",
                          "src": "19473:23:0",
                          "statements": [
                            {
                              "expression": {
                                "argumentTypes": null,
                                "id": 1328,
                                "name": "a",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1318,
                                "src": "19488:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "functionReturnParameters": 1324,
                              "id": 1329,
                              "nodeType": "Return",
                              "src": "19481:8:0"
                            }
                          ]
                        }
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 1332,
                          "name": "b",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1320,
                          "src": "19508:1:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 1324,
                        "id": 1333,
                        "nodeType": "Return",
                        "src": "19501:8:0"
                      }
                    ]
                  },
                  "documentation": null,
                  "id": 1335,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "max",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1321,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1318,
                        "name": "a",
                        "nodeType": "VariableDeclaration",
                        "scope": 1335,
                        "src": "19403:9:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1317,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "19403:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1320,
                        "name": "b",
                        "nodeType": "VariableDeclaration",
                        "scope": 1335,
                        "src": "19414:9:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1319,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "19414:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "19402:22:0"
                  },
                  "returnParameters": {
                    "id": 1324,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1323,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 1335,
                        "src": "19447:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1322,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "19447:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "19446:9:0"
                  },
                  "scope": 1696,
                  "src": "19390:124:0",
                  "stateMutability": "pure",
                  "superFunction": null,
                  "visibility": "private"
                },
                {
                  "body": {
                    "id": 1345,
                    "nodeType": "Block",
                    "src": "19729:97:0",
                    "statements": [
                      {
                        "externalReferences": [
                          {
                            "buf": {
                              "declaration": 1337,
                              "isOffset": false,
                              "isSlot": false,
                              "src": "19772:3:0",
                              "valueSize": 1
                            }
                          }
                        ],
                        "id": 1342,
                        "nodeType": "InlineAssembly",
                        "operations": "{\n    let bufptr := mload(buf)\n    mstore(bufptr, 0)\n}",
                        "src": "19735:71:0"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 1343,
                          "name": "buf",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1337,
                          "src": "19818:3:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_buffer_$1232_memory_ptr",
                            "typeString": "struct Buffer.buffer memory"
                          }
                        },
                        "functionReturnParameters": 1341,
                        "id": 1344,
                        "nodeType": "Return",
                        "src": "19811:10:0"
                      }
                    ]
                  },
                  "documentation": "@dev Sets buffer length to 0.\n@param buf The buffer to truncate.\n@return The original buffer, for chaining..",
                  "id": 1346,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "truncate",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1338,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1337,
                        "name": "buf",
                        "nodeType": "VariableDeclaration",
                        "scope": 1346,
                        "src": "19672:17:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_buffer_$1232_memory_ptr",
                          "typeString": "struct Buffer.buffer"
                        },
                        "typeName": {
                          "contractScope": null,
                          "id": 1336,
                          "name": "buffer",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 1232,
                          "src": "19672:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_buffer_$1232_storage_ptr",
                            "typeString": "struct Buffer.buffer"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "19671:19:0"
                  },
                  "returnParameters": {
                    "id": 1341,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1340,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 1346,
                        "src": "19714:13:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_buffer_$1232_memory_ptr",
                          "typeString": "struct Buffer.buffer"
                        },
                        "typeName": {
                          "contractScope": null,
                          "id": 1339,
                          "name": "buffer",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 1232,
                          "src": "19714:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_buffer_$1232_storage_ptr",
                            "typeString": "struct Buffer.buffer"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "19713:15:0"
                  },
                  "scope": 1696,
                  "src": "19654:172:0",
                  "stateMutability": "pure",
                  "superFunction": null,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 1426,
                    "nodeType": "Block",
                    "src": "20311:1037:0",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 1363,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "id": 1360,
                                "name": "len",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1354,
                                "src": "20325:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "<=",
                              "rightExpression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 1361,
                                  "name": "data",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1352,
                                  "src": "20332:4:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes_memory_ptr",
                                    "typeString": "bytes memory"
                                  }
                                },
                                "id": 1362,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "length",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": null,
                                "src": "20332:11:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "20325:18:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            ],
                            "id": 1359,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              3346,
                              3347
                            ],
                            "referencedDeclaration": 3346,
                            "src": "20317:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                              "typeString": "function (bool) pure"
                            }
                          },
                          "id": 1364,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "20317:27:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1365,
                        "nodeType": "ExpressionStatement",
                        "src": "20317:27:0"
                      },
                      {
                        "condition": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1371,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 1368,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "id": 1366,
                              "name": "off",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1350,
                              "src": "20355:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "+",
                            "rightExpression": {
                              "argumentTypes": null,
                              "id": 1367,
                              "name": "len",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1354,
                              "src": "20361:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "20355:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": ">",
                          "rightExpression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 1369,
                              "name": "buf",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1348,
                              "src": "20367:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_buffer_$1232_memory_ptr",
                                "typeString": "struct Buffer.buffer memory"
                              }
                            },
                            "id": 1370,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "capacity",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1231,
                            "src": "20367:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "20355:24:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": null,
                        "id": 1386,
                        "nodeType": "IfStatement",
                        "src": "20351:90:0",
                        "trueBody": {
                          "id": 1385,
                          "nodeType": "Block",
                          "src": "20381:60:0",
                          "statements": [
                            {
                              "expression": {
                                "argumentTypes": null,
                                "arguments": [
                                  {
                                    "argumentTypes": null,
                                    "id": 1373,
                                    "name": "buf",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1348,
                                    "src": "20396:3:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_buffer_$1232_memory_ptr",
                                      "typeString": "struct Buffer.buffer memory"
                                    }
                                  },
                                  {
                                    "argumentTypes": null,
                                    "commonType": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    "id": 1382,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "argumentTypes": null,
                                      "arguments": [
                                        {
                                          "argumentTypes": null,
                                          "expression": {
                                            "argumentTypes": null,
                                            "id": 1375,
                                            "name": "buf",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 1348,
                                            "src": "20405:3:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_struct$_buffer_$1232_memory_ptr",
                                              "typeString": "struct Buffer.buffer memory"
                                            }
                                          },
                                          "id": 1376,
                                          "isConstant": false,
                                          "isLValue": true,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "memberName": "capacity",
                                          "nodeType": "MemberAccess",
                                          "referencedDeclaration": 1231,
                                          "src": "20405:12:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        {
                                          "argumentTypes": null,
                                          "commonType": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          },
                                          "id": 1379,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "leftExpression": {
                                            "argumentTypes": null,
                                            "id": 1377,
                                            "name": "len",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 1354,
                                            "src": "20419:3:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          },
                                          "nodeType": "BinaryOperation",
                                          "operator": "+",
                                          "rightExpression": {
                                            "argumentTypes": null,
                                            "id": 1378,
                                            "name": "off",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 1350,
                                            "src": "20425:3:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          },
                                          "src": "20419:9:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          },
                                          {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        ],
                                        "id": 1374,
                                        "name": "max",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 1335,
                                        "src": "20401:3:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
                                          "typeString": "function (uint256,uint256) pure returns (uint256)"
                                        }
                                      },
                                      "id": 1380,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "functionCall",
                                      "lValueRequested": false,
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "20401:28:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "*",
                                    "rightExpression": {
                                      "argumentTypes": null,
                                      "hexValue": "32",
                                      "id": 1381,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "20432:1:0",
                                      "subdenomination": null,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_2_by_1",
                                        "typeString": "int_const 2"
                                      },
                                      "value": "2"
                                    },
                                    "src": "20401:32:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_struct$_buffer_$1232_memory_ptr",
                                      "typeString": "struct Buffer.buffer memory"
                                    },
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  ],
                                  "id": 1372,
                                  "name": "resize",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1316,
                                  "src": "20389:6:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_pure$_t_struct$_buffer_$1232_memory_ptr_$_t_uint256_$returns$__$",
                                    "typeString": "function (struct Buffer.buffer memory,uint256) pure"
                                  }
                                },
                                "id": 1383,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "20389:45:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 1384,
                              "nodeType": "ExpressionStatement",
                              "src": "20389:45:0"
                            }
                          ]
                        }
                      },
                      {
                        "assignments": [
                          1388
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1388,
                            "name": "dest",
                            "nodeType": "VariableDeclaration",
                            "scope": 1426,
                            "src": "20447:12:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 1387,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "20447:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "value": null,
                            "visibility": "internal"
                          }
                        ],
                        "id": 1389,
                        "initialValue": null,
                        "nodeType": "VariableDeclarationStatement",
                        "src": "20447:12:0"
                      },
                      {
                        "assignments": [
                          1391
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1391,
                            "name": "src",
                            "nodeType": "VariableDeclaration",
                            "scope": 1426,
                            "src": "20465:11:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 1390,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "20465:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "value": null,
                            "visibility": "internal"
                          }
                        ],
                        "id": 1392,
                        "initialValue": null,
                        "nodeType": "VariableDeclarationStatement",
                        "src": "20465:11:0"
                      },
                      {
                        "externalReferences": [
                          {
                            "off": {
                              "declaration": 1350,
                              "isOffset": false,
                              "isSlot": false,
                              "src": "20749:3:0",
                              "valueSize": 1
                            }
                          },
                          {
                            "len": {
                              "declaration": 1354,
                              "isOffset": false,
                              "isSlot": false,
                              "src": "20822:3:0",
                              "valueSize": 1
                            }
                          },
                          {
                            "off": {
                              "declaration": 1350,
                              "isOffset": false,
                              "isSlot": false,
                              "src": "20827:3:0",
                              "valueSize": 1
                            }
                          },
                          {
                            "data": {
                              "declaration": 1352,
                              "isOffset": false,
                              "isSlot": false,
                              "src": "20906:4:0",
                              "valueSize": 1
                            }
                          },
                          {
                            "len": {
                              "declaration": 1354,
                              "isOffset": false,
                              "isSlot": false,
                              "src": "20870:3:0",
                              "valueSize": 1
                            }
                          },
                          {
                            "off": {
                              "declaration": 1350,
                              "isOffset": false,
                              "isSlot": false,
                              "src": "20875:3:0",
                              "valueSize": 1
                            }
                          },
                          {
                            "buf": {
                              "declaration": 1348,
                              "isOffset": false,
                              "isSlot": false,
                              "src": "20562:3:0",
                              "valueSize": 1
                            }
                          },
                          {
                            "dest": {
                              "declaration": 1388,
                              "isOffset": false,
                              "isSlot": false,
                              "src": "20720:4:0",
                              "valueSize": 1
                            }
                          },
                          {
                            "src": {
                              "declaration": 1391,
                              "isOffset": false,
                              "isSlot": false,
                              "src": "20895:3:0",
                              "valueSize": 1
                            }
                          }
                        ],
                        "id": 1393,
                        "nodeType": "InlineAssembly",
                        "operations": "{\n    let bufptr := mload(buf)\n    let buflen := mload(bufptr)\n    dest := add(add(bufptr, 32), off)\n    if gt(add(len, off), buflen) { mstore(bufptr, add(len, off)) }\n    src := add(data, 32)\n}",
                        "src": "20482:439:0"
                      },
                      {
                        "body": {
                          "id": 1410,
                          "nodeType": "Block",
                          "src": "21002:100:0",
                          "statements": [
                            {
                              "externalReferences": [
                                {
                                  "dest": {
                                    "declaration": 1388,
                                    "isOffset": false,
                                    "isSlot": false,
                                    "src": "21036:4:0",
                                    "valueSize": 1
                                  }
                                },
                                {
                                  "src": {
                                    "declaration": 1391,
                                    "isOffset": false,
                                    "isSlot": false,
                                    "src": "21048:3:0",
                                    "valueSize": 1
                                  }
                                }
                              ],
                              "id": 1401,
                              "nodeType": "InlineAssembly",
                              "operations": "{ mstore(dest, mload(src)) }",
                              "src": "21010:51:0"
                            },
                            {
                              "expression": {
                                "argumentTypes": null,
                                "id": 1404,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "argumentTypes": null,
                                  "id": 1402,
                                  "name": "dest",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1388,
                                  "src": "21068:4:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "+=",
                                "rightHandSide": {
                                  "argumentTypes": null,
                                  "hexValue": "3332",
                                  "id": 1403,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "21076:2:0",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_32_by_1",
                                    "typeString": "int_const 32"
                                  },
                                  "value": "32"
                                },
                                "src": "21068:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 1405,
                              "nodeType": "ExpressionStatement",
                              "src": "21068:10:0"
                            },
                            {
                              "expression": {
                                "argumentTypes": null,
                                "id": 1408,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "argumentTypes": null,
                                  "id": 1406,
                                  "name": "src",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1391,
                                  "src": "21086:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "+=",
                                "rightHandSide": {
                                  "argumentTypes": null,
                                  "hexValue": "3332",
                                  "id": 1407,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "21093:2:0",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_32_by_1",
                                    "typeString": "int_const 32"
                                  },
                                  "value": "32"
                                },
                                "src": "21086:9:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 1409,
                              "nodeType": "ExpressionStatement",
                              "src": "21086:9:0"
                            }
                          ]
                        },
                        "condition": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1396,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "id": 1394,
                            "name": "len",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1354,
                            "src": "20980:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": ">=",
                          "rightExpression": {
                            "argumentTypes": null,
                            "hexValue": "3332",
                            "id": 1395,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "20987:2:0",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_32_by_1",
                              "typeString": "int_const 32"
                            },
                            "value": "32"
                          },
                          "src": "20980:9:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 1411,
                        "initializationExpression": null,
                        "loopExpression": {
                          "expression": {
                            "argumentTypes": null,
                            "id": 1399,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftHandSide": {
                              "argumentTypes": null,
                              "id": 1397,
                              "name": "len",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1354,
                              "src": "20991:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "Assignment",
                            "operator": "-=",
                            "rightHandSide": {
                              "argumentTypes": null,
                              "hexValue": "3332",
                              "id": 1398,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "20998:2:0",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_32_by_1",
                                "typeString": "int_const 32"
                              },
                              "value": "32"
                            },
                            "src": "20991:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 1400,
                          "nodeType": "ExpressionStatement",
                          "src": "20991:9:0"
                        },
                        "nodeType": "ForStatement",
                        "src": "20973:129:0"
                      },
                      {
                        "assignments": [
                          1413
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1413,
                            "name": "mask",
                            "nodeType": "VariableDeclaration",
                            "scope": 1426,
                            "src": "21136:12:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 1412,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "21136:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "value": null,
                            "visibility": "internal"
                          }
                        ],
                        "id": 1422,
                        "initialValue": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1421,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 1419,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "hexValue": "323536",
                              "id": 1414,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "21151:3:0",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_256_by_1",
                                "typeString": "int_const 256"
                              },
                              "value": "256"
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "**",
                            "rightExpression": {
                              "argumentTypes": null,
                              "components": [
                                {
                                  "argumentTypes": null,
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 1417,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "argumentTypes": null,
                                    "hexValue": "3332",
                                    "id": 1415,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "21157:2:0",
                                    "subdenomination": null,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_32_by_1",
                                      "typeString": "int_const 32"
                                    },
                                    "value": "32"
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "-",
                                  "rightExpression": {
                                    "argumentTypes": null,
                                    "id": 1416,
                                    "name": "len",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1354,
                                    "src": "21162:3:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "src": "21157:8:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "id": 1418,
                              "isConstant": false,
                              "isInlineArray": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "TupleExpression",
                              "src": "21156:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "21151:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "-",
                          "rightExpression": {
                            "argumentTypes": null,
                            "hexValue": "31",
                            "id": 1420,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "21169:1:0",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_1_by_1",
                              "typeString": "int_const 1"
                            },
                            "value": "1"
                          },
                          "src": "21151:19:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "21136:34:0"
                      },
                      {
                        "externalReferences": [
                          {
                            "mask": {
                              "declaration": 1413,
                              "isOffset": false,
                              "isSlot": false,
                              "src": "21274:4:0",
                              "valueSize": 1
                            }
                          },
                          {
                            "dest": {
                              "declaration": 1388,
                              "isOffset": false,
                              "isSlot": false,
                              "src": "21293:4:0",
                              "valueSize": 1
                            }
                          },
                          {
                            "src": {
                              "declaration": 1391,
                              "isOffset": false,
                              "isSlot": false,
                              "src": "21218:3:0",
                              "valueSize": 1
                            }
                          },
                          {
                            "mask": {
                              "declaration": 1413,
                              "isOffset": false,
                              "isSlot": false,
                              "src": "21228:4:0",
                              "valueSize": 1
                            }
                          },
                          {
                            "dest": {
                              "declaration": 1388,
                              "isOffset": false,
                              "isSlot": false,
                              "src": "21267:4:0",
                              "valueSize": 1
                            }
                          }
                        ],
                        "id": 1423,
                        "nodeType": "InlineAssembly",
                        "operations": "{\n    let srcpart := and(mload(src), not(mask))\n    let destpart := and(mload(dest), mask)\n    mstore(dest, or(destpart, srcpart))\n}",
                        "src": "21176:151:0"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 1424,
                          "name": "buf",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1348,
                          "src": "21340:3:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_buffer_$1232_memory_ptr",
                            "typeString": "struct Buffer.buffer memory"
                          }
                        },
                        "functionReturnParameters": 1358,
                        "id": 1425,
                        "nodeType": "Return",
                        "src": "21333:10:0"
                      }
                    ]
                  },
                  "documentation": "@dev Writes a byte string to a buffer. Resizes if doing so would exceed\n     the capacity of the buffer.\n@param buf The buffer to append to.\n@param off The start offset to write to.\n@param data The data to append.\n@param len The number of bytes to copy.\n@return The original buffer, for chaining.",
                  "id": 1427,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "write",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1355,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1348,
                        "name": "buf",
                        "nodeType": "VariableDeclaration",
                        "scope": 1427,
                        "src": "20194:17:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_buffer_$1232_memory_ptr",
                          "typeString": "struct Buffer.buffer"
                        },
                        "typeName": {
                          "contractScope": null,
                          "id": 1347,
                          "name": "buffer",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 1232,
                          "src": "20194:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_buffer_$1232_storage_ptr",
                            "typeString": "struct Buffer.buffer"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1350,
                        "name": "off",
                        "nodeType": "VariableDeclaration",
                        "scope": 1427,
                        "src": "20217:11:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1349,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "20217:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1352,
                        "name": "data",
                        "nodeType": "VariableDeclaration",
                        "scope": 1427,
                        "src": "20234:17:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 1351,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "20234:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1354,
                        "name": "len",
                        "nodeType": "VariableDeclaration",
                        "scope": 1427,
                        "src": "20257:11:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1353,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "20257:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "20188:84:0"
                  },
                  "returnParameters": {
                    "id": 1358,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1357,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 1427,
                        "src": "20296:13:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_buffer_$1232_memory_ptr",
                          "typeString": "struct Buffer.buffer"
                        },
                        "typeName": {
                          "contractScope": null,
                          "id": 1356,
                          "name": "buffer",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 1232,
                          "src": "20296:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_buffer_$1232_storage_ptr",
                            "typeString": "struct Buffer.buffer"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "20295:15:0"
                  },
                  "scope": 1696,
                  "src": "20174:1174:0",
                  "stateMutability": "pure",
                  "superFunction": null,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 1447,
                    "nodeType": "Block",
                    "src": "21772:55:0",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 1439,
                              "name": "buf",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1429,
                              "src": "21791:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_buffer_$1232_memory_ptr",
                                "typeString": "struct Buffer.buffer memory"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 1440,
                                  "name": "buf",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1429,
                                  "src": "21796:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_buffer_$1232_memory_ptr",
                                    "typeString": "struct Buffer.buffer memory"
                                  }
                                },
                                "id": 1441,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "buf",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 1229,
                                "src": "21796:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_memory",
                                  "typeString": "bytes memory"
                                }
                              },
                              "id": 1442,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "length",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "21796:14:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "id": 1443,
                              "name": "data",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1431,
                              "src": "21812:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "id": 1444,
                              "name": "len",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1433,
                              "src": "21818:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_struct$_buffer_$1232_memory_ptr",
                                "typeString": "struct Buffer.buffer memory"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 1438,
                            "name": "write",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              1427,
                              1570
                            ],
                            "referencedDeclaration": 1427,
                            "src": "21785:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_struct$_buffer_$1232_memory_ptr_$_t_uint256_$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_struct$_buffer_$1232_memory_ptr_$",
                              "typeString": "function (struct Buffer.buffer memory,uint256,bytes memory,uint256) pure returns (struct Buffer.buffer memory)"
                            }
                          },
                          "id": 1445,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "21785:37:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_buffer_$1232_memory_ptr",
                            "typeString": "struct Buffer.buffer memory"
                          }
                        },
                        "functionReturnParameters": 1437,
                        "id": 1446,
                        "nodeType": "Return",
                        "src": "21778:44:0"
                      }
                    ]
                  },
                  "documentation": "@dev Appends a byte string to a buffer. Resizes if doing so would exceed\n     the capacity of the buffer.\n@param buf The buffer to append to.\n@param data The data to append.\n@param len The number of bytes to copy.\n@return The original buffer, for chaining.",
                  "id": 1448,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "append",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1434,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1429,
                        "name": "buf",
                        "nodeType": "VariableDeclaration",
                        "scope": 1448,
                        "src": "21672:17:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_buffer_$1232_memory_ptr",
                          "typeString": "struct Buffer.buffer"
                        },
                        "typeName": {
                          "contractScope": null,
                          "id": 1428,
                          "name": "buffer",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 1232,
                          "src": "21672:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_buffer_$1232_storage_ptr",
                            "typeString": "struct Buffer.buffer"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1431,
                        "name": "data",
                        "nodeType": "VariableDeclaration",
                        "scope": 1448,
                        "src": "21695:17:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 1430,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "21695:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1433,
                        "name": "len",
                        "nodeType": "VariableDeclaration",
                        "scope": 1448,
                        "src": "21718:11:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1432,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "21718:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "21666:67:0"
                  },
                  "returnParameters": {
                    "id": 1437,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1436,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 1448,
                        "src": "21757:13:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_buffer_$1232_memory_ptr",
                          "typeString": "struct Buffer.buffer"
                        },
                        "typeName": {
                          "contractScope": null,
                          "id": 1435,
                          "name": "buffer",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 1232,
                          "src": "21757:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_buffer_$1232_storage_ptr",
                            "typeString": "struct Buffer.buffer"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "21756:15:0"
                  },
                  "scope": 1696,
                  "src": "21651:176:0",
                  "stateMutability": "pure",
                  "superFunction": null,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 1467,
                    "nodeType": "Block",
                    "src": "22191:63:0",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 1458,
                              "name": "buf",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1450,
                              "src": "22210:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_buffer_$1232_memory_ptr",
                                "typeString": "struct Buffer.buffer memory"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 1459,
                                  "name": "buf",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1450,
                                  "src": "22215:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_buffer_$1232_memory_ptr",
                                    "typeString": "struct Buffer.buffer memory"
                                  }
                                },
                                "id": 1460,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "buf",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 1229,
                                "src": "22215:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_memory",
                                  "typeString": "bytes memory"
                                }
                              },
                              "id": 1461,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "length",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "22215:14:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "id": 1462,
                              "name": "data",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1452,
                              "src": "22231:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 1463,
                                "name": "data",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1452,
                                "src": "22237:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              },
                              "id": 1464,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "length",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "22237:11:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_struct$_buffer_$1232_memory_ptr",
                                "typeString": "struct Buffer.buffer memory"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 1457,
                            "name": "write",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              1427,
                              1570
                            ],
                            "referencedDeclaration": 1427,
                            "src": "22204:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_struct$_buffer_$1232_memory_ptr_$_t_uint256_$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_struct$_buffer_$1232_memory_ptr_$",
                              "typeString": "function (struct Buffer.buffer memory,uint256,bytes memory,uint256) pure returns (struct Buffer.buffer memory)"
                            }
                          },
                          "id": 1465,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "22204:45:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_buffer_$1232_memory_ptr",
                            "typeString": "struct Buffer.buffer memory"
                          }
                        },
                        "functionReturnParameters": 1456,
                        "id": 1466,
                        "nodeType": "Return",
                        "src": "22197:52:0"
                      }
                    ]
                  },
                  "documentation": "@dev Appends a byte string to a buffer. Resizes if doing so would exceed\n     the capacity of the buffer.\n@param buf The buffer to append to.\n@param data The data to append.\n@return The original buffer, for chaining.",
                  "id": 1468,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "append",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1453,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1450,
                        "name": "buf",
                        "nodeType": "VariableDeclaration",
                        "scope": 1468,
                        "src": "22101:17:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_buffer_$1232_memory_ptr",
                          "typeString": "struct Buffer.buffer"
                        },
                        "typeName": {
                          "contractScope": null,
                          "id": 1449,
                          "name": "buffer",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 1232,
                          "src": "22101:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_buffer_$1232_storage_ptr",
                            "typeString": "struct Buffer.buffer"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1452,
                        "name": "data",
                        "nodeType": "VariableDeclaration",
                        "scope": 1468,
                        "src": "22120:17:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 1451,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "22120:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "22100:38:0"
                  },
                  "returnParameters": {
                    "id": 1456,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1455,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 1468,
                        "src": "22174:13:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_buffer_$1232_memory_ptr",
                          "typeString": "struct Buffer.buffer"
                        },
                        "typeName": {
                          "contractScope": null,
                          "id": 1454,
                          "name": "buffer",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 1232,
                          "src": "22174:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_buffer_$1232_storage_ptr",
                            "typeString": "struct Buffer.buffer"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "22173:15:0"
                  },
                  "scope": 1696,
                  "src": "22085:169:0",
                  "stateMutability": "pure",
                  "superFunction": null,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 1496,
                    "nodeType": "Block",
                    "src": "22673:521:0",
                    "statements": [
                      {
                        "condition": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1482,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "id": 1479,
                            "name": "off",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1472,
                            "src": "22683:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": ">=",
                          "rightExpression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 1480,
                              "name": "buf",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1470,
                              "src": "22690:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_buffer_$1232_memory_ptr",
                                "typeString": "struct Buffer.buffer memory"
                              }
                            },
                            "id": 1481,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "capacity",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1231,
                            "src": "22690:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "22683:19:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": null,
                        "id": 1492,
                        "nodeType": "IfStatement",
                        "src": "22679:69:0",
                        "trueBody": {
                          "id": 1491,
                          "nodeType": "Block",
                          "src": "22704:44:0",
                          "statements": [
                            {
                              "expression": {
                                "argumentTypes": null,
                                "arguments": [
                                  {
                                    "argumentTypes": null,
                                    "id": 1484,
                                    "name": "buf",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1470,
                                    "src": "22719:3:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_buffer_$1232_memory_ptr",
                                      "typeString": "struct Buffer.buffer memory"
                                    }
                                  },
                                  {
                                    "argumentTypes": null,
                                    "commonType": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    "id": 1488,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "argumentTypes": null,
                                      "expression": {
                                        "argumentTypes": null,
                                        "id": 1485,
                                        "name": "buf",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 1470,
                                        "src": "22724:3:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_struct$_buffer_$1232_memory_ptr",
                                          "typeString": "struct Buffer.buffer memory"
                                        }
                                      },
                                      "id": 1486,
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberName": "capacity",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": 1231,
                                      "src": "22724:12:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "*",
                                    "rightExpression": {
                                      "argumentTypes": null,
                                      "hexValue": "32",
                                      "id": 1487,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "22739:1:0",
                                      "subdenomination": null,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_2_by_1",
                                        "typeString": "int_const 2"
                                      },
                                      "value": "2"
                                    },
                                    "src": "22724:16:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_struct$_buffer_$1232_memory_ptr",
                                      "typeString": "struct Buffer.buffer memory"
                                    },
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  ],
                                  "id": 1483,
                                  "name": "resize",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1316,
                                  "src": "22712:6:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_pure$_t_struct$_buffer_$1232_memory_ptr_$_t_uint256_$returns$__$",
                                    "typeString": "function (struct Buffer.buffer memory,uint256) pure"
                                  }
                                },
                                "id": 1489,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "22712:29:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 1490,
                              "nodeType": "ExpressionStatement",
                              "src": "22712:29:0"
                            }
                          ]
                        }
                      },
                      {
                        "externalReferences": [
                          {
                            "off": {
                              "declaration": 1472,
                              "isOffset": false,
                              "isSlot": false,
                              "src": "23011:3:0",
                              "valueSize": 1
                            }
                          },
                          {
                            "off": {
                              "declaration": 1472,
                              "isOffset": false,
                              "isSlot": false,
                              "src": "23107:3:0",
                              "valueSize": 1
                            }
                          },
                          {
                            "data": {
                              "declaration": 1474,
                              "isOffset": false,
                              "isSlot": false,
                              "src": "23041:4:0",
                              "valueSize": 1
                            }
                          },
                          {
                            "buf": {
                              "declaration": 1470,
                              "isOffset": false,
                              "isSlot": false,
                              "src": "22834:3:0",
                              "valueSize": 1
                            }
                          }
                        ],
                        "id": 1493,
                        "nodeType": "InlineAssembly",
                        "operations": "{\n    let bufptr := mload(buf)\n    let buflen := mload(bufptr)\n    let dest := add(add(bufptr, off), 32)\n    mstore8(dest, data)\n    if eq(off, buflen)\n    {\n        mstore(bufptr, add(buflen, 1))\n    }\n}",
                        "src": "22754:420:0"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 1494,
                          "name": "buf",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1470,
                          "src": "23186:3:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_buffer_$1232_memory_ptr",
                            "typeString": "struct Buffer.buffer memory"
                          }
                        },
                        "functionReturnParameters": 1478,
                        "id": 1495,
                        "nodeType": "Return",
                        "src": "23179:10:0"
                      }
                    ]
                  },
                  "documentation": "@dev Writes a byte to the buffer. Resizes if doing so would exceed the\n     capacity of the buffer.\n@param buf The buffer to append to.\n@param off The offset to write the byte at.\n@param data The data to append.\n@return The original buffer, for chaining.",
                  "id": 1497,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "writeUint8",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1475,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1470,
                        "name": "buf",
                        "nodeType": "VariableDeclaration",
                        "scope": 1497,
                        "src": "22580:17:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_buffer_$1232_memory_ptr",
                          "typeString": "struct Buffer.buffer"
                        },
                        "typeName": {
                          "contractScope": null,
                          "id": 1469,
                          "name": "buffer",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 1232,
                          "src": "22580:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_buffer_$1232_storage_ptr",
                            "typeString": "struct Buffer.buffer"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1472,
                        "name": "off",
                        "nodeType": "VariableDeclaration",
                        "scope": 1497,
                        "src": "22603:11:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1471,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "22603:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1474,
                        "name": "data",
                        "nodeType": "VariableDeclaration",
                        "scope": 1497,
                        "src": "22620:10:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        },
                        "typeName": {
                          "id": 1473,
                          "name": "uint8",
                          "nodeType": "ElementaryTypeName",
                          "src": "22620:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint8",
                            "typeString": "uint8"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "22574:60:0"
                  },
                  "returnParameters": {
                    "id": 1478,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1477,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 1497,
                        "src": "22658:13:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_buffer_$1232_memory_ptr",
                          "typeString": "struct Buffer.buffer"
                        },
                        "typeName": {
                          "contractScope": null,
                          "id": 1476,
                          "name": "buffer",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 1232,
                          "src": "22658:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_buffer_$1232_storage_ptr",
                            "typeString": "struct Buffer.buffer"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "22657:15:0"
                  },
                  "scope": 1696,
                  "src": "22555:639:0",
                  "stateMutability": "pure",
                  "superFunction": null,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 1514,
                    "nodeType": "Block",
                    "src": "23551:55:0",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 1507,
                              "name": "buf",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1499,
                              "src": "23575:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_buffer_$1232_memory_ptr",
                                "typeString": "struct Buffer.buffer memory"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 1508,
                                  "name": "buf",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1499,
                                  "src": "23580:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_buffer_$1232_memory_ptr",
                                    "typeString": "struct Buffer.buffer memory"
                                  }
                                },
                                "id": 1509,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "buf",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 1229,
                                "src": "23580:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_memory",
                                  "typeString": "bytes memory"
                                }
                              },
                              "id": 1510,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "length",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "23580:14:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "id": 1511,
                              "name": "data",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1501,
                              "src": "23596:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint8",
                                "typeString": "uint8"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_struct$_buffer_$1232_memory_ptr",
                                "typeString": "struct Buffer.buffer memory"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint8",
                                "typeString": "uint8"
                              }
                            ],
                            "id": 1506,
                            "name": "writeUint8",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1497,
                            "src": "23564:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_struct$_buffer_$1232_memory_ptr_$_t_uint256_$_t_uint8_$returns$_t_struct$_buffer_$1232_memory_ptr_$",
                              "typeString": "function (struct Buffer.buffer memory,uint256,uint8) pure returns (struct Buffer.buffer memory)"
                            }
                          },
                          "id": 1512,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "23564:37:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_buffer_$1232_memory_ptr",
                            "typeString": "struct Buffer.buffer memory"
                          }
                        },
                        "functionReturnParameters": 1505,
                        "id": 1513,
                        "nodeType": "Return",
                        "src": "23557:44:0"
                      }
                    ]
                  },
                  "documentation": "@dev Appends a byte to the buffer. Resizes if doing so would exceed the\n     capacity of the buffer.\n@param buf The buffer to append to.\n@param data The data to append.\n@return The original buffer, for chaining.",
                  "id": 1515,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "appendUint8",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1502,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1499,
                        "name": "buf",
                        "nodeType": "VariableDeclaration",
                        "scope": 1515,
                        "src": "23468:17:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_buffer_$1232_memory_ptr",
                          "typeString": "struct Buffer.buffer"
                        },
                        "typeName": {
                          "contractScope": null,
                          "id": 1498,
                          "name": "buffer",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 1232,
                          "src": "23468:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_buffer_$1232_storage_ptr",
                            "typeString": "struct Buffer.buffer"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1501,
                        "name": "data",
                        "nodeType": "VariableDeclaration",
                        "scope": 1515,
                        "src": "23487:10:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        },
                        "typeName": {
                          "id": 1500,
                          "name": "uint8",
                          "nodeType": "ElementaryTypeName",
                          "src": "23487:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint8",
                            "typeString": "uint8"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "23467:31:0"
                  },
                  "returnParameters": {
                    "id": 1505,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1504,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 1515,
                        "src": "23534:13:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_buffer_$1232_memory_ptr",
                          "typeString": "struct Buffer.buffer"
                        },
                        "typeName": {
                          "contractScope": null,
                          "id": 1503,
                          "name": "buffer",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 1232,
                          "src": "23534:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_buffer_$1232_storage_ptr",
                            "typeString": "struct Buffer.buffer"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "23533:15:0"
                  },
                  "scope": 1696,
                  "src": "23447:159:0",
                  "stateMutability": "pure",
                  "superFunction": null,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 1569,
                    "nodeType": "Block",
                    "src": "24098:600:0",
                    "statements": [
                      {
                        "condition": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1533,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 1530,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "id": 1528,
                              "name": "len",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1523,
                              "src": "24108:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "+",
                            "rightExpression": {
                              "argumentTypes": null,
                              "id": 1529,
                              "name": "off",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1519,
                              "src": "24114:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "24108:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": ">",
                          "rightExpression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 1531,
                              "name": "buf",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1517,
                              "src": "24120:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_buffer_$1232_memory_ptr",
                                "typeString": "struct Buffer.buffer memory"
                              }
                            },
                            "id": 1532,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "capacity",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1231,
                            "src": "24120:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "24108:24:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": null,
                        "id": 1545,
                        "nodeType": "IfStatement",
                        "src": "24104:73:0",
                        "trueBody": {
                          "id": 1544,
                          "nodeType": "Block",
                          "src": "24134:43:0",
                          "statements": [
                            {
                              "expression": {
                                "argumentTypes": null,
                                "arguments": [
                                  {
                                    "argumentTypes": null,
                                    "id": 1535,
                                    "name": "buf",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1517,
                                    "src": "24149:3:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_buffer_$1232_memory_ptr",
                                      "typeString": "struct Buffer.buffer memory"
                                    }
                                  },
                                  {
                                    "argumentTypes": null,
                                    "commonType": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    "id": 1541,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "argumentTypes": null,
                                      "components": [
                                        {
                                          "argumentTypes": null,
                                          "commonType": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          },
                                          "id": 1538,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "leftExpression": {
                                            "argumentTypes": null,
                                            "id": 1536,
                                            "name": "len",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 1523,
                                            "src": "24155:3:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          },
                                          "nodeType": "BinaryOperation",
                                          "operator": "+",
                                          "rightExpression": {
                                            "argumentTypes": null,
                                            "id": 1537,
                                            "name": "off",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 1519,
                                            "src": "24161:3:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          },
                                          "src": "24155:9:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        }
                                      ],
                                      "id": 1539,
                                      "isConstant": false,
                                      "isInlineArray": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "nodeType": "TupleExpression",
                                      "src": "24154:11:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "*",
                                    "rightExpression": {
                                      "argumentTypes": null,
                                      "hexValue": "32",
                                      "id": 1540,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "24168:1:0",
                                      "subdenomination": null,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_2_by_1",
                                        "typeString": "int_const 2"
                                      },
                                      "value": "2"
                                    },
                                    "src": "24154:15:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_struct$_buffer_$1232_memory_ptr",
                                      "typeString": "struct Buffer.buffer memory"
                                    },
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  ],
                                  "id": 1534,
                                  "name": "resize",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1316,
                                  "src": "24142:6:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_pure$_t_struct$_buffer_$1232_memory_ptr_$_t_uint256_$returns$__$",
                                    "typeString": "function (struct Buffer.buffer memory,uint256) pure"
                                  }
                                },
                                "id": 1542,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "24142:28:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 1543,
                              "nodeType": "ExpressionStatement",
                              "src": "24142:28:0"
                            }
                          ]
                        }
                      },
                      {
                        "assignments": [
                          1547
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1547,
                            "name": "mask",
                            "nodeType": "VariableDeclaration",
                            "scope": 1569,
                            "src": "24183:12:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 1546,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "24183:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "value": null,
                            "visibility": "internal"
                          }
                        ],
                        "id": 1553,
                        "initialValue": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1552,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 1550,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "hexValue": "323536",
                              "id": 1548,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "24198:3:0",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_256_by_1",
                                "typeString": "int_const 256"
                              },
                              "value": "256"
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "**",
                            "rightExpression": {
                              "argumentTypes": null,
                              "id": 1549,
                              "name": "len",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1523,
                              "src": "24203:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "24198:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "-",
                          "rightExpression": {
                            "argumentTypes": null,
                            "hexValue": "31",
                            "id": 1551,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "24209:1:0",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_1_by_1",
                              "typeString": "int_const 1"
                            },
                            "value": "1"
                          },
                          "src": "24198:12:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "24183:27:0"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 1564,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "id": 1554,
                            "name": "data",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1521,
                            "src": "24240:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            },
                            "id": 1563,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "id": 1555,
                              "name": "data",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1521,
                              "src": "24247:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": ">>",
                            "rightExpression": {
                              "argumentTypes": null,
                              "components": [
                                {
                                  "argumentTypes": null,
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 1561,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "argumentTypes": null,
                                    "hexValue": "38",
                                    "id": 1556,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "24256:1:0",
                                    "subdenomination": null,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_8_by_1",
                                      "typeString": "int_const 8"
                                    },
                                    "value": "8"
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "*",
                                  "rightExpression": {
                                    "argumentTypes": null,
                                    "components": [
                                      {
                                        "argumentTypes": null,
                                        "commonType": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        },
                                        "id": 1559,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "leftExpression": {
                                          "argumentTypes": null,
                                          "hexValue": "3332",
                                          "id": 1557,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": true,
                                          "kind": "number",
                                          "lValueRequested": false,
                                          "nodeType": "Literal",
                                          "src": "24261:2:0",
                                          "subdenomination": null,
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_rational_32_by_1",
                                            "typeString": "int_const 32"
                                          },
                                          "value": "32"
                                        },
                                        "nodeType": "BinaryOperation",
                                        "operator": "-",
                                        "rightExpression": {
                                          "argumentTypes": null,
                                          "id": 1558,
                                          "name": "len",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 1523,
                                          "src": "24266:3:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "src": "24261:8:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      }
                                    ],
                                    "id": 1560,
                                    "isConstant": false,
                                    "isInlineArray": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "TupleExpression",
                                    "src": "24260:10:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "src": "24256:14:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "id": 1562,
                              "isConstant": false,
                              "isInlineArray": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "TupleExpression",
                              "src": "24255:16:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "24247:24:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "src": "24240:31:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "id": 1565,
                        "nodeType": "ExpressionStatement",
                        "src": "24240:31:0"
                      },
                      {
                        "externalReferences": [
                          {
                            "off": {
                              "declaration": 1519,
                              "isOffset": false,
                              "isSlot": false,
                              "src": "24466:3:0",
                              "valueSize": 1
                            }
                          },
                          {
                            "len": {
                              "declaration": 1523,
                              "isOffset": false,
                              "isSlot": false,
                              "src": "24472:3:0",
                              "valueSize": 1
                            }
                          },
                          {
                            "off": {
                              "declaration": 1519,
                              "isOffset": false,
                              "isSlot": false,
                              "src": "24599:3:0",
                              "valueSize": 1
                            }
                          },
                          {
                            "len": {
                              "declaration": 1523,
                              "isOffset": false,
                              "isSlot": false,
                              "src": "24604:3:0",
                              "valueSize": 1
                            }
                          },
                          {
                            "data": {
                              "declaration": 1521,
                              "isOffset": false,
                              "isSlot": false,
                              "src": "24528:4:0",
                              "valueSize": 1
                            }
                          },
                          {
                            "off": {
                              "declaration": 1519,
                              "isOffset": false,
                              "isSlot": false,
                              "src": "24654:3:0",
                              "valueSize": 1
                            }
                          },
                          {
                            "len": {
                              "declaration": 1523,
                              "isOffset": false,
                              "isSlot": false,
                              "src": "24659:3:0",
                              "valueSize": 1
                            }
                          },
                          {
                            "buf": {
                              "declaration": 1517,
                              "isOffset": false,
                              "isSlot": false,
                              "src": "24357:3:0",
                              "valueSize": 1
                            }
                          },
                          {
                            "mask": {
                              "declaration": 1547,
                              "isOffset": false,
                              "isSlot": false,
                              "src": "24520:4:0",
                              "valueSize": 1
                            }
                          }
                        ],
                        "id": 1566,
                        "nodeType": "InlineAssembly",
                        "operations": "{\n    let bufptr := mload(buf)\n    let dest := add(add(bufptr, off), len)\n    mstore(dest, or(and(mload(dest), not(mask)), data))\n    if gt(add(off, len), mload(bufptr)) { mstore(bufptr, add(off, len)) }\n}",
                        "src": "24277:401:0"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 1567,
                          "name": "buf",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1517,
                          "src": "24690:3:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_buffer_$1232_memory_ptr",
                            "typeString": "struct Buffer.buffer memory"
                          }
                        },
                        "functionReturnParameters": 1527,
                        "id": 1568,
                        "nodeType": "Return",
                        "src": "24683:10:0"
                      }
                    ]
                  },
                  "documentation": "@dev Writes up to 32 bytes to the buffer. Resizes if doing so would\n     exceed the capacity of the buffer.\n@param buf The buffer to append to.\n@param off The offset to write at.\n@param data The data to append.\n@param len The number of bytes to write (left-aligned).\n@return The original buffer, for chaining.",
                  "id": 1570,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "write",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1524,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1517,
                        "name": "buf",
                        "nodeType": "VariableDeclaration",
                        "scope": 1570,
                        "src": "23987:17:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_buffer_$1232_memory_ptr",
                          "typeString": "struct Buffer.buffer"
                        },
                        "typeName": {
                          "contractScope": null,
                          "id": 1516,
                          "name": "buffer",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 1232,
                          "src": "23987:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_buffer_$1232_storage_ptr",
                            "typeString": "struct Buffer.buffer"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1519,
                        "name": "off",
                        "nodeType": "VariableDeclaration",
                        "scope": 1570,
                        "src": "24010:11:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1518,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "24010:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1521,
                        "name": "data",
                        "nodeType": "VariableDeclaration",
                        "scope": 1570,
                        "src": "24027:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 1520,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "24027:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1523,
                        "name": "len",
                        "nodeType": "VariableDeclaration",
                        "scope": 1570,
                        "src": "24045:11:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1522,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "24045:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "23981:79:0"
                  },
                  "returnParameters": {
                    "id": 1527,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1526,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 1570,
                        "src": "24083:13:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_buffer_$1232_memory_ptr",
                          "typeString": "struct Buffer.buffer"
                        },
                        "typeName": {
                          "contractScope": null,
                          "id": 1525,
                          "name": "buffer",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 1232,
                          "src": "24083:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_buffer_$1232_storage_ptr",
                            "typeString": "struct Buffer.buffer"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "24082:15:0"
                  },
                  "scope": 1696,
                  "src": "23967:731:0",
                  "stateMutability": "pure",
                  "superFunction": null,
                  "visibility": "private"
                },
                {
                  "body": {
                    "id": 1590,
                    "nodeType": "Block",
                    "src": "25115:52:0",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 1582,
                              "name": "buf",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1572,
                              "src": "25134:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_buffer_$1232_memory_ptr",
                                "typeString": "struct Buffer.buffer memory"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "id": 1583,
                              "name": "off",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1574,
                              "src": "25139:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "id": 1585,
                                  "name": "data",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1576,
                                  "src": "25152:4:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes20",
                                    "typeString": "bytes20"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_bytes20",
                                    "typeString": "bytes20"
                                  }
                                ],
                                "id": 1584,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "25144:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_bytes32_$",
                                  "typeString": "type(bytes32)"
                                },
                                "typeName": "bytes32"
                              },
                              "id": 1586,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "25144:13:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "hexValue": "3230",
                              "id": 1587,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "25159:2:0",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_20_by_1",
                                "typeString": "int_const 20"
                              },
                              "value": "20"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_struct$_buffer_$1232_memory_ptr",
                                "typeString": "struct Buffer.buffer memory"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              },
                              {
                                "typeIdentifier": "t_rational_20_by_1",
                                "typeString": "int_const 20"
                              }
                            ],
                            "id": 1581,
                            "name": "write",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              1427,
                              1570
                            ],
                            "referencedDeclaration": 1570,
                            "src": "25128:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_struct$_buffer_$1232_memory_ptr_$_t_uint256_$_t_bytes32_$_t_uint256_$returns$_t_struct$_buffer_$1232_memory_ptr_$",
                              "typeString": "function (struct Buffer.buffer memory,uint256,bytes32,uint256) pure returns (struct Buffer.buffer memory)"
                            }
                          },
                          "id": 1588,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "25128:34:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_buffer_$1232_memory_ptr",
                            "typeString": "struct Buffer.buffer memory"
                          }
                        },
                        "functionReturnParameters": 1580,
                        "id": 1589,
                        "nodeType": "Return",
                        "src": "25121:41:0"
                      }
                    ]
                  },
                  "documentation": "@dev Writes a bytes20 to the buffer. Resizes if doing so would exceed the\n     capacity of the buffer.\n@param buf The buffer to append to.\n@param off The offset to write at.\n@param data The data to append.\n@return The original buffer, for chaining.",
                  "id": 1591,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "writeBytes20",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1577,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1572,
                        "name": "buf",
                        "nodeType": "VariableDeclaration",
                        "scope": 1591,
                        "src": "25020:17:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_buffer_$1232_memory_ptr",
                          "typeString": "struct Buffer.buffer"
                        },
                        "typeName": {
                          "contractScope": null,
                          "id": 1571,
                          "name": "buffer",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 1232,
                          "src": "25020:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_buffer_$1232_storage_ptr",
                            "typeString": "struct Buffer.buffer"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1574,
                        "name": "off",
                        "nodeType": "VariableDeclaration",
                        "scope": 1591,
                        "src": "25043:11:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1573,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "25043:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1576,
                        "name": "data",
                        "nodeType": "VariableDeclaration",
                        "scope": 1591,
                        "src": "25060:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes20",
                          "typeString": "bytes20"
                        },
                        "typeName": {
                          "id": 1575,
                          "name": "bytes20",
                          "nodeType": "ElementaryTypeName",
                          "src": "25060:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes20",
                            "typeString": "bytes20"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "25014:62:0"
                  },
                  "returnParameters": {
                    "id": 1580,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1579,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 1591,
                        "src": "25100:13:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_buffer_$1232_memory_ptr",
                          "typeString": "struct Buffer.buffer"
                        },
                        "typeName": {
                          "contractScope": null,
                          "id": 1578,
                          "name": "buffer",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 1232,
                          "src": "25100:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_buffer_$1232_storage_ptr",
                            "typeString": "struct Buffer.buffer"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "25099:15:0"
                  },
                  "scope": 1696,
                  "src": "24993:174:0",
                  "stateMutability": "pure",
                  "superFunction": null,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 1611,
                    "nodeType": "Block",
                    "src": "25532:63:0",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 1601,
                              "name": "buf",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1593,
                              "src": "25551:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_buffer_$1232_memory_ptr",
                                "typeString": "struct Buffer.buffer memory"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 1602,
                                  "name": "buf",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1593,
                                  "src": "25556:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_buffer_$1232_memory_ptr",
                                    "typeString": "struct Buffer.buffer memory"
                                  }
                                },
                                "id": 1603,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "buf",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 1229,
                                "src": "25556:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_memory",
                                  "typeString": "bytes memory"
                                }
                              },
                              "id": 1604,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "length",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "25556:14:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "id": 1606,
                                  "name": "data",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1595,
                                  "src": "25580:4:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes20",
                                    "typeString": "bytes20"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_bytes20",
                                    "typeString": "bytes20"
                                  }
                                ],
                                "id": 1605,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "25572:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_bytes32_$",
                                  "typeString": "type(bytes32)"
                                },
                                "typeName": "bytes32"
                              },
                              "id": 1607,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "25572:13:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "hexValue": "3230",
                              "id": 1608,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "25587:2:0",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_20_by_1",
                                "typeString": "int_const 20"
                              },
                              "value": "20"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_struct$_buffer_$1232_memory_ptr",
                                "typeString": "struct Buffer.buffer memory"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              },
                              {
                                "typeIdentifier": "t_rational_20_by_1",
                                "typeString": "int_const 20"
                              }
                            ],
                            "id": 1600,
                            "name": "write",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              1427,
                              1570
                            ],
                            "referencedDeclaration": 1570,
                            "src": "25545:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_struct$_buffer_$1232_memory_ptr_$_t_uint256_$_t_bytes32_$_t_uint256_$returns$_t_struct$_buffer_$1232_memory_ptr_$",
                              "typeString": "function (struct Buffer.buffer memory,uint256,bytes32,uint256) pure returns (struct Buffer.buffer memory)"
                            }
                          },
                          "id": 1609,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "25545:45:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_buffer_$1232_memory_ptr",
                            "typeString": "struct Buffer.buffer memory"
                          }
                        },
                        "functionReturnParameters": 1599,
                        "id": 1610,
                        "nodeType": "Return",
                        "src": "25538:52:0"
                      }
                    ]
                  },
                  "documentation": "@dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\n     the capacity of the buffer.\n@param buf The buffer to append to.\n@param data The data to append.\n@return The original buffer, for chhaining.",
                  "id": 1612,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "appendBytes20",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1596,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1593,
                        "name": "buf",
                        "nodeType": "VariableDeclaration",
                        "scope": 1612,
                        "src": "25447:17:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_buffer_$1232_memory_ptr",
                          "typeString": "struct Buffer.buffer"
                        },
                        "typeName": {
                          "contractScope": null,
                          "id": 1592,
                          "name": "buffer",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 1232,
                          "src": "25447:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_buffer_$1232_storage_ptr",
                            "typeString": "struct Buffer.buffer"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1595,
                        "name": "data",
                        "nodeType": "VariableDeclaration",
                        "scope": 1612,
                        "src": "25466:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes20",
                          "typeString": "bytes20"
                        },
                        "typeName": {
                          "id": 1594,
                          "name": "bytes20",
                          "nodeType": "ElementaryTypeName",
                          "src": "25466:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes20",
                            "typeString": "bytes20"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "25446:33:0"
                  },
                  "returnParameters": {
                    "id": 1599,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1598,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 1612,
                        "src": "25515:13:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_buffer_$1232_memory_ptr",
                          "typeString": "struct Buffer.buffer"
                        },
                        "typeName": {
                          "contractScope": null,
                          "id": 1597,
                          "name": "buffer",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 1232,
                          "src": "25515:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_buffer_$1232_storage_ptr",
                            "typeString": "struct Buffer.buffer"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "25514:15:0"
                  },
                  "scope": 1696,
                  "src": "25424:171:0",
                  "stateMutability": "pure",
                  "superFunction": null,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 1630,
                    "nodeType": "Block",
                    "src": "25959:54:0",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 1622,
                              "name": "buf",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1614,
                              "src": "25978:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_buffer_$1232_memory_ptr",
                                "typeString": "struct Buffer.buffer memory"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 1623,
                                  "name": "buf",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1614,
                                  "src": "25983:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_buffer_$1232_memory_ptr",
                                    "typeString": "struct Buffer.buffer memory"
                                  }
                                },
                                "id": 1624,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "buf",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 1229,
                                "src": "25983:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_memory",
                                  "typeString": "bytes memory"
                                }
                              },
                              "id": 1625,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "length",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "25983:14:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "id": 1626,
                              "name": "data",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1616,
                              "src": "25999:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "hexValue": "3332",
                              "id": 1627,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "26005:2:0",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_32_by_1",
                                "typeString": "int_const 32"
                              },
                              "value": "32"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_struct$_buffer_$1232_memory_ptr",
                                "typeString": "struct Buffer.buffer memory"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              },
                              {
                                "typeIdentifier": "t_rational_32_by_1",
                                "typeString": "int_const 32"
                              }
                            ],
                            "id": 1621,
                            "name": "write",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              1427,
                              1570
                            ],
                            "referencedDeclaration": 1570,
                            "src": "25972:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_struct$_buffer_$1232_memory_ptr_$_t_uint256_$_t_bytes32_$_t_uint256_$returns$_t_struct$_buffer_$1232_memory_ptr_$",
                              "typeString": "function (struct Buffer.buffer memory,uint256,bytes32,uint256) pure returns (struct Buffer.buffer memory)"
                            }
                          },
                          "id": 1628,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "25972:36:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_buffer_$1232_memory_ptr",
                            "typeString": "struct Buffer.buffer memory"
                          }
                        },
                        "functionReturnParameters": 1620,
                        "id": 1629,
                        "nodeType": "Return",
                        "src": "25965:43:0"
                      }
                    ]
                  },
                  "documentation": "@dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\n     the capacity of the buffer.\n@param buf The buffer to append to.\n@param data The data to append.\n@return The original buffer, for chaining.",
                  "id": 1631,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "appendBytes32",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1617,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1614,
                        "name": "buf",
                        "nodeType": "VariableDeclaration",
                        "scope": 1631,
                        "src": "25874:17:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_buffer_$1232_memory_ptr",
                          "typeString": "struct Buffer.buffer"
                        },
                        "typeName": {
                          "contractScope": null,
                          "id": 1613,
                          "name": "buffer",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 1232,
                          "src": "25874:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_buffer_$1232_storage_ptr",
                            "typeString": "struct Buffer.buffer"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1616,
                        "name": "data",
                        "nodeType": "VariableDeclaration",
                        "scope": 1631,
                        "src": "25893:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 1615,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "25893:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "25873:33:0"
                  },
                  "returnParameters": {
                    "id": 1620,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1619,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 1631,
                        "src": "25942:13:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_buffer_$1232_memory_ptr",
                          "typeString": "struct Buffer.buffer"
                        },
                        "typeName": {
                          "contractScope": null,
                          "id": 1618,
                          "name": "buffer",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 1232,
                          "src": "25942:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_buffer_$1232_storage_ptr",
                            "typeString": "struct Buffer.buffer"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "25941:15:0"
                  },
                  "scope": 1696,
                  "src": "25851:162:0",
                  "stateMutability": "pure",
                  "superFunction": null,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 1673,
                    "nodeType": "Block",
                    "src": "26505:539:0",
                    "statements": [
                      {
                        "condition": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1649,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 1646,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "id": 1644,
                              "name": "len",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1639,
                              "src": "26515:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "+",
                            "rightExpression": {
                              "argumentTypes": null,
                              "id": 1645,
                              "name": "off",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1635,
                              "src": "26521:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "26515:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": ">",
                          "rightExpression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 1647,
                              "name": "buf",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1633,
                              "src": "26527:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_buffer_$1232_memory_ptr",
                                "typeString": "struct Buffer.buffer memory"
                              }
                            },
                            "id": 1648,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "capacity",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1231,
                            "src": "26527:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "26515:24:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": null,
                        "id": 1661,
                        "nodeType": "IfStatement",
                        "src": "26511:73:0",
                        "trueBody": {
                          "id": 1660,
                          "nodeType": "Block",
                          "src": "26541:43:0",
                          "statements": [
                            {
                              "expression": {
                                "argumentTypes": null,
                                "arguments": [
                                  {
                                    "argumentTypes": null,
                                    "id": 1651,
                                    "name": "buf",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1633,
                                    "src": "26556:3:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_buffer_$1232_memory_ptr",
                                      "typeString": "struct Buffer.buffer memory"
                                    }
                                  },
                                  {
                                    "argumentTypes": null,
                                    "commonType": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    "id": 1657,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "argumentTypes": null,
                                      "components": [
                                        {
                                          "argumentTypes": null,
                                          "commonType": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          },
                                          "id": 1654,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "leftExpression": {
                                            "argumentTypes": null,
                                            "id": 1652,
                                            "name": "len",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 1639,
                                            "src": "26562:3:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          },
                                          "nodeType": "BinaryOperation",
                                          "operator": "+",
                                          "rightExpression": {
                                            "argumentTypes": null,
                                            "id": 1653,
                                            "name": "off",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 1635,
                                            "src": "26568:3:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          },
                                          "src": "26562:9:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        }
                                      ],
                                      "id": 1655,
                                      "isConstant": false,
                                      "isInlineArray": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "nodeType": "TupleExpression",
                                      "src": "26561:11:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "*",
                                    "rightExpression": {
                                      "argumentTypes": null,
                                      "hexValue": "32",
                                      "id": 1656,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "26575:1:0",
                                      "subdenomination": null,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_2_by_1",
                                        "typeString": "int_const 2"
                                      },
                                      "value": "2"
                                    },
                                    "src": "26561:15:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_struct$_buffer_$1232_memory_ptr",
                                      "typeString": "struct Buffer.buffer memory"
                                    },
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  ],
                                  "id": 1650,
                                  "name": "resize",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1316,
                                  "src": "26549:6:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_pure$_t_struct$_buffer_$1232_memory_ptr_$_t_uint256_$returns$__$",
                                    "typeString": "function (struct Buffer.buffer memory,uint256) pure"
                                  }
                                },
                                "id": 1658,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "26549:28:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 1659,
                              "nodeType": "ExpressionStatement",
                              "src": "26549:28:0"
                            }
                          ]
                        }
                      },
                      {
                        "assignments": [
                          1663
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1663,
                            "name": "mask",
                            "nodeType": "VariableDeclaration",
                            "scope": 1673,
                            "src": "26590:12:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 1662,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "26590:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "value": null,
                            "visibility": "internal"
                          }
                        ],
                        "id": 1669,
                        "initialValue": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1668,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 1666,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "hexValue": "323536",
                              "id": 1664,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "26605:3:0",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_256_by_1",
                                "typeString": "int_const 256"
                              },
                              "value": "256"
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "**",
                            "rightExpression": {
                              "argumentTypes": null,
                              "id": 1665,
                              "name": "len",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1639,
                              "src": "26610:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "26605:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "-",
                          "rightExpression": {
                            "argumentTypes": null,
                            "hexValue": "31",
                            "id": 1667,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "26616:1:0",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_1_by_1",
                              "typeString": "int_const 1"
                            },
                            "value": "1"
                          },
                          "src": "26605:12:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "26590:27:0"
                      },
                      {
                        "externalReferences": [
                          {
                            "off": {
                              "declaration": 1635,
                              "isOffset": false,
                              "isSlot": false,
                              "src": "26812:3:0",
                              "valueSize": 1
                            }
                          },
                          {
                            "len": {
                              "declaration": 1639,
                              "isOffset": false,
                              "isSlot": false,
                              "src": "26818:3:0",
                              "valueSize": 1
                            }
                          },
                          {
                            "off": {
                              "declaration": 1635,
                              "isOffset": false,
                              "isSlot": false,
                              "src": "26945:3:0",
                              "valueSize": 1
                            }
                          },
                          {
                            "len": {
                              "declaration": 1639,
                              "isOffset": false,
                              "isSlot": false,
                              "src": "26950:3:0",
                              "valueSize": 1
                            }
                          },
                          {
                            "data": {
                              "declaration": 1637,
                              "isOffset": false,
                              "isSlot": false,
                              "src": "26874:4:0",
                              "valueSize": 1
                            }
                          },
                          {
                            "off": {
                              "declaration": 1635,
                              "isOffset": false,
                              "isSlot": false,
                              "src": "27000:3:0",
                              "valueSize": 1
                            }
                          },
                          {
                            "len": {
                              "declaration": 1639,
                              "isOffset": false,
                              "isSlot": false,
                              "src": "27005:3:0",
                              "valueSize": 1
                            }
                          },
                          {
                            "buf": {
                              "declaration": 1633,
                              "isOffset": false,
                              "isSlot": false,
                              "src": "26703:3:0",
                              "valueSize": 1
                            }
                          },
                          {
                            "mask": {
                              "declaration": 1663,
                              "isOffset": false,
                              "isSlot": false,
                              "src": "26866:4:0",
                              "valueSize": 1
                            }
                          }
                        ],
                        "id": 1670,
                        "nodeType": "InlineAssembly",
                        "operations": "{\n    let bufptr := mload(buf)\n    let dest := add(add(bufptr, off), len)\n    mstore(dest, or(and(mload(dest), not(mask)), data))\n    if gt(add(off, len), mload(bufptr)) { mstore(bufptr, add(off, len)) }\n}",
                        "src": "26623:401:0"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 1671,
                          "name": "buf",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1633,
                          "src": "27036:3:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_buffer_$1232_memory_ptr",
                            "typeString": "struct Buffer.buffer memory"
                          }
                        },
                        "functionReturnParameters": 1643,
                        "id": 1672,
                        "nodeType": "Return",
                        "src": "27029:10:0"
                      }
                    ]
                  },
                  "documentation": "@dev Writes an integer to the buffer. Resizes if doing so would exceed\n     the capacity of the buffer.\n@param buf The buffer to append to.\n@param off The offset to write at.\n@param data The data to append.\n@param len The number of bytes to write (right-aligned).\n@return The original buffer, for chaining.",
                  "id": 1674,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "writeInt",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1640,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1633,
                        "name": "buf",
                        "nodeType": "VariableDeclaration",
                        "scope": 1674,
                        "src": "26394:17:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_buffer_$1232_memory_ptr",
                          "typeString": "struct Buffer.buffer"
                        },
                        "typeName": {
                          "contractScope": null,
                          "id": 1632,
                          "name": "buffer",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 1232,
                          "src": "26394:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_buffer_$1232_storage_ptr",
                            "typeString": "struct Buffer.buffer"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1635,
                        "name": "off",
                        "nodeType": "VariableDeclaration",
                        "scope": 1674,
                        "src": "26417:11:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1634,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "26417:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1637,
                        "name": "data",
                        "nodeType": "VariableDeclaration",
                        "scope": 1674,
                        "src": "26434:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1636,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "26434:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1639,
                        "name": "len",
                        "nodeType": "VariableDeclaration",
                        "scope": 1674,
                        "src": "26452:11:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1638,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "26452:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "26388:79:0"
                  },
                  "returnParameters": {
                    "id": 1643,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1642,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 1674,
                        "src": "26490:13:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_buffer_$1232_memory_ptr",
                          "typeString": "struct Buffer.buffer"
                        },
                        "typeName": {
                          "contractScope": null,
                          "id": 1641,
                          "name": "buffer",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 1232,
                          "src": "26490:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_buffer_$1232_storage_ptr",
                            "typeString": "struct Buffer.buffer"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "26489:15:0"
                  },
                  "scope": 1696,
                  "src": "26371:673:0",
                  "stateMutability": "pure",
                  "superFunction": null,
                  "visibility": "private"
                },
                {
                  "body": {
                    "id": 1694,
                    "nodeType": "Block",
                    "src": "27408:58:0",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 1686,
                              "name": "buf",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1676,
                              "src": "27430:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_buffer_$1232_memory_ptr",
                                "typeString": "struct Buffer.buffer memory"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 1687,
                                  "name": "buf",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1676,
                                  "src": "27435:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_buffer_$1232_memory_ptr",
                                    "typeString": "struct Buffer.buffer memory"
                                  }
                                },
                                "id": 1688,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "buf",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 1229,
                                "src": "27435:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_memory",
                                  "typeString": "bytes memory"
                                }
                              },
                              "id": 1689,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "length",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "27435:14:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "id": 1690,
                              "name": "data",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1678,
                              "src": "27451:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "id": 1691,
                              "name": "len",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1680,
                              "src": "27457:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_struct$_buffer_$1232_memory_ptr",
                                "typeString": "struct Buffer.buffer memory"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 1685,
                            "name": "writeInt",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1674,
                            "src": "27421:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_struct$_buffer_$1232_memory_ptr_$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_struct$_buffer_$1232_memory_ptr_$",
                              "typeString": "function (struct Buffer.buffer memory,uint256,uint256,uint256) pure returns (struct Buffer.buffer memory)"
                            }
                          },
                          "id": 1692,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "27421:40:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_buffer_$1232_memory_ptr",
                            "typeString": "struct Buffer.buffer memory"
                          }
                        },
                        "functionReturnParameters": 1684,
                        "id": 1693,
                        "nodeType": "Return",
                        "src": "27414:47:0"
                      }
                    ]
                  },
                  "documentation": "@dev Appends a byte to the end of the buffer. Resizes if doing so would\nexceed the capacity of the buffer.\n@param buf The buffer to append to.\n@param data The data to append.\n@return The original buffer.",
                  "id": 1695,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "appendInt",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1681,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1676,
                        "name": "buf",
                        "nodeType": "VariableDeclaration",
                        "scope": 1695,
                        "src": "27313:17:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_buffer_$1232_memory_ptr",
                          "typeString": "struct Buffer.buffer"
                        },
                        "typeName": {
                          "contractScope": null,
                          "id": 1675,
                          "name": "buffer",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 1232,
                          "src": "27313:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_buffer_$1232_storage_ptr",
                            "typeString": "struct Buffer.buffer"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1678,
                        "name": "data",
                        "nodeType": "VariableDeclaration",
                        "scope": 1695,
                        "src": "27336:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1677,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "27336:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1680,
                        "name": "len",
                        "nodeType": "VariableDeclaration",
                        "scope": 1695,
                        "src": "27354:11:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1679,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "27354:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "27307:62:0"
                  },
                  "returnParameters": {
                    "id": 1684,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1683,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 1695,
                        "src": "27393:13:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_buffer_$1232_memory_ptr",
                          "typeString": "struct Buffer.buffer"
                        },
                        "typeName": {
                          "contractScope": null,
                          "id": 1682,
                          "name": "buffer",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 1232,
                          "src": "27393:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_buffer_$1232_storage_ptr",
                            "typeString": "struct Buffer.buffer"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "27392:15:0"
                  },
                  "scope": 1696,
                  "src": "27289:177:0",
                  "stateMutability": "pure",
                  "superFunction": null,
                  "visibility": "internal"
                }
              ],
              "scope": 3329,
              "src": "17865:9603:0"
            },
            {
              "id": 1697,
              "literals": [
                "solidity",
                ">",
                "0.4",
                ".23"
              ],
              "nodeType": "PragmaDirective",
              "src": "27528:24:0"
            },
            {
              "baseContracts": [],
              "contractDependencies": [],
              "contractKind": "library",
              "documentation": "@dev RRUtils is a library that provides utilities for parsing DNS resource records.",
              "fullyImplemented": true,
              "id": 2314,
              "linearizedBaseContracts": [
                2314
              ],
              "name": "RRUtils",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "id": 1699,
                  "libraryName": {
                    "contractScope": null,
                    "id": 1698,
                    "name": "BytesUtils",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 1226,
                    "src": "27675:10:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_BytesUtils_$1226",
                      "typeString": "library BytesUtils"
                    }
                  },
                  "nodeType": "UsingForDirective",
                  "src": "27669:23:0",
                  "typeName": null
                },
                {
                  "id": 1701,
                  "libraryName": {
                    "contractScope": null,
                    "id": 1700,
                    "name": "Buffer",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 1696,
                    "src": "27701:6:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_Buffer_$1696",
                      "typeString": "library Buffer"
                    }
                  },
                  "nodeType": "UsingForDirective",
                  "src": "27695:19:0",
                  "typeName": null
                },
                {
                  "body": {
                    "id": 1747,
                    "nodeType": "Block",
                    "src": "28075:237:0",
                    "statements": [
                      {
                        "assignments": [
                          1711
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1711,
                            "name": "idx",
                            "nodeType": "VariableDeclaration",
                            "scope": 1747,
                            "src": "28081:11:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 1710,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "28081:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "value": null,
                            "visibility": "internal"
                          }
                        ],
                        "id": 1713,
                        "initialValue": {
                          "argumentTypes": null,
                          "id": 1712,
                          "name": "offset",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1705,
                          "src": "28095:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "28081:20:0"
                      },
                      {
                        "body": {
                          "id": 1741,
                          "nodeType": "Block",
                          "src": "28120:163:0",
                          "statements": [
                            {
                              "expression": {
                                "argumentTypes": null,
                                "arguments": [
                                  {
                                    "argumentTypes": null,
                                    "commonType": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    "id": 1719,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "argumentTypes": null,
                                      "id": 1716,
                                      "name": "idx",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1711,
                                      "src": "28135:3:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "<",
                                    "rightExpression": {
                                      "argumentTypes": null,
                                      "expression": {
                                        "argumentTypes": null,
                                        "id": 1717,
                                        "name": "self",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 1703,
                                        "src": "28141:4:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bytes_memory_ptr",
                                          "typeString": "bytes memory"
                                        }
                                      },
                                      "id": 1718,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberName": "length",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": null,
                                      "src": "28141:11:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "src": "28135:17:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  ],
                                  "id": 1715,
                                  "name": "assert",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 3332,
                                  "src": "28128:6:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_assert_pure$_t_bool_$returns$__$",
                                    "typeString": "function (bool) pure"
                                  }
                                },
                                "id": 1720,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "28128:25:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 1721,
                              "nodeType": "ExpressionStatement",
                              "src": "28128:25:0"
                            },
                            {
                              "assignments": [
                                1723
                              ],
                              "declarations": [
                                {
                                  "constant": false,
                                  "id": 1723,
                                  "name": "labelLen",
                                  "nodeType": "VariableDeclaration",
                                  "scope": 1741,
                                  "src": "28161:16:0",
                                  "stateVariable": false,
                                  "storageLocation": "default",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "typeName": {
                                    "id": 1722,
                                    "name": "uint256",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "28161:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "value": null,
                                  "visibility": "internal"
                                }
                              ],
                              "id": 1728,
                              "initialValue": {
                                "argumentTypes": null,
                                "arguments": [
                                  {
                                    "argumentTypes": null,
                                    "id": 1726,
                                    "name": "idx",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1711,
                                    "src": "28195:3:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": null,
                                    "id": 1724,
                                    "name": "self",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1703,
                                    "src": "28180:4:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bytes_memory_ptr",
                                      "typeString": "bytes memory"
                                    }
                                  },
                                  "id": 1725,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "readUint8",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 812,
                                  "src": "28180:14:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_uint8_$bound_to$_t_bytes_memory_ptr_$",
                                    "typeString": "function (bytes memory,uint256) pure returns (uint8)"
                                  }
                                },
                                "id": 1727,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "28180:19:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint8",
                                  "typeString": "uint8"
                                }
                              },
                              "nodeType": "VariableDeclarationStatement",
                              "src": "28161:38:0"
                            },
                            {
                              "expression": {
                                "argumentTypes": null,
                                "id": 1733,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "argumentTypes": null,
                                  "id": 1729,
                                  "name": "idx",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1711,
                                  "src": "28207:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "+=",
                                "rightHandSide": {
                                  "argumentTypes": null,
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 1732,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "argumentTypes": null,
                                    "id": 1730,
                                    "name": "labelLen",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1723,
                                    "src": "28214:8:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "+",
                                  "rightExpression": {
                                    "argumentTypes": null,
                                    "hexValue": "31",
                                    "id": 1731,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "28225:1:0",
                                    "subdenomination": null,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_1_by_1",
                                      "typeString": "int_const 1"
                                    },
                                    "value": "1"
                                  },
                                  "src": "28214:12:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "28207:19:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 1734,
                              "nodeType": "ExpressionStatement",
                              "src": "28207:19:0"
                            },
                            {
                              "condition": {
                                "argumentTypes": null,
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 1737,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "argumentTypes": null,
                                  "id": 1735,
                                  "name": "labelLen",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1723,
                                  "src": "28238:8:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "==",
                                "rightExpression": {
                                  "argumentTypes": null,
                                  "hexValue": "30",
                                  "id": 1736,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "28250:1:0",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                },
                                "src": "28238:13:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "falseBody": null,
                              "id": 1740,
                              "nodeType": "IfStatement",
                              "src": "28234:43:0",
                              "trueBody": {
                                "id": 1739,
                                "nodeType": "Block",
                                "src": "28253:24:0",
                                "statements": [
                                  {
                                    "id": 1738,
                                    "nodeType": "Break",
                                    "src": "28263:5:0"
                                  }
                                ]
                              }
                            }
                          ]
                        },
                        "condition": {
                          "argumentTypes": null,
                          "hexValue": "74727565",
                          "id": 1714,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "bool",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "28114:4:0",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "value": "true"
                        },
                        "id": 1742,
                        "nodeType": "WhileStatement",
                        "src": "28107:176:0"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1745,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "id": 1743,
                            "name": "idx",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1711,
                            "src": "28295:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "-",
                          "rightExpression": {
                            "argumentTypes": null,
                            "id": 1744,
                            "name": "offset",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1705,
                            "src": "28301:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "28295:12:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 1709,
                        "id": 1746,
                        "nodeType": "Return",
                        "src": "28288:19:0"
                      }
                    ]
                  },
                  "documentation": "@dev Returns the number of bytes in the DNS name at 'offset' in 'self'.\n@param self The byte array to read a name from.\n@param offset The offset to start reading at.\n@return The length of the DNS name at 'offset', in bytes.",
                  "id": 1748,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "nameLength",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1706,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1703,
                        "name": "self",
                        "nodeType": "VariableDeclaration",
                        "scope": 1748,
                        "src": "27994:17:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 1702,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "27994:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1705,
                        "name": "offset",
                        "nodeType": "VariableDeclaration",
                        "scope": 1748,
                        "src": "28013:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1704,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "28013:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "27993:35:0"
                  },
                  "returnParameters": {
                    "id": 1709,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1708,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 1748,
                        "src": "28064:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1707,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "28064:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "28063:9:0"
                  },
                  "scope": 2314,
                  "src": "27974:338:0",
                  "stateMutability": "pure",
                  "superFunction": null,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 1770,
                    "nodeType": "Block",
                    "src": "28632:89:0",
                    "statements": [
                      {
                        "assignments": [
                          1758
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1758,
                            "name": "len",
                            "nodeType": "VariableDeclaration",
                            "scope": 1770,
                            "src": "28638:11:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 1757,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "28638:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "value": null,
                            "visibility": "internal"
                          }
                        ],
                        "id": 1763,
                        "initialValue": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 1760,
                              "name": "self",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1750,
                              "src": "28663:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "id": 1761,
                              "name": "offset",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1752,
                              "src": "28669:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 1759,
                            "name": "nameLength",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1748,
                            "src": "28652:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_uint256_$",
                              "typeString": "function (bytes memory,uint256) pure returns (uint256)"
                            }
                          },
                          "id": 1762,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "28652:24:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "28638:38:0"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 1766,
                              "name": "offset",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1752,
                              "src": "28704:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "id": 1767,
                              "name": "len",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1758,
                              "src": "28712:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "id": 1764,
                              "name": "self",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1750,
                              "src": "28689:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            },
                            "id": 1765,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "substring",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1003,
                            "src": "28689:14:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_bytes_memory_ptr_$bound_to$_t_bytes_memory_ptr_$",
                              "typeString": "function (bytes memory,uint256,uint256) pure returns (bytes memory)"
                            }
                          },
                          "id": 1768,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "28689:27:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes memory"
                          }
                        },
                        "functionReturnParameters": 1756,
                        "id": 1769,
                        "nodeType": "Return",
                        "src": "28682:34:0"
                      }
                    ]
                  },
                  "documentation": "@dev Returns a DNS format name at the specified offset of self.\n@param self The byte array to read a name from.\n@param offset The offset to start reading at.\n@return The name.",
                  "id": 1771,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "readName",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1753,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1750,
                        "name": "self",
                        "nodeType": "VariableDeclaration",
                        "scope": 1771,
                        "src": "28542:17:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 1749,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "28542:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1752,
                        "name": "offset",
                        "nodeType": "VariableDeclaration",
                        "scope": 1771,
                        "src": "28561:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1751,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "28561:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "28541:35:0"
                  },
                  "returnParameters": {
                    "id": 1756,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1755,
                        "name": "ret",
                        "nodeType": "VariableDeclaration",
                        "scope": 1771,
                        "src": "28612:16:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 1754,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "28612:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "28611:18:0"
                  },
                  "scope": 2314,
                  "src": "28524:197:0",
                  "stateMutability": "pure",
                  "superFunction": null,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 1819,
                    "nodeType": "Block",
                    "src": "29093:254:0",
                    "statements": [
                      {
                        "assignments": [
                          1781
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1781,
                            "name": "count",
                            "nodeType": "VariableDeclaration",
                            "scope": 1819,
                            "src": "29099:13:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 1780,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "29099:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "value": null,
                            "visibility": "internal"
                          }
                        ],
                        "id": 1783,
                        "initialValue": {
                          "argumentTypes": null,
                          "hexValue": "30",
                          "id": 1782,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "29115:1:0",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "29099:17:0"
                      },
                      {
                        "body": {
                          "id": 1815,
                          "nodeType": "Block",
                          "src": "29135:190:0",
                          "statements": [
                            {
                              "expression": {
                                "argumentTypes": null,
                                "arguments": [
                                  {
                                    "argumentTypes": null,
                                    "commonType": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    "id": 1789,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "argumentTypes": null,
                                      "id": 1786,
                                      "name": "offset",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1775,
                                      "src": "29150:6:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "<",
                                    "rightExpression": {
                                      "argumentTypes": null,
                                      "expression": {
                                        "argumentTypes": null,
                                        "id": 1787,
                                        "name": "self",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 1773,
                                        "src": "29159:4:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bytes_memory_ptr",
                                          "typeString": "bytes memory"
                                        }
                                      },
                                      "id": 1788,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberName": "length",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": null,
                                      "src": "29159:11:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "src": "29150:20:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  ],
                                  "id": 1785,
                                  "name": "assert",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 3332,
                                  "src": "29143:6:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_assert_pure$_t_bool_$returns$__$",
                                    "typeString": "function (bool) pure"
                                  }
                                },
                                "id": 1790,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "29143:28:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 1791,
                              "nodeType": "ExpressionStatement",
                              "src": "29143:28:0"
                            },
                            {
                              "assignments": [
                                1793
                              ],
                              "declarations": [
                                {
                                  "constant": false,
                                  "id": 1793,
                                  "name": "labelLen",
                                  "nodeType": "VariableDeclaration",
                                  "scope": 1815,
                                  "src": "29179:16:0",
                                  "stateVariable": false,
                                  "storageLocation": "default",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "typeName": {
                                    "id": 1792,
                                    "name": "uint256",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "29179:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "value": null,
                                  "visibility": "internal"
                                }
                              ],
                              "id": 1798,
                              "initialValue": {
                                "argumentTypes": null,
                                "arguments": [
                                  {
                                    "argumentTypes": null,
                                    "id": 1796,
                                    "name": "offset",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1775,
                                    "src": "29213:6:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": null,
                                    "id": 1794,
                                    "name": "self",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1773,
                                    "src": "29198:4:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bytes_memory_ptr",
                                      "typeString": "bytes memory"
                                    }
                                  },
                                  "id": 1795,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "readUint8",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 812,
                                  "src": "29198:14:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_uint8_$bound_to$_t_bytes_memory_ptr_$",
                                    "typeString": "function (bytes memory,uint256) pure returns (uint8)"
                                  }
                                },
                                "id": 1797,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "29198:22:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint8",
                                  "typeString": "uint8"
                                }
                              },
                              "nodeType": "VariableDeclarationStatement",
                              "src": "29179:41:0"
                            },
                            {
                              "expression": {
                                "argumentTypes": null,
                                "id": 1803,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "argumentTypes": null,
                                  "id": 1799,
                                  "name": "offset",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1775,
                                  "src": "29228:6:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "+=",
                                "rightHandSide": {
                                  "argumentTypes": null,
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 1802,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "argumentTypes": null,
                                    "id": 1800,
                                    "name": "labelLen",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1793,
                                    "src": "29238:8:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "+",
                                  "rightExpression": {
                                    "argumentTypes": null,
                                    "hexValue": "31",
                                    "id": 1801,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "29249:1:0",
                                    "subdenomination": null,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_1_by_1",
                                      "typeString": "int_const 1"
                                    },
                                    "value": "1"
                                  },
                                  "src": "29238:12:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "29228:22:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 1804,
                              "nodeType": "ExpressionStatement",
                              "src": "29228:22:0"
                            },
                            {
                              "condition": {
                                "argumentTypes": null,
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 1807,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "argumentTypes": null,
                                  "id": 1805,
                                  "name": "labelLen",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1793,
                                  "src": "29262:8:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "==",
                                "rightExpression": {
                                  "argumentTypes": null,
                                  "hexValue": "30",
                                  "id": 1806,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "29274:1:0",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                },
                                "src": "29262:13:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "falseBody": null,
                              "id": 1810,
                              "nodeType": "IfStatement",
                              "src": "29258:43:0",
                              "trueBody": {
                                "id": 1809,
                                "nodeType": "Block",
                                "src": "29277:24:0",
                                "statements": [
                                  {
                                    "id": 1808,
                                    "nodeType": "Break",
                                    "src": "29287:5:0"
                                  }
                                ]
                              }
                            },
                            {
                              "expression": {
                                "argumentTypes": null,
                                "id": 1813,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "argumentTypes": null,
                                  "id": 1811,
                                  "name": "count",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1781,
                                  "src": "29308:5:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "+=",
                                "rightHandSide": {
                                  "argumentTypes": null,
                                  "hexValue": "31",
                                  "id": 1812,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "29317:1:0",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_1_by_1",
                                    "typeString": "int_const 1"
                                  },
                                  "value": "1"
                                },
                                "src": "29308:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 1814,
                              "nodeType": "ExpressionStatement",
                              "src": "29308:10:0"
                            }
                          ]
                        },
                        "condition": {
                          "argumentTypes": null,
                          "hexValue": "74727565",
                          "id": 1784,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "bool",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "29129:4:0",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "value": "true"
                        },
                        "id": 1816,
                        "nodeType": "WhileStatement",
                        "src": "29122:203:0"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 1817,
                          "name": "count",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1781,
                          "src": "29337:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 1779,
                        "id": 1818,
                        "nodeType": "Return",
                        "src": "29330:12:0"
                      }
                    ]
                  },
                  "documentation": "@dev Returns the number of labels in the DNS name at 'offset' in 'self'.\n@param self The byte array to read a name from.\n@param offset The offset to start reading at.\n@return The number of labels in the DNS name at 'offset', in bytes.",
                  "id": 1820,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "labelCount",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1776,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1773,
                        "name": "self",
                        "nodeType": "VariableDeclaration",
                        "scope": 1820,
                        "src": "29012:17:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 1772,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "29012:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1775,
                        "name": "offset",
                        "nodeType": "VariableDeclaration",
                        "scope": 1820,
                        "src": "29031:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1774,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "29031:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "29011:35:0"
                  },
                  "returnParameters": {
                    "id": 1779,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1778,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 1820,
                        "src": "29082:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1777,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "29082:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "29081:9:0"
                  },
                  "scope": 2314,
                  "src": "28992:355:0",
                  "stateMutability": "pure",
                  "superFunction": null,
                  "visibility": "internal"
                },
                {
                  "canonicalName": "RRUtils.RRIterator",
                  "id": 1835,
                  "members": [
                    {
                      "constant": false,
                      "id": 1822,
                      "name": "data",
                      "nodeType": "VariableDeclaration",
                      "scope": 1835,
                      "src": "29432:10:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_storage_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 1821,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "29432:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1824,
                      "name": "offset",
                      "nodeType": "VariableDeclaration",
                      "scope": 1835,
                      "src": "29448:14:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1823,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "29448:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1826,
                      "name": "dnstype",
                      "nodeType": "VariableDeclaration",
                      "scope": 1835,
                      "src": "29468:14:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint16",
                        "typeString": "uint16"
                      },
                      "typeName": {
                        "id": 1825,
                        "name": "uint16",
                        "nodeType": "ElementaryTypeName",
                        "src": "29468:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint16",
                          "typeString": "uint16"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1828,
                      "name": "class",
                      "nodeType": "VariableDeclaration",
                      "scope": 1835,
                      "src": "29488:12:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint16",
                        "typeString": "uint16"
                      },
                      "typeName": {
                        "id": 1827,
                        "name": "uint16",
                        "nodeType": "ElementaryTypeName",
                        "src": "29488:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint16",
                          "typeString": "uint16"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1830,
                      "name": "ttl",
                      "nodeType": "VariableDeclaration",
                      "scope": 1835,
                      "src": "29506:10:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint32",
                        "typeString": "uint32"
                      },
                      "typeName": {
                        "id": 1829,
                        "name": "uint32",
                        "nodeType": "ElementaryTypeName",
                        "src": "29506:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1832,
                      "name": "rdataOffset",
                      "nodeType": "VariableDeclaration",
                      "scope": 1835,
                      "src": "29522:19:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1831,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "29522:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1834,
                      "name": "nextOffset",
                      "nodeType": "VariableDeclaration",
                      "scope": 1835,
                      "src": "29547:18:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1833,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "29547:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "name": "RRIterator",
                  "nodeType": "StructDefinition",
                  "scope": 2314,
                  "src": "29408:162:0",
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 1860,
                    "nodeType": "Block",
                    "src": "29882:70:0",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 1848,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 1844,
                              "name": "ret",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1842,
                              "src": "29888:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_RRIterator_$1835_memory_ptr",
                                "typeString": "struct RRUtils.RRIterator memory"
                              }
                            },
                            "id": 1846,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberName": "data",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1822,
                            "src": "29888:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory",
                              "typeString": "bytes memory"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "id": 1847,
                            "name": "self",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1837,
                            "src": "29899:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          },
                          "src": "29888:15:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_memory",
                            "typeString": "bytes memory"
                          }
                        },
                        "id": 1849,
                        "nodeType": "ExpressionStatement",
                        "src": "29888:15:0"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 1854,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 1850,
                              "name": "ret",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1842,
                              "src": "29909:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_RRIterator_$1835_memory_ptr",
                                "typeString": "struct RRUtils.RRIterator memory"
                              }
                            },
                            "id": 1852,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberName": "nextOffset",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1834,
                            "src": "29909:14:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "id": 1853,
                            "name": "offset",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1839,
                            "src": "29926:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "29909:23:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 1855,
                        "nodeType": "ExpressionStatement",
                        "src": "29909:23:0"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 1857,
                              "name": "ret",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1842,
                              "src": "29943:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_RRIterator_$1835_memory_ptr",
                                "typeString": "struct RRUtils.RRIterator memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_struct$_RRIterator_$1835_memory_ptr",
                                "typeString": "struct RRUtils.RRIterator memory"
                              }
                            ],
                            "id": 1856,
                            "name": "next",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1978,
                            "src": "29938:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_struct$_RRIterator_$1835_memory_ptr_$returns$__$",
                              "typeString": "function (struct RRUtils.RRIterator memory) pure"
                            }
                          },
                          "id": 1858,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "29938:9:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1859,
                        "nodeType": "ExpressionStatement",
                        "src": "29938:9:0"
                      }
                    ]
                  },
                  "documentation": "@dev Begins iterating over resource records.\n@param self The byte string to read from.\n@param offset The offset to start reading at.\n@return An iterator object.",
                  "id": 1861,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "iterateRRs",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1840,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1837,
                        "name": "self",
                        "nodeType": "VariableDeclaration",
                        "scope": 1861,
                        "src": "29787:17:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 1836,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "29787:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1839,
                        "name": "offset",
                        "nodeType": "VariableDeclaration",
                        "scope": 1861,
                        "src": "29806:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1838,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "29806:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "29786:35:0"
                  },
                  "returnParameters": {
                    "id": 1843,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1842,
                        "name": "ret",
                        "nodeType": "VariableDeclaration",
                        "scope": 1861,
                        "src": "29857:21:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_RRIterator_$1835_memory_ptr",
                          "typeString": "struct RRUtils.RRIterator"
                        },
                        "typeName": {
                          "contractScope": null,
                          "id": 1841,
                          "name": "RRIterator",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 1835,
                          "src": "29857:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_RRIterator_$1835_storage_ptr",
                            "typeString": "struct RRUtils.RRIterator"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "29856:23:0"
                  },
                  "scope": 2314,
                  "src": "29767:185:0",
                  "stateMutability": "pure",
                  "superFunction": null,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 1875,
                    "nodeType": "Block",
                    "src": "30182:49:0",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1873,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 1868,
                              "name": "iter",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1863,
                              "src": "30195:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_RRIterator_$1835_memory_ptr",
                                "typeString": "struct RRUtils.RRIterator memory"
                              }
                            },
                            "id": 1869,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "offset",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1824,
                            "src": "30195:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": ">=",
                          "rightExpression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 1870,
                                "name": "iter",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1863,
                                "src": "30210:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_RRIterator_$1835_memory_ptr",
                                  "typeString": "struct RRUtils.RRIterator memory"
                                }
                              },
                              "id": 1871,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "data",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 1822,
                              "src": "30210:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory",
                                "typeString": "bytes memory"
                              }
                            },
                            "id": 1872,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "length",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "30210:16:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "30195:31:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "functionReturnParameters": 1867,
                        "id": 1874,
                        "nodeType": "Return",
                        "src": "30188:38:0"
                      }
                    ]
                  },
                  "documentation": "@dev Returns true iff there are more RRs to iterate.\n@param iter The iterator to check.\n@return True iff the iterator has finished.",
                  "id": 1876,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "done",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1864,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1863,
                        "name": "iter",
                        "nodeType": "VariableDeclaration",
                        "scope": 1876,
                        "src": "30129:22:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_RRIterator_$1835_memory_ptr",
                          "typeString": "struct RRUtils.RRIterator"
                        },
                        "typeName": {
                          "contractScope": null,
                          "id": 1862,
                          "name": "RRIterator",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 1835,
                          "src": "30129:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_RRIterator_$1835_storage_ptr",
                            "typeString": "struct RRUtils.RRIterator"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "30128:24:0"
                  },
                  "returnParameters": {
                    "id": 1867,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1866,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 1876,
                        "src": "30176:4:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 1865,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "30176:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "30175:6:0"
                  },
                  "scope": 2314,
                  "src": "30115:116:0",
                  "stateMutability": "pure",
                  "superFunction": null,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 1977,
                    "nodeType": "Block",
                    "src": "30399:560:0",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 1886,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 1881,
                              "name": "iter",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1878,
                              "src": "30405:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_RRIterator_$1835_memory_ptr",
                                "typeString": "struct RRUtils.RRIterator memory"
                              }
                            },
                            "id": 1883,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberName": "offset",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1824,
                            "src": "30405:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 1884,
                              "name": "iter",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1878,
                              "src": "30419:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_RRIterator_$1835_memory_ptr",
                                "typeString": "struct RRUtils.RRIterator memory"
                              }
                            },
                            "id": 1885,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "nextOffset",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1834,
                            "src": "30419:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "30405:29:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 1887,
                        "nodeType": "ExpressionStatement",
                        "src": "30405:29:0"
                      },
                      {
                        "condition": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1893,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 1888,
                              "name": "iter",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1878,
                              "src": "30444:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_RRIterator_$1835_memory_ptr",
                                "typeString": "struct RRUtils.RRIterator memory"
                              }
                            },
                            "id": 1889,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "offset",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1824,
                            "src": "30444:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": ">=",
                          "rightExpression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 1890,
                                "name": "iter",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1878,
                                "src": "30459:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_RRIterator_$1835_memory_ptr",
                                  "typeString": "struct RRUtils.RRIterator memory"
                                }
                              },
                              "id": 1891,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "data",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 1822,
                              "src": "30459:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory",
                                "typeString": "bytes memory"
                              }
                            },
                            "id": 1892,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "length",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "30459:16:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "30444:31:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": null,
                        "id": 1896,
                        "nodeType": "IfStatement",
                        "src": "30440:58:0",
                        "trueBody": {
                          "id": 1895,
                          "nodeType": "Block",
                          "src": "30477:21:0",
                          "statements": [
                            {
                              "expression": null,
                              "functionReturnParameters": 1880,
                              "id": 1894,
                              "nodeType": "Return",
                              "src": "30485:7:0"
                            }
                          ]
                        }
                      },
                      {
                        "assignments": [
                          1898
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1898,
                            "name": "off",
                            "nodeType": "VariableDeclaration",
                            "scope": 1977,
                            "src": "30525:11:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 1897,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "30525:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "value": null,
                            "visibility": "internal"
                          }
                        ],
                        "id": 1908,
                        "initialValue": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1907,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 1899,
                              "name": "iter",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1878,
                              "src": "30539:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_RRIterator_$1835_memory_ptr",
                                "typeString": "struct RRUtils.RRIterator memory"
                              }
                            },
                            "id": 1900,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "offset",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1824,
                            "src": "30539:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "+",
                          "rightExpression": {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 1902,
                                  "name": "iter",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1878,
                                  "src": "30564:4:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_RRIterator_$1835_memory_ptr",
                                    "typeString": "struct RRUtils.RRIterator memory"
                                  }
                                },
                                "id": 1903,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "data",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 1822,
                                "src": "30564:9:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_memory",
                                  "typeString": "bytes memory"
                                }
                              },
                              {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 1904,
                                  "name": "iter",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1878,
                                  "src": "30575:4:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_RRIterator_$1835_memory_ptr",
                                    "typeString": "struct RRUtils.RRIterator memory"
                                  }
                                },
                                "id": 1905,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "offset",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 1824,
                                "src": "30575:11:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_bytes_memory",
                                  "typeString": "bytes memory"
                                },
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "id": 1901,
                              "name": "nameLength",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1748,
                              "src": "30553:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_uint256_$",
                                "typeString": "function (bytes memory,uint256) pure returns (uint256)"
                              }
                            },
                            "id": 1906,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "30553:34:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "30539:48:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "30525:62:0"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 1917,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 1909,
                              "name": "iter",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1878,
                              "src": "30627:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_RRIterator_$1835_memory_ptr",
                                "typeString": "struct RRUtils.RRIterator memory"
                              }
                            },
                            "id": 1911,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberName": "dnstype",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1826,
                            "src": "30627:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint16",
                              "typeString": "uint16"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "id": 1915,
                                "name": "off",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1898,
                                "src": "30663:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "expression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 1912,
                                  "name": "iter",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1878,
                                  "src": "30642:4:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_RRIterator_$1835_memory_ptr",
                                    "typeString": "struct RRUtils.RRIterator memory"
                                  }
                                },
                                "id": 1913,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "data",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 1822,
                                "src": "30642:9:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_memory",
                                  "typeString": "bytes memory"
                                }
                              },
                              "id": 1914,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "readUint16",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 832,
                              "src": "30642:20:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_uint16_$bound_to$_t_bytes_memory_ptr_$",
                                "typeString": "function (bytes memory,uint256) pure returns (uint16)"
                              }
                            },
                            "id": 1916,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "30642:25:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint16",
                              "typeString": "uint16"
                            }
                          },
                          "src": "30627:40:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint16",
                            "typeString": "uint16"
                          }
                        },
                        "id": 1918,
                        "nodeType": "ExpressionStatement",
                        "src": "30627:40:0"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 1921,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "id": 1919,
                            "name": "off",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1898,
                            "src": "30673:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "+=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "hexValue": "32",
                            "id": 1920,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "30680:1:0",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_2_by_1",
                              "typeString": "int_const 2"
                            },
                            "value": "2"
                          },
                          "src": "30673:8:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 1922,
                        "nodeType": "ExpressionStatement",
                        "src": "30673:8:0"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 1931,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 1923,
                              "name": "iter",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1878,
                              "src": "30687:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_RRIterator_$1835_memory_ptr",
                                "typeString": "struct RRUtils.RRIterator memory"
                              }
                            },
                            "id": 1925,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberName": "class",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1828,
                            "src": "30687:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint16",
                              "typeString": "uint16"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "id": 1929,
                                "name": "off",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1898,
                                "src": "30721:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "expression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 1926,
                                  "name": "iter",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1878,
                                  "src": "30700:4:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_RRIterator_$1835_memory_ptr",
                                    "typeString": "struct RRUtils.RRIterator memory"
                                  }
                                },
                                "id": 1927,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "data",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 1822,
                                "src": "30700:9:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_memory",
                                  "typeString": "bytes memory"
                                }
                              },
                              "id": 1928,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "readUint16",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 832,
                              "src": "30700:20:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_uint16_$bound_to$_t_bytes_memory_ptr_$",
                                "typeString": "function (bytes memory,uint256) pure returns (uint16)"
                              }
                            },
                            "id": 1930,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "30700:25:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint16",
                              "typeString": "uint16"
                            }
                          },
                          "src": "30687:38:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint16",
                            "typeString": "uint16"
                          }
                        },
                        "id": 1932,
                        "nodeType": "ExpressionStatement",
                        "src": "30687:38:0"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 1935,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "id": 1933,
                            "name": "off",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1898,
                            "src": "30731:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "+=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "hexValue": "32",
                            "id": 1934,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "30738:1:0",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_2_by_1",
                              "typeString": "int_const 2"
                            },
                            "value": "2"
                          },
                          "src": "30731:8:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 1936,
                        "nodeType": "ExpressionStatement",
                        "src": "30731:8:0"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 1945,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 1937,
                              "name": "iter",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1878,
                              "src": "30745:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_RRIterator_$1835_memory_ptr",
                                "typeString": "struct RRUtils.RRIterator memory"
                              }
                            },
                            "id": 1939,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberName": "ttl",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1830,
                            "src": "30745:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint32",
                              "typeString": "uint32"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "id": 1943,
                                "name": "off",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1898,
                                "src": "30777:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "expression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 1940,
                                  "name": "iter",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1878,
                                  "src": "30756:4:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_RRIterator_$1835_memory_ptr",
                                    "typeString": "struct RRUtils.RRIterator memory"
                                  }
                                },
                                "id": 1941,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "data",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 1822,
                                "src": "30756:9:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_memory",
                                  "typeString": "bytes memory"
                                }
                              },
                              "id": 1942,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "readUint32",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 852,
                              "src": "30756:20:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_uint32_$bound_to$_t_bytes_memory_ptr_$",
                                "typeString": "function (bytes memory,uint256) pure returns (uint32)"
                              }
                            },
                            "id": 1944,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "30756:25:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint32",
                              "typeString": "uint32"
                            }
                          },
                          "src": "30745:36:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        },
                        "id": 1946,
                        "nodeType": "ExpressionStatement",
                        "src": "30745:36:0"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 1949,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "id": 1947,
                            "name": "off",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1898,
                            "src": "30787:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "+=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "hexValue": "34",
                            "id": 1948,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "30794:1:0",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_4_by_1",
                              "typeString": "int_const 4"
                            },
                            "value": "4"
                          },
                          "src": "30787:8:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 1950,
                        "nodeType": "ExpressionStatement",
                        "src": "30787:8:0"
                      },
                      {
                        "assignments": [
                          1952
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1952,
                            "name": "rdataLength",
                            "nodeType": "VariableDeclaration",
                            "scope": 1977,
                            "src": "30824:19:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 1951,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "30824:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "value": null,
                            "visibility": "internal"
                          }
                        ],
                        "id": 1958,
                        "initialValue": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 1956,
                              "name": "off",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1898,
                              "src": "30867:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 1953,
                                "name": "iter",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1878,
                                "src": "30846:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_RRIterator_$1835_memory_ptr",
                                  "typeString": "struct RRUtils.RRIterator memory"
                                }
                              },
                              "id": 1954,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "data",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 1822,
                              "src": "30846:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory",
                                "typeString": "bytes memory"
                              }
                            },
                            "id": 1955,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "readUint16",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 832,
                            "src": "30846:20:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_uint16_$bound_to$_t_bytes_memory_ptr_$",
                              "typeString": "function (bytes memory,uint256) pure returns (uint16)"
                            }
                          },
                          "id": 1957,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "30846:25:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint16",
                            "typeString": "uint16"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "30824:47:0"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 1961,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "id": 1959,
                            "name": "off",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1898,
                            "src": "30877:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "+=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "hexValue": "32",
                            "id": 1960,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "30884:1:0",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_2_by_1",
                              "typeString": "int_const 2"
                            },
                            "value": "2"
                          },
                          "src": "30877:8:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 1962,
                        "nodeType": "ExpressionStatement",
                        "src": "30877:8:0"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 1967,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 1963,
                              "name": "iter",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1878,
                              "src": "30891:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_RRIterator_$1835_memory_ptr",
                                "typeString": "struct RRUtils.RRIterator memory"
                              }
                            },
                            "id": 1965,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberName": "rdataOffset",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1832,
                            "src": "30891:16:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "id": 1966,
                            "name": "off",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1898,
                            "src": "30910:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "30891:22:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 1968,
                        "nodeType": "ExpressionStatement",
                        "src": "30891:22:0"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 1975,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 1969,
                              "name": "iter",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1878,
                              "src": "30919:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_RRIterator_$1835_memory_ptr",
                                "typeString": "struct RRUtils.RRIterator memory"
                              }
                            },
                            "id": 1971,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberName": "nextOffset",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1834,
                            "src": "30919:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 1974,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "id": 1972,
                              "name": "off",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1898,
                              "src": "30937:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "+",
                            "rightExpression": {
                              "argumentTypes": null,
                              "id": 1973,
                              "name": "rdataLength",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1952,
                              "src": "30943:11:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "30937:17:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "30919:35:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 1976,
                        "nodeType": "ExpressionStatement",
                        "src": "30919:35:0"
                      }
                    ]
                  },
                  "documentation": "@dev Moves the iterator to the next resource record.\n@param iter The iterator to advance.",
                  "id": 1978,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "next",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1879,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1878,
                        "name": "iter",
                        "nodeType": "VariableDeclaration",
                        "scope": 1978,
                        "src": "30361:22:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_RRIterator_$1835_memory_ptr",
                          "typeString": "struct RRUtils.RRIterator"
                        },
                        "typeName": {
                          "contractScope": null,
                          "id": 1877,
                          "name": "RRIterator",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 1835,
                          "src": "30361:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_RRIterator_$1835_storage_ptr",
                            "typeString": "struct RRUtils.RRIterator"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "30360:24:0"
                  },
                  "returnParameters": {
                    "id": 1880,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "30399:0:0"
                  },
                  "scope": 2314,
                  "src": "30347:612:0",
                  "stateMutability": "pure",
                  "superFunction": null,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 1998,
                    "nodeType": "Block",
                    "src": "31202:86:0",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 1988,
                                "name": "iter",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1980,
                                "src": "31235:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_RRIterator_$1835_memory_ptr",
                                  "typeString": "struct RRUtils.RRIterator memory"
                                }
                              },
                              "id": 1989,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "offset",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 1824,
                              "src": "31235:11:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "expression": {
                                    "argumentTypes": null,
                                    "id": 1991,
                                    "name": "iter",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1980,
                                    "src": "31259:4:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_RRIterator_$1835_memory_ptr",
                                      "typeString": "struct RRUtils.RRIterator memory"
                                    }
                                  },
                                  "id": 1992,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "data",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 1822,
                                  "src": "31259:9:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes_memory",
                                    "typeString": "bytes memory"
                                  }
                                },
                                {
                                  "argumentTypes": null,
                                  "expression": {
                                    "argumentTypes": null,
                                    "id": 1993,
                                    "name": "iter",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1980,
                                    "src": "31270:4:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_RRIterator_$1835_memory_ptr",
                                      "typeString": "struct RRUtils.RRIterator memory"
                                    }
                                  },
                                  "id": 1994,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "offset",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 1824,
                                  "src": "31270:11:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_bytes_memory",
                                    "typeString": "bytes memory"
                                  },
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                ],
                                "id": 1990,
                                "name": "nameLength",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1748,
                                "src": "31248:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_uint256_$",
                                  "typeString": "function (bytes memory,uint256) pure returns (uint256)"
                                }
                              },
                              "id": 1995,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "31248:34:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 1985,
                                "name": "iter",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1980,
                                "src": "31215:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_RRIterator_$1835_memory_ptr",
                                  "typeString": "struct RRUtils.RRIterator memory"
                                }
                              },
                              "id": 1986,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "data",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 1822,
                              "src": "31215:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory",
                                "typeString": "bytes memory"
                              }
                            },
                            "id": 1987,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "substring",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1003,
                            "src": "31215:19:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_bytes_memory_ptr_$bound_to$_t_bytes_memory_ptr_$",
                              "typeString": "function (bytes memory,uint256,uint256) pure returns (bytes memory)"
                            }
                          },
                          "id": 1996,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "31215:68:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes memory"
                          }
                        },
                        "functionReturnParameters": 1984,
                        "id": 1997,
                        "nodeType": "Return",
                        "src": "31208:75:0"
                      }
                    ]
                  },
                  "documentation": "@dev Returns the name of the current record.\n@param iter The iterator.\n@return A new bytes object containing the owner name from the RR.",
                  "id": 1999,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "name",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1981,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1980,
                        "name": "iter",
                        "nodeType": "VariableDeclaration",
                        "scope": 1999,
                        "src": "31141:22:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_RRIterator_$1835_memory_ptr",
                          "typeString": "struct RRUtils.RRIterator"
                        },
                        "typeName": {
                          "contractScope": null,
                          "id": 1979,
                          "name": "RRIterator",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 1835,
                          "src": "31141:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_RRIterator_$1835_storage_ptr",
                            "typeString": "struct RRUtils.RRIterator"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "31140:24:0"
                  },
                  "returnParameters": {
                    "id": 1984,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1983,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 1999,
                        "src": "31188:12:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 1982,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "31188:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "31187:14:0"
                  },
                  "scope": 2314,
                  "src": "31127:161:0",
                  "stateMutability": "pure",
                  "superFunction": null,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 2018,
                    "nodeType": "Block",
                    "src": "31529:97:0",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 2009,
                                "name": "iter",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2001,
                                "src": "31568:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_RRIterator_$1835_memory_ptr",
                                  "typeString": "struct RRUtils.RRIterator memory"
                                }
                              },
                              "id": 2010,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "rdataOffset",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 1832,
                              "src": "31568:16:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 2015,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 2011,
                                  "name": "iter",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2001,
                                  "src": "31586:4:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_RRIterator_$1835_memory_ptr",
                                    "typeString": "struct RRUtils.RRIterator memory"
                                  }
                                },
                                "id": 2012,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "nextOffset",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 1834,
                                "src": "31586:15:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "-",
                              "rightExpression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 2013,
                                  "name": "iter",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2001,
                                  "src": "31604:4:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_RRIterator_$1835_memory_ptr",
                                    "typeString": "struct RRUtils.RRIterator memory"
                                  }
                                },
                                "id": 2014,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "rdataOffset",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 1832,
                                "src": "31604:16:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "31586:34:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 2006,
                                "name": "iter",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2001,
                                "src": "31548:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_RRIterator_$1835_memory_ptr",
                                  "typeString": "struct RRUtils.RRIterator memory"
                                }
                              },
                              "id": 2007,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "data",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 1822,
                              "src": "31548:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory",
                                "typeString": "bytes memory"
                              }
                            },
                            "id": 2008,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "substring",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1003,
                            "src": "31548:19:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_bytes_memory_ptr_$bound_to$_t_bytes_memory_ptr_$",
                              "typeString": "function (bytes memory,uint256,uint256) pure returns (bytes memory)"
                            }
                          },
                          "id": 2016,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "31548:73:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes memory"
                          }
                        },
                        "functionReturnParameters": 2005,
                        "id": 2017,
                        "nodeType": "Return",
                        "src": "31535:86:0"
                      }
                    ]
                  },
                  "documentation": "@dev Returns the rdata portion of the current record.\n@param iter The iterator.\n@return A new bytes object containing the RR's RDATA.",
                  "id": 2019,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "rdata",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 2002,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2001,
                        "name": "iter",
                        "nodeType": "VariableDeclaration",
                        "scope": 2019,
                        "src": "31468:22:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_RRIterator_$1835_memory_ptr",
                          "typeString": "struct RRUtils.RRIterator"
                        },
                        "typeName": {
                          "contractScope": null,
                          "id": 2000,
                          "name": "RRIterator",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 1835,
                          "src": "31468:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_RRIterator_$1835_storage_ptr",
                            "typeString": "struct RRUtils.RRIterator"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "31467:24:0"
                  },
                  "returnParameters": {
                    "id": 2005,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2004,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 2019,
                        "src": "31515:12:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 2003,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "31515:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "31514:14:0"
                  },
                  "scope": 2314,
                  "src": "31453:173:0",
                  "stateMutability": "pure",
                  "superFunction": null,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 2138,
                    "nodeType": "Block",
                    "src": "32053:805:0",
                    "statements": [
                      {
                        "assignments": [
                          2031
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 2031,
                            "name": "typeWindow",
                            "nodeType": "VariableDeclaration",
                            "scope": 2138,
                            "src": "32059:16:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint8",
                              "typeString": "uint8"
                            },
                            "typeName": {
                              "id": 2030,
                              "name": "uint8",
                              "nodeType": "ElementaryTypeName",
                              "src": "32059:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint8",
                                "typeString": "uint8"
                              }
                            },
                            "value": null,
                            "visibility": "internal"
                          }
                        ],
                        "id": 2037,
                        "initialValue": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_uint16",
                                "typeString": "uint16"
                              },
                              "id": 2035,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "id": 2033,
                                "name": "rrtype",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2025,
                                "src": "32084:6:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint16",
                                  "typeString": "uint16"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": ">>",
                              "rightExpression": {
                                "argumentTypes": null,
                                "hexValue": "38",
                                "id": 2034,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "32094:1:0",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_8_by_1",
                                  "typeString": "int_const 8"
                                },
                                "value": "8"
                              },
                              "src": "32084:11:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint16",
                                "typeString": "uint16"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint16",
                                "typeString": "uint16"
                              }
                            ],
                            "id": 2032,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "32078:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_uint8_$",
                              "typeString": "type(uint8)"
                            },
                            "typeName": "uint8"
                          },
                          "id": 2036,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "32078:18:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint8",
                            "typeString": "uint8"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "32059:37:0"
                      },
                      {
                        "assignments": [
                          2039
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 2039,
                            "name": "windowByte",
                            "nodeType": "VariableDeclaration",
                            "scope": 2138,
                            "src": "32102:16:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint8",
                              "typeString": "uint8"
                            },
                            "typeName": {
                              "id": 2038,
                              "name": "uint8",
                              "nodeType": "ElementaryTypeName",
                              "src": "32102:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint8",
                                "typeString": "uint8"
                              }
                            },
                            "value": null,
                            "visibility": "internal"
                          }
                        ],
                        "id": 2048,
                        "initialValue": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_uint16",
                                "typeString": "uint16"
                              },
                              "id": 2046,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "components": [
                                  {
                                    "argumentTypes": null,
                                    "commonType": {
                                      "typeIdentifier": "t_uint16",
                                      "typeString": "uint16"
                                    },
                                    "id": 2043,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "argumentTypes": null,
                                      "id": 2041,
                                      "name": "rrtype",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2025,
                                      "src": "32128:6:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint16",
                                        "typeString": "uint16"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "&",
                                    "rightExpression": {
                                      "argumentTypes": null,
                                      "hexValue": "30786666",
                                      "id": 2042,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "32137:4:0",
                                      "subdenomination": null,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_255_by_1",
                                        "typeString": "int_const 255"
                                      },
                                      "value": "0xff"
                                    },
                                    "src": "32128:13:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint16",
                                      "typeString": "uint16"
                                    }
                                  }
                                ],
                                "id": 2044,
                                "isConstant": false,
                                "isInlineArray": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "TupleExpression",
                                "src": "32127:15:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint16",
                                  "typeString": "uint16"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "/",
                              "rightExpression": {
                                "argumentTypes": null,
                                "hexValue": "38",
                                "id": 2045,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "32145:1:0",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_8_by_1",
                                  "typeString": "int_const 8"
                                },
                                "value": "8"
                              },
                              "src": "32127:19:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint16",
                                "typeString": "uint16"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint16",
                                "typeString": "uint16"
                              }
                            ],
                            "id": 2040,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "32121:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_uint8_$",
                              "typeString": "type(uint8)"
                            },
                            "typeName": "uint8"
                          },
                          "id": 2047,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "32121:26:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint8",
                            "typeString": "uint8"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "32102:45:0"
                      },
                      {
                        "assignments": [
                          2050
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 2050,
                            "name": "windowBitmask",
                            "nodeType": "VariableDeclaration",
                            "scope": 2138,
                            "src": "32153:19:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint8",
                              "typeString": "uint8"
                            },
                            "typeName": {
                              "id": 2049,
                              "name": "uint8",
                              "nodeType": "ElementaryTypeName",
                              "src": "32153:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint8",
                                "typeString": "uint8"
                              }
                            },
                            "value": null,
                            "visibility": "internal"
                          }
                        ],
                        "id": 2067,
                        "initialValue": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_uint8",
                                "typeString": "uint8"
                              },
                              "id": 2065,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "arguments": [
                                  {
                                    "argumentTypes": null,
                                    "hexValue": "31",
                                    "id": 2053,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "32187:1:0",
                                    "subdenomination": null,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_1_by_1",
                                      "typeString": "int_const 1"
                                    },
                                    "value": "1"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_rational_1_by_1",
                                      "typeString": "int_const 1"
                                    }
                                  ],
                                  "id": 2052,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "32181:5:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_uint8_$",
                                    "typeString": "type(uint8)"
                                  },
                                  "typeName": "uint8"
                                },
                                "id": 2054,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "32181:8:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint8",
                                  "typeString": "uint8"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "<<",
                              "rightExpression": {
                                "argumentTypes": null,
                                "components": [
                                  {
                                    "argumentTypes": null,
                                    "commonType": {
                                      "typeIdentifier": "t_uint8",
                                      "typeString": "uint8"
                                    },
                                    "id": 2063,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "argumentTypes": null,
                                      "arguments": [
                                        {
                                          "argumentTypes": null,
                                          "hexValue": "37",
                                          "id": 2056,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": true,
                                          "kind": "number",
                                          "lValueRequested": false,
                                          "nodeType": "Literal",
                                          "src": "32200:1:0",
                                          "subdenomination": null,
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_rational_7_by_1",
                                            "typeString": "int_const 7"
                                          },
                                          "value": "7"
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_rational_7_by_1",
                                            "typeString": "int_const 7"
                                          }
                                        ],
                                        "id": 2055,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "lValueRequested": false,
                                        "nodeType": "ElementaryTypeNameExpression",
                                        "src": "32194:5:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_type$_t_uint8_$",
                                          "typeString": "type(uint8)"
                                        },
                                        "typeName": "uint8"
                                      },
                                      "id": 2057,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "typeConversion",
                                      "lValueRequested": false,
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "32194:8:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint8",
                                        "typeString": "uint8"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "-",
                                    "rightExpression": {
                                      "argumentTypes": null,
                                      "arguments": [
                                        {
                                          "argumentTypes": null,
                                          "commonType": {
                                            "typeIdentifier": "t_uint16",
                                            "typeString": "uint16"
                                          },
                                          "id": 2061,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "leftExpression": {
                                            "argumentTypes": null,
                                            "id": 2059,
                                            "name": "rrtype",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 2025,
                                            "src": "32211:6:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint16",
                                              "typeString": "uint16"
                                            }
                                          },
                                          "nodeType": "BinaryOperation",
                                          "operator": "&",
                                          "rightExpression": {
                                            "argumentTypes": null,
                                            "hexValue": "307837",
                                            "id": 2060,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": true,
                                            "kind": "number",
                                            "lValueRequested": false,
                                            "nodeType": "Literal",
                                            "src": "32220:3:0",
                                            "subdenomination": null,
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_rational_7_by_1",
                                              "typeString": "int_const 7"
                                            },
                                            "value": "0x7"
                                          },
                                          "src": "32211:12:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint16",
                                            "typeString": "uint16"
                                          }
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_uint16",
                                            "typeString": "uint16"
                                          }
                                        ],
                                        "id": 2058,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "lValueRequested": false,
                                        "nodeType": "ElementaryTypeNameExpression",
                                        "src": "32205:5:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_type$_t_uint8_$",
                                          "typeString": "type(uint8)"
                                        },
                                        "typeName": "uint8"
                                      },
                                      "id": 2062,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "typeConversion",
                                      "lValueRequested": false,
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "32205:19:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint8",
                                        "typeString": "uint8"
                                      }
                                    },
                                    "src": "32194:30:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint8",
                                      "typeString": "uint8"
                                    }
                                  }
                                ],
                                "id": 2064,
                                "isConstant": false,
                                "isInlineArray": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "TupleExpression",
                                "src": "32193:32:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint8",
                                  "typeString": "uint8"
                                }
                              },
                              "src": "32181:44:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint8",
                                "typeString": "uint8"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint8",
                                "typeString": "uint8"
                              }
                            ],
                            "id": 2051,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "32175:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_uint8_$",
                              "typeString": "type(uint8)"
                            },
                            "typeName": "uint8"
                          },
                          "id": 2066,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "32175:51:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint8",
                            "typeString": "uint8"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "32153:73:0"
                      },
                      {
                        "body": {
                          "id": 2134,
                          "nodeType": "Block",
                          "src": "32280:555:0",
                          "statements": [
                            {
                              "assignments": [
                                2077
                              ],
                              "declarations": [
                                {
                                  "constant": false,
                                  "id": 2077,
                                  "name": "window",
                                  "nodeType": "VariableDeclaration",
                                  "scope": 2134,
                                  "src": "32288:12:0",
                                  "stateVariable": false,
                                  "storageLocation": "default",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint8",
                                    "typeString": "uint8"
                                  },
                                  "typeName": {
                                    "id": 2076,
                                    "name": "uint8",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "32288:5:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint8",
                                      "typeString": "uint8"
                                    }
                                  },
                                  "value": null,
                                  "visibility": "internal"
                                }
                              ],
                              "id": 2082,
                              "initialValue": {
                                "argumentTypes": null,
                                "arguments": [
                                  {
                                    "argumentTypes": null,
                                    "id": 2080,
                                    "name": "off",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2069,
                                    "src": "32318:3:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": null,
                                    "id": 2078,
                                    "name": "self",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2021,
                                    "src": "32303:4:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bytes_memory_ptr",
                                      "typeString": "bytes memory"
                                    }
                                  },
                                  "id": 2079,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "readUint8",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 812,
                                  "src": "32303:14:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_uint8_$bound_to$_t_bytes_memory_ptr_$",
                                    "typeString": "function (bytes memory,uint256) pure returns (uint8)"
                                  }
                                },
                                "id": 2081,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "32303:19:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint8",
                                  "typeString": "uint8"
                                }
                              },
                              "nodeType": "VariableDeclarationStatement",
                              "src": "32288:34:0"
                            },
                            {
                              "assignments": [
                                2084
                              ],
                              "declarations": [
                                {
                                  "constant": false,
                                  "id": 2084,
                                  "name": "len",
                                  "nodeType": "VariableDeclaration",
                                  "scope": 2134,
                                  "src": "32330:9:0",
                                  "stateVariable": false,
                                  "storageLocation": "default",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint8",
                                    "typeString": "uint8"
                                  },
                                  "typeName": {
                                    "id": 2083,
                                    "name": "uint8",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "32330:5:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint8",
                                      "typeString": "uint8"
                                    }
                                  },
                                  "value": null,
                                  "visibility": "internal"
                                }
                              ],
                              "id": 2091,
                              "initialValue": {
                                "argumentTypes": null,
                                "arguments": [
                                  {
                                    "argumentTypes": null,
                                    "commonType": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    "id": 2089,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "argumentTypes": null,
                                      "id": 2087,
                                      "name": "off",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2069,
                                      "src": "32357:3:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "+",
                                    "rightExpression": {
                                      "argumentTypes": null,
                                      "hexValue": "31",
                                      "id": 2088,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "32363:1:0",
                                      "subdenomination": null,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_1_by_1",
                                        "typeString": "int_const 1"
                                      },
                                      "value": "1"
                                    },
                                    "src": "32357:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": null,
                                    "id": 2085,
                                    "name": "self",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2021,
                                    "src": "32342:4:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bytes_memory_ptr",
                                      "typeString": "bytes memory"
                                    }
                                  },
                                  "id": 2086,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "readUint8",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 812,
                                  "src": "32342:14:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_uint8_$bound_to$_t_bytes_memory_ptr_$",
                                    "typeString": "function (bytes memory,uint256) pure returns (uint8)"
                                  }
                                },
                                "id": 2090,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "32342:23:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint8",
                                  "typeString": "uint8"
                                }
                              },
                              "nodeType": "VariableDeclarationStatement",
                              "src": "32330:35:0"
                            },
                            {
                              "condition": {
                                "argumentTypes": null,
                                "commonType": {
                                  "typeIdentifier": "t_uint8",
                                  "typeString": "uint8"
                                },
                                "id": 2094,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "argumentTypes": null,
                                  "id": 2092,
                                  "name": "typeWindow",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2031,
                                  "src": "32377:10:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint8",
                                    "typeString": "uint8"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "<",
                                "rightExpression": {
                                  "argumentTypes": null,
                                  "id": 2093,
                                  "name": "window",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2077,
                                  "src": "32390:6:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint8",
                                    "typeString": "uint8"
                                  }
                                },
                                "src": "32377:19:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "falseBody": {
                                "condition": {
                                  "argumentTypes": null,
                                  "commonType": {
                                    "typeIdentifier": "t_uint8",
                                    "typeString": "uint8"
                                  },
                                  "id": 2100,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "argumentTypes": null,
                                    "id": 2098,
                                    "name": "typeWindow",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2031,
                                    "src": "32493:10:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint8",
                                      "typeString": "uint8"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "==",
                                  "rightExpression": {
                                    "argumentTypes": null,
                                    "id": 2099,
                                    "name": "window",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2077,
                                    "src": "32507:6:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint8",
                                      "typeString": "uint8"
                                    }
                                  },
                                  "src": "32493:20:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                },
                                "falseBody": {
                                  "id": 2131,
                                  "nodeType": "Block",
                                  "src": "32763:66:0",
                                  "statements": [
                                    {
                                      "expression": {
                                        "argumentTypes": null,
                                        "id": 2129,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "leftHandSide": {
                                          "argumentTypes": null,
                                          "id": 2125,
                                          "name": "off",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 2069,
                                          "src": "32806:3:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "nodeType": "Assignment",
                                        "operator": "+=",
                                        "rightHandSide": {
                                          "argumentTypes": null,
                                          "commonType": {
                                            "typeIdentifier": "t_uint8",
                                            "typeString": "uint8"
                                          },
                                          "id": 2128,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "leftExpression": {
                                            "argumentTypes": null,
                                            "id": 2126,
                                            "name": "len",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 2084,
                                            "src": "32813:3:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint8",
                                              "typeString": "uint8"
                                            }
                                          },
                                          "nodeType": "BinaryOperation",
                                          "operator": "+",
                                          "rightExpression": {
                                            "argumentTypes": null,
                                            "hexValue": "32",
                                            "id": 2127,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": true,
                                            "kind": "number",
                                            "lValueRequested": false,
                                            "nodeType": "Literal",
                                            "src": "32819:1:0",
                                            "subdenomination": null,
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_rational_2_by_1",
                                              "typeString": "int_const 2"
                                            },
                                            "value": "2"
                                          },
                                          "src": "32813:7:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint8",
                                            "typeString": "uint8"
                                          }
                                        },
                                        "src": "32806:14:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "id": 2130,
                                      "nodeType": "ExpressionStatement",
                                      "src": "32806:14:0"
                                    }
                                  ]
                                },
                                "id": 2132,
                                "nodeType": "IfStatement",
                                "src": "32489:340:0",
                                "trueBody": {
                                  "id": 2124,
                                  "nodeType": "Block",
                                  "src": "32515:242:0",
                                  "statements": [
                                    {
                                      "condition": {
                                        "argumentTypes": null,
                                        "commonType": {
                                          "typeIdentifier": "t_uint8",
                                          "typeString": "uint8"
                                        },
                                        "id": 2105,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "leftExpression": {
                                          "argumentTypes": null,
                                          "commonType": {
                                            "typeIdentifier": "t_uint8",
                                            "typeString": "uint8"
                                          },
                                          "id": 2103,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "leftExpression": {
                                            "argumentTypes": null,
                                            "id": 2101,
                                            "name": "len",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 2084,
                                            "src": "32563:3:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint8",
                                              "typeString": "uint8"
                                            }
                                          },
                                          "nodeType": "BinaryOperation",
                                          "operator": "*",
                                          "rightExpression": {
                                            "argumentTypes": null,
                                            "hexValue": "38",
                                            "id": 2102,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": true,
                                            "kind": "number",
                                            "lValueRequested": false,
                                            "nodeType": "Literal",
                                            "src": "32569:1:0",
                                            "subdenomination": null,
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_rational_8_by_1",
                                              "typeString": "int_const 8"
                                            },
                                            "value": "8"
                                          },
                                          "src": "32563:7:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint8",
                                            "typeString": "uint8"
                                          }
                                        },
                                        "nodeType": "BinaryOperation",
                                        "operator": "<=",
                                        "rightExpression": {
                                          "argumentTypes": null,
                                          "id": 2104,
                                          "name": "windowByte",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 2039,
                                          "src": "32574:10:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint8",
                                            "typeString": "uint8"
                                          }
                                        },
                                        "src": "32563:21:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bool",
                                          "typeString": "bool"
                                        }
                                      },
                                      "falseBody": null,
                                      "id": 2109,
                                      "nodeType": "IfStatement",
                                      "src": "32559:114:0",
                                      "trueBody": {
                                        "id": 2108,
                                        "nodeType": "Block",
                                        "src": "32586:87:0",
                                        "statements": [
                                          {
                                            "expression": {
                                              "argumentTypes": null,
                                              "hexValue": "66616c7365",
                                              "id": 2106,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": true,
                                              "kind": "bool",
                                              "lValueRequested": false,
                                              "nodeType": "Literal",
                                              "src": "32657:5:0",
                                              "subdenomination": null,
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_bool",
                                                "typeString": "bool"
                                              },
                                              "value": "false"
                                            },
                                            "functionReturnParameters": 2029,
                                            "id": 2107,
                                            "nodeType": "Return",
                                            "src": "32650:12:0"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "expression": {
                                        "argumentTypes": null,
                                        "commonType": {
                                          "typeIdentifier": "t_uint8",
                                          "typeString": "uint8"
                                        },
                                        "id": 2122,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "leftExpression": {
                                          "argumentTypes": null,
                                          "components": [
                                            {
                                              "argumentTypes": null,
                                              "commonType": {
                                                "typeIdentifier": "t_uint8",
                                                "typeString": "uint8"
                                              },
                                              "id": 2119,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": false,
                                              "lValueRequested": false,
                                              "leftExpression": {
                                                "argumentTypes": null,
                                                "arguments": [
                                                  {
                                                    "argumentTypes": null,
                                                    "commonType": {
                                                      "typeIdentifier": "t_uint256",
                                                      "typeString": "uint256"
                                                    },
                                                    "id": 2116,
                                                    "isConstant": false,
                                                    "isLValue": false,
                                                    "isPure": false,
                                                    "lValueRequested": false,
                                                    "leftExpression": {
                                                      "argumentTypes": null,
                                                      "commonType": {
                                                        "typeIdentifier": "t_uint256",
                                                        "typeString": "uint256"
                                                      },
                                                      "id": 2114,
                                                      "isConstant": false,
                                                      "isLValue": false,
                                                      "isPure": false,
                                                      "lValueRequested": false,
                                                      "leftExpression": {
                                                        "argumentTypes": null,
                                                        "id": 2112,
                                                        "name": "off",
                                                        "nodeType": "Identifier",
                                                        "overloadedDeclarations": [],
                                                        "referencedDeclaration": 2069,
                                                        "src": "32705:3:0",
                                                        "typeDescriptions": {
                                                          "typeIdentifier": "t_uint256",
                                                          "typeString": "uint256"
                                                        }
                                                      },
                                                      "nodeType": "BinaryOperation",
                                                      "operator": "+",
                                                      "rightExpression": {
                                                        "argumentTypes": null,
                                                        "id": 2113,
                                                        "name": "windowByte",
                                                        "nodeType": "Identifier",
                                                        "overloadedDeclarations": [],
                                                        "referencedDeclaration": 2039,
                                                        "src": "32711:10:0",
                                                        "typeDescriptions": {
                                                          "typeIdentifier": "t_uint8",
                                                          "typeString": "uint8"
                                                        }
                                                      },
                                                      "src": "32705:16:0",
                                                      "typeDescriptions": {
                                                        "typeIdentifier": "t_uint256",
                                                        "typeString": "uint256"
                                                      }
                                                    },
                                                    "nodeType": "BinaryOperation",
                                                    "operator": "+",
                                                    "rightExpression": {
                                                      "argumentTypes": null,
                                                      "hexValue": "32",
                                                      "id": 2115,
                                                      "isConstant": false,
                                                      "isLValue": false,
                                                      "isPure": true,
                                                      "kind": "number",
                                                      "lValueRequested": false,
                                                      "nodeType": "Literal",
                                                      "src": "32724:1:0",
                                                      "subdenomination": null,
                                                      "typeDescriptions": {
                                                        "typeIdentifier": "t_rational_2_by_1",
                                                        "typeString": "int_const 2"
                                                      },
                                                      "value": "2"
                                                    },
                                                    "src": "32705:20:0",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_uint256",
                                                      "typeString": "uint256"
                                                    }
                                                  }
                                                ],
                                                "expression": {
                                                  "argumentTypes": [
                                                    {
                                                      "typeIdentifier": "t_uint256",
                                                      "typeString": "uint256"
                                                    }
                                                  ],
                                                  "expression": {
                                                    "argumentTypes": null,
                                                    "id": 2110,
                                                    "name": "self",
                                                    "nodeType": "Identifier",
                                                    "overloadedDeclarations": [],
                                                    "referencedDeclaration": 2021,
                                                    "src": "32690:4:0",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_bytes_memory_ptr",
                                                      "typeString": "bytes memory"
                                                    }
                                                  },
                                                  "id": 2111,
                                                  "isConstant": false,
                                                  "isLValue": false,
                                                  "isPure": false,
                                                  "lValueRequested": false,
                                                  "memberName": "readUint8",
                                                  "nodeType": "MemberAccess",
                                                  "referencedDeclaration": 812,
                                                  "src": "32690:14:0",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_uint8_$bound_to$_t_bytes_memory_ptr_$",
                                                    "typeString": "function (bytes memory,uint256) pure returns (uint8)"
                                                  }
                                                },
                                                "id": 2117,
                                                "isConstant": false,
                                                "isLValue": false,
                                                "isPure": false,
                                                "kind": "functionCall",
                                                "lValueRequested": false,
                                                "names": [],
                                                "nodeType": "FunctionCall",
                                                "src": "32690:36:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_uint8",
                                                  "typeString": "uint8"
                                                }
                                              },
                                              "nodeType": "BinaryOperation",
                                              "operator": "&",
                                              "rightExpression": {
                                                "argumentTypes": null,
                                                "id": 2118,
                                                "name": "windowBitmask",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 2050,
                                                "src": "32729:13:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_uint8",
                                                  "typeString": "uint8"
                                                }
                                              },
                                              "src": "32690:52:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint8",
                                                "typeString": "uint8"
                                              }
                                            }
                                          ],
                                          "id": 2120,
                                          "isConstant": false,
                                          "isInlineArray": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "nodeType": "TupleExpression",
                                          "src": "32689:54:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint8",
                                            "typeString": "uint8"
                                          }
                                        },
                                        "nodeType": "BinaryOperation",
                                        "operator": "!=",
                                        "rightExpression": {
                                          "argumentTypes": null,
                                          "hexValue": "30",
                                          "id": 2121,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": true,
                                          "kind": "number",
                                          "lValueRequested": false,
                                          "nodeType": "Literal",
                                          "src": "32747:1:0",
                                          "subdenomination": null,
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_rational_0_by_1",
                                            "typeString": "int_const 0"
                                          },
                                          "value": "0"
                                        },
                                        "src": "32689:59:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bool",
                                          "typeString": "bool"
                                        }
                                      },
                                      "functionReturnParameters": 2029,
                                      "id": 2123,
                                      "nodeType": "Return",
                                      "src": "32682:66:0"
                                    }
                                  ]
                                }
                              },
                              "id": 2133,
                              "nodeType": "IfStatement",
                              "src": "32373:456:0",
                              "trueBody": {
                                "id": 2097,
                                "nodeType": "Block",
                                "src": "32398:85:0",
                                "statements": [
                                  {
                                    "expression": {
                                      "argumentTypes": null,
                                      "hexValue": "66616c7365",
                                      "id": 2095,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "bool",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "32469:5:0",
                                      "subdenomination": null,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bool",
                                        "typeString": "bool"
                                      },
                                      "value": "false"
                                    },
                                    "functionReturnParameters": 2029,
                                    "id": 2096,
                                    "nodeType": "Return",
                                    "src": "32462:12:0"
                                  }
                                ]
                              }
                            }
                          ]
                        },
                        "condition": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 2075,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "id": 2072,
                            "name": "off",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2069,
                            "src": "32259:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "<",
                          "rightExpression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 2073,
                              "name": "self",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2021,
                              "src": "32265:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            },
                            "id": 2074,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "length",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "32265:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "32259:17:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 2135,
                        "initializationExpression": {
                          "assignments": [
                            2069
                          ],
                          "declarations": [
                            {
                              "constant": false,
                              "id": 2069,
                              "name": "off",
                              "nodeType": "VariableDeclaration",
                              "scope": 2135,
                              "src": "32237:11:0",
                              "stateVariable": false,
                              "storageLocation": "default",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "typeName": {
                                "id": 2068,
                                "name": "uint256",
                                "nodeType": "ElementaryTypeName",
                                "src": "32237:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "value": null,
                              "visibility": "internal"
                            }
                          ],
                          "id": 2071,
                          "initialValue": {
                            "argumentTypes": null,
                            "id": 2070,
                            "name": "offset",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2023,
                            "src": "32251:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "VariableDeclarationStatement",
                          "src": "32237:20:0"
                        },
                        "loopExpression": null,
                        "nodeType": "ForStatement",
                        "src": "32232:603:0"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "hexValue": "66616c7365",
                          "id": 2136,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "bool",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "32848:5:0",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "value": "false"
                        },
                        "functionReturnParameters": 2029,
                        "id": 2137,
                        "nodeType": "Return",
                        "src": "32841:12:0"
                      }
                    ]
                  },
                  "documentation": "@dev Checks if a given RR type exists in a type bitmap.\n@param self The byte string to read the type bitmap from.\n@param offset The offset to start reading at.\n@param rrtype The RR type to check for.\n@return True if the type is found in the bitmap, false otherwise.",
                  "id": 2139,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "checkTypeBitmap",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 2026,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2021,
                        "name": "self",
                        "nodeType": "VariableDeclaration",
                        "scope": 2139,
                        "src": "31963:17:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 2020,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "31963:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2023,
                        "name": "offset",
                        "nodeType": "VariableDeclaration",
                        "scope": 2139,
                        "src": "31986:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 2022,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "31986:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2025,
                        "name": "rrtype",
                        "nodeType": "VariableDeclaration",
                        "scope": 2139,
                        "src": "32006:13:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint16",
                          "typeString": "uint16"
                        },
                        "typeName": {
                          "id": 2024,
                          "name": "uint16",
                          "nodeType": "ElementaryTypeName",
                          "src": "32006:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint16",
                            "typeString": "uint16"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "31957:66:0"
                  },
                  "returnParameters": {
                    "id": 2029,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2028,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 2139,
                        "src": "32047:4:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 2027,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "32047:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "32046:6:0"
                  },
                  "scope": 2314,
                  "src": "31933:925:0",
                  "stateMutability": "pure",
                  "superFunction": null,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 2293,
                    "nodeType": "Block",
                    "src": "32968:1110:0",
                    "statements": [
                      {
                        "condition": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 2150,
                              "name": "other",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2143,
                              "src": "32990:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "id": 2148,
                              "name": "self",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2141,
                              "src": "32978:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            },
                            "id": 2149,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "equals",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 796,
                            "src": "32978:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_bytes_memory_ptr_$returns$_t_bool_$bound_to$_t_bytes_memory_ptr_$",
                              "typeString": "function (bytes memory,bytes memory) pure returns (bool)"
                            }
                          },
                          "id": 2151,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "32978:18:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": null,
                        "id": 2155,
                        "nodeType": "IfStatement",
                        "src": "32974:47:0",
                        "trueBody": {
                          "id": 2154,
                          "nodeType": "Block",
                          "src": "32998:23:0",
                          "statements": [
                            {
                              "expression": {
                                "argumentTypes": null,
                                "hexValue": "30",
                                "id": 2152,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "33013:1:0",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              },
                              "functionReturnParameters": 2147,
                              "id": 2153,
                              "nodeType": "Return",
                              "src": "33006:8:0"
                            }
                          ]
                        }
                      },
                      {
                        "assignments": [
                          2157
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 2157,
                            "name": "off",
                            "nodeType": "VariableDeclaration",
                            "scope": 2293,
                            "src": "33027:11:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 2156,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "33027:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "value": null,
                            "visibility": "internal"
                          }
                        ],
                        "id": 2158,
                        "initialValue": null,
                        "nodeType": "VariableDeclarationStatement",
                        "src": "33027:11:0"
                      },
                      {
                        "assignments": [
                          2160
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 2160,
                            "name": "otheroff",
                            "nodeType": "VariableDeclaration",
                            "scope": 2293,
                            "src": "33044:16:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 2159,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "33044:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "value": null,
                            "visibility": "internal"
                          }
                        ],
                        "id": 2161,
                        "initialValue": null,
                        "nodeType": "VariableDeclarationStatement",
                        "src": "33044:16:0"
                      },
                      {
                        "assignments": [
                          2163
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 2163,
                            "name": "prevoff",
                            "nodeType": "VariableDeclaration",
                            "scope": 2293,
                            "src": "33066:15:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 2162,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "33066:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "value": null,
                            "visibility": "internal"
                          }
                        ],
                        "id": 2164,
                        "initialValue": null,
                        "nodeType": "VariableDeclarationStatement",
                        "src": "33066:15:0"
                      },
                      {
                        "assignments": [
                          2166
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 2166,
                            "name": "otherprevoff",
                            "nodeType": "VariableDeclaration",
                            "scope": 2293,
                            "src": "33087:20:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 2165,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "33087:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "value": null,
                            "visibility": "internal"
                          }
                        ],
                        "id": 2167,
                        "initialValue": null,
                        "nodeType": "VariableDeclarationStatement",
                        "src": "33087:20:0"
                      },
                      {
                        "assignments": [
                          2169
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 2169,
                            "name": "counts",
                            "nodeType": "VariableDeclaration",
                            "scope": 2293,
                            "src": "33113:14:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 2168,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "33113:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "value": null,
                            "visibility": "internal"
                          }
                        ],
                        "id": 2174,
                        "initialValue": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 2171,
                              "name": "self",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2141,
                              "src": "33141:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "hexValue": "30",
                              "id": 2172,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "33147:1:0",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              },
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 2170,
                            "name": "labelCount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1820,
                            "src": "33130:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_uint256_$",
                              "typeString": "function (bytes memory,uint256) pure returns (uint256)"
                            }
                          },
                          "id": 2173,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "33130:19:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "33113:36:0"
                      },
                      {
                        "assignments": [
                          2176
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 2176,
                            "name": "othercounts",
                            "nodeType": "VariableDeclaration",
                            "scope": 2293,
                            "src": "33155:19:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 2175,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "33155:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "value": null,
                            "visibility": "internal"
                          }
                        ],
                        "id": 2181,
                        "initialValue": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 2178,
                              "name": "other",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2143,
                              "src": "33188:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "hexValue": "30",
                              "id": 2179,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "33195:1:0",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              },
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 2177,
                            "name": "labelCount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1820,
                            "src": "33177:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_uint256_$",
                              "typeString": "function (bytes memory,uint256) pure returns (uint256)"
                            }
                          },
                          "id": 2180,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "33177:20:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "33155:42:0"
                      },
                      {
                        "body": {
                          "id": 2199,
                          "nodeType": "Block",
                          "src": "33322:77:0",
                          "statements": [
                            {
                              "expression": {
                                "argumentTypes": null,
                                "id": 2187,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "argumentTypes": null,
                                  "id": 2185,
                                  "name": "prevoff",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2163,
                                  "src": "33330:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "argumentTypes": null,
                                  "id": 2186,
                                  "name": "off",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2157,
                                  "src": "33340:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "33330:13:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 2188,
                              "nodeType": "ExpressionStatement",
                              "src": "33330:13:0"
                            },
                            {
                              "expression": {
                                "argumentTypes": null,
                                "id": 2194,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "argumentTypes": null,
                                  "id": 2189,
                                  "name": "off",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2157,
                                  "src": "33351:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "argumentTypes": null,
                                  "arguments": [
                                    {
                                      "argumentTypes": null,
                                      "id": 2191,
                                      "name": "self",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2141,
                                      "src": "33366:4:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bytes_memory_ptr",
                                        "typeString": "bytes memory"
                                      }
                                    },
                                    {
                                      "argumentTypes": null,
                                      "id": 2192,
                                      "name": "off",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2157,
                                      "src": "33372:3:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_bytes_memory_ptr",
                                        "typeString": "bytes memory"
                                      },
                                      {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    ],
                                    "id": 2190,
                                    "name": "progress",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2313,
                                    "src": "33357:8:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_uint256_$",
                                      "typeString": "function (bytes memory,uint256) pure returns (uint256)"
                                    }
                                  },
                                  "id": 2193,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "33357:19:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "33351:25:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 2195,
                              "nodeType": "ExpressionStatement",
                              "src": "33351:25:0"
                            },
                            {
                              "expression": {
                                "argumentTypes": null,
                                "id": 2197,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "UnaryOperation",
                                "operator": "--",
                                "prefix": false,
                                "src": "33384:8:0",
                                "subExpression": {
                                  "argumentTypes": null,
                                  "id": 2196,
                                  "name": "counts",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2169,
                                  "src": "33384:6:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 2198,
                              "nodeType": "ExpressionStatement",
                              "src": "33384:8:0"
                            }
                          ]
                        },
                        "condition": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 2184,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "id": 2182,
                            "name": "counts",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2169,
                            "src": "33300:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": ">",
                          "rightExpression": {
                            "argumentTypes": null,
                            "id": 2183,
                            "name": "othercounts",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2176,
                            "src": "33309:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "33300:20:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 2200,
                        "nodeType": "WhileStatement",
                        "src": "33293:106:0"
                      },
                      {
                        "body": {
                          "id": 2218,
                          "nodeType": "Block",
                          "src": "33434:103:0",
                          "statements": [
                            {
                              "expression": {
                                "argumentTypes": null,
                                "id": 2206,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "argumentTypes": null,
                                  "id": 2204,
                                  "name": "otherprevoff",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2166,
                                  "src": "33442:12:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "argumentTypes": null,
                                  "id": 2205,
                                  "name": "otheroff",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2160,
                                  "src": "33457:8:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "33442:23:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 2207,
                              "nodeType": "ExpressionStatement",
                              "src": "33442:23:0"
                            },
                            {
                              "expression": {
                                "argumentTypes": null,
                                "id": 2213,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "argumentTypes": null,
                                  "id": 2208,
                                  "name": "otheroff",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2160,
                                  "src": "33473:8:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "argumentTypes": null,
                                  "arguments": [
                                    {
                                      "argumentTypes": null,
                                      "id": 2210,
                                      "name": "other",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2143,
                                      "src": "33493:5:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bytes_memory_ptr",
                                        "typeString": "bytes memory"
                                      }
                                    },
                                    {
                                      "argumentTypes": null,
                                      "id": 2211,
                                      "name": "otheroff",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2160,
                                      "src": "33500:8:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_bytes_memory_ptr",
                                        "typeString": "bytes memory"
                                      },
                                      {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    ],
                                    "id": 2209,
                                    "name": "progress",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2313,
                                    "src": "33484:8:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_uint256_$",
                                      "typeString": "function (bytes memory,uint256) pure returns (uint256)"
                                    }
                                  },
                                  "id": 2212,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "33484:25:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "33473:36:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 2214,
                              "nodeType": "ExpressionStatement",
                              "src": "33473:36:0"
                            },
                            {
                              "expression": {
                                "argumentTypes": null,
                                "id": 2216,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "UnaryOperation",
                                "operator": "--",
                                "prefix": false,
                                "src": "33517:13:0",
                                "subExpression": {
                                  "argumentTypes": null,
                                  "id": 2215,
                                  "name": "othercounts",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2176,
                                  "src": "33517:11:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 2217,
                              "nodeType": "ExpressionStatement",
                              "src": "33517:13:0"
                            }
                          ]
                        },
                        "condition": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 2203,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "id": 2201,
                            "name": "othercounts",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2176,
                            "src": "33412:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": ">",
                          "rightExpression": {
                            "argumentTypes": null,
                            "id": 2202,
                            "name": "counts",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2169,
                            "src": "33426:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "33412:20:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 2219,
                        "nodeType": "WhileStatement",
                        "src": "33405:132:0"
                      },
                      {
                        "body": {
                          "id": 2257,
                          "nodeType": "Block",
                          "src": "33654:155:0",
                          "statements": [
                            {
                              "expression": {
                                "argumentTypes": null,
                                "id": 2233,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "argumentTypes": null,
                                  "id": 2231,
                                  "name": "prevoff",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2163,
                                  "src": "33662:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "argumentTypes": null,
                                  "id": 2232,
                                  "name": "off",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2157,
                                  "src": "33672:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "33662:13:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 2234,
                              "nodeType": "ExpressionStatement",
                              "src": "33662:13:0"
                            },
                            {
                              "expression": {
                                "argumentTypes": null,
                                "id": 2240,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "argumentTypes": null,
                                  "id": 2235,
                                  "name": "off",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2157,
                                  "src": "33683:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "argumentTypes": null,
                                  "arguments": [
                                    {
                                      "argumentTypes": null,
                                      "id": 2237,
                                      "name": "self",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2141,
                                      "src": "33698:4:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bytes_memory_ptr",
                                        "typeString": "bytes memory"
                                      }
                                    },
                                    {
                                      "argumentTypes": null,
                                      "id": 2238,
                                      "name": "off",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2157,
                                      "src": "33704:3:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_bytes_memory_ptr",
                                        "typeString": "bytes memory"
                                      },
                                      {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    ],
                                    "id": 2236,
                                    "name": "progress",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2313,
                                    "src": "33689:8:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_uint256_$",
                                      "typeString": "function (bytes memory,uint256) pure returns (uint256)"
                                    }
                                  },
                                  "id": 2239,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "33689:19:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "33683:25:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 2241,
                              "nodeType": "ExpressionStatement",
                              "src": "33683:25:0"
                            },
                            {
                              "expression": {
                                "argumentTypes": null,
                                "id": 2244,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "argumentTypes": null,
                                  "id": 2242,
                                  "name": "otherprevoff",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2166,
                                  "src": "33716:12:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "argumentTypes": null,
                                  "id": 2243,
                                  "name": "otheroff",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2160,
                                  "src": "33731:8:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "33716:23:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 2245,
                              "nodeType": "ExpressionStatement",
                              "src": "33716:23:0"
                            },
                            {
                              "expression": {
                                "argumentTypes": null,
                                "id": 2251,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "argumentTypes": null,
                                  "id": 2246,
                                  "name": "otheroff",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2160,
                                  "src": "33747:8:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "argumentTypes": null,
                                  "arguments": [
                                    {
                                      "argumentTypes": null,
                                      "id": 2248,
                                      "name": "other",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2143,
                                      "src": "33767:5:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bytes_memory_ptr",
                                        "typeString": "bytes memory"
                                      }
                                    },
                                    {
                                      "argumentTypes": null,
                                      "id": 2249,
                                      "name": "otheroff",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2160,
                                      "src": "33774:8:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_bytes_memory_ptr",
                                        "typeString": "bytes memory"
                                      },
                                      {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    ],
                                    "id": 2247,
                                    "name": "progress",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2313,
                                    "src": "33758:8:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_uint256_$",
                                      "typeString": "function (bytes memory,uint256) pure returns (uint256)"
                                    }
                                  },
                                  "id": 2250,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "33758:25:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "33747:36:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 2252,
                              "nodeType": "ExpressionStatement",
                              "src": "33747:36:0"
                            },
                            {
                              "expression": {
                                "argumentTypes": null,
                                "id": 2255,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "argumentTypes": null,
                                  "id": 2253,
                                  "name": "counts",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2169,
                                  "src": "33791:6:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "-=",
                                "rightHandSide": {
                                  "argumentTypes": null,
                                  "hexValue": "31",
                                  "id": 2254,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "33801:1:0",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_1_by_1",
                                    "typeString": "int_const 1"
                                  },
                                  "value": "1"
                                },
                                "src": "33791:11:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 2256,
                              "nodeType": "ExpressionStatement",
                              "src": "33791:11:0"
                            }
                          ]
                        },
                        "condition": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "id": 2230,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 2222,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "id": 2220,
                              "name": "counts",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2169,
                              "src": "33604:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": ">",
                            "rightExpression": {
                              "argumentTypes": null,
                              "hexValue": "30",
                              "id": 2221,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "33613:1:0",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            "src": "33604:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "&&",
                          "rightExpression": {
                            "argumentTypes": null,
                            "id": 2229,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "UnaryOperation",
                            "operator": "!",
                            "prefix": true,
                            "src": "33618:34:0",
                            "subExpression": {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "id": 2225,
                                  "name": "off",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2157,
                                  "src": "33631:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                {
                                  "argumentTypes": null,
                                  "id": 2226,
                                  "name": "other",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2143,
                                  "src": "33636:5:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes_memory_ptr",
                                    "typeString": "bytes memory"
                                  }
                                },
                                {
                                  "argumentTypes": null,
                                  "id": 2227,
                                  "name": "otheroff",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2160,
                                  "src": "33643:8:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  {
                                    "typeIdentifier": "t_bytes_memory_ptr",
                                    "typeString": "bytes memory"
                                  },
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 2223,
                                  "name": "self",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2141,
                                  "src": "33619:4:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes_memory_ptr",
                                    "typeString": "bytes memory"
                                  }
                                },
                                "id": 2224,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "equals",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 742,
                                "src": "33619:11:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_bool_$bound_to$_t_bytes_memory_ptr_$",
                                  "typeString": "function (bytes memory,uint256,bytes memory,uint256) pure returns (bool)"
                                }
                              },
                              "id": 2228,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "33619:33:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "src": "33604:48:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 2258,
                        "nodeType": "WhileStatement",
                        "src": "33597:212:0"
                      },
                      {
                        "condition": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 2261,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "id": 2259,
                            "name": "off",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2157,
                            "src": "33819:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "argumentTypes": null,
                            "hexValue": "30",
                            "id": 2260,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "33826:1:0",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "33819:8:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": null,
                        "id": 2266,
                        "nodeType": "IfStatement",
                        "src": "33815:38:0",
                        "trueBody": {
                          "id": 2265,
                          "nodeType": "Block",
                          "src": "33829:24:0",
                          "statements": [
                            {
                              "expression": {
                                "argumentTypes": null,
                                "id": 2263,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "UnaryOperation",
                                "operator": "-",
                                "prefix": true,
                                "src": "33844:2:0",
                                "subExpression": {
                                  "argumentTypes": null,
                                  "hexValue": "31",
                                  "id": 2262,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "33845:1:0",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_1_by_1",
                                    "typeString": "int_const 1"
                                  },
                                  "value": "1"
                                },
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_minus_1_by_1",
                                  "typeString": "int_const -1"
                                }
                              },
                              "functionReturnParameters": 2147,
                              "id": 2264,
                              "nodeType": "Return",
                              "src": "33837:9:0"
                            }
                          ]
                        }
                      },
                      {
                        "condition": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 2269,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "id": 2267,
                            "name": "otheroff",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2160,
                            "src": "33862:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "argumentTypes": null,
                            "hexValue": "30",
                            "id": 2268,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "33874:1:0",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "33862:13:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": null,
                        "id": 2273,
                        "nodeType": "IfStatement",
                        "src": "33858:42:0",
                        "trueBody": {
                          "id": 2272,
                          "nodeType": "Block",
                          "src": "33877:23:0",
                          "statements": [
                            {
                              "expression": {
                                "argumentTypes": null,
                                "hexValue": "31",
                                "id": 2270,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "33892:1:0",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_1_by_1",
                                  "typeString": "int_const 1"
                                },
                                "value": "1"
                              },
                              "functionReturnParameters": 2147,
                              "id": 2271,
                              "nodeType": "Return",
                              "src": "33885:8:0"
                            }
                          ]
                        }
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 2278,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "id": 2276,
                                "name": "prevoff",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2163,
                                "src": "33941:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "+",
                              "rightExpression": {
                                "argumentTypes": null,
                                "hexValue": "31",
                                "id": 2277,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "33951:1:0",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_1_by_1",
                                  "typeString": "int_const 1"
                                },
                                "value": "1"
                              },
                              "src": "33941:11:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "id": 2281,
                                  "name": "prevoff",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2163,
                                  "src": "33977:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 2279,
                                  "name": "self",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2141,
                                  "src": "33962:4:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes_memory_ptr",
                                    "typeString": "bytes memory"
                                  }
                                },
                                "id": 2280,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "readUint8",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 812,
                                "src": "33962:14:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_uint8_$bound_to$_t_bytes_memory_ptr_$",
                                  "typeString": "function (bytes memory,uint256) pure returns (uint8)"
                                }
                              },
                              "id": 2282,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "33962:23:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint8",
                                "typeString": "uint8"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "id": 2283,
                              "name": "other",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2143,
                              "src": "33995:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 2286,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "id": 2284,
                                "name": "otherprevoff",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2166,
                                "src": "34010:12:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "+",
                              "rightExpression": {
                                "argumentTypes": null,
                                "hexValue": "31",
                                "id": 2285,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "34025:1:0",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_1_by_1",
                                  "typeString": "int_const 1"
                                },
                                "value": "1"
                              },
                              "src": "34010:16:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "id": 2289,
                                  "name": "otherprevoff",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2166,
                                  "src": "34052:12:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 2287,
                                  "name": "other",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2143,
                                  "src": "34036:5:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes_memory_ptr",
                                    "typeString": "bytes memory"
                                  }
                                },
                                "id": 2288,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "readUint8",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 812,
                                "src": "34036:15:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_uint8_$bound_to$_t_bytes_memory_ptr_$",
                                  "typeString": "function (bytes memory,uint256) pure returns (uint8)"
                                }
                              },
                              "id": 2290,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "34036:29:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint8",
                                "typeString": "uint8"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint8",
                                "typeString": "uint8"
                              },
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint8",
                                "typeString": "uint8"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "id": 2274,
                              "name": "self",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2141,
                              "src": "33919:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            },
                            "id": 2275,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "compare",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 682,
                            "src": "33919:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$_t_uint256_$_t_bytes_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_int256_$bound_to$_t_bytes_memory_ptr_$",
                              "typeString": "function (bytes memory,uint256,uint256,bytes memory,uint256,uint256) pure returns (int256)"
                            }
                          },
                          "id": 2291,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "33919:154:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_int256",
                            "typeString": "int256"
                          }
                        },
                        "functionReturnParameters": 2147,
                        "id": 2292,
                        "nodeType": "Return",
                        "src": "33906:167:0"
                      }
                    ]
                  },
                  "documentation": null,
                  "id": 2294,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "compareNames",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 2144,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2141,
                        "name": "self",
                        "nodeType": "VariableDeclaration",
                        "scope": 2294,
                        "src": "32884:17:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 2140,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "32884:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2143,
                        "name": "other",
                        "nodeType": "VariableDeclaration",
                        "scope": 2294,
                        "src": "32903:18:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 2142,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "32903:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "32883:39:0"
                  },
                  "returnParameters": {
                    "id": 2147,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2146,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 2294,
                        "src": "32958:6:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_int256",
                          "typeString": "int256"
                        },
                        "typeName": {
                          "id": 2145,
                          "name": "int256",
                          "nodeType": "ElementaryTypeName",
                          "src": "32958:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_int256",
                            "typeString": "int256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "32957:8:0"
                  },
                  "scope": 2314,
                  "src": "32862:1216:0",
                  "stateMutability": "pure",
                  "superFunction": null,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 2312,
                    "nodeType": "Block",
                    "src": "34178:47:0",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 2310,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 2305,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "id": 2303,
                              "name": "off",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2298,
                              "src": "34191:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "+",
                            "rightExpression": {
                              "argumentTypes": null,
                              "hexValue": "31",
                              "id": 2304,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "34197:1:0",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_1_by_1",
                                "typeString": "int_const 1"
                              },
                              "value": "1"
                            },
                            "src": "34191:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "+",
                          "rightExpression": {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "id": 2308,
                                "name": "off",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2298,
                                "src": "34216:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "expression": {
                                "argumentTypes": null,
                                "id": 2306,
                                "name": "body",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2296,
                                "src": "34201:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              },
                              "id": 2307,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "readUint8",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 812,
                              "src": "34201:14:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_uint8_$bound_to$_t_bytes_memory_ptr_$",
                                "typeString": "function (bytes memory,uint256) pure returns (uint8)"
                              }
                            },
                            "id": 2309,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "34201:19:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint8",
                              "typeString": "uint8"
                            }
                          },
                          "src": "34191:29:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 2302,
                        "id": 2311,
                        "nodeType": "Return",
                        "src": "34184:36:0"
                      }
                    ]
                  },
                  "documentation": null,
                  "id": 2313,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "progress",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 2299,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2296,
                        "name": "body",
                        "nodeType": "VariableDeclaration",
                        "scope": 2313,
                        "src": "34100:17:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 2295,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "34100:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2298,
                        "name": "off",
                        "nodeType": "VariableDeclaration",
                        "scope": 2313,
                        "src": "34119:11:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 2297,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "34119:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "34099:32:0"
                  },
                  "returnParameters": {
                    "id": 2302,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2301,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 2313,
                        "src": "34167:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 2300,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "34167:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "34166:9:0"
                  },
                  "scope": 2314,
                  "src": "34082:143:0",
                  "stateMutability": "pure",
                  "superFunction": null,
                  "visibility": "internal"
                }
              ],
              "scope": 3329,
              "src": "27649:6578:0"
            },
            {
              "id": 2315,
              "literals": [
                "solidity",
                "^",
                "0.5",
                ".0"
              ],
              "nodeType": "PragmaDirective",
              "src": "34274:23:0"
            },
            {
              "baseContracts": [
                {
                  "arguments": null,
                  "baseName": {
                    "contractScope": null,
                    "id": 2316,
                    "name": "ResolverBase",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 147,
                    "src": "34323:12:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_ResolverBase_$147",
                      "typeString": "contract ResolverBase"
                    }
                  },
                  "id": 2317,
                  "nodeType": "InheritanceSpecifier",
                  "src": "34323:12:0"
                }
              ],
              "contractDependencies": [
                147
              ],
              "contractKind": "contract",
              "documentation": null,
              "fullyImplemented": false,
              "id": 2742,
              "linearizedBaseContracts": [
                2742,
                147
              ],
              "name": "DNSResolver",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "id": 2319,
                  "libraryName": {
                    "contractScope": null,
                    "id": 2318,
                    "name": "RRUtils",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 2314,
                    "src": "34346:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_RRUtils_$2314",
                      "typeString": "library RRUtils"
                    }
                  },
                  "nodeType": "UsingForDirective",
                  "src": "34340:20:0",
                  "typeName": null
                },
                {
                  "id": 2322,
                  "libraryName": {
                    "contractScope": null,
                    "id": 2320,
                    "name": "BytesUtils",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 1226,
                    "src": "34369:10:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_BytesUtils_$1226",
                      "typeString": "library BytesUtils"
                    }
                  },
                  "nodeType": "UsingForDirective",
                  "src": "34363:27:0",
                  "typeName": {
                    "id": 2321,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "34384:5:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  }
                },
                {
                  "constant": true,
                  "id": 2325,
                  "name": "DNS_RECORD_INTERFACE_ID",
                  "nodeType": "VariableDeclaration",
                  "scope": 2742,
                  "src": "34394:60:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes4",
                    "typeString": "bytes4"
                  },
                  "typeName": {
                    "id": 2323,
                    "name": "bytes4",
                    "nodeType": "ElementaryTypeName",
                    "src": "34394:6:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes4",
                      "typeString": "bytes4"
                    }
                  },
                  "value": {
                    "argumentTypes": null,
                    "hexValue": "30786138666135363832",
                    "id": 2324,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "34444:10:0",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_2834978434_by_1",
                      "typeString": "int_const 2834978434"
                    },
                    "value": "0xa8fa5682"
                  },
                  "visibility": "private"
                },
                {
                  "anonymous": false,
                  "documentation": null,
                  "id": 2335,
                  "name": "DNSRecordChanged",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 2334,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2327,
                        "indexed": true,
                        "name": "node",
                        "nodeType": "VariableDeclaration",
                        "scope": 2335,
                        "src": "34576:20:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 2326,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "34576:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2329,
                        "indexed": false,
                        "name": "name",
                        "nodeType": "VariableDeclaration",
                        "scope": 2335,
                        "src": "34602:10:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 2328,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "34602:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2331,
                        "indexed": false,
                        "name": "resource",
                        "nodeType": "VariableDeclaration",
                        "scope": 2335,
                        "src": "34618:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint16",
                          "typeString": "uint16"
                        },
                        "typeName": {
                          "id": 2330,
                          "name": "uint16",
                          "nodeType": "ElementaryTypeName",
                          "src": "34618:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint16",
                            "typeString": "uint16"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2333,
                        "indexed": false,
                        "name": "record",
                        "nodeType": "VariableDeclaration",
                        "scope": 2335,
                        "src": "34639:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 2332,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "34639:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "34570:85:0"
                  },
                  "src": "34548:108:0"
                },
                {
                  "anonymous": false,
                  "documentation": null,
                  "id": 2343,
                  "name": "DNSRecordDeleted",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 2342,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2337,
                        "indexed": true,
                        "name": "node",
                        "nodeType": "VariableDeclaration",
                        "scope": 2343,
                        "src": "34771:20:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 2336,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "34771:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2339,
                        "indexed": false,
                        "name": "name",
                        "nodeType": "VariableDeclaration",
                        "scope": 2343,
                        "src": "34793:10:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 2338,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "34793:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2341,
                        "indexed": false,
                        "name": "resource",
                        "nodeType": "VariableDeclaration",
                        "scope": 2343,
                        "src": "34805:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint16",
                          "typeString": "uint16"
                        },
                        "typeName": {
                          "id": 2340,
                          "name": "uint16",
                          "nodeType": "ElementaryTypeName",
                          "src": "34805:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint16",
                            "typeString": "uint16"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "34770:51:0"
                  },
                  "src": "34748:74:0"
                },
                {
                  "anonymous": false,
                  "documentation": null,
                  "id": 2347,
                  "name": "DNSZoneCleared",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 2346,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2345,
                        "indexed": true,
                        "name": "node",
                        "nodeType": "VariableDeclaration",
                        "scope": 2347,
                        "src": "34930:20:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 2344,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "34930:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "34929:22:0"
                  },
                  "src": "34909:43:0"
                },
                {
                  "constant": false,
                  "id": 2351,
                  "name": "versions",
                  "nodeType": "VariableDeclaration",
                  "scope": 2742,
                  "src": "35151:44:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
                    "typeString": "mapping(bytes32 => uint256)"
                  },
                  "typeName": {
                    "id": 2350,
                    "keyType": {
                      "id": 2348,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "35159:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "nodeType": "Mapping",
                    "src": "35151:27:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
                      "typeString": "mapping(bytes32 => uint256)"
                    },
                    "valueType": {
                      "id": 2349,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "35170:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    }
                  },
                  "value": null,
                  "visibility": "private"
                },
                {
                  "constant": false,
                  "id": 2361,
                  "name": "records",
                  "nodeType": "VariableDeclaration",
                  "scope": 2742,
                  "src": "35303:104:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_bytes32_$_t_mapping$_t_uint256_$_t_mapping$_t_bytes32_$_t_mapping$_t_uint16_$_t_bytes_storage_$_$_$_$",
                    "typeString": "mapping(bytes32 => mapping(uint256 => mapping(bytes32 => mapping(uint16 => bytes))))"
                  },
                  "typeName": {
                    "id": 2360,
                    "keyType": {
                      "id": 2352,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "35311:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "nodeType": "Mapping",
                    "src": "35303:84:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_bytes32_$_t_mapping$_t_uint256_$_t_mapping$_t_bytes32_$_t_mapping$_t_uint16_$_t_bytes_storage_$_$_$_$",
                      "typeString": "mapping(bytes32 => mapping(uint256 => mapping(bytes32 => mapping(uint16 => bytes))))"
                    },
                    "valueType": {
                      "id": 2359,
                      "keyType": {
                        "id": 2353,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "35330:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "Mapping",
                      "src": "35322:64:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_uint256_$_t_mapping$_t_bytes32_$_t_mapping$_t_uint16_$_t_bytes_storage_$_$_$",
                        "typeString": "mapping(uint256 => mapping(bytes32 => mapping(uint16 => bytes)))"
                      },
                      "valueType": {
                        "id": 2358,
                        "keyType": {
                          "id": 2354,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "35349:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "nodeType": "Mapping",
                        "src": "35341:44:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_bytes32_$_t_mapping$_t_uint16_$_t_bytes_storage_$_$",
                          "typeString": "mapping(bytes32 => mapping(uint16 => bytes))"
                        },
                        "valueType": {
                          "id": 2357,
                          "keyType": {
                            "id": 2355,
                            "name": "uint16",
                            "nodeType": "ElementaryTypeName",
                            "src": "35368:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint16",
                              "typeString": "uint16"
                            }
                          },
                          "nodeType": "Mapping",
                          "src": "35360:24:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_uint16_$_t_bytes_storage_$",
                            "typeString": "mapping(uint16 => bytes)"
                          },
                          "valueType": {
                            "id": 2356,
                            "name": "bytes",
                            "nodeType": "ElementaryTypeName",
                            "src": "35378:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_storage_ptr",
                              "typeString": "bytes"
                            }
                          }
                        }
                      }
                    }
                  },
                  "value": null,
                  "visibility": "private"
                },
                {
                  "constant": false,
                  "id": 2369,
                  "name": "nameEntriesCount",
                  "nodeType": "VariableDeclaration",
                  "scope": 2742,
                  "src": "35571:95:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_bytes32_$_t_mapping$_t_uint256_$_t_mapping$_t_bytes32_$_t_uint16_$_$_$",
                    "typeString": "mapping(bytes32 => mapping(uint256 => mapping(bytes32 => uint16)))"
                  },
                  "typeName": {
                    "id": 2368,
                    "keyType": {
                      "id": 2362,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "35579:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "nodeType": "Mapping",
                    "src": "35571:66:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_bytes32_$_t_mapping$_t_uint256_$_t_mapping$_t_bytes32_$_t_uint16_$_$_$",
                      "typeString": "mapping(bytes32 => mapping(uint256 => mapping(bytes32 => uint16)))"
                    },
                    "valueType": {
                      "id": 2367,
                      "keyType": {
                        "id": 2363,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "35598:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "Mapping",
                      "src": "35590:46:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_uint256_$_t_mapping$_t_bytes32_$_t_uint16_$_$",
                        "typeString": "mapping(uint256 => mapping(bytes32 => uint16))"
                      },
                      "valueType": {
                        "id": 2366,
                        "keyType": {
                          "id": 2364,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "35617:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "nodeType": "Mapping",
                        "src": "35609:26:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint16_$",
                          "typeString": "mapping(bytes32 => uint16)"
                        },
                        "valueType": {
                          "id": 2365,
                          "name": "uint16",
                          "nodeType": "ElementaryTypeName",
                          "src": "35628:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint16",
                            "typeString": "uint16"
                          }
                        }
                      }
                    }
                  },
                  "value": null,
                  "visibility": "private"
                },
                {
                  "body": {
                    "id": 2533,
                    "nodeType": "Block",
                    "src": "36644:1181:0",
                    "statements": [
                      {
                        "assignments": [
                          2380
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 2380,
                            "name": "resource",
                            "nodeType": "VariableDeclaration",
                            "scope": 2533,
                            "src": "36650:15:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint16",
                              "typeString": "uint16"
                            },
                            "typeName": {
                              "id": 2379,
                              "name": "uint16",
                              "nodeType": "ElementaryTypeName",
                              "src": "36650:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint16",
                                "typeString": "uint16"
                              }
                            },
                            "value": null,
                            "visibility": "internal"
                          }
                        ],
                        "id": 2382,
                        "initialValue": {
                          "argumentTypes": null,
                          "hexValue": "30",
                          "id": 2381,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "36668:1:0",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "36650:19:0"
                      },
                      {
                        "assignments": [
                          2384
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 2384,
                            "name": "offset",
                            "nodeType": "VariableDeclaration",
                            "scope": 2533,
                            "src": "36675:14:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 2383,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "36675:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "value": null,
                            "visibility": "internal"
                          }
                        ],
                        "id": 2386,
                        "initialValue": {
                          "argumentTypes": null,
                          "hexValue": "30",
                          "id": 2385,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "36692:1:0",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "36675:18:0"
                      },
                      {
                        "assignments": [
                          2388
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 2388,
                            "name": "name",
                            "nodeType": "VariableDeclaration",
                            "scope": 2533,
                            "src": "36699:17:0",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes"
                            },
                            "typeName": {
                              "id": 2387,
                              "name": "bytes",
                              "nodeType": "ElementaryTypeName",
                              "src": "36699:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_storage_ptr",
                                "typeString": "bytes"
                              }
                            },
                            "value": null,
                            "visibility": "internal"
                          }
                        ],
                        "id": 2389,
                        "initialValue": null,
                        "nodeType": "VariableDeclarationStatement",
                        "src": "36699:17:0"
                      },
                      {
                        "assignments": [
                          2391
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 2391,
                            "name": "value",
                            "nodeType": "VariableDeclaration",
                            "scope": 2533,
                            "src": "36722:18:0",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes"
                            },
                            "typeName": {
                              "id": 2390,
                              "name": "bytes",
                              "nodeType": "ElementaryTypeName",
                              "src": "36722:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_storage_ptr",
                                "typeString": "bytes"
                              }
                            },
                            "value": null,
                            "visibility": "internal"
                          }
                        ],
                        "id": 2392,
                        "initialValue": null,
                        "nodeType": "VariableDeclarationStatement",
                        "src": "36722:18:0"
                      },
                      {
                        "assignments": [
                          2394
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 2394,
                            "name": "nameHash",
                            "nodeType": "VariableDeclaration",
                            "scope": 2533,
                            "src": "36746:16:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            },
                            "typeName": {
                              "id": 2393,
                              "name": "bytes32",
                              "nodeType": "ElementaryTypeName",
                              "src": "36746:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            "value": null,
                            "visibility": "internal"
                          }
                        ],
                        "id": 2395,
                        "initialValue": null,
                        "nodeType": "VariableDeclarationStatement",
                        "src": "36746:16:0"
                      },
                      {
                        "body": {
                          "id": 2509,
                          "nodeType": "Block",
                          "src": "36934:694:0",
                          "statements": [
                            {
                              "condition": {
                                "argumentTypes": null,
                                "commonType": {
                                  "typeIdentifier": "t_uint16",
                                  "typeString": "uint16"
                                },
                                "id": 2415,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "argumentTypes": null,
                                  "id": 2413,
                                  "name": "resource",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2380,
                                  "src": "36946:8:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint16",
                                    "typeString": "uint16"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "==",
                                "rightExpression": {
                                  "argumentTypes": null,
                                  "hexValue": "30",
                                  "id": 2414,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "36958:1:0",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                },
                                "src": "36946:13:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "falseBody": {
                                "id": 2507,
                                "nodeType": "Block",
                                "src": "37128:494:0",
                                "statements": [
                                  {
                                    "assignments": [
                                      2446
                                    ],
                                    "declarations": [
                                      {
                                        "constant": false,
                                        "id": 2446,
                                        "name": "newName",
                                        "nodeType": "VariableDeclaration",
                                        "scope": 2507,
                                        "src": "37138:20:0",
                                        "stateVariable": false,
                                        "storageLocation": "memory",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bytes_memory_ptr",
                                          "typeString": "bytes"
                                        },
                                        "typeName": {
                                          "id": 2445,
                                          "name": "bytes",
                                          "nodeType": "ElementaryTypeName",
                                          "src": "37138:5:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_bytes_storage_ptr",
                                            "typeString": "bytes"
                                          }
                                        },
                                        "value": null,
                                        "visibility": "internal"
                                      }
                                    ],
                                    "id": 2450,
                                    "initialValue": {
                                      "argumentTypes": null,
                                      "arguments": [],
                                      "expression": {
                                        "argumentTypes": [],
                                        "expression": {
                                          "argumentTypes": null,
                                          "id": 2447,
                                          "name": "iter",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 2399,
                                          "src": "37161:4:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_struct$_RRIterator_$1835_memory_ptr",
                                            "typeString": "struct RRUtils.RRIterator memory"
                                          }
                                        },
                                        "id": 2448,
                                        "isConstant": false,
                                        "isLValue": true,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "memberName": "name",
                                        "nodeType": "MemberAccess",
                                        "referencedDeclaration": 1999,
                                        "src": "37161:9:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_function_internal_pure$_t_struct$_RRIterator_$1835_memory_ptr_$returns$_t_bytes_memory_ptr_$bound_to$_t_struct$_RRIterator_$1835_memory_ptr_$",
                                          "typeString": "function (struct RRUtils.RRIterator memory) pure returns (bytes memory)"
                                        }
                                      },
                                      "id": 2449,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "functionCall",
                                      "lValueRequested": false,
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "37161:11:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bytes_memory_ptr",
                                        "typeString": "bytes memory"
                                      }
                                    },
                                    "nodeType": "VariableDeclarationStatement",
                                    "src": "37138:34:0"
                                  },
                                  {
                                    "condition": {
                                      "argumentTypes": null,
                                      "commonType": {
                                        "typeIdentifier": "t_bool",
                                        "typeString": "bool"
                                      },
                                      "id": 2460,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "argumentTypes": null,
                                        "commonType": {
                                          "typeIdentifier": "t_uint16",
                                          "typeString": "uint16"
                                        },
                                        "id": 2454,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "leftExpression": {
                                          "argumentTypes": null,
                                          "id": 2451,
                                          "name": "resource",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 2380,
                                          "src": "37186:8:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint16",
                                            "typeString": "uint16"
                                          }
                                        },
                                        "nodeType": "BinaryOperation",
                                        "operator": "!=",
                                        "rightExpression": {
                                          "argumentTypes": null,
                                          "expression": {
                                            "argumentTypes": null,
                                            "id": 2452,
                                            "name": "iter",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 2399,
                                            "src": "37198:4:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_struct$_RRIterator_$1835_memory_ptr",
                                              "typeString": "struct RRUtils.RRIterator memory"
                                            }
                                          },
                                          "id": 2453,
                                          "isConstant": false,
                                          "isLValue": true,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "memberName": "dnstype",
                                          "nodeType": "MemberAccess",
                                          "referencedDeclaration": 1826,
                                          "src": "37198:12:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint16",
                                            "typeString": "uint16"
                                          }
                                        },
                                        "src": "37186:24:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bool",
                                          "typeString": "bool"
                                        }
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": "||",
                                      "rightExpression": {
                                        "argumentTypes": null,
                                        "id": 2459,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "nodeType": "UnaryOperation",
                                        "operator": "!",
                                        "prefix": true,
                                        "src": "37214:21:0",
                                        "subExpression": {
                                          "argumentTypes": null,
                                          "arguments": [
                                            {
                                              "argumentTypes": null,
                                              "id": 2457,
                                              "name": "newName",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 2446,
                                              "src": "37227:7:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_bytes_memory_ptr",
                                                "typeString": "bytes memory"
                                              }
                                            }
                                          ],
                                          "expression": {
                                            "argumentTypes": [
                                              {
                                                "typeIdentifier": "t_bytes_memory_ptr",
                                                "typeString": "bytes memory"
                                              }
                                            ],
                                            "expression": {
                                              "argumentTypes": null,
                                              "id": 2455,
                                              "name": "name",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 2388,
                                              "src": "37215:4:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_bytes_memory_ptr",
                                                "typeString": "bytes memory"
                                              }
                                            },
                                            "id": 2456,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "memberName": "equals",
                                            "nodeType": "MemberAccess",
                                            "referencedDeclaration": 796,
                                            "src": "37215:11:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_bytes_memory_ptr_$returns$_t_bool_$bound_to$_t_bytes_memory_ptr_$",
                                              "typeString": "function (bytes memory,bytes memory) pure returns (bool)"
                                            }
                                          },
                                          "id": 2458,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "kind": "functionCall",
                                          "lValueRequested": false,
                                          "names": [],
                                          "nodeType": "FunctionCall",
                                          "src": "37215:20:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_bool",
                                            "typeString": "bool"
                                          }
                                        },
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bool",
                                          "typeString": "bool"
                                        }
                                      },
                                      "src": "37186:49:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bool",
                                        "typeString": "bool"
                                      }
                                    },
                                    "falseBody": null,
                                    "id": 2506,
                                    "nodeType": "IfStatement",
                                    "src": "37182:432:0",
                                    "trueBody": {
                                      "id": 2505,
                                      "nodeType": "Block",
                                      "src": "37237:377:0",
                                      "statements": [
                                        {
                                          "expression": {
                                            "argumentTypes": null,
                                            "arguments": [
                                              {
                                                "argumentTypes": null,
                                                "id": 2462,
                                                "name": "node",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 2371,
                                                "src": "37274:4:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_bytes32",
                                                  "typeString": "bytes32"
                                                }
                                              },
                                              {
                                                "argumentTypes": null,
                                                "id": 2463,
                                                "name": "name",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 2388,
                                                "src": "37292:4:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_bytes_memory_ptr",
                                                  "typeString": "bytes memory"
                                                }
                                              },
                                              {
                                                "argumentTypes": null,
                                                "id": 2464,
                                                "name": "resource",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 2380,
                                                "src": "37310:8:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_uint16",
                                                  "typeString": "uint16"
                                                }
                                              },
                                              {
                                                "argumentTypes": null,
                                                "id": 2465,
                                                "name": "data",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 2373,
                                                "src": "37332:4:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_bytes_calldata_ptr",
                                                  "typeString": "bytes calldata"
                                                }
                                              },
                                              {
                                                "argumentTypes": null,
                                                "id": 2466,
                                                "name": "offset",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 2384,
                                                "src": "37350:6:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_uint256",
                                                  "typeString": "uint256"
                                                }
                                              },
                                              {
                                                "argumentTypes": null,
                                                "commonType": {
                                                  "typeIdentifier": "t_uint256",
                                                  "typeString": "uint256"
                                                },
                                                "id": 2470,
                                                "isConstant": false,
                                                "isLValue": false,
                                                "isPure": false,
                                                "lValueRequested": false,
                                                "leftExpression": {
                                                  "argumentTypes": null,
                                                  "expression": {
                                                    "argumentTypes": null,
                                                    "id": 2467,
                                                    "name": "iter",
                                                    "nodeType": "Identifier",
                                                    "overloadedDeclarations": [],
                                                    "referencedDeclaration": 2399,
                                                    "src": "37370:4:0",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_struct$_RRIterator_$1835_memory_ptr",
                                                      "typeString": "struct RRUtils.RRIterator memory"
                                                    }
                                                  },
                                                  "id": 2468,
                                                  "isConstant": false,
                                                  "isLValue": true,
                                                  "isPure": false,
                                                  "lValueRequested": false,
                                                  "memberName": "offset",
                                                  "nodeType": "MemberAccess",
                                                  "referencedDeclaration": 1824,
                                                  "src": "37370:11:0",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_uint256",
                                                    "typeString": "uint256"
                                                  }
                                                },
                                                "nodeType": "BinaryOperation",
                                                "operator": "-",
                                                "rightExpression": {
                                                  "argumentTypes": null,
                                                  "id": 2469,
                                                  "name": "offset",
                                                  "nodeType": "Identifier",
                                                  "overloadedDeclarations": [],
                                                  "referencedDeclaration": 2384,
                                                  "src": "37384:6:0",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_uint256",
                                                    "typeString": "uint256"
                                                  }
                                                },
                                                "src": "37370:20:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_uint256",
                                                  "typeString": "uint256"
                                                }
                                              },
                                              {
                                                "argumentTypes": null,
                                                "commonType": {
                                                  "typeIdentifier": "t_uint256",
                                                  "typeString": "uint256"
                                                },
                                                "id": 2474,
                                                "isConstant": false,
                                                "isLValue": false,
                                                "isPure": false,
                                                "lValueRequested": false,
                                                "leftExpression": {
                                                  "argumentTypes": null,
                                                  "expression": {
                                                    "argumentTypes": null,
                                                    "id": 2471,
                                                    "name": "value",
                                                    "nodeType": "Identifier",
                                                    "overloadedDeclarations": [],
                                                    "referencedDeclaration": 2391,
                                                    "src": "37404:5:0",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_bytes_memory_ptr",
                                                      "typeString": "bytes memory"
                                                    }
                                                  },
                                                  "id": 2472,
                                                  "isConstant": false,
                                                  "isLValue": false,
                                                  "isPure": false,
                                                  "lValueRequested": false,
                                                  "memberName": "length",
                                                  "nodeType": "MemberAccess",
                                                  "referencedDeclaration": null,
                                                  "src": "37404:12:0",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_uint256",
                                                    "typeString": "uint256"
                                                  }
                                                },
                                                "nodeType": "BinaryOperation",
                                                "operator": "==",
                                                "rightExpression": {
                                                  "argumentTypes": null,
                                                  "hexValue": "30",
                                                  "id": 2473,
                                                  "isConstant": false,
                                                  "isLValue": false,
                                                  "isPure": true,
                                                  "kind": "number",
                                                  "lValueRequested": false,
                                                  "nodeType": "Literal",
                                                  "src": "37420:1:0",
                                                  "subdenomination": null,
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_rational_0_by_1",
                                                    "typeString": "int_const 0"
                                                  },
                                                  "value": "0"
                                                },
                                                "src": "37404:17:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_bool",
                                                  "typeString": "bool"
                                                }
                                              }
                                            ],
                                            "expression": {
                                              "argumentTypes": [
                                                {
                                                  "typeIdentifier": "t_bytes32",
                                                  "typeString": "bytes32"
                                                },
                                                {
                                                  "typeIdentifier": "t_bytes_memory_ptr",
                                                  "typeString": "bytes memory"
                                                },
                                                {
                                                  "typeIdentifier": "t_uint16",
                                                  "typeString": "uint16"
                                                },
                                                {
                                                  "typeIdentifier": "t_bytes_calldata_ptr",
                                                  "typeString": "bytes calldata"
                                                },
                                                {
                                                  "typeIdentifier": "t_uint256",
                                                  "typeString": "uint256"
                                                },
                                                {
                                                  "typeIdentifier": "t_uint256",
                                                  "typeString": "uint256"
                                                },
                                                {
                                                  "typeIdentifier": "t_bool",
                                                  "typeString": "bool"
                                                }
                                              ],
                                              "id": 2461,
                                              "name": "setDNSRRSet",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 2741,
                                              "src": "37249:11:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_function_internal_nonpayable$_t_bytes32_$_t_bytes_memory_ptr_$_t_uint16_$_t_bytes_memory_ptr_$_t_uint256_$_t_uint256_$_t_bool_$returns$__$",
                                                "typeString": "function (bytes32,bytes memory,uint16,bytes memory,uint256,uint256,bool)"
                                              }
                                            },
                                            "id": 2475,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "kind": "functionCall",
                                            "lValueRequested": false,
                                            "names": [],
                                            "nodeType": "FunctionCall",
                                            "src": "37249:184:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_tuple$__$",
                                              "typeString": "tuple()"
                                            }
                                          },
                                          "id": 2476,
                                          "nodeType": "ExpressionStatement",
                                          "src": "37249:184:0"
                                        },
                                        {
                                          "expression": {
                                            "argumentTypes": null,
                                            "id": 2480,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "leftHandSide": {
                                              "argumentTypes": null,
                                              "id": 2477,
                                              "name": "resource",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 2380,
                                              "src": "37445:8:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint16",
                                                "typeString": "uint16"
                                              }
                                            },
                                            "nodeType": "Assignment",
                                            "operator": "=",
                                            "rightHandSide": {
                                              "argumentTypes": null,
                                              "expression": {
                                                "argumentTypes": null,
                                                "id": 2478,
                                                "name": "iter",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 2399,
                                                "src": "37456:4:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_struct$_RRIterator_$1835_memory_ptr",
                                                  "typeString": "struct RRUtils.RRIterator memory"
                                                }
                                              },
                                              "id": 2479,
                                              "isConstant": false,
                                              "isLValue": true,
                                              "isPure": false,
                                              "lValueRequested": false,
                                              "memberName": "dnstype",
                                              "nodeType": "MemberAccess",
                                              "referencedDeclaration": 1826,
                                              "src": "37456:12:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint16",
                                                "typeString": "uint16"
                                              }
                                            },
                                            "src": "37445:23:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint16",
                                              "typeString": "uint16"
                                            }
                                          },
                                          "id": 2481,
                                          "nodeType": "ExpressionStatement",
                                          "src": "37445:23:0"
                                        },
                                        {
                                          "expression": {
                                            "argumentTypes": null,
                                            "id": 2485,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "leftHandSide": {
                                              "argumentTypes": null,
                                              "id": 2482,
                                              "name": "offset",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 2384,
                                              "src": "37480:6:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint256",
                                                "typeString": "uint256"
                                              }
                                            },
                                            "nodeType": "Assignment",
                                            "operator": "=",
                                            "rightHandSide": {
                                              "argumentTypes": null,
                                              "expression": {
                                                "argumentTypes": null,
                                                "id": 2483,
                                                "name": "iter",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 2399,
                                                "src": "37489:4:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_struct$_RRIterator_$1835_memory_ptr",
                                                  "typeString": "struct RRUtils.RRIterator memory"
                                                }
                                              },
                                              "id": 2484,
                                              "isConstant": false,
                                              "isLValue": true,
                                              "isPure": false,
                                              "lValueRequested": false,
                                              "memberName": "offset",
                                              "nodeType": "MemberAccess",
                                              "referencedDeclaration": 1824,
                                              "src": "37489:11:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint256",
                                                "typeString": "uint256"
                                              }
                                            },
                                            "src": "37480:20:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          },
                                          "id": 2486,
                                          "nodeType": "ExpressionStatement",
                                          "src": "37480:20:0"
                                        },
                                        {
                                          "expression": {
                                            "argumentTypes": null,
                                            "id": 2489,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "leftHandSide": {
                                              "argumentTypes": null,
                                              "id": 2487,
                                              "name": "name",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 2388,
                                              "src": "37512:4:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_bytes_memory_ptr",
                                                "typeString": "bytes memory"
                                              }
                                            },
                                            "nodeType": "Assignment",
                                            "operator": "=",
                                            "rightHandSide": {
                                              "argumentTypes": null,
                                              "id": 2488,
                                              "name": "newName",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 2446,
                                              "src": "37519:7:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_bytes_memory_ptr",
                                                "typeString": "bytes memory"
                                              }
                                            },
                                            "src": "37512:14:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_bytes_memory_ptr",
                                              "typeString": "bytes memory"
                                            }
                                          },
                                          "id": 2490,
                                          "nodeType": "ExpressionStatement",
                                          "src": "37512:14:0"
                                        },
                                        {
                                          "expression": {
                                            "argumentTypes": null,
                                            "id": 2495,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "leftHandSide": {
                                              "argumentTypes": null,
                                              "id": 2491,
                                              "name": "nameHash",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 2394,
                                              "src": "37538:8:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_bytes32",
                                                "typeString": "bytes32"
                                              }
                                            },
                                            "nodeType": "Assignment",
                                            "operator": "=",
                                            "rightHandSide": {
                                              "argumentTypes": null,
                                              "arguments": [
                                                {
                                                  "argumentTypes": null,
                                                  "id": 2493,
                                                  "name": "name",
                                                  "nodeType": "Identifier",
                                                  "overloadedDeclarations": [],
                                                  "referencedDeclaration": 2388,
                                                  "src": "37559:4:0",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_bytes_memory_ptr",
                                                    "typeString": "bytes memory"
                                                  }
                                                }
                                              ],
                                              "expression": {
                                                "argumentTypes": [
                                                  {
                                                    "typeIdentifier": "t_bytes_memory_ptr",
                                                    "typeString": "bytes memory"
                                                  }
                                                ],
                                                "id": 2492,
                                                "name": "keccak256",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 3337,
                                                "src": "37549:9:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                                  "typeString": "function (bytes memory) pure returns (bytes32)"
                                                }
                                              },
                                              "id": 2494,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": false,
                                              "kind": "functionCall",
                                              "lValueRequested": false,
                                              "names": [],
                                              "nodeType": "FunctionCall",
                                              "src": "37549:15:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_bytes32",
                                                "typeString": "bytes32"
                                              }
                                            },
                                            "src": "37538:26:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_bytes32",
                                              "typeString": "bytes32"
                                            }
                                          },
                                          "id": 2496,
                                          "nodeType": "ExpressionStatement",
                                          "src": "37538:26:0"
                                        },
                                        {
                                          "expression": {
                                            "argumentTypes": null,
                                            "id": 2503,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "leftHandSide": {
                                              "argumentTypes": null,
                                              "id": 2497,
                                              "name": "value",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 2391,
                                              "src": "37576:5:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_bytes_memory_ptr",
                                                "typeString": "bytes memory"
                                              }
                                            },
                                            "nodeType": "Assignment",
                                            "operator": "=",
                                            "rightHandSide": {
                                              "argumentTypes": null,
                                              "arguments": [
                                                {
                                                  "argumentTypes": null,
                                                  "arguments": [],
                                                  "expression": {
                                                    "argumentTypes": [],
                                                    "expression": {
                                                      "argumentTypes": null,
                                                      "id": 2499,
                                                      "name": "iter",
                                                      "nodeType": "Identifier",
                                                      "overloadedDeclarations": [],
                                                      "referencedDeclaration": 2399,
                                                      "src": "37590:4:0",
                                                      "typeDescriptions": {
                                                        "typeIdentifier": "t_struct$_RRIterator_$1835_memory_ptr",
                                                        "typeString": "struct RRUtils.RRIterator memory"
                                                      }
                                                    },
                                                    "id": 2500,
                                                    "isConstant": false,
                                                    "isLValue": true,
                                                    "isPure": false,
                                                    "lValueRequested": false,
                                                    "memberName": "rdata",
                                                    "nodeType": "MemberAccess",
                                                    "referencedDeclaration": 2019,
                                                    "src": "37590:10:0",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_function_internal_pure$_t_struct$_RRIterator_$1835_memory_ptr_$returns$_t_bytes_memory_ptr_$bound_to$_t_struct$_RRIterator_$1835_memory_ptr_$",
                                                      "typeString": "function (struct RRUtils.RRIterator memory) pure returns (bytes memory)"
                                                    }
                                                  },
                                                  "id": 2501,
                                                  "isConstant": false,
                                                  "isLValue": false,
                                                  "isPure": false,
                                                  "kind": "functionCall",
                                                  "lValueRequested": false,
                                                  "names": [],
                                                  "nodeType": "FunctionCall",
                                                  "src": "37590:12:0",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_bytes_memory_ptr",
                                                    "typeString": "bytes memory"
                                                  }
                                                }
                                              ],
                                              "expression": {
                                                "argumentTypes": [
                                                  {
                                                    "typeIdentifier": "t_bytes_memory_ptr",
                                                    "typeString": "bytes memory"
                                                  }
                                                ],
                                                "id": 2498,
                                                "isConstant": false,
                                                "isLValue": false,
                                                "isPure": true,
                                                "lValueRequested": false,
                                                "nodeType": "ElementaryTypeNameExpression",
                                                "src": "37584:5:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
                                                  "typeString": "type(bytes storage pointer)"
                                                },
                                                "typeName": "bytes"
                                              },
                                              "id": 2502,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": false,
                                              "kind": "typeConversion",
                                              "lValueRequested": false,
                                              "names": [],
                                              "nodeType": "FunctionCall",
                                              "src": "37584:19:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_bytes_memory_ptr",
                                                "typeString": "bytes memory"
                                              }
                                            },
                                            "src": "37576:27:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_bytes_memory_ptr",
                                              "typeString": "bytes memory"
                                            }
                                          },
                                          "id": 2504,
                                          "nodeType": "ExpressionStatement",
                                          "src": "37576:27:0"
                                        }
                                      ]
                                    }
                                  }
                                ]
                              },
                              "id": 2508,
                              "nodeType": "IfStatement",
                              "src": "36942:680:0",
                              "trueBody": {
                                "id": 2444,
                                "nodeType": "Block",
                                "src": "36961:161:0",
                                "statements": [
                                  {
                                    "expression": {
                                      "argumentTypes": null,
                                      "id": 2419,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftHandSide": {
                                        "argumentTypes": null,
                                        "id": 2416,
                                        "name": "resource",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 2380,
                                        "src": "36971:8:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint16",
                                          "typeString": "uint16"
                                        }
                                      },
                                      "nodeType": "Assignment",
                                      "operator": "=",
                                      "rightHandSide": {
                                        "argumentTypes": null,
                                        "expression": {
                                          "argumentTypes": null,
                                          "id": 2417,
                                          "name": "iter",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 2399,
                                          "src": "36982:4:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_struct$_RRIterator_$1835_memory_ptr",
                                            "typeString": "struct RRUtils.RRIterator memory"
                                          }
                                        },
                                        "id": 2418,
                                        "isConstant": false,
                                        "isLValue": true,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "memberName": "dnstype",
                                        "nodeType": "MemberAccess",
                                        "referencedDeclaration": 1826,
                                        "src": "36982:12:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint16",
                                          "typeString": "uint16"
                                        }
                                      },
                                      "src": "36971:23:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint16",
                                        "typeString": "uint16"
                                      }
                                    },
                                    "id": 2420,
                                    "nodeType": "ExpressionStatement",
                                    "src": "36971:23:0"
                                  },
                                  {
                                    "expression": {
                                      "argumentTypes": null,
                                      "id": 2425,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftHandSide": {
                                        "argumentTypes": null,
                                        "id": 2421,
                                        "name": "name",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 2388,
                                        "src": "37004:4:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bytes_memory_ptr",
                                          "typeString": "bytes memory"
                                        }
                                      },
                                      "nodeType": "Assignment",
                                      "operator": "=",
                                      "rightHandSide": {
                                        "argumentTypes": null,
                                        "arguments": [],
                                        "expression": {
                                          "argumentTypes": [],
                                          "expression": {
                                            "argumentTypes": null,
                                            "id": 2422,
                                            "name": "iter",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 2399,
                                            "src": "37011:4:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_struct$_RRIterator_$1835_memory_ptr",
                                              "typeString": "struct RRUtils.RRIterator memory"
                                            }
                                          },
                                          "id": 2423,
                                          "isConstant": false,
                                          "isLValue": true,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "memberName": "name",
                                          "nodeType": "MemberAccess",
                                          "referencedDeclaration": 1999,
                                          "src": "37011:9:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_function_internal_pure$_t_struct$_RRIterator_$1835_memory_ptr_$returns$_t_bytes_memory_ptr_$bound_to$_t_struct$_RRIterator_$1835_memory_ptr_$",
                                            "typeString": "function (struct RRUtils.RRIterator memory) pure returns (bytes memory)"
                                          }
                                        },
                                        "id": 2424,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "kind": "functionCall",
                                        "lValueRequested": false,
                                        "names": [],
                                        "nodeType": "FunctionCall",
                                        "src": "37011:11:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bytes_memory_ptr",
                                          "typeString": "bytes memory"
                                        }
                                      },
                                      "src": "37004:18:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bytes_memory_ptr",
                                        "typeString": "bytes memory"
                                      }
                                    },
                                    "id": 2426,
                                    "nodeType": "ExpressionStatement",
                                    "src": "37004:18:0"
                                  },
                                  {
                                    "expression": {
                                      "argumentTypes": null,
                                      "id": 2434,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftHandSide": {
                                        "argumentTypes": null,
                                        "id": 2427,
                                        "name": "nameHash",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 2394,
                                        "src": "37032:8:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bytes32",
                                          "typeString": "bytes32"
                                        }
                                      },
                                      "nodeType": "Assignment",
                                      "operator": "=",
                                      "rightHandSide": {
                                        "argumentTypes": null,
                                        "arguments": [
                                          {
                                            "argumentTypes": null,
                                            "arguments": [
                                              {
                                                "argumentTypes": null,
                                                "id": 2431,
                                                "name": "name",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 2388,
                                                "src": "37070:4:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_bytes_memory_ptr",
                                                  "typeString": "bytes memory"
                                                }
                                              }
                                            ],
                                            "expression": {
                                              "argumentTypes": [
                                                {
                                                  "typeIdentifier": "t_bytes_memory_ptr",
                                                  "typeString": "bytes memory"
                                                }
                                              ],
                                              "expression": {
                                                "argumentTypes": null,
                                                "id": 2429,
                                                "name": "abi",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 3330,
                                                "src": "37053:3:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_magic_abi",
                                                  "typeString": "abi"
                                                }
                                              },
                                              "id": 2430,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": true,
                                              "lValueRequested": false,
                                              "memberName": "encodePacked",
                                              "nodeType": "MemberAccess",
                                              "referencedDeclaration": null,
                                              "src": "37053:16:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                                                "typeString": "function () pure returns (bytes memory)"
                                              }
                                            },
                                            "id": 2432,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "kind": "functionCall",
                                            "lValueRequested": false,
                                            "names": [],
                                            "nodeType": "FunctionCall",
                                            "src": "37053:22:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_bytes_memory_ptr",
                                              "typeString": "bytes memory"
                                            }
                                          }
                                        ],
                                        "expression": {
                                          "argumentTypes": [
                                            {
                                              "typeIdentifier": "t_bytes_memory_ptr",
                                              "typeString": "bytes memory"
                                            }
                                          ],
                                          "id": 2428,
                                          "name": "keccak256",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 3337,
                                          "src": "37043:9:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                            "typeString": "function (bytes memory) pure returns (bytes32)"
                                          }
                                        },
                                        "id": 2433,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "kind": "functionCall",
                                        "lValueRequested": false,
                                        "names": [],
                                        "nodeType": "FunctionCall",
                                        "src": "37043:33:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bytes32",
                                          "typeString": "bytes32"
                                        }
                                      },
                                      "src": "37032:44:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bytes32",
                                        "typeString": "bytes32"
                                      }
                                    },
                                    "id": 2435,
                                    "nodeType": "ExpressionStatement",
                                    "src": "37032:44:0"
                                  },
                                  {
                                    "expression": {
                                      "argumentTypes": null,
                                      "id": 2442,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftHandSide": {
                                        "argumentTypes": null,
                                        "id": 2436,
                                        "name": "value",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 2391,
                                        "src": "37086:5:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bytes_memory_ptr",
                                          "typeString": "bytes memory"
                                        }
                                      },
                                      "nodeType": "Assignment",
                                      "operator": "=",
                                      "rightHandSide": {
                                        "argumentTypes": null,
                                        "arguments": [
                                          {
                                            "argumentTypes": null,
                                            "arguments": [],
                                            "expression": {
                                              "argumentTypes": [],
                                              "expression": {
                                                "argumentTypes": null,
                                                "id": 2438,
                                                "name": "iter",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 2399,
                                                "src": "37100:4:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_struct$_RRIterator_$1835_memory_ptr",
                                                  "typeString": "struct RRUtils.RRIterator memory"
                                                }
                                              },
                                              "id": 2439,
                                              "isConstant": false,
                                              "isLValue": true,
                                              "isPure": false,
                                              "lValueRequested": false,
                                              "memberName": "rdata",
                                              "nodeType": "MemberAccess",
                                              "referencedDeclaration": 2019,
                                              "src": "37100:10:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_function_internal_pure$_t_struct$_RRIterator_$1835_memory_ptr_$returns$_t_bytes_memory_ptr_$bound_to$_t_struct$_RRIterator_$1835_memory_ptr_$",
                                                "typeString": "function (struct RRUtils.RRIterator memory) pure returns (bytes memory)"
                                              }
                                            },
                                            "id": 2440,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "kind": "functionCall",
                                            "lValueRequested": false,
                                            "names": [],
                                            "nodeType": "FunctionCall",
                                            "src": "37100:12:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_bytes_memory_ptr",
                                              "typeString": "bytes memory"
                                            }
                                          }
                                        ],
                                        "expression": {
                                          "argumentTypes": [
                                            {
                                              "typeIdentifier": "t_bytes_memory_ptr",
                                              "typeString": "bytes memory"
                                            }
                                          ],
                                          "id": 2437,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": true,
                                          "lValueRequested": false,
                                          "nodeType": "ElementaryTypeNameExpression",
                                          "src": "37094:5:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
                                            "typeString": "type(bytes storage pointer)"
                                          },
                                          "typeName": "bytes"
                                        },
                                        "id": 2441,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "kind": "typeConversion",
                                        "lValueRequested": false,
                                        "names": [],
                                        "nodeType": "FunctionCall",
                                        "src": "37094:19:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bytes_memory_ptr",
                                          "typeString": "bytes memory"
                                        }
                                      },
                                      "src": "37086:27:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bytes_memory_ptr",
                                        "typeString": "bytes memory"
                                      }
                                    },
                                    "id": 2443,
                                    "nodeType": "ExpressionStatement",
                                    "src": "37086:27:0"
                                  }
                                ]
                              }
                            }
                          ]
                        },
                        "condition": {
                          "argumentTypes": null,
                          "id": 2408,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "UnaryOperation",
                          "operator": "!",
                          "prefix": true,
                          "src": "36896:12:0",
                          "subExpression": {
                            "argumentTypes": null,
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "expression": {
                                "argumentTypes": null,
                                "id": 2405,
                                "name": "iter",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2399,
                                "src": "36897:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_RRIterator_$1835_memory_ptr",
                                  "typeString": "struct RRUtils.RRIterator memory"
                                }
                              },
                              "id": 2406,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "done",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 1876,
                              "src": "36897:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_struct$_RRIterator_$1835_memory_ptr_$returns$_t_bool_$bound_to$_t_struct$_RRIterator_$1835_memory_ptr_$",
                                "typeString": "function (struct RRUtils.RRIterator memory) pure returns (bool)"
                              }
                            },
                            "id": 2407,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "36897:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 2510,
                        "initializationExpression": {
                          "assignments": [
                            2399
                          ],
                          "declarations": [
                            {
                              "constant": false,
                              "id": 2399,
                              "name": "iter",
                              "nodeType": "VariableDeclaration",
                              "scope": 2510,
                              "src": "36837:30:0",
                              "stateVariable": false,
                              "storageLocation": "memory",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_RRIterator_$1835_memory_ptr",
                                "typeString": "struct RRUtils.RRIterator"
                              },
                              "typeName": {
                                "contractScope": null,
                                "id": 2398,
                                "name": "RRUtils.RRIterator",
                                "nodeType": "UserDefinedTypeName",
                                "referencedDeclaration": 1835,
                                "src": "36837:18:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_RRIterator_$1835_storage_ptr",
                                  "typeString": "struct RRUtils.RRIterator"
                                }
                              },
                              "value": null,
                              "visibility": "internal"
                            }
                          ],
                          "id": 2404,
                          "initialValue": {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "hexValue": "30",
                                "id": 2402,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "36886:1:0",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                }
                              ],
                              "expression": {
                                "argumentTypes": null,
                                "id": 2400,
                                "name": "data",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2373,
                                "src": "36870:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_calldata_ptr",
                                  "typeString": "bytes calldata"
                                }
                              },
                              "id": 2401,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "iterateRRs",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 1861,
                              "src": "36870:15:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_struct$_RRIterator_$1835_memory_ptr_$bound_to$_t_bytes_memory_ptr_$",
                                "typeString": "function (bytes memory,uint256) pure returns (struct RRUtils.RRIterator memory)"
                              }
                            },
                            "id": 2403,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "36870:18:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_RRIterator_$1835_memory_ptr",
                              "typeString": "struct RRUtils.RRIterator memory"
                            }
                          },
                          "nodeType": "VariableDeclarationStatement",
                          "src": "36837:51:0"
                        },
                        "loopExpression": {
                          "expression": {
                            "argumentTypes": null,
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "expression": {
                                "argumentTypes": null,
                                "id": 2409,
                                "name": "iter",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2399,
                                "src": "36916:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_RRIterator_$1835_memory_ptr",
                                  "typeString": "struct RRUtils.RRIterator memory"
                                }
                              },
                              "id": 2410,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "next",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 1978,
                              "src": "36916:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_struct$_RRIterator_$1835_memory_ptr_$returns$__$bound_to$_t_struct$_RRIterator_$1835_memory_ptr_$",
                                "typeString": "function (struct RRUtils.RRIterator memory) pure"
                              }
                            },
                            "id": 2411,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "36916:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_tuple$__$",
                              "typeString": "tuple()"
                            }
                          },
                          "id": 2412,
                          "nodeType": "ExpressionStatement",
                          "src": "36916:11:0"
                        },
                        "nodeType": "ForStatement",
                        "src": "36825:803:0"
                      },
                      {
                        "condition": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 2514,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 2511,
                              "name": "name",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2388,
                              "src": "37637:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            },
                            "id": 2512,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "length",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "37637:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": ">",
                          "rightExpression": {
                            "argumentTypes": null,
                            "hexValue": "30",
                            "id": 2513,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "37651:1:0",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "37637:15:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": null,
                        "id": 2532,
                        "nodeType": "IfStatement",
                        "src": "37633:188:0",
                        "trueBody": {
                          "id": 2531,
                          "nodeType": "Block",
                          "src": "37654:167:0",
                          "statements": [
                            {
                              "expression": {
                                "argumentTypes": null,
                                "arguments": [
                                  {
                                    "argumentTypes": null,
                                    "id": 2516,
                                    "name": "node",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2371,
                                    "src": "37683:4:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bytes32",
                                      "typeString": "bytes32"
                                    }
                                  },
                                  {
                                    "argumentTypes": null,
                                    "id": 2517,
                                    "name": "name",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2388,
                                    "src": "37697:4:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bytes_memory_ptr",
                                      "typeString": "bytes memory"
                                    }
                                  },
                                  {
                                    "argumentTypes": null,
                                    "id": 2518,
                                    "name": "resource",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2380,
                                    "src": "37711:8:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint16",
                                      "typeString": "uint16"
                                    }
                                  },
                                  {
                                    "argumentTypes": null,
                                    "id": 2519,
                                    "name": "data",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2373,
                                    "src": "37729:4:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bytes_calldata_ptr",
                                      "typeString": "bytes calldata"
                                    }
                                  },
                                  {
                                    "argumentTypes": null,
                                    "id": 2520,
                                    "name": "offset",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2384,
                                    "src": "37743:6:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  {
                                    "argumentTypes": null,
                                    "commonType": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    "id": 2524,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "argumentTypes": null,
                                      "expression": {
                                        "argumentTypes": null,
                                        "id": 2521,
                                        "name": "data",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 2373,
                                        "src": "37759:4:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bytes_calldata_ptr",
                                          "typeString": "bytes calldata"
                                        }
                                      },
                                      "id": 2522,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberName": "length",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": null,
                                      "src": "37759:11:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "-",
                                    "rightExpression": {
                                      "argumentTypes": null,
                                      "id": 2523,
                                      "name": "offset",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2384,
                                      "src": "37773:6:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "src": "37759:20:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  {
                                    "argumentTypes": null,
                                    "commonType": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    "id": 2528,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "argumentTypes": null,
                                      "expression": {
                                        "argumentTypes": null,
                                        "id": 2525,
                                        "name": "value",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 2391,
                                        "src": "37789:5:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bytes_memory_ptr",
                                          "typeString": "bytes memory"
                                        }
                                      },
                                      "id": 2526,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberName": "length",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": null,
                                      "src": "37789:12:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "==",
                                    "rightExpression": {
                                      "argumentTypes": null,
                                      "hexValue": "30",
                                      "id": 2527,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "37805:1:0",
                                      "subdenomination": null,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_0_by_1",
                                        "typeString": "int_const 0"
                                      },
                                      "value": "0"
                                    },
                                    "src": "37789:17:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_bytes32",
                                      "typeString": "bytes32"
                                    },
                                    {
                                      "typeIdentifier": "t_bytes_memory_ptr",
                                      "typeString": "bytes memory"
                                    },
                                    {
                                      "typeIdentifier": "t_uint16",
                                      "typeString": "uint16"
                                    },
                                    {
                                      "typeIdentifier": "t_bytes_calldata_ptr",
                                      "typeString": "bytes calldata"
                                    },
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  ],
                                  "id": 2515,
                                  "name": "setDNSRRSet",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2741,
                                  "src": "37662:11:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_nonpayable$_t_bytes32_$_t_bytes_memory_ptr_$_t_uint16_$_t_bytes_memory_ptr_$_t_uint256_$_t_uint256_$_t_bool_$returns$__$",
                                    "typeString": "function (bytes32,bytes memory,uint16,bytes memory,uint256,uint256,bool)"
                                  }
                                },
                                "id": 2529,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "37662:152:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 2530,
                              "nodeType": "ExpressionStatement",
                              "src": "37662:152:0"
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "documentation": "Set one or more DNS records.  Records are supplied in wire-format.\nRecords with the same node/name/resource must be supplied one after the\nother to ensure the data is updated correctly. For example, if the data\nwas supplied:\n    a.example.com IN A 1.2.3.4\n    a.example.com IN A 5.6.7.8\n    www.example.com IN CNAME a.example.com.\nthen this would store the two A records for a.example.com correctly as a\nsingle RRSET, however if the data was supplied:\n    a.example.com IN A 1.2.3.4\n    www.example.com IN CNAME a.example.com.\n    a.example.com IN A 5.6.7.8\nthen this would store the first A record, the CNAME, then the second A\nrecord which would overwrite the first.\n   * @param node the namehash of the node for which to set the records\n@param data the DNS wire format records to set",
                  "id": 2534,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "id": 2376,
                          "name": "node",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2371,
                          "src": "36636:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        }
                      ],
                      "id": 2377,
                      "modifierName": {
                        "argumentTypes": null,
                        "id": 2375,
                        "name": "authorised",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 114,
                        "src": "36625:10:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_modifier$_t_bytes32_$",
                          "typeString": "modifier (bytes32)"
                        }
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "36625:16:0"
                    }
                  ],
                  "name": "setDNSRecords",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 2374,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2371,
                        "name": "node",
                        "nodeType": "VariableDeclaration",
                        "scope": 2534,
                        "src": "36573:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 2370,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "36573:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2373,
                        "name": "data",
                        "nodeType": "VariableDeclaration",
                        "scope": 2534,
                        "src": "36587:19:0",
                        "stateVariable": false,
                        "storageLocation": "calldata",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 2372,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "36587:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "36572:35:0"
                  },
                  "returnParameters": {
                    "id": 2378,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "36644:0:0"
                  },
                  "scope": 2742,
                  "src": "36550:1275:0",
                  "stateMutability": "nonpayable",
                  "superFunction": null,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 2557,
                    "nodeType": "Block",
                    "src": "38326:63:0",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "baseExpression": {
                                  "argumentTypes": null,
                                  "id": 2545,
                                  "name": "records",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2361,
                                  "src": "38339:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_bytes32_$_t_mapping$_t_uint256_$_t_mapping$_t_bytes32_$_t_mapping$_t_uint16_$_t_bytes_storage_$_$_$_$",
                                    "typeString": "mapping(bytes32 => mapping(uint256 => mapping(bytes32 => mapping(uint16 => bytes storage ref))))"
                                  }
                                },
                                "id": 2547,
                                "indexExpression": {
                                  "argumentTypes": null,
                                  "id": 2546,
                                  "name": "node",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2536,
                                  "src": "38347:4:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes32",
                                    "typeString": "bytes32"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "38339:13:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_uint256_$_t_mapping$_t_bytes32_$_t_mapping$_t_uint16_$_t_bytes_storage_$_$_$",
                                  "typeString": "mapping(uint256 => mapping(bytes32 => mapping(uint16 => bytes storage ref)))"
                                }
                              },
                              "id": 2551,
                              "indexExpression": {
                                "argumentTypes": null,
                                "baseExpression": {
                                  "argumentTypes": null,
                                  "id": 2548,
                                  "name": "versions",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2351,
                                  "src": "38353:8:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
                                    "typeString": "mapping(bytes32 => uint256)"
                                  }
                                },
                                "id": 2550,
                                "indexExpression": {
                                  "argumentTypes": null,
                                  "id": 2549,
                                  "name": "node",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2536,
                                  "src": "38362:4:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes32",
                                    "typeString": "bytes32"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "38353:14:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "38339:29:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_bytes32_$_t_mapping$_t_uint16_$_t_bytes_storage_$_$",
                                "typeString": "mapping(bytes32 => mapping(uint16 => bytes storage ref))"
                              }
                            },
                            "id": 2553,
                            "indexExpression": {
                              "argumentTypes": null,
                              "id": 2552,
                              "name": "name",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2538,
                              "src": "38369:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "38339:35:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_uint16_$_t_bytes_storage_$",
                              "typeString": "mapping(uint16 => bytes storage ref)"
                            }
                          },
                          "id": 2555,
                          "indexExpression": {
                            "argumentTypes": null,
                            "id": 2554,
                            "name": "resource",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2540,
                            "src": "38375:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint16",
                              "typeString": "uint16"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "38339:45:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage",
                            "typeString": "bytes storage ref"
                          }
                        },
                        "functionReturnParameters": 2544,
                        "id": 2556,
                        "nodeType": "Return",
                        "src": "38332:52:0"
                      }
                    ]
                  },
                  "documentation": "Obtain a DNS record.\n@param node the namehash of the node for which to fetch the record\n@param name the keccak-256 hash of the fully-qualified name for which to fetch the record\n@param resource the ID of the resource as per https://en.wikipedia.org/wiki/List_of_DNS_record_types\n@return the DNS record in wire format if present, otherwise empty",
                  "id": 2558,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "dnsRecord",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 2541,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2536,
                        "name": "node",
                        "nodeType": "VariableDeclaration",
                        "scope": 2558,
                        "src": "38235:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 2535,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "38235:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2538,
                        "name": "name",
                        "nodeType": "VariableDeclaration",
                        "scope": 2558,
                        "src": "38253:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 2537,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "38253:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2540,
                        "name": "resource",
                        "nodeType": "VariableDeclaration",
                        "scope": 2558,
                        "src": "38271:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint16",
                          "typeString": "uint16"
                        },
                        "typeName": {
                          "id": 2539,
                          "name": "uint16",
                          "nodeType": "ElementaryTypeName",
                          "src": "38271:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint16",
                            "typeString": "uint16"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "38229:61:0"
                  },
                  "returnParameters": {
                    "id": 2544,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2543,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 2558,
                        "src": "38312:12:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 2542,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "38312:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "38311:14:0"
                  },
                  "scope": 2742,
                  "src": "38211:178:0",
                  "stateMutability": "view",
                  "superFunction": null,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 2580,
                    "nodeType": "Block",
                    "src": "38683:69:0",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "components": [
                            {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_uint16",
                                "typeString": "uint16"
                              },
                              "id": 2577,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "baseExpression": {
                                  "argumentTypes": null,
                                  "baseExpression": {
                                    "argumentTypes": null,
                                    "baseExpression": {
                                      "argumentTypes": null,
                                      "id": 2567,
                                      "name": "nameEntriesCount",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2369,
                                      "src": "38697:16:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_mapping$_t_bytes32_$_t_mapping$_t_uint256_$_t_mapping$_t_bytes32_$_t_uint16_$_$_$",
                                        "typeString": "mapping(bytes32 => mapping(uint256 => mapping(bytes32 => uint16)))"
                                      }
                                    },
                                    "id": 2569,
                                    "indexExpression": {
                                      "argumentTypes": null,
                                      "id": 2568,
                                      "name": "node",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2560,
                                      "src": "38714:4:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bytes32",
                                        "typeString": "bytes32"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "38697:22:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_mapping$_t_uint256_$_t_mapping$_t_bytes32_$_t_uint16_$_$",
                                      "typeString": "mapping(uint256 => mapping(bytes32 => uint16))"
                                    }
                                  },
                                  "id": 2573,
                                  "indexExpression": {
                                    "argumentTypes": null,
                                    "baseExpression": {
                                      "argumentTypes": null,
                                      "id": 2570,
                                      "name": "versions",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2351,
                                      "src": "38720:8:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
                                        "typeString": "mapping(bytes32 => uint256)"
                                      }
                                    },
                                    "id": 2572,
                                    "indexExpression": {
                                      "argumentTypes": null,
                                      "id": 2571,
                                      "name": "node",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2560,
                                      "src": "38729:4:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bytes32",
                                        "typeString": "bytes32"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "38720:14:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "38697:38:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint16_$",
                                    "typeString": "mapping(bytes32 => uint16)"
                                  }
                                },
                                "id": 2575,
                                "indexExpression": {
                                  "argumentTypes": null,
                                  "id": 2574,
                                  "name": "name",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2562,
                                  "src": "38736:4:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes32",
                                    "typeString": "bytes32"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "38697:44:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint16",
                                  "typeString": "uint16"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "!=",
                              "rightExpression": {
                                "argumentTypes": null,
                                "hexValue": "30",
                                "id": 2576,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "38745:1:0",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              },
                              "src": "38697:49:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            }
                          ],
                          "id": 2578,
                          "isConstant": false,
                          "isInlineArray": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "TupleExpression",
                          "src": "38696:51:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "functionReturnParameters": 2566,
                        "id": 2579,
                        "nodeType": "Return",
                        "src": "38689:58:0"
                      }
                    ]
                  },
                  "documentation": "Check if a given node has records.\n@param node the namehash of the node for which to check the records\n@param name the namehash of the node for which to check the records",
                  "id": 2581,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "hasDNSRecords",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 2563,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2560,
                        "name": "node",
                        "nodeType": "VariableDeclaration",
                        "scope": 2581,
                        "src": "38614:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 2559,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "38614:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2562,
                        "name": "name",
                        "nodeType": "VariableDeclaration",
                        "scope": 2581,
                        "src": "38628:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 2561,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "38628:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "38613:28:0"
                  },
                  "returnParameters": {
                    "id": 2566,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2565,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 2581,
                        "src": "38675:4:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 2564,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "38675:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "38674:6:0"
                  },
                  "scope": 2742,
                  "src": "38591:161:0",
                  "stateMutability": "view",
                  "superFunction": null,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 2598,
                    "nodeType": "Block",
                    "src": "38941:58:0",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 2592,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "UnaryOperation",
                          "operator": "++",
                          "prefix": false,
                          "src": "38947:16:0",
                          "subExpression": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "id": 2589,
                              "name": "versions",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2351,
                              "src": "38947:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
                                "typeString": "mapping(bytes32 => uint256)"
                              }
                            },
                            "id": 2591,
                            "indexExpression": {
                              "argumentTypes": null,
                              "id": 2590,
                              "name": "node",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2583,
                              "src": "38956:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "38947:14:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 2593,
                        "nodeType": "ExpressionStatement",
                        "src": "38947:16:0"
                      },
                      {
                        "eventCall": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 2595,
                              "name": "node",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2583,
                              "src": "38989:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            ],
                            "id": 2594,
                            "name": "DNSZoneCleared",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2347,
                            "src": "38974:14:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_bytes32_$returns$__$",
                              "typeString": "function (bytes32)"
                            }
                          },
                          "id": 2596,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "38974:20:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 2597,
                        "nodeType": "EmitStatement",
                        "src": "38969:25:0"
                      }
                    ]
                  },
                  "documentation": "Clear all information for a DNS zone.\n@param node the namehash of the node for which to clear the zone",
                  "id": 2599,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "id": 2586,
                          "name": "node",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2583,
                          "src": "38935:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        }
                      ],
                      "id": 2587,
                      "modifierName": {
                        "argumentTypes": null,
                        "id": 2585,
                        "name": "authorised",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 114,
                        "src": "38924:10:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_modifier$_t_bytes32_$",
                          "typeString": "modifier (bytes32)"
                        }
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "38924:16:0"
                    }
                  ],
                  "name": "clearDNSZone",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 2584,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2583,
                        "name": "node",
                        "nodeType": "VariableDeclaration",
                        "scope": 2599,
                        "src": "38903:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 2582,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "38903:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "38902:14:0"
                  },
                  "returnParameters": {
                    "id": 2588,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "38941:0:0"
                  },
                  "scope": 2742,
                  "src": "38881:118:0",
                  "stateMutability": "nonpayable",
                  "superFunction": null,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 2615,
                    "nodeType": "Block",
                    "src": "39077:108:0",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "id": 2613,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_bytes4",
                              "typeString": "bytes4"
                            },
                            "id": 2608,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "id": 2606,
                              "name": "interfaceID",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2601,
                              "src": "39096:11:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes4",
                                "typeString": "bytes4"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "==",
                            "rightExpression": {
                              "argumentTypes": null,
                              "id": 2607,
                              "name": "DNS_RECORD_INTERFACE_ID",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2325,
                              "src": "39111:23:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes4",
                                "typeString": "bytes4"
                              }
                            },
                            "src": "39096:38:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "||",
                          "rightExpression": {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "id": 2611,
                                "name": "interfaceID",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2601,
                                "src": "39168:11:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes4",
                                  "typeString": "bytes4"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_bytes4",
                                  "typeString": "bytes4"
                                }
                              ],
                              "expression": {
                                "argumentTypes": null,
                                "id": 2609,
                                "name": "super",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3374,
                                "src": "39144:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_super$_DNSResolver_$2742",
                                  "typeString": "contract super DNSResolver"
                                }
                              },
                              "id": 2610,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "supportsInterface",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 95,
                              "src": "39144:23:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_bytes4_$returns$_t_bool_$",
                                "typeString": "function (bytes4) pure returns (bool)"
                              }
                            },
                            "id": 2612,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "39144:36:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "src": "39096:84:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "functionReturnParameters": 2605,
                        "id": 2614,
                        "nodeType": "Return",
                        "src": "39083:97:0"
                      }
                    ]
                  },
                  "documentation": null,
                  "id": 2616,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "supportsInterface",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 2602,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2601,
                        "name": "interfaceID",
                        "nodeType": "VariableDeclaration",
                        "scope": 2616,
                        "src": "39030:18:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        },
                        "typeName": {
                          "id": 2600,
                          "name": "bytes4",
                          "nodeType": "ElementaryTypeName",
                          "src": "39030:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "39029:20:0"
                  },
                  "returnParameters": {
                    "id": 2605,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2604,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 2616,
                        "src": "39071:4:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 2603,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "39071:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "39070:6:0"
                  },
                  "scope": 2742,
                  "src": "39003:182:0",
                  "stateMutability": "pure",
                  "superFunction": 95,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 2740,
                    "nodeType": "Block",
                    "src": "39368:668:0",
                    "statements": [
                      {
                        "assignments": [
                          2634
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 2634,
                            "name": "version",
                            "nodeType": "VariableDeclaration",
                            "scope": 2740,
                            "src": "39374:15:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 2633,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "39374:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "value": null,
                            "visibility": "internal"
                          }
                        ],
                        "id": 2638,
                        "initialValue": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "id": 2635,
                            "name": "versions",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2351,
                            "src": "39392:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
                              "typeString": "mapping(bytes32 => uint256)"
                            }
                          },
                          "id": 2637,
                          "indexExpression": {
                            "argumentTypes": null,
                            "id": 2636,
                            "name": "node",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2618,
                            "src": "39401:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "39392:14:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "39374:32:0"
                      },
                      {
                        "assignments": [
                          2640
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 2640,
                            "name": "nameHash",
                            "nodeType": "VariableDeclaration",
                            "scope": 2740,
                            "src": "39412:16:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            },
                            "typeName": {
                              "id": 2639,
                              "name": "bytes32",
                              "nodeType": "ElementaryTypeName",
                              "src": "39412:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            "value": null,
                            "visibility": "internal"
                          }
                        ],
                        "id": 2644,
                        "initialValue": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 2642,
                              "name": "name",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2620,
                              "src": "39441:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            ],
                            "id": 2641,
                            "name": "keccak256",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3337,
                            "src": "39431:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                              "typeString": "function (bytes memory) pure returns (bytes32)"
                            }
                          },
                          "id": 2643,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "39431:15:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "39412:34:0"
                      },
                      {
                        "assignments": [
                          2646
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 2646,
                            "name": "rrData",
                            "nodeType": "VariableDeclaration",
                            "scope": 2740,
                            "src": "39452:19:0",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes"
                            },
                            "typeName": {
                              "id": 2645,
                              "name": "bytes",
                              "nodeType": "ElementaryTypeName",
                              "src": "39452:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_storage_ptr",
                                "typeString": "bytes"
                              }
                            },
                            "value": null,
                            "visibility": "internal"
                          }
                        ],
                        "id": 2652,
                        "initialValue": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 2649,
                              "name": "offset",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2626,
                              "src": "39489:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "id": 2650,
                              "name": "size",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2628,
                              "src": "39497:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "id": 2647,
                              "name": "data",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2624,
                              "src": "39474:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            },
                            "id": 2648,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "substring",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1003,
                            "src": "39474:14:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_bytes_memory_ptr_$bound_to$_t_bytes_memory_ptr_$",
                              "typeString": "function (bytes memory,uint256,uint256) pure returns (bytes memory)"
                            }
                          },
                          "id": 2651,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "39474:28:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes memory"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "39452:50:0"
                      },
                      {
                        "condition": {
                          "argumentTypes": null,
                          "id": 2653,
                          "name": "deleteRecord",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2630,
                          "src": "39512:12:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": {
                          "id": 2738,
                          "nodeType": "Block",
                          "src": "39778:254:0",
                          "statements": [
                            {
                              "condition": {
                                "argumentTypes": null,
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 2707,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "argumentTypes": null,
                                  "expression": {
                                    "argumentTypes": null,
                                    "baseExpression": {
                                      "argumentTypes": null,
                                      "baseExpression": {
                                        "argumentTypes": null,
                                        "baseExpression": {
                                          "argumentTypes": null,
                                          "baseExpression": {
                                            "argumentTypes": null,
                                            "id": 2696,
                                            "name": "records",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 2361,
                                            "src": "39790:7:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_mapping$_t_bytes32_$_t_mapping$_t_uint256_$_t_mapping$_t_bytes32_$_t_mapping$_t_uint16_$_t_bytes_storage_$_$_$_$",
                                              "typeString": "mapping(bytes32 => mapping(uint256 => mapping(bytes32 => mapping(uint16 => bytes storage ref))))"
                                            }
                                          },
                                          "id": 2698,
                                          "indexExpression": {
                                            "argumentTypes": null,
                                            "id": 2697,
                                            "name": "node",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 2618,
                                            "src": "39798:4:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_bytes32",
                                              "typeString": "bytes32"
                                            }
                                          },
                                          "isConstant": false,
                                          "isLValue": true,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "nodeType": "IndexAccess",
                                          "src": "39790:13:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_mapping$_t_uint256_$_t_mapping$_t_bytes32_$_t_mapping$_t_uint16_$_t_bytes_storage_$_$_$",
                                            "typeString": "mapping(uint256 => mapping(bytes32 => mapping(uint16 => bytes storage ref)))"
                                          }
                                        },
                                        "id": 2700,
                                        "indexExpression": {
                                          "argumentTypes": null,
                                          "id": 2699,
                                          "name": "version",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 2634,
                                          "src": "39804:7:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "isConstant": false,
                                        "isLValue": true,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "nodeType": "IndexAccess",
                                        "src": "39790:22:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_mapping$_t_bytes32_$_t_mapping$_t_uint16_$_t_bytes_storage_$_$",
                                          "typeString": "mapping(bytes32 => mapping(uint16 => bytes storage ref))"
                                        }
                                      },
                                      "id": 2702,
                                      "indexExpression": {
                                        "argumentTypes": null,
                                        "id": 2701,
                                        "name": "nameHash",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 2640,
                                        "src": "39813:8:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bytes32",
                                          "typeString": "bytes32"
                                        }
                                      },
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "nodeType": "IndexAccess",
                                      "src": "39790:32:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_mapping$_t_uint16_$_t_bytes_storage_$",
                                        "typeString": "mapping(uint16 => bytes storage ref)"
                                      }
                                    },
                                    "id": 2704,
                                    "indexExpression": {
                                      "argumentTypes": null,
                                      "id": 2703,
                                      "name": "resource",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2622,
                                      "src": "39823:8:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint16",
                                        "typeString": "uint16"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "39790:42:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bytes_storage",
                                      "typeString": "bytes storage ref"
                                    }
                                  },
                                  "id": 2705,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "length",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": null,
                                  "src": "39790:49:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "==",
                                "rightExpression": {
                                  "argumentTypes": null,
                                  "hexValue": "30",
                                  "id": 2706,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "39843:1:0",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                },
                                "src": "39790:54:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "falseBody": null,
                              "id": 2718,
                              "nodeType": "IfStatement",
                              "src": "39786:122:0",
                              "trueBody": {
                                "id": 2717,
                                "nodeType": "Block",
                                "src": "39846:62:0",
                                "statements": [
                                  {
                                    "expression": {
                                      "argumentTypes": null,
                                      "id": 2715,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "nodeType": "UnaryOperation",
                                      "operator": "++",
                                      "prefix": false,
                                      "src": "39856:43:0",
                                      "subExpression": {
                                        "argumentTypes": null,
                                        "baseExpression": {
                                          "argumentTypes": null,
                                          "baseExpression": {
                                            "argumentTypes": null,
                                            "baseExpression": {
                                              "argumentTypes": null,
                                              "id": 2708,
                                              "name": "nameEntriesCount",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 2369,
                                              "src": "39856:16:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_mapping$_t_bytes32_$_t_mapping$_t_uint256_$_t_mapping$_t_bytes32_$_t_uint16_$_$_$",
                                                "typeString": "mapping(bytes32 => mapping(uint256 => mapping(bytes32 => uint16)))"
                                              }
                                            },
                                            "id": 2712,
                                            "indexExpression": {
                                              "argumentTypes": null,
                                              "id": 2709,
                                              "name": "node",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 2618,
                                              "src": "39873:4:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_bytes32",
                                                "typeString": "bytes32"
                                              }
                                            },
                                            "isConstant": false,
                                            "isLValue": true,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "nodeType": "IndexAccess",
                                            "src": "39856:22:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_mapping$_t_uint256_$_t_mapping$_t_bytes32_$_t_uint16_$_$",
                                              "typeString": "mapping(uint256 => mapping(bytes32 => uint16))"
                                            }
                                          },
                                          "id": 2713,
                                          "indexExpression": {
                                            "argumentTypes": null,
                                            "id": 2710,
                                            "name": "version",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 2634,
                                            "src": "39879:7:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          },
                                          "isConstant": false,
                                          "isLValue": true,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "nodeType": "IndexAccess",
                                          "src": "39856:31:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint16_$",
                                            "typeString": "mapping(bytes32 => uint16)"
                                          }
                                        },
                                        "id": 2714,
                                        "indexExpression": {
                                          "argumentTypes": null,
                                          "id": 2711,
                                          "name": "nameHash",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 2640,
                                          "src": "39888:8:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_bytes32",
                                            "typeString": "bytes32"
                                          }
                                        },
                                        "isConstant": false,
                                        "isLValue": true,
                                        "isPure": false,
                                        "lValueRequested": true,
                                        "nodeType": "IndexAccess",
                                        "src": "39856:41:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint16",
                                          "typeString": "uint16"
                                        }
                                      },
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint16",
                                        "typeString": "uint16"
                                      }
                                    },
                                    "id": 2716,
                                    "nodeType": "ExpressionStatement",
                                    "src": "39856:43:0"
                                  }
                                ]
                              }
                            },
                            {
                              "expression": {
                                "argumentTypes": null,
                                "id": 2729,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "argumentTypes": null,
                                  "baseExpression": {
                                    "argumentTypes": null,
                                    "baseExpression": {
                                      "argumentTypes": null,
                                      "baseExpression": {
                                        "argumentTypes": null,
                                        "baseExpression": {
                                          "argumentTypes": null,
                                          "id": 2719,
                                          "name": "records",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 2361,
                                          "src": "39915:7:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_mapping$_t_bytes32_$_t_mapping$_t_uint256_$_t_mapping$_t_bytes32_$_t_mapping$_t_uint16_$_t_bytes_storage_$_$_$_$",
                                            "typeString": "mapping(bytes32 => mapping(uint256 => mapping(bytes32 => mapping(uint16 => bytes storage ref))))"
                                          }
                                        },
                                        "id": 2724,
                                        "indexExpression": {
                                          "argumentTypes": null,
                                          "id": 2720,
                                          "name": "node",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 2618,
                                          "src": "39923:4:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_bytes32",
                                            "typeString": "bytes32"
                                          }
                                        },
                                        "isConstant": false,
                                        "isLValue": true,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "nodeType": "IndexAccess",
                                        "src": "39915:13:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_mapping$_t_uint256_$_t_mapping$_t_bytes32_$_t_mapping$_t_uint16_$_t_bytes_storage_$_$_$",
                                          "typeString": "mapping(uint256 => mapping(bytes32 => mapping(uint16 => bytes storage ref)))"
                                        }
                                      },
                                      "id": 2725,
                                      "indexExpression": {
                                        "argumentTypes": null,
                                        "id": 2721,
                                        "name": "version",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 2634,
                                        "src": "39929:7:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "nodeType": "IndexAccess",
                                      "src": "39915:22:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_mapping$_t_bytes32_$_t_mapping$_t_uint16_$_t_bytes_storage_$_$",
                                        "typeString": "mapping(bytes32 => mapping(uint16 => bytes storage ref))"
                                      }
                                    },
                                    "id": 2726,
                                    "indexExpression": {
                                      "argumentTypes": null,
                                      "id": 2722,
                                      "name": "nameHash",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2640,
                                      "src": "39938:8:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bytes32",
                                        "typeString": "bytes32"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "39915:32:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_mapping$_t_uint16_$_t_bytes_storage_$",
                                      "typeString": "mapping(uint16 => bytes storage ref)"
                                    }
                                  },
                                  "id": 2727,
                                  "indexExpression": {
                                    "argumentTypes": null,
                                    "id": 2723,
                                    "name": "resource",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2622,
                                    "src": "39948:8:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint16",
                                      "typeString": "uint16"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": true,
                                  "nodeType": "IndexAccess",
                                  "src": "39915:42:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes_storage",
                                    "typeString": "bytes storage ref"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "argumentTypes": null,
                                  "id": 2728,
                                  "name": "rrData",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2646,
                                  "src": "39960:6:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes_memory_ptr",
                                    "typeString": "bytes memory"
                                  }
                                },
                                "src": "39915:51:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_storage",
                                  "typeString": "bytes storage ref"
                                }
                              },
                              "id": 2730,
                              "nodeType": "ExpressionStatement",
                              "src": "39915:51:0"
                            },
                            {
                              "eventCall": {
                                "argumentTypes": null,
                                "arguments": [
                                  {
                                    "argumentTypes": null,
                                    "id": 2732,
                                    "name": "node",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2618,
                                    "src": "39996:4:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bytes32",
                                      "typeString": "bytes32"
                                    }
                                  },
                                  {
                                    "argumentTypes": null,
                                    "id": 2733,
                                    "name": "name",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2620,
                                    "src": "40002:4:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bytes_memory_ptr",
                                      "typeString": "bytes memory"
                                    }
                                  },
                                  {
                                    "argumentTypes": null,
                                    "id": 2734,
                                    "name": "resource",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2622,
                                    "src": "40008:8:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint16",
                                      "typeString": "uint16"
                                    }
                                  },
                                  {
                                    "argumentTypes": null,
                                    "id": 2735,
                                    "name": "rrData",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2646,
                                    "src": "40018:6:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bytes_memory_ptr",
                                      "typeString": "bytes memory"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_bytes32",
                                      "typeString": "bytes32"
                                    },
                                    {
                                      "typeIdentifier": "t_bytes_memory_ptr",
                                      "typeString": "bytes memory"
                                    },
                                    {
                                      "typeIdentifier": "t_uint16",
                                      "typeString": "uint16"
                                    },
                                    {
                                      "typeIdentifier": "t_bytes_memory_ptr",
                                      "typeString": "bytes memory"
                                    }
                                  ],
                                  "id": 2731,
                                  "name": "DNSRecordChanged",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2335,
                                  "src": "39979:16:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_event_nonpayable$_t_bytes32_$_t_bytes_memory_ptr_$_t_uint16_$_t_bytes_memory_ptr_$returns$__$",
                                    "typeString": "function (bytes32,bytes memory,uint16,bytes memory)"
                                  }
                                },
                                "id": 2736,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "39979:46:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 2737,
                              "nodeType": "EmitStatement",
                              "src": "39974:51:0"
                            }
                          ]
                        },
                        "id": 2739,
                        "nodeType": "IfStatement",
                        "src": "39508:524:0",
                        "trueBody": {
                          "id": 2695,
                          "nodeType": "Block",
                          "src": "39526:246:0",
                          "statements": [
                            {
                              "condition": {
                                "argumentTypes": null,
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 2665,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "argumentTypes": null,
                                  "expression": {
                                    "argumentTypes": null,
                                    "baseExpression": {
                                      "argumentTypes": null,
                                      "baseExpression": {
                                        "argumentTypes": null,
                                        "baseExpression": {
                                          "argumentTypes": null,
                                          "baseExpression": {
                                            "argumentTypes": null,
                                            "id": 2654,
                                            "name": "records",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 2361,
                                            "src": "39538:7:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_mapping$_t_bytes32_$_t_mapping$_t_uint256_$_t_mapping$_t_bytes32_$_t_mapping$_t_uint16_$_t_bytes_storage_$_$_$_$",
                                              "typeString": "mapping(bytes32 => mapping(uint256 => mapping(bytes32 => mapping(uint16 => bytes storage ref))))"
                                            }
                                          },
                                          "id": 2656,
                                          "indexExpression": {
                                            "argumentTypes": null,
                                            "id": 2655,
                                            "name": "node",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 2618,
                                            "src": "39546:4:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_bytes32",
                                              "typeString": "bytes32"
                                            }
                                          },
                                          "isConstant": false,
                                          "isLValue": true,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "nodeType": "IndexAccess",
                                          "src": "39538:13:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_mapping$_t_uint256_$_t_mapping$_t_bytes32_$_t_mapping$_t_uint16_$_t_bytes_storage_$_$_$",
                                            "typeString": "mapping(uint256 => mapping(bytes32 => mapping(uint16 => bytes storage ref)))"
                                          }
                                        },
                                        "id": 2658,
                                        "indexExpression": {
                                          "argumentTypes": null,
                                          "id": 2657,
                                          "name": "version",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 2634,
                                          "src": "39552:7:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "isConstant": false,
                                        "isLValue": true,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "nodeType": "IndexAccess",
                                        "src": "39538:22:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_mapping$_t_bytes32_$_t_mapping$_t_uint16_$_t_bytes_storage_$_$",
                                          "typeString": "mapping(bytes32 => mapping(uint16 => bytes storage ref))"
                                        }
                                      },
                                      "id": 2660,
                                      "indexExpression": {
                                        "argumentTypes": null,
                                        "id": 2659,
                                        "name": "nameHash",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 2640,
                                        "src": "39561:8:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bytes32",
                                          "typeString": "bytes32"
                                        }
                                      },
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "nodeType": "IndexAccess",
                                      "src": "39538:32:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_mapping$_t_uint16_$_t_bytes_storage_$",
                                        "typeString": "mapping(uint16 => bytes storage ref)"
                                      }
                                    },
                                    "id": 2662,
                                    "indexExpression": {
                                      "argumentTypes": null,
                                      "id": 2661,
                                      "name": "resource",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2622,
                                      "src": "39571:8:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint16",
                                        "typeString": "uint16"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "39538:42:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bytes_storage",
                                      "typeString": "bytes storage ref"
                                    }
                                  },
                                  "id": 2663,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "length",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": null,
                                  "src": "39538:49:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "!=",
                                "rightExpression": {
                                  "argumentTypes": null,
                                  "hexValue": "30",
                                  "id": 2664,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "39591:1:0",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                },
                                "src": "39538:54:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "falseBody": null,
                              "id": 2676,
                              "nodeType": "IfStatement",
                              "src": "39534:122:0",
                              "trueBody": {
                                "id": 2675,
                                "nodeType": "Block",
                                "src": "39594:62:0",
                                "statements": [
                                  {
                                    "expression": {
                                      "argumentTypes": null,
                                      "id": 2673,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "nodeType": "UnaryOperation",
                                      "operator": "--",
                                      "prefix": false,
                                      "src": "39604:43:0",
                                      "subExpression": {
                                        "argumentTypes": null,
                                        "baseExpression": {
                                          "argumentTypes": null,
                                          "baseExpression": {
                                            "argumentTypes": null,
                                            "baseExpression": {
                                              "argumentTypes": null,
                                              "id": 2666,
                                              "name": "nameEntriesCount",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 2369,
                                              "src": "39604:16:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_mapping$_t_bytes32_$_t_mapping$_t_uint256_$_t_mapping$_t_bytes32_$_t_uint16_$_$_$",
                                                "typeString": "mapping(bytes32 => mapping(uint256 => mapping(bytes32 => uint16)))"
                                              }
                                            },
                                            "id": 2670,
                                            "indexExpression": {
                                              "argumentTypes": null,
                                              "id": 2667,
                                              "name": "node",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 2618,
                                              "src": "39621:4:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_bytes32",
                                                "typeString": "bytes32"
                                              }
                                            },
                                            "isConstant": false,
                                            "isLValue": true,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "nodeType": "IndexAccess",
                                            "src": "39604:22:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_mapping$_t_uint256_$_t_mapping$_t_bytes32_$_t_uint16_$_$",
                                              "typeString": "mapping(uint256 => mapping(bytes32 => uint16))"
                                            }
                                          },
                                          "id": 2671,
                                          "indexExpression": {
                                            "argumentTypes": null,
                                            "id": 2668,
                                            "name": "version",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 2634,
                                            "src": "39627:7:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          },
                                          "isConstant": false,
                                          "isLValue": true,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "nodeType": "IndexAccess",
                                          "src": "39604:31:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint16_$",
                                            "typeString": "mapping(bytes32 => uint16)"
                                          }
                                        },
                                        "id": 2672,
                                        "indexExpression": {
                                          "argumentTypes": null,
                                          "id": 2669,
                                          "name": "nameHash",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 2640,
                                          "src": "39636:8:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_bytes32",
                                            "typeString": "bytes32"
                                          }
                                        },
                                        "isConstant": false,
                                        "isLValue": true,
                                        "isPure": false,
                                        "lValueRequested": true,
                                        "nodeType": "IndexAccess",
                                        "src": "39604:41:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint16",
                                          "typeString": "uint16"
                                        }
                                      },
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint16",
                                        "typeString": "uint16"
                                      }
                                    },
                                    "id": 2674,
                                    "nodeType": "ExpressionStatement",
                                    "src": "39604:43:0"
                                  }
                                ]
                              }
                            },
                            {
                              "expression": {
                                "argumentTypes": null,
                                "id": 2687,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "UnaryOperation",
                                "operator": "delete",
                                "prefix": true,
                                "src": "39663:51:0",
                                "subExpression": {
                                  "argumentTypes": null,
                                  "components": [
                                    {
                                      "argumentTypes": null,
                                      "baseExpression": {
                                        "argumentTypes": null,
                                        "baseExpression": {
                                          "argumentTypes": null,
                                          "baseExpression": {
                                            "argumentTypes": null,
                                            "baseExpression": {
                                              "argumentTypes": null,
                                              "id": 2677,
                                              "name": "records",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 2361,
                                              "src": "39671:7:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_mapping$_t_bytes32_$_t_mapping$_t_uint256_$_t_mapping$_t_bytes32_$_t_mapping$_t_uint16_$_t_bytes_storage_$_$_$_$",
                                                "typeString": "mapping(bytes32 => mapping(uint256 => mapping(bytes32 => mapping(uint16 => bytes storage ref))))"
                                              }
                                            },
                                            "id": 2679,
                                            "indexExpression": {
                                              "argumentTypes": null,
                                              "id": 2678,
                                              "name": "node",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 2618,
                                              "src": "39679:4:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_bytes32",
                                                "typeString": "bytes32"
                                              }
                                            },
                                            "isConstant": false,
                                            "isLValue": true,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "nodeType": "IndexAccess",
                                            "src": "39671:13:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_mapping$_t_uint256_$_t_mapping$_t_bytes32_$_t_mapping$_t_uint16_$_t_bytes_storage_$_$_$",
                                              "typeString": "mapping(uint256 => mapping(bytes32 => mapping(uint16 => bytes storage ref)))"
                                            }
                                          },
                                          "id": 2681,
                                          "indexExpression": {
                                            "argumentTypes": null,
                                            "id": 2680,
                                            "name": "version",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 2634,
                                            "src": "39685:7:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          },
                                          "isConstant": false,
                                          "isLValue": true,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "nodeType": "IndexAccess",
                                          "src": "39671:22:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_mapping$_t_bytes32_$_t_mapping$_t_uint16_$_t_bytes_storage_$_$",
                                            "typeString": "mapping(bytes32 => mapping(uint16 => bytes storage ref))"
                                          }
                                        },
                                        "id": 2683,
                                        "indexExpression": {
                                          "argumentTypes": null,
                                          "id": 2682,
                                          "name": "nameHash",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 2640,
                                          "src": "39694:8:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_bytes32",
                                            "typeString": "bytes32"
                                          }
                                        },
                                        "isConstant": false,
                                        "isLValue": true,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "nodeType": "IndexAccess",
                                        "src": "39671:32:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_mapping$_t_uint16_$_t_bytes_storage_$",
                                          "typeString": "mapping(uint16 => bytes storage ref)"
                                        }
                                      },
                                      "id": 2685,
                                      "indexExpression": {
                                        "argumentTypes": null,
                                        "id": 2684,
                                        "name": "resource",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 2622,
                                        "src": "39704:8:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint16",
                                          "typeString": "uint16"
                                        }
                                      },
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": true,
                                      "nodeType": "IndexAccess",
                                      "src": "39671:42:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bytes_storage",
                                        "typeString": "bytes storage ref"
                                      }
                                    }
                                  ],
                                  "id": 2686,
                                  "isConstant": false,
                                  "isInlineArray": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": true,
                                  "nodeType": "TupleExpression",
                                  "src": "39670:44:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes_storage",
                                    "typeString": "bytes storage ref"
                                  }
                                },
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 2688,
                              "nodeType": "ExpressionStatement",
                              "src": "39663:51:0"
                            },
                            {
                              "eventCall": {
                                "argumentTypes": null,
                                "arguments": [
                                  {
                                    "argumentTypes": null,
                                    "id": 2690,
                                    "name": "node",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2618,
                                    "src": "39744:4:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bytes32",
                                      "typeString": "bytes32"
                                    }
                                  },
                                  {
                                    "argumentTypes": null,
                                    "id": 2691,
                                    "name": "name",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2620,
                                    "src": "39750:4:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bytes_memory_ptr",
                                      "typeString": "bytes memory"
                                    }
                                  },
                                  {
                                    "argumentTypes": null,
                                    "id": 2692,
                                    "name": "resource",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2622,
                                    "src": "39756:8:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint16",
                                      "typeString": "uint16"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_bytes32",
                                      "typeString": "bytes32"
                                    },
                                    {
                                      "typeIdentifier": "t_bytes_memory_ptr",
                                      "typeString": "bytes memory"
                                    },
                                    {
                                      "typeIdentifier": "t_uint16",
                                      "typeString": "uint16"
                                    }
                                  ],
                                  "id": 2689,
                                  "name": "DNSRecordDeleted",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2343,
                                  "src": "39727:16:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_event_nonpayable$_t_bytes32_$_t_bytes_memory_ptr_$_t_uint16_$returns$__$",
                                    "typeString": "function (bytes32,bytes memory,uint16)"
                                  }
                                },
                                "id": 2693,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "39727:38:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 2694,
                              "nodeType": "EmitStatement",
                              "src": "39722:43:0"
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "documentation": null,
                  "id": 2741,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "setDNSRRSet",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 2631,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2618,
                        "name": "node",
                        "nodeType": "VariableDeclaration",
                        "scope": 2741,
                        "src": "39215:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 2617,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "39215:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2620,
                        "name": "name",
                        "nodeType": "VariableDeclaration",
                        "scope": 2741,
                        "src": "39233:17:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 2619,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "39233:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2622,
                        "name": "resource",
                        "nodeType": "VariableDeclaration",
                        "scope": 2741,
                        "src": "39256:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint16",
                          "typeString": "uint16"
                        },
                        "typeName": {
                          "id": 2621,
                          "name": "uint16",
                          "nodeType": "ElementaryTypeName",
                          "src": "39256:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint16",
                            "typeString": "uint16"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2624,
                        "name": "data",
                        "nodeType": "VariableDeclaration",
                        "scope": 2741,
                        "src": "39277:17:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 2623,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "39277:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2626,
                        "name": "offset",
                        "nodeType": "VariableDeclaration",
                        "scope": 2741,
                        "src": "39300:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 2625,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "39300:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2628,
                        "name": "size",
                        "nodeType": "VariableDeclaration",
                        "scope": 2741,
                        "src": "39320:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 2627,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "39320:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2630,
                        "name": "deleteRecord",
                        "nodeType": "VariableDeclaration",
                        "scope": 2741,
                        "src": "39338:17:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 2629,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "39338:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "39209:150:0"
                  },
                  "returnParameters": {
                    "id": 2632,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "39368:0:0"
                  },
                  "scope": 2742,
                  "src": "39189:847:0",
                  "stateMutability": "nonpayable",
                  "superFunction": null,
                  "visibility": "private"
                }
              ],
              "scope": 3329,
              "src": "34299:5739:0"
            },
            {
              "id": 2743,
              "literals": [
                "solidity",
                "^",
                "0.5",
                ".0"
              ],
              "nodeType": "PragmaDirective",
              "src": "40091:23:0"
            },
            {
              "baseContracts": [
                {
                  "arguments": null,
                  "baseName": {
                    "contractScope": null,
                    "id": 2744,
                    "name": "ResolverBase",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 147,
                    "src": "40146:12:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_ResolverBase_$147",
                      "typeString": "contract ResolverBase"
                    }
                  },
                  "id": 2745,
                  "nodeType": "InheritanceSpecifier",
                  "src": "40146:12:0"
                },
                {
                  "arguments": null,
                  "baseName": {
                    "contractScope": null,
                    "id": 2746,
                    "name": "AddrResolver",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 438,
                    "src": "40160:12:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_AddrResolver_$438",
                      "typeString": "contract AddrResolver"
                    }
                  },
                  "id": 2747,
                  "nodeType": "InheritanceSpecifier",
                  "src": "40160:12:0"
                }
              ],
              "contractDependencies": [
                147,
                438
              ],
              "contractKind": "contract",
              "documentation": null,
              "fullyImplemented": false,
              "id": 2926,
              "linearizedBaseContracts": [
                2926,
                438,
                147
              ],
              "name": "InterfaceResolver",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "constant": true,
                  "id": 2754,
                  "name": "INTERFACE_INTERFACE_ID",
                  "nodeType": "VariableDeclaration",
                  "scope": 2926,
                  "src": "40177:110:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes4",
                    "typeString": "bytes4"
                  },
                  "typeName": {
                    "id": 2748,
                    "name": "bytes4",
                    "nodeType": "ElementaryTypeName",
                    "src": "40177:6:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes4",
                      "typeString": "bytes4"
                    }
                  },
                  "value": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "hexValue": "696e74657266616365496d706c656d656e74657228627974657333322c62797465733429",
                            "id": 2751,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "40247:38:0",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_124a319c1247f4318c3c16c7e9cc865d0fb5d80d7bf02f56cafc0d14da020850",
                              "typeString": "literal_string \"interfaceImplementer(bytes32,bytes4)\""
                            },
                            "value": "interfaceImplementer(bytes32,bytes4)"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_stringliteral_124a319c1247f4318c3c16c7e9cc865d0fb5d80d7bf02f56cafc0d14da020850",
                              "typeString": "literal_string \"interfaceImplementer(bytes32,bytes4)\""
                            }
                          ],
                          "id": 2750,
                          "name": "keccak256",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 3337,
                          "src": "40237:9:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                            "typeString": "function (bytes memory) pure returns (bytes32)"
                          }
                        },
                        "id": 2752,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "40237:49:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      ],
                      "id": 2749,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "nodeType": "ElementaryTypeNameExpression",
                      "src": "40230:6:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_bytes4_$",
                        "typeString": "type(bytes4)"
                      },
                      "typeName": "bytes4"
                    },
                    "id": 2753,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "40230:57:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes4",
                      "typeString": "bytes4"
                    }
                  },
                  "visibility": "private"
                },
                {
                  "constant": true,
                  "id": 2757,
                  "name": "INTERFACE_META_ID",
                  "nodeType": "VariableDeclaration",
                  "scope": 2926,
                  "src": "40291:54:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes4",
                    "typeString": "bytes4"
                  },
                  "typeName": {
                    "id": 2755,
                    "name": "bytes4",
                    "nodeType": "ElementaryTypeName",
                    "src": "40291:6:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes4",
                      "typeString": "bytes4"
                    }
                  },
                  "value": {
                    "argumentTypes": null,
                    "hexValue": "30783031666663396137",
                    "id": 2756,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "40335:10:0",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_33540519_by_1",
                      "typeString": "int_const 33540519"
                    },
                    "value": "0x01ffc9a7"
                  },
                  "visibility": "private"
                },
                {
                  "anonymous": false,
                  "documentation": null,
                  "id": 2765,
                  "name": "InterfaceChanged",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 2764,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2759,
                        "indexed": true,
                        "name": "node",
                        "nodeType": "VariableDeclaration",
                        "scope": 2765,
                        "src": "40378:20:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 2758,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "40378:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2761,
                        "indexed": true,
                        "name": "interfaceID",
                        "nodeType": "VariableDeclaration",
                        "scope": 2765,
                        "src": "40404:26:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        },
                        "typeName": {
                          "id": 2760,
                          "name": "bytes4",
                          "nodeType": "ElementaryTypeName",
                          "src": "40404:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2763,
                        "indexed": false,
                        "name": "implementer",
                        "nodeType": "VariableDeclaration",
                        "scope": 2765,
                        "src": "40436:19:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 2762,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "40436:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "40372:87:0"
                  },
                  "src": "40350:110:0"
                },
                {
                  "constant": false,
                  "id": 2771,
                  "name": "interfaces",
                  "nodeType": "VariableDeclaration",
                  "scope": 2926,
                  "src": "40464:57:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_bytes32_$_t_mapping$_t_bytes4_$_t_address_$_$",
                    "typeString": "mapping(bytes32 => mapping(bytes4 => address))"
                  },
                  "typeName": {
                    "id": 2770,
                    "keyType": {
                      "id": 2766,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "40472:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "nodeType": "Mapping",
                    "src": "40464:46:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_bytes32_$_t_mapping$_t_bytes4_$_t_address_$_$",
                      "typeString": "mapping(bytes32 => mapping(bytes4 => address))"
                    },
                    "valueType": {
                      "id": 2769,
                      "keyType": {
                        "id": 2767,
                        "name": "bytes4",
                        "nodeType": "ElementaryTypeName",
                        "src": "40491:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        }
                      },
                      "nodeType": "Mapping",
                      "src": "40483:26:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_bytes4_$_t_address_$",
                        "typeString": "mapping(bytes4 => address)"
                      },
                      "valueType": {
                        "id": 2768,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "40501:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 2797,
                    "nodeType": "Block",
                    "src": "41008:113:0",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 2789,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "id": 2783,
                                "name": "interfaces",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2771,
                                "src": "41014:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_bytes32_$_t_mapping$_t_bytes4_$_t_address_$_$",
                                  "typeString": "mapping(bytes32 => mapping(bytes4 => address))"
                                }
                              },
                              "id": 2786,
                              "indexExpression": {
                                "argumentTypes": null,
                                "id": 2784,
                                "name": "node",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2773,
                                "src": "41025:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes32",
                                  "typeString": "bytes32"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "41014:16:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_bytes4_$_t_address_$",
                                "typeString": "mapping(bytes4 => address)"
                              }
                            },
                            "id": 2787,
                            "indexExpression": {
                              "argumentTypes": null,
                              "id": 2785,
                              "name": "interfaceID",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2775,
                              "src": "41031:11:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes4",
                                "typeString": "bytes4"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "41014:29:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "id": 2788,
                            "name": "implementer",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2777,
                            "src": "41046:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "41014:43:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 2790,
                        "nodeType": "ExpressionStatement",
                        "src": "41014:43:0"
                      },
                      {
                        "eventCall": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 2792,
                              "name": "node",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2773,
                              "src": "41085:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "id": 2793,
                              "name": "interfaceID",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2775,
                              "src": "41091:11:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes4",
                                "typeString": "bytes4"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "id": 2794,
                              "name": "implementer",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2777,
                              "src": "41104:11:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              },
                              {
                                "typeIdentifier": "t_bytes4",
                                "typeString": "bytes4"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 2791,
                            "name": "InterfaceChanged",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2765,
                            "src": "41068:16:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_bytes32_$_t_bytes4_$_t_address_$returns$__$",
                              "typeString": "function (bytes32,bytes4,address)"
                            }
                          },
                          "id": 2795,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "41068:48:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 2796,
                        "nodeType": "EmitStatement",
                        "src": "41063:53:0"
                      }
                    ]
                  },
                  "documentation": "Sets an interface associated with a name.\nSetting the address to 0 restores the default behaviour of querying the contract at `addr()` for interface support.\n@param node The node to update.\n@param interfaceID The EIP 168 interface ID.\n@param implementer The address of a contract that implements this interface for this node.",
                  "id": 2798,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "id": 2780,
                          "name": "node",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2773,
                          "src": "41002:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        }
                      ],
                      "id": 2781,
                      "modifierName": {
                        "argumentTypes": null,
                        "id": 2779,
                        "name": "authorised",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 114,
                        "src": "40991:10:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_modifier$_t_bytes32_$",
                          "typeString": "modifier (bytes32)"
                        }
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "40991:16:0"
                    }
                  ],
                  "name": "setInterface",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 2778,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2773,
                        "name": "node",
                        "nodeType": "VariableDeclaration",
                        "scope": 2798,
                        "src": "40916:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 2772,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "40916:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2775,
                        "name": "interfaceID",
                        "nodeType": "VariableDeclaration",
                        "scope": 2798,
                        "src": "40934:18:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        },
                        "typeName": {
                          "id": 2774,
                          "name": "bytes4",
                          "nodeType": "ElementaryTypeName",
                          "src": "40934:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2777,
                        "name": "implementer",
                        "nodeType": "VariableDeclaration",
                        "scope": 2798,
                        "src": "40958:19:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 2776,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "40958:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "40910:71:0"
                  },
                  "returnParameters": {
                    "id": 2782,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "41008:0:0"
                  },
                  "scope": 2926,
                  "src": "40889:232:0",
                  "stateMutability": "nonpayable",
                  "superFunction": null,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 2907,
                    "nodeType": "Block",
                    "src": "41846:795:0",
                    "statements": [
                      {
                        "assignments": [
                          2808
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 2808,
                            "name": "implementer",
                            "nodeType": "VariableDeclaration",
                            "scope": 2907,
                            "src": "41852:19:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "typeName": {
                              "id": 2807,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "41852:7:0",
                              "stateMutability": "nonpayable",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "value": null,
                            "visibility": "internal"
                          }
                        ],
                        "id": 2814,
                        "initialValue": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "id": 2809,
                              "name": "interfaces",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2771,
                              "src": "41874:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_bytes32_$_t_mapping$_t_bytes4_$_t_address_$_$",
                                "typeString": "mapping(bytes32 => mapping(bytes4 => address))"
                              }
                            },
                            "id": 2811,
                            "indexExpression": {
                              "argumentTypes": null,
                              "id": 2810,
                              "name": "node",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2800,
                              "src": "41885:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "41874:16:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_bytes4_$_t_address_$",
                              "typeString": "mapping(bytes4 => address)"
                            }
                          },
                          "id": 2813,
                          "indexExpression": {
                            "argumentTypes": null,
                            "id": 2812,
                            "name": "interfaceID",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2802,
                            "src": "41891:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes4",
                              "typeString": "bytes4"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "41874:29:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "41852:51:0"
                      },
                      {
                        "condition": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          "id": 2819,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "id": 2815,
                            "name": "implementer",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2808,
                            "src": "41913:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "!=",
                          "rightExpression": {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "hexValue": "30",
                                "id": 2817,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "41936:1:0",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                }
                              ],
                              "id": 2816,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "41928:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": "address"
                            },
                            "id": 2818,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "41928:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          },
                          "src": "41913:25:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": null,
                        "id": 2823,
                        "nodeType": "IfStatement",
                        "src": "41909:64:0",
                        "trueBody": {
                          "id": 2822,
                          "nodeType": "Block",
                          "src": "41940:33:0",
                          "statements": [
                            {
                              "expression": {
                                "argumentTypes": null,
                                "id": 2820,
                                "name": "implementer",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2808,
                                "src": "41955:11:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "functionReturnParameters": 2806,
                              "id": 2821,
                              "nodeType": "Return",
                              "src": "41948:18:0"
                            }
                          ]
                        }
                      },
                      {
                        "assignments": [
                          2825
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 2825,
                            "name": "a",
                            "nodeType": "VariableDeclaration",
                            "scope": 2907,
                            "src": "41979:9:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "typeName": {
                              "id": 2824,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "41979:7:0",
                              "stateMutability": "nonpayable",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "value": null,
                            "visibility": "internal"
                          }
                        ],
                        "id": 2829,
                        "initialValue": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 2827,
                              "name": "node",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2800,
                              "src": "41996:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            ],
                            "id": 2826,
                            "name": "addr",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              361,
                              416
                            ],
                            "referencedDeclaration": 361,
                            "src": "41991:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_bytes32_$returns$_t_address_payable_$",
                              "typeString": "function (bytes32) view returns (address payable)"
                            }
                          },
                          "id": 2828,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "41991:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "41979:22:0"
                      },
                      {
                        "condition": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          "id": 2834,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "id": 2830,
                            "name": "a",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2825,
                            "src": "42011:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "hexValue": "30",
                                "id": 2832,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "42024:1:0",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                }
                              ],
                              "id": 2831,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "42016:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": "address"
                            },
                            "id": 2833,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "42016:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          },
                          "src": "42011:15:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": null,
                        "id": 2840,
                        "nodeType": "IfStatement",
                        "src": "42007:53:0",
                        "trueBody": {
                          "id": 2839,
                          "nodeType": "Block",
                          "src": "42028:32:0",
                          "statements": [
                            {
                              "expression": {
                                "argumentTypes": null,
                                "arguments": [
                                  {
                                    "argumentTypes": null,
                                    "hexValue": "30",
                                    "id": 2836,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "42051:1:0",
                                    "subdenomination": null,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    },
                                    "value": "0"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    }
                                  ],
                                  "id": 2835,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "42043:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_address_$",
                                    "typeString": "type(address)"
                                  },
                                  "typeName": "address"
                                },
                                "id": 2837,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "42043:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address_payable",
                                  "typeString": "address payable"
                                }
                              },
                              "functionReturnParameters": 2806,
                              "id": 2838,
                              "nodeType": "Return",
                              "src": "42036:17:0"
                            }
                          ]
                        }
                      },
                      {
                        "assignments": [
                          2842,
                          2844
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 2842,
                            "name": "success",
                            "nodeType": "VariableDeclaration",
                            "scope": 2907,
                            "src": "42067:12:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "typeName": {
                              "id": 2841,
                              "name": "bool",
                              "nodeType": "ElementaryTypeName",
                              "src": "42067:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "value": null,
                            "visibility": "internal"
                          },
                          {
                            "constant": false,
                            "id": 2844,
                            "name": "returnData",
                            "nodeType": "VariableDeclaration",
                            "scope": 2907,
                            "src": "42081:23:0",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes"
                            },
                            "typeName": {
                              "id": 2843,
                              "name": "bytes",
                              "nodeType": "ElementaryTypeName",
                              "src": "42081:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_storage_ptr",
                                "typeString": "bytes"
                              }
                            },
                            "value": null,
                            "visibility": "internal"
                          }
                        ],
                        "id": 2853,
                        "initialValue": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "hexValue": "737570706f727473496e746572666163652862797465733429",
                                  "id": 2849,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "42152:27:0",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_01ffc9a7a5cef8baa21ed3c5c0d7e23accb804b619e9333b597f47a0d84076e2",
                                    "typeString": "literal_string \"supportsInterface(bytes4)\""
                                  },
                                  "value": "supportsInterface(bytes4)"
                                },
                                {
                                  "argumentTypes": null,
                                  "id": 2850,
                                  "name": "INTERFACE_META_ID",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2757,
                                  "src": "42181:17:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes4",
                                    "typeString": "bytes4"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_stringliteral_01ffc9a7a5cef8baa21ed3c5c0d7e23accb804b619e9333b597f47a0d84076e2",
                                    "typeString": "literal_string \"supportsInterface(bytes4)\""
                                  },
                                  {
                                    "typeIdentifier": "t_bytes4",
                                    "typeString": "bytes4"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 2847,
                                  "name": "abi",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 3330,
                                  "src": "42128:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_abi",
                                    "typeString": "abi"
                                  }
                                },
                                "id": 2848,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "memberName": "encodeWithSignature",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": null,
                                "src": "42128:23:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_abiencodewithsignature_pure$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
                                  "typeString": "function (string memory) pure returns (bytes memory)"
                                }
                              },
                              "id": 2851,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "42128:71:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "id": 2845,
                              "name": "a",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2825,
                              "src": "42108:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "id": 2846,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "staticcall",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "42108:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                              "typeString": "function (bytes memory) view returns (bool,bytes memory)"
                            }
                          },
                          "id": 2852,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "42108:97:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                            "typeString": "tuple(bool,bytes memory)"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "42066:139:0"
                      },
                      {
                        "condition": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "id": 2866,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "id": 2860,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "id": 2855,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "UnaryOperation",
                              "operator": "!",
                              "prefix": true,
                              "src": "42215:8:0",
                              "subExpression": {
                                "argumentTypes": null,
                                "id": 2854,
                                "name": "success",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2842,
                                "src": "42216:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "||",
                            "rightExpression": {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 2859,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 2856,
                                  "name": "returnData",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2844,
                                  "src": "42227:10:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes_memory_ptr",
                                    "typeString": "bytes memory"
                                  }
                                },
                                "id": 2857,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "length",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": null,
                                "src": "42227:17:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "<",
                              "rightExpression": {
                                "argumentTypes": null,
                                "hexValue": "3332",
                                "id": 2858,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "42247:2:0",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_32_by_1",
                                  "typeString": "int_const 32"
                                },
                                "value": "32"
                              },
                              "src": "42227:22:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "src": "42215:34:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "||",
                          "rightExpression": {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_bytes1",
                              "typeString": "bytes1"
                            },
                            "id": 2865,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "id": 2861,
                                "name": "returnData",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2844,
                                "src": "42253:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              },
                              "id": 2863,
                              "indexExpression": {
                                "argumentTypes": null,
                                "hexValue": "3331",
                                "id": 2862,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "42264:2:0",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_31_by_1",
                                  "typeString": "int_const 31"
                                },
                                "value": "31"
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "42253:14:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes1",
                                "typeString": "bytes1"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "==",
                            "rightExpression": {
                              "argumentTypes": null,
                              "hexValue": "30",
                              "id": 2864,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "42271:1:0",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            "src": "42253:19:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "src": "42215:57:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": null,
                        "id": 2872,
                        "nodeType": "IfStatement",
                        "src": "42211:136:0",
                        "trueBody": {
                          "id": 2871,
                          "nodeType": "Block",
                          "src": "42274:73:0",
                          "statements": [
                            {
                              "expression": {
                                "argumentTypes": null,
                                "arguments": [
                                  {
                                    "argumentTypes": null,
                                    "hexValue": "30",
                                    "id": 2868,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "42338:1:0",
                                    "subdenomination": null,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    },
                                    "value": "0"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    }
                                  ],
                                  "id": 2867,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "42330:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_address_$",
                                    "typeString": "type(address)"
                                  },
                                  "typeName": "address"
                                },
                                "id": 2869,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "42330:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address_payable",
                                  "typeString": "address payable"
                                }
                              },
                              "functionReturnParameters": 2806,
                              "id": 2870,
                              "nodeType": "Return",
                              "src": "42323:17:0"
                            }
                          ]
                        }
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 2884,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "components": [
                              {
                                "argumentTypes": null,
                                "id": 2873,
                                "name": "success",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2842,
                                "src": "42354:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              {
                                "argumentTypes": null,
                                "id": 2874,
                                "name": "returnData",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2844,
                                "src": "42363:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              }
                            ],
                            "id": 2875,
                            "isConstant": false,
                            "isInlineArray": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "TupleExpression",
                            "src": "42353:21:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                              "typeString": "tuple(bool,bytes memory)"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "arguments": [
                                  {
                                    "argumentTypes": null,
                                    "hexValue": "737570706f727473496e746572666163652862797465733429",
                                    "id": 2880,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "string",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "42421:27:0",
                                    "subdenomination": null,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_stringliteral_01ffc9a7a5cef8baa21ed3c5c0d7e23accb804b619e9333b597f47a0d84076e2",
                                      "typeString": "literal_string \"supportsInterface(bytes4)\""
                                    },
                                    "value": "supportsInterface(bytes4)"
                                  },
                                  {
                                    "argumentTypes": null,
                                    "id": 2881,
                                    "name": "interfaceID",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2802,
                                    "src": "42450:11:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bytes4",
                                      "typeString": "bytes4"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_stringliteral_01ffc9a7a5cef8baa21ed3c5c0d7e23accb804b619e9333b597f47a0d84076e2",
                                      "typeString": "literal_string \"supportsInterface(bytes4)\""
                                    },
                                    {
                                      "typeIdentifier": "t_bytes4",
                                      "typeString": "bytes4"
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": null,
                                    "id": 2878,
                                    "name": "abi",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 3330,
                                    "src": "42397:3:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_magic_abi",
                                      "typeString": "abi"
                                    }
                                  },
                                  "id": 2879,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "memberName": "encodeWithSignature",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": null,
                                  "src": "42397:23:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_abiencodewithsignature_pure$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
                                    "typeString": "function (string memory) pure returns (bytes memory)"
                                  }
                                },
                                "id": 2882,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "42397:65:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              ],
                              "expression": {
                                "argumentTypes": null,
                                "id": 2876,
                                "name": "a",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2825,
                                "src": "42377:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "id": 2877,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "staticcall",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "42377:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                                "typeString": "function (bytes memory) view returns (bool,bytes memory)"
                              }
                            },
                            "id": 2883,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "42377:91:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                              "typeString": "tuple(bool,bytes memory)"
                            }
                          },
                          "src": "42353:115:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 2885,
                        "nodeType": "ExpressionStatement",
                        "src": "42353:115:0"
                      },
                      {
                        "condition": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "id": 2898,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "id": 2892,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "id": 2887,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "UnaryOperation",
                              "operator": "!",
                              "prefix": true,
                              "src": "42478:8:0",
                              "subExpression": {
                                "argumentTypes": null,
                                "id": 2886,
                                "name": "success",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2842,
                                "src": "42479:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "||",
                            "rightExpression": {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 2891,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 2888,
                                  "name": "returnData",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2844,
                                  "src": "42490:10:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes_memory_ptr",
                                    "typeString": "bytes memory"
                                  }
                                },
                                "id": 2889,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "length",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": null,
                                "src": "42490:17:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "<",
                              "rightExpression": {
                                "argumentTypes": null,
                                "hexValue": "3332",
                                "id": 2890,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "42510:2:0",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_32_by_1",
                                  "typeString": "int_const 32"
                                },
                                "value": "32"
                              },
                              "src": "42490:22:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "src": "42478:34:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "||",
                          "rightExpression": {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_bytes1",
                              "typeString": "bytes1"
                            },
                            "id": 2897,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "id": 2893,
                                "name": "returnData",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2844,
                                "src": "42516:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              },
                              "id": 2895,
                              "indexExpression": {
                                "argumentTypes": null,
                                "hexValue": "3331",
                                "id": 2894,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "42527:2:0",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_31_by_1",
                                  "typeString": "int_const 31"
                                },
                                "value": "31"
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "42516:14:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes1",
                                "typeString": "bytes1"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "==",
                            "rightExpression": {
                              "argumentTypes": null,
                              "hexValue": "30",
                              "id": 2896,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "42534:1:0",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            "src": "42516:19:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "src": "42478:57:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": null,
                        "id": 2904,
                        "nodeType": "IfStatement",
                        "src": "42474:148:0",
                        "trueBody": {
                          "id": 2903,
                          "nodeType": "Block",
                          "src": "42537:85:0",
                          "statements": [
                            {
                              "expression": {
                                "argumentTypes": null,
                                "arguments": [
                                  {
                                    "argumentTypes": null,
                                    "hexValue": "30",
                                    "id": 2900,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "42613:1:0",
                                    "subdenomination": null,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    },
                                    "value": "0"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    }
                                  ],
                                  "id": 2899,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "42605:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_address_$",
                                    "typeString": "type(address)"
                                  },
                                  "typeName": "address"
                                },
                                "id": 2901,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "42605:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address_payable",
                                  "typeString": "address payable"
                                }
                              },
                              "functionReturnParameters": 2806,
                              "id": 2902,
                              "nodeType": "Return",
                              "src": "42598:17:0"
                            }
                          ]
                        }
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 2905,
                          "name": "a",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2825,
                          "src": "42635:1:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "functionReturnParameters": 2806,
                        "id": 2906,
                        "nodeType": "Return",
                        "src": "42628:8:0"
                      }
                    ]
                  },
                  "documentation": "Returns the address of a contract that implements the specified interface for this name.\nIf an implementer has not been set for this interfaceID and name, the resolver will query\nthe contract at `addr()`. If `addr()` is set, a contract exists at that address, and that\ncontract implements EIP168 and returns `true` for the specified interfaceID, its address\nwill be returned.\n@param node The ENS node to query.\n@param interfaceID The EIP 168 interface ID to check for.\n@return The address that implements this interface, or 0 if the interface is unsupported.",
                  "id": 2908,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "interfaceImplementer",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 2803,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2800,
                        "name": "node",
                        "nodeType": "VariableDeclaration",
                        "scope": 2908,
                        "src": "41766:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 2799,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "41766:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2802,
                        "name": "interfaceID",
                        "nodeType": "VariableDeclaration",
                        "scope": 2908,
                        "src": "41780:18:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        },
                        "typeName": {
                          "id": 2801,
                          "name": "bytes4",
                          "nodeType": "ElementaryTypeName",
                          "src": "41780:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "41765:34:0"
                  },
                  "returnParameters": {
                    "id": 2806,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2805,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 2908,
                        "src": "41835:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 2804,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "41835:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "41834:9:0"
                  },
                  "scope": 2926,
                  "src": "41736:905:0",
                  "stateMutability": "view",
                  "superFunction": null,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 2924,
                    "nodeType": "Block",
                    "src": "42719:107:0",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "id": 2922,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_bytes4",
                              "typeString": "bytes4"
                            },
                            "id": 2917,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "id": 2915,
                              "name": "interfaceID",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2910,
                              "src": "42738:11:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes4",
                                "typeString": "bytes4"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "==",
                            "rightExpression": {
                              "argumentTypes": null,
                              "id": 2916,
                              "name": "INTERFACE_INTERFACE_ID",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2754,
                              "src": "42753:22:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes4",
                                "typeString": "bytes4"
                              }
                            },
                            "src": "42738:37:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "||",
                          "rightExpression": {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "id": 2920,
                                "name": "interfaceID",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2910,
                                "src": "42809:11:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes4",
                                  "typeString": "bytes4"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_bytes4",
                                  "typeString": "bytes4"
                                }
                              ],
                              "expression": {
                                "argumentTypes": null,
                                "id": 2918,
                                "name": "super",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3376,
                                "src": "42785:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_super$_InterfaceResolver_$2926",
                                  "typeString": "contract super InterfaceResolver"
                                }
                              },
                              "id": 2919,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "supportsInterface",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 437,
                              "src": "42785:23:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_bytes4_$returns$_t_bool_$",
                                "typeString": "function (bytes4) pure returns (bool)"
                              }
                            },
                            "id": 2921,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "42785:36:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "src": "42738:83:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "functionReturnParameters": 2914,
                        "id": 2923,
                        "nodeType": "Return",
                        "src": "42725:96:0"
                      }
                    ]
                  },
                  "documentation": null,
                  "id": 2925,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "supportsInterface",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 2911,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2910,
                        "name": "interfaceID",
                        "nodeType": "VariableDeclaration",
                        "scope": 2925,
                        "src": "42672:18:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        },
                        "typeName": {
                          "id": 2909,
                          "name": "bytes4",
                          "nodeType": "ElementaryTypeName",
                          "src": "42672:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "42671:20:0"
                  },
                  "returnParameters": {
                    "id": 2914,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2913,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 2925,
                        "src": "42713:4:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 2912,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "42713:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "42712:6:0"
                  },
                  "scope": 2926,
                  "src": "42645:181:0",
                  "stateMutability": "pure",
                  "superFunction": 437,
                  "visibility": "public"
                }
              ],
              "scope": 3329,
              "src": "40116:2712:0"
            },
            {
              "id": 2927,
              "literals": [
                "solidity",
                "^",
                "0.5",
                ".0"
              ],
              "nodeType": "PragmaDirective",
              "src": "42876:23:0"
            },
            {
              "baseContracts": [
                {
                  "arguments": null,
                  "baseName": {
                    "contractScope": null,
                    "id": 2928,
                    "name": "ResolverBase",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 147,
                    "src": "42926:12:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_ResolverBase_$147",
                      "typeString": "contract ResolverBase"
                    }
                  },
                  "id": 2929,
                  "nodeType": "InheritanceSpecifier",
                  "src": "42926:12:0"
                }
              ],
              "contractDependencies": [
                147
              ],
              "contractKind": "contract",
              "documentation": null,
              "fullyImplemented": false,
              "id": 2994,
              "linearizedBaseContracts": [
                2994,
                147
              ],
              "name": "NameResolver",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "constant": true,
                  "id": 2932,
                  "name": "NAME_INTERFACE_ID",
                  "nodeType": "VariableDeclaration",
                  "scope": 2994,
                  "src": "42943:54:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes4",
                    "typeString": "bytes4"
                  },
                  "typeName": {
                    "id": 2930,
                    "name": "bytes4",
                    "nodeType": "ElementaryTypeName",
                    "src": "42943:6:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes4",
                      "typeString": "bytes4"
                    }
                  },
                  "value": {
                    "argumentTypes": null,
                    "hexValue": "30783639316633343331",
                    "id": 2931,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "42987:10:0",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_1763652657_by_1",
                      "typeString": "int_const 1763652657"
                    },
                    "value": "0x691f3431"
                  },
                  "visibility": "private"
                },
                {
                  "anonymous": false,
                  "documentation": null,
                  "id": 2938,
                  "name": "NameChanged",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 2937,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2934,
                        "indexed": true,
                        "name": "node",
                        "nodeType": "VariableDeclaration",
                        "scope": 2938,
                        "src": "43020:20:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 2933,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "43020:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2936,
                        "indexed": false,
                        "name": "name",
                        "nodeType": "VariableDeclaration",
                        "scope": 2938,
                        "src": "43042:11:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 2935,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "43042:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "43019:35:0"
                  },
                  "src": "43002:53:0"
                },
                {
                  "constant": false,
                  "id": 2942,
                  "name": "names",
                  "nodeType": "VariableDeclaration",
                  "scope": 2994,
                  "src": "43059:32:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_bytes32_$_t_string_storage_$",
                    "typeString": "mapping(bytes32 => string)"
                  },
                  "typeName": {
                    "id": 2941,
                    "keyType": {
                      "id": 2939,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "43067:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "nodeType": "Mapping",
                    "src": "43059:26:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_bytes32_$_t_string_storage_$",
                      "typeString": "mapping(bytes32 => string)"
                    },
                    "valueType": {
                      "id": 2940,
                      "name": "string",
                      "nodeType": "ElementaryTypeName",
                      "src": "43078:6:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage_ptr",
                        "typeString": "string"
                      }
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 2963,
                    "nodeType": "Block",
                    "src": "43408:63:0",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 2956,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "id": 2952,
                              "name": "names",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2942,
                              "src": "43414:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_bytes32_$_t_string_storage_$",
                                "typeString": "mapping(bytes32 => string storage ref)"
                              }
                            },
                            "id": 2954,
                            "indexExpression": {
                              "argumentTypes": null,
                              "id": 2953,
                              "name": "node",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2944,
                              "src": "43420:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "43414:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_storage",
                              "typeString": "string storage ref"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "id": 2955,
                            "name": "name",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2946,
                            "src": "43428:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_calldata_ptr",
                              "typeString": "string calldata"
                            }
                          },
                          "src": "43414:18:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage",
                            "typeString": "string storage ref"
                          }
                        },
                        "id": 2957,
                        "nodeType": "ExpressionStatement",
                        "src": "43414:18:0"
                      },
                      {
                        "eventCall": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 2959,
                              "name": "node",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2944,
                              "src": "43455:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "id": 2960,
                              "name": "name",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2946,
                              "src": "43461:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_calldata_ptr",
                                "typeString": "string calldata"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              },
                              {
                                "typeIdentifier": "t_string_calldata_ptr",
                                "typeString": "string calldata"
                              }
                            ],
                            "id": 2958,
                            "name": "NameChanged",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2938,
                            "src": "43443:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_bytes32_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bytes32,string memory)"
                            }
                          },
                          "id": 2961,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "43443:23:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 2962,
                        "nodeType": "EmitStatement",
                        "src": "43438:28:0"
                      }
                    ]
                  },
                  "documentation": "Sets the name associated with an ENS node, for reverse records.\nMay only be called by the owner of that node in the ENS registry.\n@param node The node to update.\n@param name The name to set.",
                  "id": 2964,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "id": 2949,
                          "name": "node",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2944,
                          "src": "43400:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        }
                      ],
                      "id": 2950,
                      "modifierName": {
                        "argumentTypes": null,
                        "id": 2948,
                        "name": "authorised",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 114,
                        "src": "43389:10:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_modifier$_t_bytes32_$",
                          "typeString": "modifier (bytes32)"
                        }
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "43389:16:0"
                    }
                  ],
                  "name": "setName",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 2947,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2944,
                        "name": "node",
                        "nodeType": "VariableDeclaration",
                        "scope": 2964,
                        "src": "43336:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 2943,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "43336:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2946,
                        "name": "name",
                        "nodeType": "VariableDeclaration",
                        "scope": 2964,
                        "src": "43350:20:0",
                        "stateVariable": false,
                        "storageLocation": "calldata",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_calldata_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 2945,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "43350:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "43335:36:0"
                  },
                  "returnParameters": {
                    "id": 2951,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "43408:0:0"
                  },
                  "scope": 2994,
                  "src": "43319:152:0",
                  "stateMutability": "nonpayable",
                  "superFunction": null,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 2975,
                    "nodeType": "Block",
                    "src": "43723:29:0",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "id": 2971,
                            "name": "names",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2942,
                            "src": "43736:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_bytes32_$_t_string_storage_$",
                              "typeString": "mapping(bytes32 => string storage ref)"
                            }
                          },
                          "id": 2973,
                          "indexExpression": {
                            "argumentTypes": null,
                            "id": 2972,
                            "name": "node",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2966,
                            "src": "43742:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "43736:11:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage",
                            "typeString": "string storage ref"
                          }
                        },
                        "functionReturnParameters": 2970,
                        "id": 2974,
                        "nodeType": "Return",
                        "src": "43729:18:0"
                      }
                    ]
                  },
                  "documentation": "Returns the name associated with an ENS node, for reverse records.\nDefined in EIP181.\n@param node The ENS node to query.\n@return The associated name.",
                  "id": 2976,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "name",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 2967,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2966,
                        "name": "node",
                        "nodeType": "VariableDeclaration",
                        "scope": 2976,
                        "src": "43671:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 2965,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "43671:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "43670:14:0"
                  },
                  "returnParameters": {
                    "id": 2970,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2969,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 2976,
                        "src": "43708:13:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 2968,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "43708:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "43707:15:0"
                  },
                  "scope": 2994,
                  "src": "43657:95:0",
                  "stateMutability": "view",
                  "superFunction": null,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 2992,
                    "nodeType": "Block",
                    "src": "43830:96:0",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "id": 2990,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_bytes4",
                              "typeString": "bytes4"
                            },
                            "id": 2985,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "id": 2983,
                              "name": "interfaceID",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2978,
                              "src": "43849:11:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes4",
                                "typeString": "bytes4"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "==",
                            "rightExpression": {
                              "argumentTypes": null,
                              "id": 2984,
                              "name": "NAME_INTERFACE_ID",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2932,
                              "src": "43864:17:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes4",
                                "typeString": "bytes4"
                              }
                            },
                            "src": "43849:32:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "||",
                          "rightExpression": {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "id": 2988,
                                "name": "interfaceID",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2978,
                                "src": "43909:11:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes4",
                                  "typeString": "bytes4"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_bytes4",
                                  "typeString": "bytes4"
                                }
                              ],
                              "expression": {
                                "argumentTypes": null,
                                "id": 2986,
                                "name": "super",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3378,
                                "src": "43885:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_super$_NameResolver_$2994",
                                  "typeString": "contract super NameResolver"
                                }
                              },
                              "id": 2987,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "supportsInterface",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 95,
                              "src": "43885:23:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_bytes4_$returns$_t_bool_$",
                                "typeString": "function (bytes4) pure returns (bool)"
                              }
                            },
                            "id": 2989,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "43885:36:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "src": "43849:72:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "functionReturnParameters": 2982,
                        "id": 2991,
                        "nodeType": "Return",
                        "src": "43836:85:0"
                      }
                    ]
                  },
                  "documentation": null,
                  "id": 2993,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "supportsInterface",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 2979,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2978,
                        "name": "interfaceID",
                        "nodeType": "VariableDeclaration",
                        "scope": 2993,
                        "src": "43783:18:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        },
                        "typeName": {
                          "id": 2977,
                          "name": "bytes4",
                          "nodeType": "ElementaryTypeName",
                          "src": "43783:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "43782:20:0"
                  },
                  "returnParameters": {
                    "id": 2982,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2981,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 2993,
                        "src": "43824:4:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 2980,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "43824:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "43823:6:0"
                  },
                  "scope": 2994,
                  "src": "43756:170:0",
                  "stateMutability": "pure",
                  "superFunction": 95,
                  "visibility": "public"
                }
              ],
              "scope": 3329,
              "src": "42901:1027:0"
            },
            {
              "id": 2995,
              "literals": [
                "solidity",
                "^",
                "0.5",
                ".0"
              ],
              "nodeType": "PragmaDirective",
              "src": "43978:23:0"
            },
            {
              "baseContracts": [
                {
                  "arguments": null,
                  "baseName": {
                    "contractScope": null,
                    "id": 2996,
                    "name": "ResolverBase",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 147,
                    "src": "44030:12:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_ResolverBase_$147",
                      "typeString": "contract ResolverBase"
                    }
                  },
                  "id": 2997,
                  "nodeType": "InheritanceSpecifier",
                  "src": "44030:12:0"
                }
              ],
              "contractDependencies": [
                147
              ],
              "contractKind": "contract",
              "documentation": null,
              "fullyImplemented": false,
              "id": 3083,
              "linearizedBaseContracts": [
                3083,
                147
              ],
              "name": "PubkeyResolver",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "constant": true,
                  "id": 3000,
                  "name": "PUBKEY_INTERFACE_ID",
                  "nodeType": "VariableDeclaration",
                  "scope": 3083,
                  "src": "44047:56:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes4",
                    "typeString": "bytes4"
                  },
                  "typeName": {
                    "id": 2998,
                    "name": "bytes4",
                    "nodeType": "ElementaryTypeName",
                    "src": "44047:6:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes4",
                      "typeString": "bytes4"
                    }
                  },
                  "value": {
                    "argumentTypes": null,
                    "hexValue": "30786338363930323333",
                    "id": 2999,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "44093:10:0",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_3362325043_by_1",
                      "typeString": "int_const 3362325043"
                    },
                    "value": "0xc8690233"
                  },
                  "visibility": "private"
                },
                {
                  "anonymous": false,
                  "documentation": null,
                  "id": 3008,
                  "name": "PubkeyChanged",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 3007,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3002,
                        "indexed": true,
                        "name": "node",
                        "nodeType": "VariableDeclaration",
                        "scope": 3008,
                        "src": "44128:20:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 3001,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "44128:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3004,
                        "indexed": false,
                        "name": "x",
                        "nodeType": "VariableDeclaration",
                        "scope": 3008,
                        "src": "44150:9:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 3003,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "44150:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3006,
                        "indexed": false,
                        "name": "y",
                        "nodeType": "VariableDeclaration",
                        "scope": 3008,
                        "src": "44161:9:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 3005,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "44161:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "44127:44:0"
                  },
                  "src": "44108:64:0"
                },
                {
                  "canonicalName": "PubkeyResolver.PublicKey",
                  "id": 3013,
                  "members": [
                    {
                      "constant": false,
                      "id": 3010,
                      "name": "x",
                      "nodeType": "VariableDeclaration",
                      "scope": 3013,
                      "src": "44199:9:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 3009,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "44199:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 3012,
                      "name": "y",
                      "nodeType": "VariableDeclaration",
                      "scope": 3013,
                      "src": "44214:9:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 3011,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "44214:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "name": "PublicKey",
                  "nodeType": "StructDefinition",
                  "scope": 3083,
                  "src": "44176:52:0",
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "id": 3017,
                  "name": "pubkeys",
                  "nodeType": "VariableDeclaration",
                  "scope": 3083,
                  "src": "44232:37:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_PublicKey_$3013_storage_$",
                    "typeString": "mapping(bytes32 => struct PubkeyResolver.PublicKey)"
                  },
                  "typeName": {
                    "id": 3016,
                    "keyType": {
                      "id": 3014,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "44240:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "nodeType": "Mapping",
                    "src": "44232:29:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_PublicKey_$3013_storage_$",
                      "typeString": "mapping(bytes32 => struct PubkeyResolver.PublicKey)"
                    },
                    "valueType": {
                      "contractScope": null,
                      "id": 3015,
                      "name": "PublicKey",
                      "nodeType": "UserDefinedTypeName",
                      "referencedDeclaration": 3013,
                      "src": "44251:9:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_PublicKey_$3013_storage_ptr",
                        "typeString": "struct PubkeyResolver.PublicKey"
                      }
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 3044,
                    "nodeType": "Block",
                    "src": "44626:78:0",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 3036,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "id": 3029,
                              "name": "pubkeys",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3017,
                              "src": "44632:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_PublicKey_$3013_storage_$",
                                "typeString": "mapping(bytes32 => struct PubkeyResolver.PublicKey storage ref)"
                              }
                            },
                            "id": 3031,
                            "indexExpression": {
                              "argumentTypes": null,
                              "id": 3030,
                              "name": "node",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3019,
                              "src": "44640:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "44632:13:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_PublicKey_$3013_storage",
                              "typeString": "struct PubkeyResolver.PublicKey storage ref"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "id": 3033,
                                "name": "x",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3021,
                                "src": "44658:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes32",
                                  "typeString": "bytes32"
                                }
                              },
                              {
                                "argumentTypes": null,
                                "id": 3034,
                                "name": "y",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3023,
                                "src": "44661:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes32",
                                  "typeString": "bytes32"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_bytes32",
                                  "typeString": "bytes32"
                                },
                                {
                                  "typeIdentifier": "t_bytes32",
                                  "typeString": "bytes32"
                                }
                              ],
                              "id": 3032,
                              "name": "PublicKey",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3013,
                              "src": "44648:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_struct$_PublicKey_$3013_storage_ptr_$",
                                "typeString": "type(struct PubkeyResolver.PublicKey storage pointer)"
                              }
                            },
                            "id": 3035,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "structConstructorCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "44648:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_PublicKey_$3013_memory",
                              "typeString": "struct PubkeyResolver.PublicKey memory"
                            }
                          },
                          "src": "44632:31:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_PublicKey_$3013_storage",
                            "typeString": "struct PubkeyResolver.PublicKey storage ref"
                          }
                        },
                        "id": 3037,
                        "nodeType": "ExpressionStatement",
                        "src": "44632:31:0"
                      },
                      {
                        "eventCall": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 3039,
                              "name": "node",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3019,
                              "src": "44688:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "id": 3040,
                              "name": "x",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3021,
                              "src": "44694:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "id": 3041,
                              "name": "y",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3023,
                              "src": "44697:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              },
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              },
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            ],
                            "id": 3038,
                            "name": "PubkeyChanged",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3008,
                            "src": "44674:13:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$__$",
                              "typeString": "function (bytes32,bytes32,bytes32)"
                            }
                          },
                          "id": 3042,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "44674:25:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 3043,
                        "nodeType": "EmitStatement",
                        "src": "44669:30:0"
                      }
                    ]
                  },
                  "documentation": "Sets the SECP256k1 public key associated with an ENS node.\n@param node The ENS node to query\n@param x the X coordinate of the curve point for the public key.\n@param y the Y coordinate of the curve point for the public key.",
                  "id": 3045,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "id": 3026,
                          "name": "node",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 3019,
                          "src": "44620:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        }
                      ],
                      "id": 3027,
                      "modifierName": {
                        "argumentTypes": null,
                        "id": 3025,
                        "name": "authorised",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 114,
                        "src": "44609:10:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_modifier$_t_bytes32_$",
                          "typeString": "modifier (bytes32)"
                        }
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "44609:16:0"
                    }
                  ],
                  "name": "setPubkey",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 3024,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3019,
                        "name": "node",
                        "nodeType": "VariableDeclaration",
                        "scope": 3045,
                        "src": "44553:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 3018,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "44553:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3021,
                        "name": "x",
                        "nodeType": "VariableDeclaration",
                        "scope": 3045,
                        "src": "44571:9:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 3020,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "44571:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3023,
                        "name": "y",
                        "nodeType": "VariableDeclaration",
                        "scope": 3045,
                        "src": "44586:9:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 3022,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "44586:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "44547:52:0"
                  },
                  "returnParameters": {
                    "id": 3028,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "44626:0:0"
                  },
                  "scope": 3083,
                  "src": "44529:175:0",
                  "stateMutability": "nonpayable",
                  "superFunction": null,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 3064,
                    "nodeType": "Block",
                    "src": "45007:52:0",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "components": [
                            {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "baseExpression": {
                                  "argumentTypes": null,
                                  "id": 3054,
                                  "name": "pubkeys",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 3017,
                                  "src": "45021:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_PublicKey_$3013_storage_$",
                                    "typeString": "mapping(bytes32 => struct PubkeyResolver.PublicKey storage ref)"
                                  }
                                },
                                "id": 3056,
                                "indexExpression": {
                                  "argumentTypes": null,
                                  "id": 3055,
                                  "name": "node",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 3047,
                                  "src": "45029:4:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes32",
                                    "typeString": "bytes32"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "45021:13:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_PublicKey_$3013_storage",
                                  "typeString": "struct PubkeyResolver.PublicKey storage ref"
                                }
                              },
                              "id": 3057,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "x",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 3010,
                              "src": "45021:15:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "baseExpression": {
                                  "argumentTypes": null,
                                  "id": 3058,
                                  "name": "pubkeys",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 3017,
                                  "src": "45038:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_PublicKey_$3013_storage_$",
                                    "typeString": "mapping(bytes32 => struct PubkeyResolver.PublicKey storage ref)"
                                  }
                                },
                                "id": 3060,
                                "indexExpression": {
                                  "argumentTypes": null,
                                  "id": 3059,
                                  "name": "node",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 3047,
                                  "src": "45046:4:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes32",
                                    "typeString": "bytes32"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "45038:13:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_PublicKey_$3013_storage",
                                  "typeString": "struct PubkeyResolver.PublicKey storage ref"
                                }
                              },
                              "id": 3061,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "y",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 3012,
                              "src": "45038:15:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            }
                          ],
                          "id": 3062,
                          "isConstant": false,
                          "isInlineArray": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "TupleExpression",
                          "src": "45020:34:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$_t_bytes32_$_t_bytes32_$",
                            "typeString": "tuple(bytes32,bytes32)"
                          }
                        },
                        "functionReturnParameters": 3053,
                        "id": 3063,
                        "nodeType": "Return",
                        "src": "45013:41:0"
                      }
                    ]
                  },
                  "documentation": "Returns the SECP256k1 public key associated with an ENS node.\nDefined in EIP 619.\n@param node The ENS node to query\n@return x, y the X and Y coordinates of the curve point for the public key.",
                  "id": 3065,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "pubkey",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 3048,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3047,
                        "name": "node",
                        "nodeType": "VariableDeclaration",
                        "scope": 3065,
                        "src": "44948:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 3046,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "44948:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "44947:14:0"
                  },
                  "returnParameters": {
                    "id": 3053,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3050,
                        "name": "x",
                        "nodeType": "VariableDeclaration",
                        "scope": 3065,
                        "src": "44985:9:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 3049,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "44985:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3052,
                        "name": "y",
                        "nodeType": "VariableDeclaration",
                        "scope": 3065,
                        "src": "44996:9:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 3051,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "44996:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "44984:22:0"
                  },
                  "scope": 3083,
                  "src": "44932:127:0",
                  "stateMutability": "view",
                  "superFunction": null,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 3081,
                    "nodeType": "Block",
                    "src": "45137:104:0",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "id": 3079,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_bytes4",
                              "typeString": "bytes4"
                            },
                            "id": 3074,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "id": 3072,
                              "name": "interfaceID",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3067,
                              "src": "45156:11:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes4",
                                "typeString": "bytes4"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "==",
                            "rightExpression": {
                              "argumentTypes": null,
                              "id": 3073,
                              "name": "PUBKEY_INTERFACE_ID",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3000,
                              "src": "45171:19:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes4",
                                "typeString": "bytes4"
                              }
                            },
                            "src": "45156:34:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "||",
                          "rightExpression": {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "id": 3077,
                                "name": "interfaceID",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3067,
                                "src": "45224:11:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes4",
                                  "typeString": "bytes4"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_bytes4",
                                  "typeString": "bytes4"
                                }
                              ],
                              "expression": {
                                "argumentTypes": null,
                                "id": 3075,
                                "name": "super",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3380,
                                "src": "45200:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_super$_PubkeyResolver_$3083",
                                  "typeString": "contract super PubkeyResolver"
                                }
                              },
                              "id": 3076,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "supportsInterface",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 95,
                              "src": "45200:23:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_bytes4_$returns$_t_bool_$",
                                "typeString": "function (bytes4) pure returns (bool)"
                              }
                            },
                            "id": 3078,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "45200:36:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "src": "45156:80:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "functionReturnParameters": 3071,
                        "id": 3080,
                        "nodeType": "Return",
                        "src": "45143:93:0"
                      }
                    ]
                  },
                  "documentation": null,
                  "id": 3082,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "supportsInterface",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 3068,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3067,
                        "name": "interfaceID",
                        "nodeType": "VariableDeclaration",
                        "scope": 3082,
                        "src": "45090:18:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        },
                        "typeName": {
                          "id": 3066,
                          "name": "bytes4",
                          "nodeType": "ElementaryTypeName",
                          "src": "45090:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "45089:20:0"
                  },
                  "returnParameters": {
                    "id": 3071,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3070,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 3082,
                        "src": "45131:4:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 3069,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "45131:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "45130:6:0"
                  },
                  "scope": 3083,
                  "src": "45063:178:0",
                  "stateMutability": "pure",
                  "superFunction": 95,
                  "visibility": "public"
                }
              ],
              "scope": 3329,
              "src": "44003:1240:0"
            },
            {
              "id": 3084,
              "literals": [
                "solidity",
                "^",
                "0.5",
                ".0"
              ],
              "nodeType": "PragmaDirective",
              "src": "45291:23:0"
            },
            {
              "baseContracts": [
                {
                  "arguments": null,
                  "baseName": {
                    "contractScope": null,
                    "id": 3085,
                    "name": "ResolverBase",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 147,
                    "src": "45341:12:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_ResolverBase_$147",
                      "typeString": "contract ResolverBase"
                    }
                  },
                  "id": 3086,
                  "nodeType": "InheritanceSpecifier",
                  "src": "45341:12:0"
                }
              ],
              "contractDependencies": [
                147
              ],
              "contractKind": "contract",
              "documentation": null,
              "fullyImplemented": false,
              "id": 3164,
              "linearizedBaseContracts": [
                3164,
                147
              ],
              "name": "TextResolver",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "constant": true,
                  "id": 3089,
                  "name": "TEXT_INTERFACE_ID",
                  "nodeType": "VariableDeclaration",
                  "scope": 3164,
                  "src": "45358:54:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes4",
                    "typeString": "bytes4"
                  },
                  "typeName": {
                    "id": 3087,
                    "name": "bytes4",
                    "nodeType": "ElementaryTypeName",
                    "src": "45358:6:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes4",
                      "typeString": "bytes4"
                    }
                  },
                  "value": {
                    "argumentTypes": null,
                    "hexValue": "30783539643164343363",
                    "id": 3088,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "45402:10:0",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_1506923580_by_1",
                      "typeString": "int_const 1506923580"
                    },
                    "value": "0x59d1d43c"
                  },
                  "visibility": "private"
                },
                {
                  "anonymous": false,
                  "documentation": null,
                  "id": 3097,
                  "name": "TextChanged",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 3096,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3091,
                        "indexed": true,
                        "name": "node",
                        "nodeType": "VariableDeclaration",
                        "scope": 3097,
                        "src": "45440:20:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 3090,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "45440:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3093,
                        "indexed": true,
                        "name": "indexedKey",
                        "nodeType": "VariableDeclaration",
                        "scope": 3097,
                        "src": "45466:25:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 3092,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "45466:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3095,
                        "indexed": false,
                        "name": "key",
                        "nodeType": "VariableDeclaration",
                        "scope": 3097,
                        "src": "45497:10:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 3094,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "45497:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "45434:77:0"
                  },
                  "src": "45417:95:0"
                },
                {
                  "constant": false,
                  "id": 3103,
                  "name": "texts",
                  "nodeType": "VariableDeclaration",
                  "scope": 3164,
                  "src": "45516:51:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_bytes32_$_t_mapping$_t_string_memory_$_t_string_storage_$_$",
                    "typeString": "mapping(bytes32 => mapping(string => string))"
                  },
                  "typeName": {
                    "id": 3102,
                    "keyType": {
                      "id": 3098,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "45524:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "nodeType": "Mapping",
                    "src": "45516:45:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_bytes32_$_t_mapping$_t_string_memory_$_t_string_storage_$_$",
                      "typeString": "mapping(bytes32 => mapping(string => string))"
                    },
                    "valueType": {
                      "id": 3101,
                      "keyType": {
                        "id": 3099,
                        "name": "string",
                        "nodeType": "ElementaryTypeName",
                        "src": "45543:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_storage_ptr",
                          "typeString": "string"
                        }
                      },
                      "nodeType": "Mapping",
                      "src": "45535:25:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_string_memory_$_t_string_storage_$",
                        "typeString": "mapping(string => string)"
                      },
                      "valueType": {
                        "id": 3100,
                        "name": "string",
                        "nodeType": "ElementaryTypeName",
                        "src": "45553:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_storage_ptr",
                          "typeString": "string"
                        }
                      }
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 3129,
                    "nodeType": "Block",
                    "src": "45948:73:0",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 3121,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "id": 3115,
                                "name": "texts",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3103,
                                "src": "45954:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_bytes32_$_t_mapping$_t_string_memory_$_t_string_storage_$_$",
                                  "typeString": "mapping(bytes32 => mapping(string memory => string storage ref))"
                                }
                              },
                              "id": 3118,
                              "indexExpression": {
                                "argumentTypes": null,
                                "id": 3116,
                                "name": "node",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3105,
                                "src": "45960:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes32",
                                  "typeString": "bytes32"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "45954:11:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_string_memory_$_t_string_storage_$",
                                "typeString": "mapping(string memory => string storage ref)"
                              }
                            },
                            "id": 3119,
                            "indexExpression": {
                              "argumentTypes": null,
                              "id": 3117,
                              "name": "key",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3107,
                              "src": "45966:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_calldata_ptr",
                                "typeString": "string calldata"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "45954:16:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_storage",
                              "typeString": "string storage ref"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "id": 3120,
                            "name": "value",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3109,
                            "src": "45973:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_calldata_ptr",
                              "typeString": "string calldata"
                            }
                          },
                          "src": "45954:24:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage",
                            "typeString": "string storage ref"
                          }
                        },
                        "id": 3122,
                        "nodeType": "ExpressionStatement",
                        "src": "45954:24:0"
                      },
                      {
                        "eventCall": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 3124,
                              "name": "node",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3105,
                              "src": "46001:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "id": 3125,
                              "name": "key",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3107,
                              "src": "46007:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_calldata_ptr",
                                "typeString": "string calldata"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "id": 3126,
                              "name": "key",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3107,
                              "src": "46012:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_calldata_ptr",
                                "typeString": "string calldata"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              },
                              {
                                "typeIdentifier": "t_string_calldata_ptr",
                                "typeString": "string calldata"
                              },
                              {
                                "typeIdentifier": "t_string_calldata_ptr",
                                "typeString": "string calldata"
                              }
                            ],
                            "id": 3123,
                            "name": "TextChanged",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3097,
                            "src": "45989:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_bytes32_$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bytes32,string memory,string memory)"
                            }
                          },
                          "id": 3127,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "45989:27:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 3128,
                        "nodeType": "EmitStatement",
                        "src": "45984:32:0"
                      }
                    ]
                  },
                  "documentation": "Sets the text data associated with an ENS node and key.\nMay only be called by the owner of that node in the ENS registry.\n@param node The node to update.\n@param key The key to set.\n@param value The text data value to set.",
                  "id": 3130,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "id": 3112,
                          "name": "node",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 3105,
                          "src": "45942:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        }
                      ],
                      "id": 3113,
                      "modifierName": {
                        "argumentTypes": null,
                        "id": 3111,
                        "name": "authorised",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 114,
                        "src": "45931:10:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_modifier$_t_bytes32_$",
                          "typeString": "modifier (bytes32)"
                        }
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "45931:16:0"
                    }
                  ],
                  "name": "setText",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 3110,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3105,
                        "name": "node",
                        "nodeType": "VariableDeclaration",
                        "scope": 3130,
                        "src": "45853:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 3104,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "45853:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3107,
                        "name": "key",
                        "nodeType": "VariableDeclaration",
                        "scope": 3130,
                        "src": "45871:19:0",
                        "stateVariable": false,
                        "storageLocation": "calldata",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_calldata_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 3106,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "45871:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3109,
                        "name": "value",
                        "nodeType": "VariableDeclaration",
                        "scope": 3130,
                        "src": "45896:21:0",
                        "stateVariable": false,
                        "storageLocation": "calldata",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_calldata_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 3108,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "45896:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "45847:74:0"
                  },
                  "returnParameters": {
                    "id": 3114,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "45948:0:0"
                  },
                  "scope": 3164,
                  "src": "45831:190:0",
                  "stateMutability": "nonpayable",
                  "superFunction": null,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 3145,
                    "nodeType": "Block",
                    "src": "46325:34:0",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "id": 3139,
                              "name": "texts",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3103,
                              "src": "46338:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_bytes32_$_t_mapping$_t_string_memory_$_t_string_storage_$_$",
                                "typeString": "mapping(bytes32 => mapping(string memory => string storage ref))"
                              }
                            },
                            "id": 3141,
                            "indexExpression": {
                              "argumentTypes": null,
                              "id": 3140,
                              "name": "node",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3132,
                              "src": "46344:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "46338:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_string_memory_$_t_string_storage_$",
                              "typeString": "mapping(string memory => string storage ref)"
                            }
                          },
                          "id": 3143,
                          "indexExpression": {
                            "argumentTypes": null,
                            "id": 3142,
                            "name": "key",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3134,
                            "src": "46350:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_calldata_ptr",
                              "typeString": "string calldata"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "46338:16:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage",
                            "typeString": "string storage ref"
                          }
                        },
                        "functionReturnParameters": 3138,
                        "id": 3144,
                        "nodeType": "Return",
                        "src": "46331:23:0"
                      }
                    ]
                  },
                  "documentation": "Returns the text data associated with an ENS node and key.\n@param node The ENS node to query.\n@param key The text data key to query.\n@return The associated text data.",
                  "id": 3146,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "text",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 3135,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3132,
                        "name": "node",
                        "nodeType": "VariableDeclaration",
                        "scope": 3146,
                        "src": "46238:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 3131,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "46238:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3134,
                        "name": "key",
                        "nodeType": "VariableDeclaration",
                        "scope": 3146,
                        "src": "46252:19:0",
                        "stateVariable": false,
                        "storageLocation": "calldata",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_calldata_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 3133,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "46252:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "46237:35:0"
                  },
                  "returnParameters": {
                    "id": 3138,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3137,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 3146,
                        "src": "46308:13:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 3136,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "46308:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "46307:15:0"
                  },
                  "scope": 3164,
                  "src": "46224:135:0",
                  "stateMutability": "view",
                  "superFunction": null,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 3162,
                    "nodeType": "Block",
                    "src": "46437:96:0",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "id": 3160,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_bytes4",
                              "typeString": "bytes4"
                            },
                            "id": 3155,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "id": 3153,
                              "name": "interfaceID",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3148,
                              "src": "46456:11:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes4",
                                "typeString": "bytes4"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "==",
                            "rightExpression": {
                              "argumentTypes": null,
                              "id": 3154,
                              "name": "TEXT_INTERFACE_ID",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3089,
                              "src": "46471:17:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes4",
                                "typeString": "bytes4"
                              }
                            },
                            "src": "46456:32:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "||",
                          "rightExpression": {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "id": 3158,
                                "name": "interfaceID",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3148,
                                "src": "46516:11:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes4",
                                  "typeString": "bytes4"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_bytes4",
                                  "typeString": "bytes4"
                                }
                              ],
                              "expression": {
                                "argumentTypes": null,
                                "id": 3156,
                                "name": "super",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3382,
                                "src": "46492:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_super$_TextResolver_$3164",
                                  "typeString": "contract super TextResolver"
                                }
                              },
                              "id": 3157,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "supportsInterface",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 95,
                              "src": "46492:23:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_bytes4_$returns$_t_bool_$",
                                "typeString": "function (bytes4) pure returns (bool)"
                              }
                            },
                            "id": 3159,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "46492:36:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "src": "46456:72:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "functionReturnParameters": 3152,
                        "id": 3161,
                        "nodeType": "Return",
                        "src": "46443:85:0"
                      }
                    ]
                  },
                  "documentation": null,
                  "id": 3163,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "supportsInterface",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 3149,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3148,
                        "name": "interfaceID",
                        "nodeType": "VariableDeclaration",
                        "scope": 3163,
                        "src": "46390:18:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        },
                        "typeName": {
                          "id": 3147,
                          "name": "bytes4",
                          "nodeType": "ElementaryTypeName",
                          "src": "46390:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "46389:20:0"
                  },
                  "returnParameters": {
                    "id": 3152,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3151,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 3163,
                        "src": "46431:4:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 3150,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "46431:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "46430:6:0"
                  },
                  "scope": 3164,
                  "src": "46363:170:0",
                  "stateMutability": "pure",
                  "superFunction": 95,
                  "visibility": "public"
                }
              ],
              "scope": 3329,
              "src": "45316:1219:0"
            },
            {
              "id": 3165,
              "literals": [
                "solidity",
                "^",
                "0.5",
                ".0"
              ],
              "nodeType": "PragmaDirective",
              "src": "46576:23:0"
            },
            {
              "id": 3166,
              "literals": [
                "experimental",
                "ABIEncoderV2"
              ],
              "nodeType": "PragmaDirective",
              "src": "46600:33:0"
            },
            {
              "baseContracts": [
                {
                  "arguments": null,
                  "baseName": {
                    "contractScope": null,
                    "id": 3167,
                    "name": "ABIResolver",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 281,
                    "src": "46780:11:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_ABIResolver_$281",
                      "typeString": "contract ABIResolver"
                    }
                  },
                  "id": 3168,
                  "nodeType": "InheritanceSpecifier",
                  "src": "46780:11:0"
                },
                {
                  "arguments": null,
                  "baseName": {
                    "contractScope": null,
                    "id": 3169,
                    "name": "AddrResolver",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 438,
                    "src": "46795:12:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_AddrResolver_$438",
                      "typeString": "contract AddrResolver"
                    }
                  },
                  "id": 3170,
                  "nodeType": "InheritanceSpecifier",
                  "src": "46795:12:0"
                },
                {
                  "arguments": null,
                  "baseName": {
                    "contractScope": null,
                    "id": 3171,
                    "name": "ContentHashResolver",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 506,
                    "src": "46811:19:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_ContentHashResolver_$506",
                      "typeString": "contract ContentHashResolver"
                    }
                  },
                  "id": 3172,
                  "nodeType": "InheritanceSpecifier",
                  "src": "46811:19:0"
                },
                {
                  "arguments": null,
                  "baseName": {
                    "contractScope": null,
                    "id": 3173,
                    "name": "DNSResolver",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 2742,
                    "src": "46834:11:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_DNSResolver_$2742",
                      "typeString": "contract DNSResolver"
                    }
                  },
                  "id": 3174,
                  "nodeType": "InheritanceSpecifier",
                  "src": "46834:11:0"
                },
                {
                  "arguments": null,
                  "baseName": {
                    "contractScope": null,
                    "id": 3175,
                    "name": "InterfaceResolver",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 2926,
                    "src": "46849:17:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_InterfaceResolver_$2926",
                      "typeString": "contract InterfaceResolver"
                    }
                  },
                  "id": 3176,
                  "nodeType": "InheritanceSpecifier",
                  "src": "46849:17:0"
                },
                {
                  "arguments": null,
                  "baseName": {
                    "contractScope": null,
                    "id": 3177,
                    "name": "NameResolver",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 2994,
                    "src": "46870:12:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_NameResolver_$2994",
                      "typeString": "contract NameResolver"
                    }
                  },
                  "id": 3178,
                  "nodeType": "InheritanceSpecifier",
                  "src": "46870:12:0"
                },
                {
                  "arguments": null,
                  "baseName": {
                    "contractScope": null,
                    "id": 3179,
                    "name": "PubkeyResolver",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 3083,
                    "src": "46886:14:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_PubkeyResolver_$3083",
                      "typeString": "contract PubkeyResolver"
                    }
                  },
                  "id": 3180,
                  "nodeType": "InheritanceSpecifier",
                  "src": "46886:14:0"
                },
                {
                  "arguments": null,
                  "baseName": {
                    "contractScope": null,
                    "id": 3181,
                    "name": "TextResolver",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 3164,
                    "src": "46904:12:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_TextResolver_$3164",
                      "typeString": "contract TextResolver"
                    }
                  },
                  "id": 3182,
                  "nodeType": "InheritanceSpecifier",
                  "src": "46904:12:0"
                }
              ],
              "contractDependencies": [
                147,
                281,
                438,
                506,
                2742,
                2926,
                2994,
                3083,
                3164
              ],
              "contractKind": "contract",
              "documentation": "A simple resolver anyone can use; only allows the owner of a node to set its\naddress.",
              "fullyImplemented": true,
              "id": 3328,
              "linearizedBaseContracts": [
                3328,
                3164,
                3083,
                2994,
                2926,
                2742,
                506,
                438,
                281,
                147
              ],
              "name": "PublicResolver_mainnet_9412610",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "constant": false,
                  "id": 3184,
                  "name": "ens",
                  "nodeType": "VariableDeclaration",
                  "scope": 3328,
                  "src": "46921:7:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_ENS_$79",
                    "typeString": "contract ENS"
                  },
                  "typeName": {
                    "contractScope": null,
                    "id": 3183,
                    "name": "ENS",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 79,
                    "src": "46921:3:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_ENS_$79",
                      "typeString": "contract ENS"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3192,
                  "name": "authorisations",
                  "nodeType": "VariableDeclaration",
                  "scope": 3328,
                  "src": "47174:90:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_bytes32_$_t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$_$",
                    "typeString": "mapping(bytes32 => mapping(address => mapping(address => bool)))"
                  },
                  "typeName": {
                    "id": 3191,
                    "keyType": {
                      "id": 3185,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "47182:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "nodeType": "Mapping",
                    "src": "47174:64:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_bytes32_$_t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$_$",
                      "typeString": "mapping(bytes32 => mapping(address => mapping(address => bool)))"
                    },
                    "valueType": {
                      "id": 3190,
                      "keyType": {
                        "id": 3186,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "47201:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "nodeType": "Mapping",
                      "src": "47193:44:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$",
                        "typeString": "mapping(address => mapping(address => bool))"
                      },
                      "valueType": {
                        "id": 3189,
                        "keyType": {
                          "id": 3187,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "47220:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "Mapping",
                        "src": "47212:24:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                          "typeString": "mapping(address => bool)"
                        },
                        "valueType": {
                          "id": 3188,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "47231:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        }
                      }
                    }
                  },
                  "value": null,
                  "visibility": "public"
                },
                {
                  "anonymous": false,
                  "documentation": null,
                  "id": 3202,
                  "name": "AuthorisationChanged",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 3201,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3194,
                        "indexed": true,
                        "name": "node",
                        "nodeType": "VariableDeclaration",
                        "scope": 3202,
                        "src": "47301:20:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 3193,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "47301:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3196,
                        "indexed": true,
                        "name": "owner",
                        "nodeType": "VariableDeclaration",
                        "scope": 3202,
                        "src": "47327:21:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 3195,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "47327:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3198,
                        "indexed": true,
                        "name": "target",
                        "nodeType": "VariableDeclaration",
                        "scope": 3202,
                        "src": "47354:22:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 3197,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "47354:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3200,
                        "indexed": false,
                        "name": "isAuthorised",
                        "nodeType": "VariableDeclaration",
                        "scope": 3202,
                        "src": "47382:17:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 3199,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "47382:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "47295:108:0"
                  },
                  "src": "47269:135:0"
                },
                {
                  "body": {
                    "id": 3211,
                    "nodeType": "Block",
                    "src": "47437:21:0",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 3209,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "id": 3207,
                            "name": "ens",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3184,
                            "src": "47443:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_ENS_$79",
                              "typeString": "contract ENS"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "id": 3208,
                            "name": "_ens",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3204,
                            "src": "47449:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_ENS_$79",
                              "typeString": "contract ENS"
                            }
                          },
                          "src": "47443:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_ENS_$79",
                            "typeString": "contract ENS"
                          }
                        },
                        "id": 3210,
                        "nodeType": "ExpressionStatement",
                        "src": "47443:10:0"
                      }
                    ]
                  },
                  "documentation": null,
                  "id": 3212,
                  "implemented": true,
                  "kind": "constructor",
                  "modifiers": [],
                  "name": "",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 3205,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3204,
                        "name": "_ens",
                        "nodeType": "VariableDeclaration",
                        "scope": 3212,
                        "src": "47420:8:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_ENS_$79",
                          "typeString": "contract ENS"
                        },
                        "typeName": {
                          "contractScope": null,
                          "id": 3203,
                          "name": "ENS",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 79,
                          "src": "47420:3:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_ENS_$79",
                            "typeString": "contract ENS"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "47419:10:0"
                  },
                  "returnParameters": {
                    "id": 3206,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "47437:0:0"
                  },
                  "scope": 3328,
                  "src": "47408:50:0",
                  "stateMutability": "nonpayable",
                  "superFunction": null,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 3240,
                    "nodeType": "Block",
                    "src": "48217:137:0",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 3230,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "baseExpression": {
                                  "argumentTypes": null,
                                  "id": 3221,
                                  "name": "authorisations",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 3192,
                                  "src": "48223:14:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_bytes32_$_t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$_$",
                                    "typeString": "mapping(bytes32 => mapping(address => mapping(address => bool)))"
                                  }
                                },
                                "id": 3226,
                                "indexExpression": {
                                  "argumentTypes": null,
                                  "id": 3222,
                                  "name": "node",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 3214,
                                  "src": "48238:4:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes32",
                                    "typeString": "bytes32"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "48223:20:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$",
                                  "typeString": "mapping(address => mapping(address => bool))"
                                }
                              },
                              "id": 3227,
                              "indexExpression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 3223,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 3343,
                                  "src": "48244:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 3224,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": null,
                                "src": "48244:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address_payable",
                                  "typeString": "address payable"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "48223:32:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                                "typeString": "mapping(address => bool)"
                              }
                            },
                            "id": 3228,
                            "indexExpression": {
                              "argumentTypes": null,
                              "id": 3225,
                              "name": "target",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3216,
                              "src": "48256:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "48223:40:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "id": 3229,
                            "name": "isAuthorised",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3218,
                            "src": "48266:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "src": "48223:55:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 3231,
                        "nodeType": "ExpressionStatement",
                        "src": "48223:55:0"
                      },
                      {
                        "eventCall": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 3233,
                              "name": "node",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3214,
                              "src": "48310:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 3234,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3343,
                                "src": "48316:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 3235,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "48316:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "id": 3236,
                              "name": "target",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3216,
                              "src": "48328:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "id": 3237,
                              "name": "isAuthorised",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3218,
                              "src": "48336:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              },
                              {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            ],
                            "id": 3232,
                            "name": "AuthorisationChanged",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3202,
                            "src": "48289:20:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$_t_bool_$returns$__$",
                              "typeString": "function (bytes32,address,address,bool)"
                            }
                          },
                          "id": 3238,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "48289:60:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 3239,
                        "nodeType": "EmitStatement",
                        "src": "48284:65:0"
                      }
                    ]
                  },
                  "documentation": "@dev Sets or clears an authorisation.\nAuthorisations are specific to the caller. Any account can set an authorisation\nfor any name, but the authorisation that is checked will be that of the\ncurrent owner of a name. Thus, transferring a name effectively clears any\nexisting authorisations, and new authorisations can be set in advance of\nan ownership transfer if desired.\n   * @param node The name to change the authorisation on.\n@param target The address that is to be authorised or deauthorised.\n@param isAuthorised True if the address should be authorised, or false if it should be deauthorised.",
                  "id": 3241,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "setAuthorisation",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 3219,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3214,
                        "name": "node",
                        "nodeType": "VariableDeclaration",
                        "scope": 3241,
                        "src": "48148:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 3213,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "48148:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3216,
                        "name": "target",
                        "nodeType": "VariableDeclaration",
                        "scope": 3241,
                        "src": "48166:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 3215,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "48166:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3218,
                        "name": "isAuthorised",
                        "nodeType": "VariableDeclaration",
                        "scope": 3241,
                        "src": "48186:17:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 3217,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "48186:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "48142:65:0"
                  },
                  "returnParameters": {
                    "id": 3220,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "48217:0:0"
                  },
                  "scope": 3328,
                  "src": "48117:237:0",
                  "stateMutability": "nonpayable",
                  "superFunction": null,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 3269,
                    "nodeType": "Block",
                    "src": "48423:117:0",
                    "statements": [
                      {
                        "assignments": [
                          3249
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 3249,
                            "name": "owner",
                            "nodeType": "VariableDeclaration",
                            "scope": 3269,
                            "src": "48429:13:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "typeName": {
                              "id": 3248,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "48429:7:0",
                              "stateMutability": "nonpayable",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "value": null,
                            "visibility": "internal"
                          }
                        ],
                        "id": 3254,
                        "initialValue": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 3252,
                              "name": "node",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3243,
                              "src": "48455:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "id": 3250,
                              "name": "ens",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3184,
                              "src": "48445:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_ENS_$79",
                                "typeString": "contract ENS"
                              }
                            },
                            "id": 3251,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "owner",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 64,
                            "src": "48445:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_view$_t_bytes32_$returns$_t_address_$",
                              "typeString": "function (bytes32) view external returns (address)"
                            }
                          },
                          "id": 3253,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "48445:15:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "48429:31:0"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "id": 3267,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "id": 3258,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "id": 3255,
                              "name": "owner",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3249,
                              "src": "48473:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "==",
                            "rightExpression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 3256,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3343,
                                "src": "48482:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 3257,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "48482:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            },
                            "src": "48473:19:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "||",
                          "rightExpression": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "baseExpression": {
                                  "argumentTypes": null,
                                  "id": 3259,
                                  "name": "authorisations",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 3192,
                                  "src": "48496:14:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_bytes32_$_t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$_$",
                                    "typeString": "mapping(bytes32 => mapping(address => mapping(address => bool)))"
                                  }
                                },
                                "id": 3261,
                                "indexExpression": {
                                  "argumentTypes": null,
                                  "id": 3260,
                                  "name": "node",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 3243,
                                  "src": "48511:4:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes32",
                                    "typeString": "bytes32"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "48496:20:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$",
                                  "typeString": "mapping(address => mapping(address => bool))"
                                }
                              },
                              "id": 3263,
                              "indexExpression": {
                                "argumentTypes": null,
                                "id": 3262,
                                "name": "owner",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3249,
                                "src": "48517:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "48496:27:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                                "typeString": "mapping(address => bool)"
                              }
                            },
                            "id": 3266,
                            "indexExpression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 3264,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3343,
                                "src": "48524:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 3265,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "48524:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "48496:39:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "src": "48473:62:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "functionReturnParameters": 3247,
                        "id": 3268,
                        "nodeType": "Return",
                        "src": "48466:69:0"
                      }
                    ]
                  },
                  "documentation": null,
                  "id": 3270,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "isAuthorised",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 3244,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3243,
                        "name": "node",
                        "nodeType": "VariableDeclaration",
                        "scope": 3270,
                        "src": "48380:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 3242,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "48380:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "48379:14:0"
                  },
                  "returnParameters": {
                    "id": 3247,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3246,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 3270,
                        "src": "48417:4:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 3245,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "48417:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "48416:6:0"
                  },
                  "scope": 3328,
                  "src": "48358:182:0",
                  "stateMutability": "view",
                  "superFunction": 102,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 3326,
                    "nodeType": "Block",
                    "src": "48638:251:0",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 3286,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "id": 3279,
                            "name": "results",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3277,
                            "src": "48644:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_bytes_memory_$dyn_memory_ptr",
                              "typeString": "bytes memory[] memory"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 3283,
                                  "name": "data",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 3273,
                                  "src": "48666:4:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_array$_t_bytes_calldata_$dyn_calldata_ptr",
                                    "typeString": "bytes calldata[] calldata"
                                  }
                                },
                                "id": 3284,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "length",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": null,
                                "src": "48666:11:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "id": 3282,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "NewExpression",
                              "src": "48654:11:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes_memory_$dyn_memory_$",
                                "typeString": "function (uint256) pure returns (bytes memory[] memory)"
                              },
                              "typeName": {
                                "baseType": {
                                  "id": 3280,
                                  "name": "bytes",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "48658:5:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes_storage_ptr",
                                    "typeString": "bytes"
                                  }
                                },
                                "id": 3281,
                                "length": null,
                                "nodeType": "ArrayTypeName",
                                "src": "48658:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_array$_t_bytes_storage_$dyn_storage_ptr",
                                  "typeString": "bytes[]"
                                }
                              }
                            },
                            "id": 3285,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "48654:24:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_bytes_memory_$dyn_memory",
                              "typeString": "bytes memory[] memory"
                            }
                          },
                          "src": "48644:34:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_bytes_memory_$dyn_memory_ptr",
                            "typeString": "bytes memory[] memory"
                          }
                        },
                        "id": 3287,
                        "nodeType": "ExpressionStatement",
                        "src": "48644:34:0"
                      },
                      {
                        "body": {
                          "id": 3322,
                          "nodeType": "Block",
                          "src": "48726:139:0",
                          "statements": [
                            {
                              "assignments": [
                                3300,
                                3302
                              ],
                              "declarations": [
                                {
                                  "constant": false,
                                  "id": 3300,
                                  "name": "success",
                                  "nodeType": "VariableDeclaration",
                                  "scope": 3322,
                                  "src": "48735:12:0",
                                  "stateVariable": false,
                                  "storageLocation": "default",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  },
                                  "typeName": {
                                    "id": 3299,
                                    "name": "bool",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "48735:4:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  },
                                  "value": null,
                                  "visibility": "internal"
                                },
                                {
                                  "constant": false,
                                  "id": 3302,
                                  "name": "result",
                                  "nodeType": "VariableDeclaration",
                                  "scope": 3322,
                                  "src": "48749:19:0",
                                  "stateVariable": false,
                                  "storageLocation": "memory",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes_memory_ptr",
                                    "typeString": "bytes"
                                  },
                                  "typeName": {
                                    "id": 3301,
                                    "name": "bytes",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "48749:5:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bytes_storage_ptr",
                                      "typeString": "bytes"
                                    }
                                  },
                                  "value": null,
                                  "visibility": "internal"
                                }
                              ],
                              "id": 3311,
                              "initialValue": {
                                "argumentTypes": null,
                                "arguments": [
                                  {
                                    "argumentTypes": null,
                                    "baseExpression": {
                                      "argumentTypes": null,
                                      "id": 3307,
                                      "name": "data",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 3273,
                                      "src": "48799:4:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_array$_t_bytes_calldata_$dyn_calldata_ptr",
                                        "typeString": "bytes calldata[] calldata"
                                      }
                                    },
                                    "id": 3309,
                                    "indexExpression": {
                                      "argumentTypes": null,
                                      "id": 3308,
                                      "name": "i",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 3289,
                                      "src": "48804:1:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "48799:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bytes_calldata",
                                      "typeString": "bytes calldata"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_bytes_calldata",
                                      "typeString": "bytes calldata"
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": null,
                                    "arguments": [
                                      {
                                        "argumentTypes": null,
                                        "id": 3304,
                                        "name": "this",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 3383,
                                        "src": "48780:4:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_contract$_PublicResolver_mainnet_9412610_$3328",
                                          "typeString": "contract PublicResolver_mainnet_9412610"
                                        }
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_contract$_PublicResolver_mainnet_9412610_$3328",
                                          "typeString": "contract PublicResolver_mainnet_9412610"
                                        }
                                      ],
                                      "id": 3303,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "lValueRequested": false,
                                      "nodeType": "ElementaryTypeNameExpression",
                                      "src": "48772:7:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_type$_t_address_$",
                                        "typeString": "type(address)"
                                      },
                                      "typeName": "address"
                                    },
                                    "id": 3305,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "kind": "typeConversion",
                                    "lValueRequested": false,
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "48772:13:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  "id": 3306,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "delegatecall",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": null,
                                  "src": "48772:26:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                                    "typeString": "function (bytes memory) returns (bool,bytes memory)"
                                  }
                                },
                                "id": 3310,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "48772:35:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                                  "typeString": "tuple(bool,bytes memory)"
                                }
                              },
                              "nodeType": "VariableDeclarationStatement",
                              "src": "48734:73:0"
                            },
                            {
                              "expression": {
                                "argumentTypes": null,
                                "arguments": [
                                  {
                                    "argumentTypes": null,
                                    "id": 3313,
                                    "name": "success",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 3300,
                                    "src": "48823:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  ],
                                  "id": 3312,
                                  "name": "require",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [
                                    3346,
                                    3347
                                  ],
                                  "referencedDeclaration": 3346,
                                  "src": "48815:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                                    "typeString": "function (bool) pure"
                                  }
                                },
                                "id": 3314,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "48815:16:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 3315,
                              "nodeType": "ExpressionStatement",
                              "src": "48815:16:0"
                            },
                            {
                              "expression": {
                                "argumentTypes": null,
                                "id": 3320,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "argumentTypes": null,
                                  "baseExpression": {
                                    "argumentTypes": null,
                                    "id": 3316,
                                    "name": "results",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 3277,
                                    "src": "48839:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_array$_t_bytes_memory_$dyn_memory_ptr",
                                      "typeString": "bytes memory[] memory"
                                    }
                                  },
                                  "id": 3318,
                                  "indexExpression": {
                                    "argumentTypes": null,
                                    "id": 3317,
                                    "name": "i",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 3289,
                                    "src": "48847:1:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": true,
                                  "nodeType": "IndexAccess",
                                  "src": "48839:10:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes_memory",
                                    "typeString": "bytes memory"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "argumentTypes": null,
                                  "id": 3319,
                                  "name": "result",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 3302,
                                  "src": "48852:6:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes_memory_ptr",
                                    "typeString": "bytes memory"
                                  }
                                },
                                "src": "48839:19:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_memory",
                                  "typeString": "bytes memory"
                                }
                              },
                              "id": 3321,
                              "nodeType": "ExpressionStatement",
                              "src": "48839:19:0"
                            }
                          ]
                        },
                        "condition": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 3295,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "id": 3292,
                            "name": "i",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3289,
                            "src": "48704:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "<",
                          "rightExpression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 3293,
                              "name": "data",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3273,
                              "src": "48708:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_bytes_calldata_$dyn_calldata_ptr",
                                "typeString": "bytes calldata[] calldata"
                              }
                            },
                            "id": 3294,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "length",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "48708:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "48704:15:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 3323,
                        "initializationExpression": {
                          "assignments": [
                            3289
                          ],
                          "declarations": [
                            {
                              "constant": false,
                              "id": 3289,
                              "name": "i",
                              "nodeType": "VariableDeclaration",
                              "scope": 3323,
                              "src": "48689:9:0",
                              "stateVariable": false,
                              "storageLocation": "default",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "typeName": {
                                "id": 3288,
                                "name": "uint256",
                                "nodeType": "ElementaryTypeName",
                                "src": "48689:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "value": null,
                              "visibility": "internal"
                            }
                          ],
                          "id": 3291,
                          "initialValue": {
                            "argumentTypes": null,
                            "hexValue": "30",
                            "id": 3290,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "48701:1:0",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "nodeType": "VariableDeclarationStatement",
                          "src": "48689:13:0"
                        },
                        "loopExpression": {
                          "expression": {
                            "argumentTypes": null,
                            "id": 3297,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "UnaryOperation",
                            "operator": "++",
                            "prefix": false,
                            "src": "48721:3:0",
                            "subExpression": {
                              "argumentTypes": null,
                              "id": 3296,
                              "name": "i",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3289,
                              "src": "48721:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 3298,
                          "nodeType": "ExpressionStatement",
                          "src": "48721:3:0"
                        },
                        "nodeType": "ForStatement",
                        "src": "48684:181:0"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 3324,
                          "name": "results",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 3277,
                          "src": "48877:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_bytes_memory_$dyn_memory_ptr",
                            "typeString": "bytes memory[] memory"
                          }
                        },
                        "functionReturnParameters": 3278,
                        "id": 3325,
                        "nodeType": "Return",
                        "src": "48870:14:0"
                      }
                    ]
                  },
                  "documentation": null,
                  "id": 3327,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "multicall",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 3274,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3273,
                        "name": "data",
                        "nodeType": "VariableDeclaration",
                        "scope": 3327,
                        "src": "48563:21:0",
                        "stateVariable": false,
                        "storageLocation": "calldata",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_bytes_calldata_$dyn_calldata_ptr",
                          "typeString": "bytes[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 3271,
                            "name": "bytes",
                            "nodeType": "ElementaryTypeName",
                            "src": "48563:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_storage_ptr",
                              "typeString": "bytes"
                            }
                          },
                          "id": 3272,
                          "length": null,
                          "nodeType": "ArrayTypeName",
                          "src": "48563:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_bytes_storage_$dyn_storage_ptr",
                            "typeString": "bytes[]"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "48562:23:0"
                  },
                  "returnParameters": {
                    "id": 3278,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3277,
                        "name": "results",
                        "nodeType": "VariableDeclaration",
                        "scope": 3327,
                        "src": "48612:22:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_bytes_memory_$dyn_memory_ptr",
                          "typeString": "bytes[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 3275,
                            "name": "bytes",
                            "nodeType": "ElementaryTypeName",
                            "src": "48612:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_storage_ptr",
                              "typeString": "bytes"
                            }
                          },
                          "id": 3276,
                          "length": null,
                          "nodeType": "ArrayTypeName",
                          "src": "48612:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_bytes_storage_$dyn_storage_ptr",
                            "typeString": "bytes[]"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "48611:24:0"
                  },
                  "scope": 3328,
                  "src": "48544:345:0",
                  "stateMutability": "nonpayable",
                  "superFunction": null,
                  "visibility": "external"
                }
              ],
              "scope": 3329,
              "src": "46735:2156:0"
            }
          ],
          "src": "112:48780:0"
        },
        "id": 0
      }
    }
  }
}
