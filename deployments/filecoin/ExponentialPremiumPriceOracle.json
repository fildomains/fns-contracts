{
  "address": "0xdD45E8d5eAec21A37b751CDcF745B25554006638",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract AggregatorInterface",
          "name": "_usdOracle",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_rentPrices",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "_startPremium",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalDays",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "prices",
          "type": "uint256[]"
        }
      ],
      "name": "RentPriceChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "old",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "current",
          "type": "address"
        }
      ],
      "name": "SetOracle",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_startPremium",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "elapsed",
          "type": "uint256"
        }
      ],
      "name": "decayedPremium",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "expires",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "premium",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "expires",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "price",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "base",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "premium",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "basePrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "premiumPrice",
              "type": "uint256"
            }
          ],
          "internalType": "struct IPriceOracle.Price",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "price1Letter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "price2Letter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "price3Letter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "price4Letter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "price5Letter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract AggregatorInterface",
          "name": "oracle",
          "type": "address"
        }
      ],
      "name": "setOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceID",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdOracle",
      "outputs": [
        {
          "internalType": "contract AggregatorInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x6808739d9c434e77cd329980dd816340c803400441448178a519148bbb215408",
  "receipt": {
    "to": null,
    "from": "0x69b67e3ABA57dEC064483e172b8cB44c03DA9549",
    "contractAddress": "0xdD45E8d5eAec21A37b751CDcF745B25554006638",
    "transactionIndex": 110,
    "gasUsed": "74636369",
    "logsBloom": "0xfdbd7cfd7f0dc3dbb7d9871cc2f4f36ddb3ab51dd7066fdafdbfc7c33f569f42d1fbcfdf3972c7f3fa6ffd7c95fedd347c7300feeb1373dadf4d3ca397bfbfd89eb8bedef9378bddfc5f8ffdfab39ffab4756db7ddd599ba9d6d2abdfebf61c3eb79f357dffdfadabdfc89790e5fe8b771d2ec2dbd5fdf6b763b7fb732fef276ef8779b687d776ee3aaf07bcdcb9ddb19dd29ec7fbafafaefbf6dd4544f6fe35eae597b7cf765f79bacf4e98c725ba90ed5f78e5d6fd57fe5da6c6e75926c8d6e70765fa3c7bcfe277979dc0f7bf7aaff1f6d3f4fa69fafcdfce77b7db6d6dd9d11fbf7d0d7fbe5baab79aad2f4d77dcddf53a78c3fbfecad7e2fd7c95f51ed7",
    "blockHash": "0x09a7fa5679a3952ee22f1ff62c8b40b09ecaaa868784c30959cb24258986432f",
    "transactionHash": "0x6808739d9c434e77cd329980dd816340c803400441448178a519148bbb215408",
    "logs": [
      {
        "transactionIndex": 110,
        "blockNumber": 2795500,
        "transactionHash": "0x6808739d9c434e77cd329980dd816340c803400441448178a519148bbb215408",
        "address": "0xdD45E8d5eAec21A37b751CDcF745B25554006638",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000069b67e3aba57dec064483e172b8cb44c03da9549"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x09a7fa5679a3952ee22f1ff62c8b40b09ecaaa868784c30959cb24258986432f"
      }
    ],
    "blockNumber": 2795500,
    "cumulativeGasUsed": "0",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xE1D412ECd7B9d9E4187E28db97B5f2d466160686",
    [
      0,
      0,
      "20294266869609",
      "5073566717402",
      "158548959919"
    ],
    "100000000000000000000000000",
    21
  ],
  "numDeployments": 2,
  "solcInputHash": "94c511ccef30681c8028349b05f9c84f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract AggregatorInterface\",\"name\":\"_usdOracle\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_rentPrices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_startPremium\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDays\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"prices\",\"type\":\"uint256[]\"}],\"name\":\"RentPriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"old\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"current\",\"type\":\"address\"}],\"name\":\"SetOracle\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startPremium\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"elapsed\",\"type\":\"uint256\"}],\"name\":\"decayedPremium\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"expires\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"premium\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"expires\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"price\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"base\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"premium\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"basePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"premiumPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct IPriceOracle.Price\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price1Letter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price2Letter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price3Letter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price4Letter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price5Letter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract AggregatorInterface\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdOracle\",\"outputs\":[{\"internalType\":\"contract AggregatorInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"decayedPremium(uint256,uint256)\":{\"details\":\"Returns the premium price at current time elapsed\",\"params\":{\"_startPremium\":\"starting price\",\"elapsed\":\"time past since expiry\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"premium(string,uint256,uint256)\":{\"details\":\"Returns the pricing premium in wei.\"},\"price(string,uint256,uint256)\":{\"details\":\"Returns the price to register or renew a name.\",\"params\":{\"duration\":\"How long the name is being registered or extended for, in seconds.\",\"expires\":\"When the name presently expires (0 if this is a new registration).\",\"name\":\"The name being registered or renewed.\"},\"returns\":{\"_0\":\"base premium tuple of base price + premium price\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/registrar/ExponentialPremiumPriceOracle.sol\":\"ExponentialPremiumPriceOracle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1500},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/registrar/ExponentialPremiumPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ~0.8.17;\\n\\nimport \\\"./StablePriceOracle.sol\\\";\\n\\ncontract ExponentialPremiumPriceOracle is StablePriceOracle {\\n    uint256 constant GRACE_PERIOD = 90 days;\\n    uint256 immutable startPremium;\\n    uint256 immutable endValue;\\n\\n    constructor(\\n        AggregatorInterface _usdOracle,\\n        uint256[] memory _rentPrices,\\n        uint256 _startPremium,\\n        uint256 totalDays\\n    ) StablePriceOracle(_usdOracle, _rentPrices) {\\n        startPremium = _startPremium;\\n        endValue = _startPremium >> totalDays;\\n    }\\n\\n    uint256 constant PRECISION = 1e18;\\n    uint256 constant bit1 = 999989423469314432; // 0.5 ^ 1/65536 * (10 ** 18)\\n    uint256 constant bit2 = 999978847050491904; // 0.5 ^ 2/65536 * (10 ** 18)\\n    uint256 constant bit3 = 999957694548431104;\\n    uint256 constant bit4 = 999915390886613504;\\n    uint256 constant bit5 = 999830788931929088;\\n    uint256 constant bit6 = 999661606496243712;\\n    uint256 constant bit7 = 999323327502650752;\\n    uint256 constant bit8 = 998647112890970240;\\n    uint256 constant bit9 = 997296056085470080;\\n    uint256 constant bit10 = 994599423483633152;\\n    uint256 constant bit11 = 989228013193975424;\\n    uint256 constant bit12 = 978572062087700096;\\n    uint256 constant bit13 = 957603280698573696;\\n    uint256 constant bit14 = 917004043204671232;\\n    uint256 constant bit15 = 840896415253714560;\\n    uint256 constant bit16 = 707106781186547584;\\n\\n    /**\\n     * @dev Returns the pricing premium in internal base units.\\n     */\\n    function _premium(\\n        string memory,\\n        uint256 expires,\\n        uint256\\n    ) internal view override returns (uint256) {\\n        expires = expires + GRACE_PERIOD;\\n        if (expires > block.timestamp) {\\n            return 0;\\n        }\\n\\n        uint256 elapsed = block.timestamp - expires;\\n        uint256 premium = decayedPremium(startPremium, elapsed);\\n        if (premium >= endValue) {\\n            return premium - endValue;\\n        }\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Returns the premium price at current time elapsed\\n     * @param _startPremium starting price\\n     * @param elapsed time past since expiry\\n     */\\n    function decayedPremium(\\n        uint256 _startPremium,\\n        uint256 elapsed\\n    ) public pure returns (uint256) {\\n        uint256 daysPast = (elapsed * PRECISION) / 1 days;\\n        uint256 intDays = daysPast / PRECISION;\\n        uint256 premium = _startPremium >> intDays;\\n        uint256 partDay = (daysPast - intDays * PRECISION);\\n        uint256 fraction = (partDay * (2 ** 16)) / PRECISION;\\n        uint256 totalPremium = addFractionalPremium(fraction, premium);\\n        return totalPremium;\\n    }\\n\\n    function addFractionalPremium(\\n        uint256 fraction,\\n        uint256 premium\\n    ) internal pure returns (uint256) {\\n        if (fraction & (1 << 0) != 0) {\\n            premium = (premium * bit1) / PRECISION;\\n        }\\n        if (fraction & (1 << 1) != 0) {\\n            premium = (premium * bit2) / PRECISION;\\n        }\\n        if (fraction & (1 << 2) != 0) {\\n            premium = (premium * bit3) / PRECISION;\\n        }\\n        if (fraction & (1 << 3) != 0) {\\n            premium = (premium * bit4) / PRECISION;\\n        }\\n        if (fraction & (1 << 4) != 0) {\\n            premium = (premium * bit5) / PRECISION;\\n        }\\n        if (fraction & (1 << 5) != 0) {\\n            premium = (premium * bit6) / PRECISION;\\n        }\\n        if (fraction & (1 << 6) != 0) {\\n            premium = (premium * bit7) / PRECISION;\\n        }\\n        if (fraction & (1 << 7) != 0) {\\n            premium = (premium * bit8) / PRECISION;\\n        }\\n        if (fraction & (1 << 8) != 0) {\\n            premium = (premium * bit9) / PRECISION;\\n        }\\n        if (fraction & (1 << 9) != 0) {\\n            premium = (premium * bit10) / PRECISION;\\n        }\\n        if (fraction & (1 << 10) != 0) {\\n            premium = (premium * bit11) / PRECISION;\\n        }\\n        if (fraction & (1 << 11) != 0) {\\n            premium = (premium * bit12) / PRECISION;\\n        }\\n        if (fraction & (1 << 12) != 0) {\\n            premium = (premium * bit13) / PRECISION;\\n        }\\n        if (fraction & (1 << 13) != 0) {\\n            premium = (premium * bit14) / PRECISION;\\n        }\\n        if (fraction & (1 << 14) != 0) {\\n            premium = (premium * bit15) / PRECISION;\\n        }\\n        if (fraction & (1 << 15) != 0) {\\n            premium = (premium * bit16) / PRECISION;\\n        }\\n        return premium;\\n    }\\n\\n    function supportsInterface(\\n        bytes4 interfaceID\\n    ) public view virtual override returns (bool) {\\n        return super.supportsInterface(interfaceID);\\n    }\\n}\\n\",\"keccak256\":\"0xdd8e5792518f86ab294cf6366ed7aed79eaff043943f97185f8a092ecc69513c\",\"license\":\"MIT\"},\"contracts/registrar/IPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.17 <0.9.0;\\n\\ninterface IPriceOracle {\\n    struct Price {\\n        uint256 base;\\n        uint256 premium;\\n        uint256 basePrice;\\n        uint256 premiumPrice;\\n    }\\n\\n    /**\\n     * @dev Returns the price to register or renew a name.\\n     * @param name The name being registered or renewed.\\n     * @param expires When the name presently expires (0 if this is a new registration).\\n     * @param duration How long the name is being registered or extended for, in seconds.\\n     * @return base premium tuple of base price + premium price\\n     */\\n    function price(\\n        string calldata name,\\n        uint256 expires,\\n        uint256 duration\\n    ) external view returns (Price calldata);\\n}\\n\",\"keccak256\":\"0x0fcf5f80b19d9f954ba83da62d99638376f6ab7431270583c98ef2a92f178567\",\"license\":\"MIT\"},\"contracts/registrar/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ~0.8.17;\\n\\n/**\\n * @title SafeMath\\n * @dev Unsigned math operations with safety checks that revert on error\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Multiplies two unsigned integers, reverts on overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Adds two unsigned integers, reverts on overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\\n     * reverts when dividing by zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x7b034041765b782680e663e7465a8836f37f81881502647c64fa4ad8dcff52cb\",\"license\":\"MIT\"},\"contracts/registrar/StablePriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ~0.8.17;\\n\\nimport \\\"./IPriceOracle.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./StringUtils.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\ninterface AggregatorInterface {\\n    function latestAnswer() external view returns (int256);\\n}\\n\\n// StablePriceOracle sets a price in USD, based on an oracle.\\ncontract StablePriceOracle is IPriceOracle, Ownable {\\n    using SafeMath for *;\\n    using StringUtils for *;\\n\\n    // Rent in base price units by length\\n    uint256 public immutable price1Letter;\\n    uint256 public immutable price2Letter;\\n    uint256 public immutable price3Letter;\\n    uint256 public immutable price4Letter;\\n    uint256 public immutable price5Letter;\\n\\n    // Oracle address\\n    AggregatorInterface public usdOracle;\\n\\n    event RentPriceChanged(uint256[] prices);\\n    event SetOracle(address indexed old, address current);\\n\\n    constructor(AggregatorInterface _usdOracle, uint256[] memory _rentPrices) {\\n        usdOracle = _usdOracle;\\n        price1Letter = _rentPrices[0];\\n        price2Letter = _rentPrices[1];\\n        price3Letter = _rentPrices[2];\\n        price4Letter = _rentPrices[3];\\n        price5Letter = _rentPrices[4];\\n    }\\n\\n    function setOracle(AggregatorInterface oracle) external onlyOwner{\\n        emit SetOracle(address (usdOracle), address (oracle));\\n\\n        usdOracle = oracle;\\n    }\\n\\n    function price(\\n        string calldata name,\\n        uint256 expires,\\n        uint256 duration\\n    ) external view override returns (IPriceOracle.Price memory) {\\n        uint256 len = name.strlen();\\n        uint256 basePrice;\\n        uint256 priceLetter;\\n\\n        if (len >= 5) {\\n            priceLetter = price5Letter;\\n        } else if (len == 4) {\\n            priceLetter = price4Letter;\\n        } else if (len == 3) {\\n            priceLetter = price3Letter;\\n        } else if (len == 2) {\\n            priceLetter = price2Letter;\\n        } else {\\n            priceLetter = price1Letter;\\n        }\\n\\n        basePrice = priceLetter * duration;\\n        uint256 premiumPrice = _premium(name, expires, duration);\\n        return\\n            IPriceOracle.Price({\\n                basePrice: basePrice,\\n                premiumPrice: premiumPrice,\\n                base: attoUSDToWei(basePrice),\\n                premium: attoUSDToWei(premiumPrice)\\n            });\\n    }\\n\\n    /**\\n     * @dev Returns the pricing premium in wei.\\n     */\\n    function premium(\\n        string calldata name,\\n        uint256 expires,\\n        uint256 duration\\n    ) external view returns (uint256) {\\n        return attoUSDToWei(_premium(name, expires, duration));\\n    }\\n\\n    /**\\n     * @dev Returns the pricing premium in internal base units.\\n     */\\n    function _premium(\\n        string memory,\\n        uint256,\\n        uint256\\n    ) internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    function attoUSDToWei(uint256 amount) internal view returns (uint256) {\\n        uint256 filPrice = uint256(usdOracle.latestAnswer());\\n        return (amount * 1e8) / filPrice;\\n    }\\n\\n    function weiToAttoUSD(uint256 amount) internal view returns (uint256) {\\n        uint256 filPrice = uint256(usdOracle.latestAnswer());\\n        return (amount * filPrice) / 1e8;\\n    }\\n\\n    function supportsInterface(\\n        bytes4 interfaceID\\n    ) public view virtual returns (bool) {\\n        return\\n            interfaceID == type(IERC165).interfaceId ||\\n            interfaceID == type(IPriceOracle).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x134cf7e3a178d40e221125cb39523933426c1325fcf1166aac9064e09c0371f6\",\"license\":\"MIT\"},\"contracts/registrar/StringUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nlibrary StringUtils {\\n    /**\\n     * @dev Returns the length of a given string\\n     *\\n     * @param s The string to measure the length of\\n     * @return The length of the input string\\n     */\\n    function strlen(string memory s) internal pure returns (uint256) {\\n        uint256 len;\\n        uint256 i = 0;\\n        uint256 bytelength = bytes(s).length;\\n        for (len = 0; i < bytelength; len++) {\\n            bytes1 b = bytes(s)[i];\\n            if (b < 0x80) {\\n                i += 1;\\n            } else if (b < 0xE0) {\\n                i += 2;\\n            } else if (b < 0xF0) {\\n                i += 3;\\n            } else if (b < 0xF8) {\\n                i += 4;\\n            } else if (b < 0xFC) {\\n                i += 5;\\n            } else {\\n                i += 6;\\n            }\\n        }\\n        return len;\\n    }\\n}\\n\",\"keccak256\":\"0xdbd97d767692bd503734aad74fbbda4e1db3bb1378c32b6a2a0729e615824385\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101606040523480156200001257600080fd5b506040516200136038038062001360833981016040819052620000359162000192565b838362000042336200012c565b600180546001600160a01b0319166001600160a01b038416179055805181906000906200007357620000736200028d565b602002602001015160808181525050806001815181106200009857620000986200028d565b602002602001015160a0818152505080600281518110620000bd57620000bd6200028d565b602002602001015160c0818152505080600381518110620000e257620000e26200028d565b602002602001015160e08181525050806004815181106200010757620001076200028d565b60209081029190910101516101005250506101208290521c6101405250620002a39050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b634e487b7160e01b600052604160045260246000fd5b60008060008060808587031215620001a957600080fd5b84516001600160a01b0381168114620001c157600080fd5b602086810151919550906001600160401b0380821115620001e157600080fd5b818801915088601f830112620001f657600080fd5b8151818111156200020b576200020b6200017c565b8060051b604051601f19603f830116810181811085821117156200023357620002336200017c565b60405291825284820192508381018501918b8311156200025257600080fd5b938501935b82851015620002725784518452938501939285019262000257565b60408b01516060909b0151999c909b50975050505050505050565b634e487b7160e01b600052603260045260246000fd5b60805160a05160c05160e0516101005161012051610140516110386200032860003960008181610953015261097d0152600061092a0152600081816101970152610349015260008181610287015261037801526000818161021301526103a701526000818161026001526103d601526000818161011c01526103fd01526110386000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c80638da5cb5b1161008c578063c8a4271f11610066578063c8a4271f14610248578063cd5d2c741461025b578063d820ed4214610282578063f2fde38b146102a957600080fd5b80638da5cb5b146101e9578063a200e1531461020e578063a34e35961461023557600080fd5b806359b6b86c116100c857806359b6b86c1461019257806359e1777c146101b9578063715018a6146101cc5780637adbf973146101d657600080fd5b806301ffc9a7146100ef5780632c0fd74c1461011757806350e9a7151461014c575b600080fd5b6101026100fd366004610e30565b6102bc565b60405190151581526020015b60405180910390f35b61013e7f000000000000000000000000000000000000000000000000000000000000000081565b60405190815260200161010e565b61015f61015a366004610e72565b6102cd565b60405161010e91908151815260208083015190820152604080830151908201526060918201519181019190915260800190565b61013e7f000000000000000000000000000000000000000000000000000000000000000081565b61013e6101c7366004610ef1565b6104ad565b6101d4610548565b005b6101d46101e4366004610f28565b61055c565b6000546001600160a01b03165b6040516001600160a01b03909116815260200161010e565b61013e7f000000000000000000000000000000000000000000000000000000000000000081565b61013e610243366004610e72565b6105e2565b6001546101f6906001600160a01b031681565b61013e7f000000000000000000000000000000000000000000000000000000000000000081565b61013e7f000000000000000000000000000000000000000000000000000000000000000081565b6101d46102b7366004610f28565b610638565b60006102c7826106cd565b92915050565b6102f86040518060800160405280600081526020016000815260200160008152602001600081525090565b600061033986868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061076592505050565b90506000806005831061036d57507f000000000000000000000000000000000000000000000000000000000000000061041d565b8260040361039c57507f000000000000000000000000000000000000000000000000000000000000000061041d565b826003036103cb57507f000000000000000000000000000000000000000000000000000000000000000061041d565b826002036103fa57507f000000000000000000000000000000000000000000000000000000000000000061041d565b507f00000000000000000000000000000000000000000000000000000000000000005b6104278582610f5b565b9150600061046e89898080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508b92508a91506108f49050565b90506040518060800160405280610484856109b9565b8152602001610492836109b9565b81526020810194909452604090930152509695505050505050565b600080620151806104c6670de0b6b3a764000085610f5b565b6104d09190610f72565b905060006104e6670de0b6b3a764000083610f72565b905084811c60006104ff670de0b6b3a764000084610f5b565b6105099085610f94565b90506000670de0b6b3a76400006105238362010000610f5b565b61052d9190610f72565b9050600061053b8285610a4e565b9998505050505050505050565b610550610d6e565b61055a6000610dc8565b565b610564610d6e565b6001546040516001600160a01b038381168252909116907fb7261e9c33aa7c56209c3bf60b424a8f9551ce28876c0ab3d0c487695e9434879060200160405180910390a2600180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b600061062f61062a86868080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508892508791506108f49050565b6109b9565b95945050505050565b610640610d6e565b6001600160a01b0381166106c15760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6106ca81610dc8565b50565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f01ffc9a70000000000000000000000000000000000000000000000000000000014806102c757507fffffffff0000000000000000000000000000000000000000000000000000000082167f50e9a715000000000000000000000000000000000000000000000000000000001492915050565b8051600090819081905b808210156108eb57600085838151811061078b5761078b610fa7565b01602001516001600160f81b03191690507f80000000000000000000000000000000000000000000000000000000000000008110156107d6576107cf600184610fbd565b92506108d8565b7fe0000000000000000000000000000000000000000000000000000000000000006001600160f81b031982161015610813576107cf600284610fbd565b7ff0000000000000000000000000000000000000000000000000000000000000006001600160f81b031982161015610850576107cf600384610fbd565b7ff8000000000000000000000000000000000000000000000000000000000000006001600160f81b03198216101561088d576107cf600484610fbd565b7ffc000000000000000000000000000000000000000000000000000000000000006001600160f81b0319821610156108ca576107cf600584610fbd565b6108d5600684610fbd565b92505b50826108e381610fd0565b93505061076f565b50909392505050565b60006109036276a70084610fbd565b925042831115610915575060006109b2565b60006109218442610f94565b9050600061094f7f0000000000000000000000000000000000000000000000000000000000000000836104ad565b90507f000000000000000000000000000000000000000000000000000000000000000081106109ab576109a27f000000000000000000000000000000000000000000000000000000000000000082610f94565b925050506109b2565b6000925050505b9392505050565b600080600160009054906101000a90046001600160a01b03166001600160a01b03166350d25bcd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a0f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a339190610fe9565b905080610a44846305f5e100610f5b565b6109b29190610f72565b60006001831615610a8157670de0b6b3a7640000610a74670de0ad151d09418084610f5b565b610a7e9190610f72565b91505b6002831615610ab257670de0b6b3a7640000610aa5670de0a3769959680084610f5b565b610aaf9190610f72565b91505b6004831615610ae357670de0b6b3a7640000610ad6670de09039a5fa510084610f5b565b610ae09190610f72565b91505b6008831615610b1457670de0b6b3a7640000610b07670de069c00f3e120084610f5b565b610b119190610f72565b91505b6010831615610b4557670de0b6b3a7640000610b38670de01cce21c9440084610f5b565b610b429190610f72565b91505b6020831615610b7657670de0b6b3a7640000610b69670ddf82ef46ce100084610f5b565b610b739190610f72565b91505b6040831615610ba757670de0b6b3a7640000610b9a670dde4f458f8e8d8084610f5b565b610ba49190610f72565b91505b6080831615610bd857670de0b6b3a7640000610bcb670ddbe84213d5f08084610f5b565b610bd59190610f72565b91505b610100831615610c0a57670de0b6b3a7640000610bfd670dd71b7aa6df5b8084610f5b565b610c079190610f72565b91505b610200831615610c3c57670de0b6b3a7640000610c2f670dcd86e7f28cde0084610f5b565b610c399190610f72565b91505b610400831615610c6e57670de0b6b3a7640000610c61670dba71a3084ad68084610f5b565b610c6b9190610f72565b91505b610800831615610ca057670de0b6b3a7640000610c93670d94961b13dbde8084610f5b565b610c9d9190610f72565b91505b611000831615610cd257670de0b6b3a7640000610cc5670d4a171c35c9838084610f5b565b610ccf9190610f72565b91505b612000831615610d0457670de0b6b3a7640000610cf7670cb9da519ccfb70084610f5b565b610d019190610f72565b91505b614000831615610d3657670de0b6b3a7640000610d29670bab76d59c18d68084610f5b565b610d339190610f72565b91505b618000831615610d6857670de0b6b3a7640000610d5b6709d025defee4df8084610f5b565b610d659190610f72565b91505b50919050565b6000546001600160a01b0316331461055a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106b8565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600060208284031215610e4257600080fd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146109b257600080fd5b60008060008060608587031215610e8857600080fd5b843567ffffffffffffffff80821115610ea057600080fd5b818701915087601f830112610eb457600080fd5b813581811115610ec357600080fd5b886020828501011115610ed557600080fd5b6020928301999098509187013596604001359550909350505050565b60008060408385031215610f0457600080fd5b50508035926020909101359150565b6001600160a01b03811681146106ca57600080fd5b600060208284031215610f3a57600080fd5b81356109b281610f13565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176102c7576102c7610f45565b600082610f8f57634e487b7160e01b600052601260045260246000fd5b500490565b818103818111156102c7576102c7610f45565b634e487b7160e01b600052603260045260246000fd5b808201808211156102c7576102c7610f45565b600060018201610fe257610fe2610f45565b5060010190565b600060208284031215610ffb57600080fd5b505191905056fea2646970667358221220f737ce93ad6187b4c60b10932f3cd70e26b6c6d57d7c8602bc3b369628ce770c64736f6c63430008110033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "decayedPremium(uint256,uint256)": {
        "details": "Returns the premium price at current time elapsed",
        "params": {
          "_startPremium": "starting price",
          "elapsed": "time past since expiry"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "premium(string,uint256,uint256)": {
        "details": "Returns the pricing premium in wei."
      },
      "price(string,uint256,uint256)": {
        "details": "Returns the price to register or renew a name.",
        "params": {
          "duration": "How long the name is being registered or extended for, in seconds.",
          "expires": "When the name presently expires (0 if this is a new registration).",
          "name": "The name being registered or renewed."
        },
        "returns": {
          "_0": "base premium tuple of base price + premium price"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/registrar/ExponentialPremiumPriceOracle.sol:ExponentialPremiumPriceOracle",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 15737,
        "contract": "contracts/registrar/ExponentialPremiumPriceOracle.sol:ExponentialPremiumPriceOracle",
        "label": "usdOracle",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(AggregatorInterface)15716"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(AggregatorInterface)15716": {
        "encoding": "inplace",
        "label": "contract AggregatorInterface",
        "numberOfBytes": "20"
      }
    }
  }
}