{
  "address": "0x0B6D3B28A5bF49B8591aaca085d494088c88309f",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall.Call[]",
          "name": "calls",
          "type": "tuple[]"
        }
      ],
      "name": "aggregate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        },
        {
          "internalType": "bytes[]",
          "name": "returnData",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "allowFailure",
              "type": "bool"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall.Call3[]",
          "name": "calls",
          "type": "tuple[]"
        }
      ],
      "name": "aggregate3",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "success",
              "type": "bool"
            },
            {
              "internalType": "bytes",
              "name": "returnData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall.Result[]",
          "name": "returnData",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "allowFailure",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall.Call3Value[]",
          "name": "calls",
          "type": "tuple[]"
        }
      ],
      "name": "aggregate3Value",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "success",
              "type": "bool"
            },
            {
              "internalType": "bytes",
              "name": "returnData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall.Result[]",
          "name": "returnData",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall.Call[]",
          "name": "calls",
          "type": "tuple[]"
        }
      ],
      "name": "blockAndAggregate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "blockHash",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "success",
              "type": "bool"
            },
            {
              "internalType": "bytes",
              "name": "returnData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall.Result[]",
          "name": "returnData",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "getBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBasefee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "basefee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "getBlockHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "blockHash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBlockNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getChainId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "chainid",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentBlockCoinbase",
      "outputs": [
        {
          "internalType": "address",
          "name": "coinbase",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentBlockDifficulty",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "difficulty",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentBlockGasLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "gaslimit",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentBlockTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "getEthBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastBlockHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "blockHash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "requireSuccess",
          "type": "bool"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall.Call[]",
          "name": "calls",
          "type": "tuple[]"
        }
      ],
      "name": "tryAggregate",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "success",
              "type": "bool"
            },
            {
              "internalType": "bytes",
              "name": "returnData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall.Result[]",
          "name": "returnData",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "requireSuccess",
          "type": "bool"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall.Call[]",
          "name": "calls",
          "type": "tuple[]"
        }
      ],
      "name": "tryBlockAndAggregate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "blockHash",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "success",
              "type": "bool"
            },
            {
              "internalType": "bytes",
              "name": "returnData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall.Result[]",
          "name": "returnData",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9d4ef94f1a0a33e35f7d0be92bed30c56ef33f1b47e72d6dd72b1acbb7baa5da",
  "receipt": {
    "to": null,
    "from": "0x69b67e3ABA57dEC064483e172b8cB44c03DA9549",
    "contractAddress": "0x0B6D3B28A5bF49B8591aaca085d494088c88309f",
    "transactionIndex": 89,
    "gasUsed": "71050783",
    "logsBloom": "0xfdbd7cfd7f0dc3dbb7d9871cc2f4f36ddb3ab51dd7066ed8fdbfc7c33f569f42d1fbcbdf3972c7f3fa6ffd7c95fedd347c7300feeb1373da9d4d3ca397bfbfd89eb8bedef93789ddfc5f8ffdfab39ffab4756db7ddd599ba9d6d2abdfebf61c36b79f357dffdfadabdfc89790e5fe8b771d2ec2dbd5fdf6b763b7fb732fef276ef8779b687d776ee3aaf07b494b9ddb19dd29ec7fbafafaefbf6dd4544f6fe35eaa597a7cf765f78bacf4e98c725ba90ed5f78e5d6fd57fe5da6c6e75926c8d6e70765fa3c7bcfe277979dc0f7bf7aafb1f6d3f4fa69fafcdfca7737db6d6dd9d11fbf7d0d5fbe5baab79aad2f4d77dc9df53a78c3fbfecad7e2fd7c95f51ed7",
    "blockHash": "0xbd0c69628ecdac40946dd8f2f7b0a0e851ba30dfc52d9fd2b7e3009b0284f3dc",
    "transactionHash": "0x9d4ef94f1a0a33e35f7d0be92bed30c56ef33f1b47e72d6dd72b1acbb7baa5da",
    "logs": [],
    "blockNumber": 2795260,
    "cumulativeGasUsed": "0",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "94c511ccef30681c8028349b05f9c84f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"aggregate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"returnData\",\"type\":\"bytes[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowFailure\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall.Call3[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"aggregate3\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall.Result[]\",\"name\":\"returnData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowFailure\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall.Call3Value[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"aggregate3Value\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall.Result[]\",\"name\":\"returnData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"blockAndAggregate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall.Result[]\",\"name\":\"returnData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBasefee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"basefee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getBlockHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"chainid\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentBlockCoinbase\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"coinbase\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentBlockDifficulty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"difficulty\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentBlockGasLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"gaslimit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentBlockTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getEthBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastBlockHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"requireSuccess\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"tryAggregate\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall.Result[]\",\"name\":\"returnData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"requireSuccess\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"tryBlockAndAggregate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall.Result[]\",\"name\":\"returnData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Michael Elliot <mike@makerdao.com>Joshua Levine <joshua@makerdao.com>Nick Johnson <arachnid@notdot.net>Andreas Bigger <andreas@nascent.xyz>Matt Solomon <matt@mattsolomon.dev>\",\"details\":\"Multicall & Multicall2 backwards-compatibleAggregate methods are marked `payable` to save 24 gas per call\",\"kind\":\"dev\",\"methods\":{\"aggregate((address,bytes)[])\":{\"params\":{\"calls\":\"An array of Call structs\"},\"returns\":{\"blockNumber\":\"The block number where the calls were executed\",\"returnData\":\"An array of bytes containing the responses\"}},\"aggregate3((address,bool,bytes)[])\":{\"params\":{\"calls\":\"An array of Call3 structs\"},\"returns\":{\"returnData\":\"An array of Result structs\"}},\"aggregate3Value((address,bool,uint256,bytes)[])\":{\"params\":{\"calls\":\"An array of Call3Value structs\"},\"returns\":{\"returnData\":\"An array of Result structs\"}},\"blockAndAggregate((address,bytes)[])\":{\"params\":{\"calls\":\"An array of Call structs\"},\"returns\":{\"blockHash\":\"The hash of the block where the calls were executed\",\"blockNumber\":\"The block number where the calls were executed\",\"returnData\":\"An array of Result structs\"}},\"getBlockHash(uint256)\":{\"params\":{\"blockNumber\":\"The block number\"}},\"tryAggregate(bool,(address,bytes)[])\":{\"params\":{\"calls\":\"An array of Call structs\",\"requireSuccess\":\"If true, require all calls to succeed\"},\"returns\":{\"returnData\":\"An array of Result structs\"}},\"tryBlockAndAggregate(bool,(address,bytes)[])\":{\"params\":{\"calls\":\"An array of Call structs\"},\"returns\":{\"blockHash\":\"The hash of the block where the calls were executed\",\"blockNumber\":\"The block number where the calls were executed\",\"returnData\":\"An array of Result structs\"}}},\"title\":\"Multicall\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"aggregate((address,bytes)[])\":{\"notice\":\"Backwards-compatible call aggregation with Multicall\"},\"aggregate3((address,bool,bytes)[])\":{\"notice\":\"Aggregate calls, ensuring each returns success if required\"},\"aggregate3Value((address,bool,uint256,bytes)[])\":{\"notice\":\"Aggregate calls with a msg valueReverts if msg.value is less than the sum of the call values\"},\"blockAndAggregate((address,bytes)[])\":{\"notice\":\"Backwards-compatible with Multicall2Aggregate calls and allow failures using tryAggregate\"},\"getBasefee()\":{\"notice\":\"Gets the base fee of the given blockCan revert if the BASEFEE opcode is not implemented by the given chain\"},\"getBlockHash(uint256)\":{\"notice\":\"Returns the block hash for the given block number\"},\"getBlockNumber()\":{\"notice\":\"Returns the block number\"},\"getChainId()\":{\"notice\":\"Returns the chain id\"},\"getCurrentBlockCoinbase()\":{\"notice\":\"Returns the block coinbase\"},\"getCurrentBlockDifficulty()\":{\"notice\":\"Returns the block difficulty\"},\"getCurrentBlockGasLimit()\":{\"notice\":\"Returns the block gas limit\"},\"getCurrentBlockTimestamp()\":{\"notice\":\"Returns the block timestamp\"},\"getEthBalance(address)\":{\"notice\":\"Returns the (FIL) balance of a given address\"},\"getLastBlockHash()\":{\"notice\":\"Returns the block hash of the last block\"},\"tryAggregate(bool,(address,bytes)[])\":{\"notice\":\"Backwards-compatible with Multicall2Aggregate calls without requiring success\"},\"tryBlockAndAggregate(bool,(address,bytes)[])\":{\"notice\":\"Backwards-compatible with Multicall2Aggregate calls and allow failures using tryAggregate\"}},\"notice\":\"Aggregate results from multiple function calls\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/utils/Multicall.sol\":\"Multicall\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1500},\"remappings\":[]},\"sources\":{\"contracts/utils/Multicall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\n/// @title Multicall\\n/// @notice Aggregate results from multiple function calls\\n/// @dev Multicall & Multicall2 backwards-compatible\\n/// @dev Aggregate methods are marked `payable` to save 24 gas per call\\n/// @author Michael Elliot <mike@makerdao.com>\\n/// @author Joshua Levine <joshua@makerdao.com>\\n/// @author Nick Johnson <arachnid@notdot.net>\\n/// @author Andreas Bigger <andreas@nascent.xyz>\\n/// @author Matt Solomon <matt@mattsolomon.dev>\\ncontract Multicall {\\n    struct Call {\\n        address target;\\n        bytes callData;\\n    }\\n\\n    struct Call3 {\\n        address target;\\n        bool allowFailure;\\n        bytes callData;\\n    }\\n\\n    struct Call3Value {\\n        address target;\\n        bool allowFailure;\\n        uint256 value;\\n        bytes callData;\\n    }\\n\\n    struct Result {\\n        bool success;\\n        bytes returnData;\\n    }\\n\\n    /// @notice Backwards-compatible call aggregation with Multicall\\n    /// @param calls An array of Call structs\\n    /// @return blockNumber The block number where the calls were executed\\n    /// @return returnData An array of bytes containing the responses\\n    function aggregate(Call[] calldata calls) public payable returns (uint256 blockNumber, bytes[] memory returnData) {\\n        blockNumber = block.number;\\n        uint256 length = calls.length;\\n        returnData = new bytes[](length);\\n        Call calldata call;\\n        for (uint256 i = 0; i < length;) {\\n            bool success;\\n            call = calls[i];\\n            (success, returnData[i]) = call.target.call(call.callData);\\n            require(success, \\\"Multicall: call failed\\\");\\n        unchecked { ++i; }\\n        }\\n    }\\n\\n    /// @notice Backwards-compatible with Multicall2\\n    /// @notice Aggregate calls without requiring success\\n    /// @param requireSuccess If true, require all calls to succeed\\n    /// @param calls An array of Call structs\\n    /// @return returnData An array of Result structs\\n    function tryAggregate(bool requireSuccess, Call[] calldata calls) public payable returns (Result[] memory returnData) {\\n        uint256 length = calls.length;\\n        returnData = new Result[](length);\\n        Call calldata call;\\n        for (uint256 i = 0; i < length;) {\\n            Result memory result = returnData[i];\\n            call = calls[i];\\n            (result.success, result.returnData) = call.target.call(call.callData);\\n            if (requireSuccess) require(result.success, \\\"Multicall: call failed\\\");\\n        unchecked { ++i; }\\n        }\\n    }\\n\\n    /// @notice Backwards-compatible with Multicall2\\n    /// @notice Aggregate calls and allow failures using tryAggregate\\n    /// @param calls An array of Call structs\\n    /// @return blockNumber The block number where the calls were executed\\n    /// @return blockHash The hash of the block where the calls were executed\\n    /// @return returnData An array of Result structs\\n    function tryBlockAndAggregate(bool requireSuccess, Call[] calldata calls) public payable returns (uint256 blockNumber, bytes32 blockHash, Result[] memory returnData) {\\n        blockNumber = block.number;\\n        blockHash = blockhash(block.number);\\n        returnData = tryAggregate(requireSuccess, calls);\\n    }\\n\\n    /// @notice Backwards-compatible with Multicall2\\n    /// @notice Aggregate calls and allow failures using tryAggregate\\n    /// @param calls An array of Call structs\\n    /// @return blockNumber The block number where the calls were executed\\n    /// @return blockHash The hash of the block where the calls were executed\\n    /// @return returnData An array of Result structs\\n    function blockAndAggregate(Call[] calldata calls) public payable returns (uint256 blockNumber, bytes32 blockHash, Result[] memory returnData) {\\n        (blockNumber, blockHash, returnData) = tryBlockAndAggregate(true, calls);\\n    }\\n\\n    /// @notice Aggregate calls, ensuring each returns success if required\\n    /// @param calls An array of Call3 structs\\n    /// @return returnData An array of Result structs\\n    function aggregate3(Call3[] calldata calls) public payable returns (Result[] memory returnData) {\\n        uint256 length = calls.length;\\n        returnData = new Result[](length);\\n        Call3 calldata calli;\\n        for (uint256 i = 0; i < length;) {\\n            Result memory result = returnData[i];\\n            calli = calls[i];\\n            (result.success, result.returnData) = calli.target.call(calli.callData);\\n            assembly {\\n            // Revert if the call fails and failure is not allowed\\n            // `allowFailure := calldataload(add(calli, 0x20))` and `success := mload(result)`\\n                if iszero(or(calldataload(add(calli, 0x20)), mload(result))) {\\n                // set \\\"Error(string)\\\" signature: bytes32(bytes4(keccak256(\\\"Error(string)\\\")))\\n                    mstore(0x00, 0x08c379a000000000000000000000000000000000000000000000000000000000)\\n                // set data offset\\n                    mstore(0x04, 0x0000000000000000000000000000000000000000000000000000000000000020)\\n                // set length of revert string\\n                    mstore(0x24, 0x0000000000000000000000000000000000000000000000000000000000000017)\\n                // set revert string: bytes32(abi.encodePacked(\\\"Multicall: call failed\\\"))\\n                    mstore(0x44, 0x4d756c746963616c6c333a2063616c6c206661696c6564000000000000000000)\\n                    revert(0x00, 0x64)\\n                }\\n            }\\n        unchecked { ++i; }\\n        }\\n    }\\n\\n    /// @notice Aggregate calls with a msg value\\n    /// @notice Reverts if msg.value is less than the sum of the call values\\n    /// @param calls An array of Call3Value structs\\n    /// @return returnData An array of Result structs\\n    function aggregate3Value(Call3Value[] calldata calls) public payable returns (Result[] memory returnData) {\\n        uint256 valAccumulator;\\n        uint256 length = calls.length;\\n        returnData = new Result[](length);\\n        Call3Value calldata calli;\\n        for (uint256 i = 0; i < length;) {\\n            Result memory result = returnData[i];\\n            calli = calls[i];\\n            uint256 val = calli.value;\\n            // Humanity will be a Type V Kardashev Civilization before this overflows - andreas\\n            // ~ 10^25 Wei in existence << ~ 10^76 size uint fits in a uint256\\n        unchecked { valAccumulator += val; }\\n            (result.success, result.returnData) = calli.target.call{value: val}(calli.callData);\\n            assembly {\\n            // Revert if the call fails and failure is not allowed\\n            // `allowFailure := calldataload(add(calli, 0x20))` and `success := mload(result)`\\n                if iszero(or(calldataload(add(calli, 0x20)), mload(result))) {\\n                // set \\\"Error(string)\\\" signature: bytes32(bytes4(keccak256(\\\"Error(string)\\\")))\\n                    mstore(0x00, 0x08c379a000000000000000000000000000000000000000000000000000000000)\\n                // set data offset\\n                    mstore(0x04, 0x0000000000000000000000000000000000000000000000000000000000000020)\\n                // set length of revert string\\n                    mstore(0x24, 0x0000000000000000000000000000000000000000000000000000000000000017)\\n                // set revert string: bytes32(abi.encodePacked(\\\"Multicall: call failed\\\"))\\n                    mstore(0x44, 0x4d756c746963616c6c333a2063616c6c206661696c6564000000000000000000)\\n                    revert(0x00, 0x84)\\n                }\\n            }\\n        unchecked { ++i; }\\n        }\\n        // Finally, make sure the msg.value = SUM(call[0...i].value)\\n        require(msg.value == valAccumulator, \\\"Multicall: value mismatch\\\");\\n    }\\n\\n    /// @notice Returns the block hash for the given block number\\n    /// @param blockNumber The block number\\n    function getBlockHash(uint256 blockNumber) public view returns (bytes32 blockHash) {\\n        blockHash = blockhash(blockNumber);\\n    }\\n\\n    /// @notice Returns the block number\\n    function getBlockNumber() public view returns (uint256 blockNumber) {\\n        blockNumber = block.number;\\n    }\\n\\n    /// @notice Returns the block coinbase\\n    function getCurrentBlockCoinbase() public view returns (address coinbase) {\\n        coinbase = block.coinbase;\\n    }\\n\\n    /// @notice Returns the block difficulty\\n    function getCurrentBlockDifficulty() public view returns (uint256 difficulty) {\\n        difficulty = block.difficulty;\\n    }\\n\\n    /// @notice Returns the block gas limit\\n    function getCurrentBlockGasLimit() public view returns (uint256 gaslimit) {\\n        gaslimit = block.gaslimit;\\n    }\\n\\n    /// @notice Returns the block timestamp\\n    function getCurrentBlockTimestamp() public view returns (uint256 timestamp) {\\n        timestamp = block.timestamp;\\n    }\\n\\n    /// @notice Returns the (FIL) balance of a given address\\n    function getEthBalance(address addr) public view returns (uint256 balance) {\\n        balance = addr.balance;\\n    }\\n\\n    function getBalance(address addr) public view returns (uint256 balance) {\\n        balance = addr.balance;\\n    }\\n\\n    /// @notice Returns the block hash of the last block\\n    function getLastBlockHash() public view returns (bytes32 blockHash) {\\n    unchecked {\\n        blockHash = blockhash(block.number - 1);\\n    }\\n    }\\n\\n    /// @notice Gets the base fee of the given block\\n    /// @notice Can revert if the BASEFEE opcode is not implemented by the given chain\\n    function getBasefee() public view returns (uint256 basefee) {\\n        basefee = block.basefee;\\n    }\\n\\n    /// @notice Returns the chain id\\n    function getChainId() public view returns (uint256 chainid) {\\n        chainid = block.chainid;\\n    }\\n}\\n\",\"keccak256\":\"0x9f59ab212ef68770c3ec9465c8bac6746fc69dc31dad5f2f2f222fdef7f7bf59\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610d50806100206000396000f3fe60806040526004361061010e5760003560e01c80634d2301cc116100a5578063a8b0574e11610074578063c3077fa911610059578063c3077fa914610285578063ee82ac5e14610298578063f8b2cb4f146101e957600080fd5b8063a8b0574e14610257578063bce38bd71461027257600080fd5b80634d2301cc146101e957806372425d9d1461021e57806382ad56cb1461023157806386d516e81461024457600080fd5b80633408e470116100e15780633408e4701461018e578063399542e9146101a15780633e64a696146101c357806342cbb15c146101d657600080fd5b80630f28c97d14610113578063174dea7114610135578063252dba421461015557806327e86d6e14610176575b600080fd5b34801561011f57600080fd5b50425b6040519081526020015b60405180910390f35b610148610143366004610a00565b6102b7565b60405161012c9190610af6565b610168610163366004610a00565b6104b8565b60405161012c929190610b10565b34801561018257600080fd5b50436000190140610122565b34801561019a57600080fd5b5046610122565b6101b46101af366004610b7a565b61063f565b60405161012c93929190610bd4565b3480156101cf57600080fd5b5048610122565b3480156101e257600080fd5b5043610122565b3480156101f557600080fd5b50610122610204366004610bfc565b73ffffffffffffffffffffffffffffffffffffffff163190565b34801561022a57600080fd5b5044610122565b61014861023f366004610a00565b61065a565b34801561025057600080fd5b5045610122565b34801561026357600080fd5b5060405141815260200161012c565b610148610280366004610b7a565b6107ef565b6101b4610293366004610a00565b610995565b3480156102a457600080fd5b506101226102b3366004610c32565b4090565b60606000828067ffffffffffffffff8111156102d5576102d5610c4b565b60405190808252806020026020018201604052801561031b57816020015b6040805180820190915260008152606060208201528152602001906001900390816102f35790505b5092503660005b8281101561045a57600085828151811061033e5761033e610c61565b6020026020010151905087878381811061035a5761035a610c61565b905060200281019061036c9190610c77565b6040810135958601959093506103856020850185610bfc565b73ffffffffffffffffffffffffffffffffffffffff16816103a96060870187610c97565b6040516103b7929190610cde565b60006040518083038185875af1925050503d80600081146103f4576040519150601f19603f3d011682016040523d82523d6000602084013e6103f9565b606091505b5060208085019190915290151580845290850135176104505762461bcd60e51b600052602060045260176024527f4d756c746963616c6c333a2063616c6c206661696c656400000000000000000060445260846000fd5b5050600101610322565b508234146104af5760405162461bcd60e51b815260206004820152601960248201527f4d756c746963616c6c3a2076616c7565206d69736d617463680000000000000060448201526064015b60405180910390fd5b50505092915050565b436060828067ffffffffffffffff8111156104d5576104d5610c4b565b60405190808252806020026020018201604052801561050857816020015b60608152602001906001900390816104f35790505b5091503660005b8281101561063557600087878381811061052b5761052b610c61565b905060200281019061053d9190610cee565b925061054c6020840184610bfc565b73ffffffffffffffffffffffffffffffffffffffff1661056f6020850185610c97565b60405161057d929190610cde565b6000604051808303816000865af19150503d80600081146105ba576040519150601f19603f3d011682016040523d82523d6000602084013e6105bf565b606091505b508684815181106105d2576105d2610c61565b602090810291909101015290508061062c5760405162461bcd60e51b815260206004820152601660248201527f4d756c746963616c6c3a2063616c6c206661696c65640000000000000000000060448201526064016104a6565b5060010161050f565b5050509250929050565b438040606061064f8686866107ef565b905093509350939050565b6060818067ffffffffffffffff81111561067657610676610c4b565b6040519080825280602002602001820160405280156106bc57816020015b6040805180820190915260008152606060208201528152602001906001900390816106945790505b5091503660005b828110156104af5760008482815181106106df576106df610c61565b602002602001015190508686838181106106fb576106fb610c61565b905060200281019061070d9190610d04565b925061071c6020840184610bfc565b73ffffffffffffffffffffffffffffffffffffffff1661073f6040850185610c97565b60405161074d929190610cde565b6000604051808303816000865af19150503d806000811461078a576040519150601f19603f3d011682016040523d82523d6000602084013e61078f565b606091505b5060208084019190915290151580835290840135176107e65762461bcd60e51b600052602060045260176024527f4d756c746963616c6c333a2063616c6c206661696c656400000000000000000060445260646000fd5b506001016106c3565b6060818067ffffffffffffffff81111561080b5761080b610c4b565b60405190808252806020026020018201604052801561085157816020015b6040805180820190915260008152606060208201528152602001906001900390816108295790505b5091503660005b8281101561098b57600084828151811061087457610874610c61565b6020026020010151905086868381811061089057610890610c61565b90506020028101906108a29190610cee565b92506108b16020840184610bfc565b73ffffffffffffffffffffffffffffffffffffffff166108d46020850185610c97565b6040516108e2929190610cde565b6000604051808303816000865af19150503d806000811461091f576040519150601f19603f3d011682016040523d82523d6000602084013e610924565b606091505b5060208301521515815287156109825780516109825760405162461bcd60e51b815260206004820152601660248201527f4d756c746963616c6c3a2063616c6c206661696c65640000000000000000000060448201526064016104a6565b50600101610858565b5050509392505050565b60008060606109a66001868661063f565b919790965090945092505050565b60008083601f8401126109c657600080fd5b50813567ffffffffffffffff8111156109de57600080fd5b6020830191508360208260051b85010111156109f957600080fd5b9250929050565b60008060208385031215610a1357600080fd5b823567ffffffffffffffff811115610a2a57600080fd5b610a36858286016109b4565b90969095509350505050565b6000815180845260005b81811015610a6857602081850181015186830182015201610a4c565b506000602082860101526020601f19601f83011685010191505092915050565b600082825180855260208086019550808260051b84010181860160005b84811015610ae957858303601f1901895281518051151584528401516040858501819052610ad581860183610a42565b9a86019a9450505090830190600101610aa5565b5090979650505050505050565b602081526000610b096020830184610a88565b9392505050565b600060408201848352602060408185015281855180845260608601915060608160051b870101935082870160005b82811015610b6c57605f19888703018452610b5a868351610a42565b95509284019290840190600101610b3e565b509398975050505050505050565b600080600060408486031215610b8f57600080fd5b83358015158114610b9f57600080fd5b9250602084013567ffffffffffffffff811115610bbb57600080fd5b610bc7868287016109b4565b9497909650939450505050565b838152826020820152606060408201526000610bf36060830184610a88565b95945050505050565b600060208284031215610c0e57600080fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114610b0957600080fd5b600060208284031215610c4457600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60008235607e19833603018112610c8d57600080fd5b9190910192915050565b6000808335601e19843603018112610cae57600080fd5b83018035915067ffffffffffffffff821115610cc957600080fd5b6020019150368190038213156109f957600080fd5b8183823760009101908152919050565b60008235603e19833603018112610c8d57600080fd5b60008235605e19833603018112610c8d57600080fdfea2646970667358221220b85968f515fa8ce6d392ed552c884074e9d1b9a9e23cc3ea96b4a58ed722955964736f6c63430008110033",
  "deployedBytecode": "0x60806040526004361061010e5760003560e01c80634d2301cc116100a5578063a8b0574e11610074578063c3077fa911610059578063c3077fa914610285578063ee82ac5e14610298578063f8b2cb4f146101e957600080fd5b8063a8b0574e14610257578063bce38bd71461027257600080fd5b80634d2301cc146101e957806372425d9d1461021e57806382ad56cb1461023157806386d516e81461024457600080fd5b80633408e470116100e15780633408e4701461018e578063399542e9146101a15780633e64a696146101c357806342cbb15c146101d657600080fd5b80630f28c97d14610113578063174dea7114610135578063252dba421461015557806327e86d6e14610176575b600080fd5b34801561011f57600080fd5b50425b6040519081526020015b60405180910390f35b610148610143366004610a00565b6102b7565b60405161012c9190610af6565b610168610163366004610a00565b6104b8565b60405161012c929190610b10565b34801561018257600080fd5b50436000190140610122565b34801561019a57600080fd5b5046610122565b6101b46101af366004610b7a565b61063f565b60405161012c93929190610bd4565b3480156101cf57600080fd5b5048610122565b3480156101e257600080fd5b5043610122565b3480156101f557600080fd5b50610122610204366004610bfc565b73ffffffffffffffffffffffffffffffffffffffff163190565b34801561022a57600080fd5b5044610122565b61014861023f366004610a00565b61065a565b34801561025057600080fd5b5045610122565b34801561026357600080fd5b5060405141815260200161012c565b610148610280366004610b7a565b6107ef565b6101b4610293366004610a00565b610995565b3480156102a457600080fd5b506101226102b3366004610c32565b4090565b60606000828067ffffffffffffffff8111156102d5576102d5610c4b565b60405190808252806020026020018201604052801561031b57816020015b6040805180820190915260008152606060208201528152602001906001900390816102f35790505b5092503660005b8281101561045a57600085828151811061033e5761033e610c61565b6020026020010151905087878381811061035a5761035a610c61565b905060200281019061036c9190610c77565b6040810135958601959093506103856020850185610bfc565b73ffffffffffffffffffffffffffffffffffffffff16816103a96060870187610c97565b6040516103b7929190610cde565b60006040518083038185875af1925050503d80600081146103f4576040519150601f19603f3d011682016040523d82523d6000602084013e6103f9565b606091505b5060208085019190915290151580845290850135176104505762461bcd60e51b600052602060045260176024527f4d756c746963616c6c333a2063616c6c206661696c656400000000000000000060445260846000fd5b5050600101610322565b508234146104af5760405162461bcd60e51b815260206004820152601960248201527f4d756c746963616c6c3a2076616c7565206d69736d617463680000000000000060448201526064015b60405180910390fd5b50505092915050565b436060828067ffffffffffffffff8111156104d5576104d5610c4b565b60405190808252806020026020018201604052801561050857816020015b60608152602001906001900390816104f35790505b5091503660005b8281101561063557600087878381811061052b5761052b610c61565b905060200281019061053d9190610cee565b925061054c6020840184610bfc565b73ffffffffffffffffffffffffffffffffffffffff1661056f6020850185610c97565b60405161057d929190610cde565b6000604051808303816000865af19150503d80600081146105ba576040519150601f19603f3d011682016040523d82523d6000602084013e6105bf565b606091505b508684815181106105d2576105d2610c61565b602090810291909101015290508061062c5760405162461bcd60e51b815260206004820152601660248201527f4d756c746963616c6c3a2063616c6c206661696c65640000000000000000000060448201526064016104a6565b5060010161050f565b5050509250929050565b438040606061064f8686866107ef565b905093509350939050565b6060818067ffffffffffffffff81111561067657610676610c4b565b6040519080825280602002602001820160405280156106bc57816020015b6040805180820190915260008152606060208201528152602001906001900390816106945790505b5091503660005b828110156104af5760008482815181106106df576106df610c61565b602002602001015190508686838181106106fb576106fb610c61565b905060200281019061070d9190610d04565b925061071c6020840184610bfc565b73ffffffffffffffffffffffffffffffffffffffff1661073f6040850185610c97565b60405161074d929190610cde565b6000604051808303816000865af19150503d806000811461078a576040519150601f19603f3d011682016040523d82523d6000602084013e61078f565b606091505b5060208084019190915290151580835290840135176107e65762461bcd60e51b600052602060045260176024527f4d756c746963616c6c333a2063616c6c206661696c656400000000000000000060445260646000fd5b506001016106c3565b6060818067ffffffffffffffff81111561080b5761080b610c4b565b60405190808252806020026020018201604052801561085157816020015b6040805180820190915260008152606060208201528152602001906001900390816108295790505b5091503660005b8281101561098b57600084828151811061087457610874610c61565b6020026020010151905086868381811061089057610890610c61565b90506020028101906108a29190610cee565b92506108b16020840184610bfc565b73ffffffffffffffffffffffffffffffffffffffff166108d46020850185610c97565b6040516108e2929190610cde565b6000604051808303816000865af19150503d806000811461091f576040519150601f19603f3d011682016040523d82523d6000602084013e610924565b606091505b5060208301521515815287156109825780516109825760405162461bcd60e51b815260206004820152601660248201527f4d756c746963616c6c3a2063616c6c206661696c65640000000000000000000060448201526064016104a6565b50600101610858565b5050509392505050565b60008060606109a66001868661063f565b919790965090945092505050565b60008083601f8401126109c657600080fd5b50813567ffffffffffffffff8111156109de57600080fd5b6020830191508360208260051b85010111156109f957600080fd5b9250929050565b60008060208385031215610a1357600080fd5b823567ffffffffffffffff811115610a2a57600080fd5b610a36858286016109b4565b90969095509350505050565b6000815180845260005b81811015610a6857602081850181015186830182015201610a4c565b506000602082860101526020601f19601f83011685010191505092915050565b600082825180855260208086019550808260051b84010181860160005b84811015610ae957858303601f1901895281518051151584528401516040858501819052610ad581860183610a42565b9a86019a9450505090830190600101610aa5565b5090979650505050505050565b602081526000610b096020830184610a88565b9392505050565b600060408201848352602060408185015281855180845260608601915060608160051b870101935082870160005b82811015610b6c57605f19888703018452610b5a868351610a42565b95509284019290840190600101610b3e565b509398975050505050505050565b600080600060408486031215610b8f57600080fd5b83358015158114610b9f57600080fd5b9250602084013567ffffffffffffffff811115610bbb57600080fd5b610bc7868287016109b4565b9497909650939450505050565b838152826020820152606060408201526000610bf36060830184610a88565b95945050505050565b600060208284031215610c0e57600080fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114610b0957600080fd5b600060208284031215610c4457600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60008235607e19833603018112610c8d57600080fd5b9190910192915050565b6000808335601e19843603018112610cae57600080fd5b83018035915067ffffffffffffffff821115610cc957600080fd5b6020019150368190038213156109f957600080fd5b8183823760009101908152919050565b60008235603e19833603018112610c8d57600080fd5b60008235605e19833603018112610c8d57600080fdfea2646970667358221220b85968f515fa8ce6d392ed552c884074e9d1b9a9e23cc3ea96b4a58ed722955964736f6c63430008110033",
  "devdoc": {
    "author": "Michael Elliot <mike@makerdao.com>Joshua Levine <joshua@makerdao.com>Nick Johnson <arachnid@notdot.net>Andreas Bigger <andreas@nascent.xyz>Matt Solomon <matt@mattsolomon.dev>",
    "details": "Multicall & Multicall2 backwards-compatibleAggregate methods are marked `payable` to save 24 gas per call",
    "kind": "dev",
    "methods": {
      "aggregate((address,bytes)[])": {
        "params": {
          "calls": "An array of Call structs"
        },
        "returns": {
          "blockNumber": "The block number where the calls were executed",
          "returnData": "An array of bytes containing the responses"
        }
      },
      "aggregate3((address,bool,bytes)[])": {
        "params": {
          "calls": "An array of Call3 structs"
        },
        "returns": {
          "returnData": "An array of Result structs"
        }
      },
      "aggregate3Value((address,bool,uint256,bytes)[])": {
        "params": {
          "calls": "An array of Call3Value structs"
        },
        "returns": {
          "returnData": "An array of Result structs"
        }
      },
      "blockAndAggregate((address,bytes)[])": {
        "params": {
          "calls": "An array of Call structs"
        },
        "returns": {
          "blockHash": "The hash of the block where the calls were executed",
          "blockNumber": "The block number where the calls were executed",
          "returnData": "An array of Result structs"
        }
      },
      "getBlockHash(uint256)": {
        "params": {
          "blockNumber": "The block number"
        }
      },
      "tryAggregate(bool,(address,bytes)[])": {
        "params": {
          "calls": "An array of Call structs",
          "requireSuccess": "If true, require all calls to succeed"
        },
        "returns": {
          "returnData": "An array of Result structs"
        }
      },
      "tryBlockAndAggregate(bool,(address,bytes)[])": {
        "params": {
          "calls": "An array of Call structs"
        },
        "returns": {
          "blockHash": "The hash of the block where the calls were executed",
          "blockNumber": "The block number where the calls were executed",
          "returnData": "An array of Result structs"
        }
      }
    },
    "title": "Multicall",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "aggregate((address,bytes)[])": {
        "notice": "Backwards-compatible call aggregation with Multicall"
      },
      "aggregate3((address,bool,bytes)[])": {
        "notice": "Aggregate calls, ensuring each returns success if required"
      },
      "aggregate3Value((address,bool,uint256,bytes)[])": {
        "notice": "Aggregate calls with a msg valueReverts if msg.value is less than the sum of the call values"
      },
      "blockAndAggregate((address,bytes)[])": {
        "notice": "Backwards-compatible with Multicall2Aggregate calls and allow failures using tryAggregate"
      },
      "getBasefee()": {
        "notice": "Gets the base fee of the given blockCan revert if the BASEFEE opcode is not implemented by the given chain"
      },
      "getBlockHash(uint256)": {
        "notice": "Returns the block hash for the given block number"
      },
      "getBlockNumber()": {
        "notice": "Returns the block number"
      },
      "getChainId()": {
        "notice": "Returns the chain id"
      },
      "getCurrentBlockCoinbase()": {
        "notice": "Returns the block coinbase"
      },
      "getCurrentBlockDifficulty()": {
        "notice": "Returns the block difficulty"
      },
      "getCurrentBlockGasLimit()": {
        "notice": "Returns the block gas limit"
      },
      "getCurrentBlockTimestamp()": {
        "notice": "Returns the block timestamp"
      },
      "getEthBalance(address)": {
        "notice": "Returns the (FIL) balance of a given address"
      },
      "getLastBlockHash()": {
        "notice": "Returns the block hash of the last block"
      },
      "tryAggregate(bool,(address,bytes)[])": {
        "notice": "Backwards-compatible with Multicall2Aggregate calls without requiring success"
      },
      "tryBlockAndAggregate(bool,(address,bytes)[])": {
        "notice": "Backwards-compatible with Multicall2Aggregate calls and allow failures using tryAggregate"
      }
    },
    "notice": "Aggregate results from multiple function calls",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}