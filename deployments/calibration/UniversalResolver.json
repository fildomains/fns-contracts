{
  "address": "0x75e34A6A1E3C9cb4dD015e4EbBF5609A9cfaCf54",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_registry",
          "type": "address"
        },
        {
          "internalType": "string[]",
          "name": "_urls",
          "type": "string[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "string[]",
          "name": "urls",
          "type": "string[]"
        },
        {
          "internalType": "bytes",
          "name": "callData",
          "type": "bytes"
        },
        {
          "internalType": "bytes4",
          "name": "callbackFunction",
          "type": "bytes4"
        },
        {
          "internalType": "bytes",
          "name": "extraData",
          "type": "bytes"
        }
      ],
      "name": "OffchainLookup",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "name",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "string[]",
          "name": "gateways",
          "type": "string[]"
        },
        {
          "internalType": "bytes4",
          "name": "callbackFunction",
          "type": "bytes4"
        },
        {
          "internalType": "bytes",
          "name": "metaData",
          "type": "bytes"
        }
      ],
      "name": "_resolveSingle",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "batchGatewayURLs",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "name",
          "type": "bytes"
        }
      ],
      "name": "findResolver",
      "outputs": [
        {
          "internalType": "contract Resolver",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registry",
      "outputs": [
        {
          "internalType": "contract FNS",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "name",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "string[]",
          "name": "gateways",
          "type": "string[]"
        }
      ],
      "name": "resolve",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "name",
          "type": "bytes"
        },
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "resolve",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "",
          "type": "bytes[]"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "name",
          "type": "bytes"
        },
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        },
        {
          "internalType": "string[]",
          "name": "gateways",
          "type": "string[]"
        }
      ],
      "name": "resolve",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "",
          "type": "bytes[]"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "name",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "resolve",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "response",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "extraData",
          "type": "bytes"
        }
      ],
      "name": "resolveCallback",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "",
          "type": "bytes[]"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "response",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "extraData",
          "type": "bytes"
        }
      ],
      "name": "resolveSingleCallback",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "reverseName",
          "type": "bytes"
        },
        {
          "internalType": "string[]",
          "name": "gateways",
          "type": "string[]"
        }
      ],
      "name": "reverse",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "reverseName",
          "type": "bytes"
        }
      ],
      "name": "reverse",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "response",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "extraData",
          "type": "bytes"
        }
      ],
      "name": "reverseCallback",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "_urls",
          "type": "string[]"
        }
      ],
      "name": "setGatewayURLs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4b06fd8cf3813b7b4df61891c7add5e88ecbced0b80094825c3efcb3abe9cda0",
  "receipt": {
    "to": null,
    "from": "0x69b67e3ABA57dEC064483e172b8cB44c03DA9549",
    "contractAddress": "0x75e34A6A1E3C9cb4dD015e4EbBF5609A9cfaCf54",
    "transactionIndex": 0,
    "gasUsed": "100090290",
    "logsBloom": "0x8008088010000001000002000000212000000080150022228180204058401040000010820000000040820005000804088000402000015000540804000012a05100002088880a00004800244a02b00400090101200500104804052015000000800802004002080800000001020302c800028000200029100800000098001290600001000000600002110144020080000000000080018008200004800045c0480020029000010a00000800881284210800000400000000080100800024000000000102011221a001004012002000005000401001000088002450400000024020504001000f40010240001200060001010500200000019002049100090210000400",
    "blockHash": "0x0b222d918c7ecaaad014818e6b10f8819a20b3463001500e4471f68371df56f3",
    "transactionHash": "0x4b06fd8cf3813b7b4df61891c7add5e88ecbced0b80094825c3efcb3abe9cda0",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 494075,
        "transactionHash": "0x4b06fd8cf3813b7b4df61891c7add5e88ecbced0b80094825c3efcb3abe9cda0",
        "address": "0x75e34A6A1E3C9cb4dD015e4EbBF5609A9cfaCf54",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000069b67e3aba57dec064483e172b8cb44c03da9549"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x0b222d918c7ecaaad014818e6b10f8819a20b3463001500e4471f68371df56f3"
      }
    ],
    "blockNumber": 494075,
    "cumulativeGasUsed": "0",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0000000000Ec577Ad90e99CA7817e976e953C3bd",
    [
      "https://universal.fildomains.com"
    ]
  ],
  "numDeployments": 1,
  "solcInputHash": "94c511ccef30681c8028349b05f9c84f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"_urls\",\"type\":\"string[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"urls\",\"type\":\"string[]\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"bytes4\",\"name\":\"callbackFunction\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"OffchainLookup\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"string[]\",\"name\":\"gateways\",\"type\":\"string[]\"},{\"internalType\":\"bytes4\",\"name\":\"callbackFunction\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"metaData\",\"type\":\"bytes\"}],\"name\":\"_resolveSingle\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"batchGatewayURLs\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"}],\"name\":\"findResolver\",\"outputs\":[{\"internalType\":\"contract Resolver\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract FNS\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"string[]\",\"name\":\"gateways\",\"type\":\"string[]\"}],\"name\":\"resolve\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"resolve\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"\",\"type\":\"bytes[]\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"},{\"internalType\":\"string[]\",\"name\":\"gateways\",\"type\":\"string[]\"}],\"name\":\"resolve\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"\",\"type\":\"bytes[]\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"resolve\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"resolveCallback\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"\",\"type\":\"bytes[]\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"resolveSingleCallback\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"reverseName\",\"type\":\"bytes\"},{\"internalType\":\"string[]\",\"name\":\"gateways\",\"type\":\"string[]\"}],\"name\":\"reverse\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"reverseName\",\"type\":\"bytes\"}],\"name\":\"reverse\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"reverseCallback\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_urls\",\"type\":\"string[]\"}],\"name\":\"setGatewayURLs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"findResolver(bytes)\":{\"details\":\"Finds a resolver by recursively querying the registry, starting at the longest name and progressively      removing labels until it finds a result.\",\"params\":{\"name\":\"The name to resolve, in DNS-encoded and normalised form.\"},\"returns\":{\"_0\":\"The Resolver responsible for this name, and the namehash of the full name.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"resolve(bytes,bytes)\":{\"details\":\"Performs FNS name resolution for the supplied name and resolution data.\",\"params\":{\"data\":\"The resolution data, as specified in ENSIP-10.\",\"name\":\"The name to resolve, in normalised and DNS-encoded form.\"},\"returns\":{\"_0\":\"The result of resolving the name.\"}},\"reverse(bytes,string[])\":{\"details\":\"Performs FNS name reverse resolution for the supplied reverse name.\",\"params\":{\"reverseName\":\"The reverse name to resolve, in normalised and DNS-encoded form. e.g. b6E040C9ECAaE172a89bD561c5F73e1C48d28cd9.addr.reverse\"},\"returns\":{\"_0\":\"The resolved name, the resolved address, the reverse resolver address, and the resolver address.\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"The Universal Resolver is a contract that handles the work of resolving a name entirely onchain, making it possible to make a single smart contract call to resolve an FNS name.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/utils/UniversalResolver.sol\":\"UniversalResolver\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1500},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/registry/FNS.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface FNS {\\n    // Logged when the owner of a node assigns a new owner to a subnode.\\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n    // Logged when the owner of a node transfers ownership to a new account.\\n    event Transfer(bytes32 indexed node, address owner);\\n\\n    // Logged when the resolver for a node changes.\\n    event NewResolver(bytes32 indexed node, address resolver);\\n\\n    // Logged when the TTL of a node changes\\n    event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n    // Logged when an operator is added or removed.\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n\\n    function setRecord(\\n        bytes32 node,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeRecord(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeOwner(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner\\n    ) external returns (bytes32);\\n\\n    function setResolver(bytes32 node, address resolver) external;\\n\\n    function setOwner(bytes32 node, address owner) external;\\n\\n    function setTTL(bytes32 node, uint64 ttl) external;\\n\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    function owner(bytes32 node) external view returns (address);\\n\\n    function resolver(bytes32 node) external view returns (address);\\n\\n    function ttl(bytes32 node) external view returns (uint64);\\n\\n    function recordExists(bytes32 node) external view returns (bool);\\n\\n    function isApprovedForAll(\\n        address owner,\\n        address operator\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x8efba8a5dadf389cb81128766eb094397e84a7993bff2d656e9006ec6ed5cade\",\"license\":\"MIT\"},\"contracts/resolvers/Resolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport \\\"./profiles/IABIResolver.sol\\\";\\nimport \\\"./profiles/IAddressResolver.sol\\\";\\nimport \\\"./profiles/IAddrResolver.sol\\\";\\nimport \\\"./profiles/IContentHashResolver.sol\\\";\\nimport \\\"./profiles/IDNSRecordResolver.sol\\\";\\nimport \\\"./profiles/IDNSZoneResolver.sol\\\";\\nimport \\\"./profiles/IInterfaceResolver.sol\\\";\\nimport \\\"./profiles/INameResolver.sol\\\";\\nimport \\\"./profiles/IPubkeyResolver.sol\\\";\\nimport \\\"./profiles/ITextResolver.sol\\\";\\nimport \\\"./profiles/IExtendedResolver.sol\\\";\\n\\n/**\\n * A generic resolver interface which includes all the functions including the ones deprecated\\n */\\ninterface Resolver is\\n    IERC165,\\n    IABIResolver,\\n    IAddressResolver,\\n    IAddrResolver,\\n    IContentHashResolver,\\n    IDNSRecordResolver,\\n    IDNSZoneResolver,\\n    IInterfaceResolver,\\n    INameResolver,\\n    IPubkeyResolver,\\n    ITextResolver,\\n    IExtendedResolver\\n{\\n    /* Deprecated events */\\n    event ContentChanged(bytes32 indexed node, bytes32 hash);\\n\\n    function setApprovalForAll(address, bool) external;\\n\\n    function approve(bytes32 node, address delegate, bool approved) external;\\n\\n    function isApprovedForAll(address account, address operator) external;\\n\\n    function isApprovedFor(\\n        address owner,\\n        bytes32 node,\\n        address delegate\\n    ) external;\\n\\n    function setABI(\\n        bytes32 node,\\n        uint256 contentType,\\n        bytes calldata data\\n    ) external;\\n\\n    function setAddr(bytes32 node, address addr) external;\\n\\n    function setAddr(bytes32 node, uint256 coinType, bytes calldata a) external;\\n\\n    function setContenthash(bytes32 node, bytes calldata hash) external;\\n\\n    function setDnsrr(bytes32 node, bytes calldata data) external;\\n\\n    function setName(bytes32 node, string calldata _name) external;\\n\\n    function setPubkey(bytes32 node, bytes32 x, bytes32 y) external;\\n\\n    function setText(\\n        bytes32 node,\\n        string calldata key,\\n        string calldata value\\n    ) external;\\n\\n    function setInterface(\\n        bytes32 node,\\n        bytes4 interfaceID,\\n        address implementer\\n    ) external;\\n\\n    function multicall(\\n        bytes[] calldata data\\n    ) external returns (bytes[] memory results);\\n\\n    function multicallWithNodeCheck(\\n        bytes32 nodehash,\\n        bytes[] calldata data\\n    ) external returns (bytes[] memory results);\\n\\n    /* Deprecated functions */\\n    function content(bytes32 node) external view returns (bytes32);\\n\\n    function multihash(bytes32 node) external view returns (bytes memory);\\n\\n    function setContent(bytes32 node, bytes32 hash) external;\\n\\n    function setMultihash(bytes32 node, bytes calldata hash) external;\\n}\\n\",\"keccak256\":\"0xd499b7529f8a1c8d28d3b8ec0f6a1f0b22f43f9fe9c5a82f53a5d95d1170f884\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IABIResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IABIResolver {\\n    event ABIChanged(bytes32 indexed node, uint256 indexed contentType);\\n\\n    /**\\n     * Returns the ABI associated with an FNS node.\\n     * Defined in EIP205.\\n     * @param node The FNS node to query\\n     * @param contentTypes A bitwise OR of the ABI formats accepted by the caller.\\n     * @return contentType The content type of the return value\\n     * @return data The ABI data\\n     */\\n    function ABI(\\n        bytes32 node,\\n        uint256 contentTypes\\n    ) external view returns (uint256, bytes memory);\\n}\\n\",\"keccak256\":\"0xa2fb5f26614d2512efa21912aeca44a2697ea433bef725c93d45829e28b11463\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IAddrResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\n/**\\n * Interface for the legacy (FIL-only) addr function.\\n */\\ninterface IAddrResolver {\\n    event AddrChanged(bytes32 indexed node, address a);\\n\\n    /**\\n     * Returns the address associated with an FNS node.\\n     * @param node The FNS node to query.\\n     * @return The associated address.\\n     */\\n    function addr(bytes32 node) external view returns (address payable);\\n}\\n\",\"keccak256\":\"0x64fb1021de16d6d975ea7bb00da3c0c47a4af49cd69f1f7fc3738ee4b9af228f\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\n/**\\n * Interface for the new (multicoin) addr function.\\n */\\ninterface IAddressResolver {\\n    event AddressChanged(\\n        bytes32 indexed node,\\n        uint256 coinType,\\n        bytes newAddress\\n    );\\n\\n    function addr(\\n        bytes32 node,\\n        uint256 coinType\\n    ) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x96ed1c766ab5d154f879a091659e9bf7251b28f620b0918630a0096eeb5e936b\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IContentHashResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IContentHashResolver {\\n    event ContenthashChanged(bytes32 indexed node, bytes hash);\\n\\n    /**\\n     * Returns the contenthash associated with an FNS node.\\n     * @param node The FNS node to query.\\n     * @return The associated contenthash.\\n     */\\n    function contenthash(bytes32 node) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xa9e68eb4eeee9fd5f2b39f80d03523b256d9893d399f6156793fd8ae9648e55d\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IDNSRecordResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IDNSRecordResolver {\\n    // DNSRecordChanged is emitted whenever a given node/name/resource's RRSET is updated.\\n    event DNSRecordChanged(\\n        bytes32 indexed node,\\n        bytes name,\\n        uint16 resource,\\n        bytes record\\n    );\\n    // DNSRecordDeleted is emitted whenever a given node/name/resource's RRSET is deleted.\\n    event DNSRecordDeleted(bytes32 indexed node, bytes name, uint16 resource);\\n\\n    /**\\n     * Obtain a DNS record.\\n     * @param node the namehash of the node for which to fetch the record\\n     * @param name the keccak-256 hash of the fully-qualified name for which to fetch the record\\n     * @param resource the ID of the resource as per https://en.wikipedia.org/wiki/List_of_DNS_record_types\\n     * @return the DNS record in wire format if present, otherwise empty\\n     */\\n    function dnsRecord(\\n        bytes32 node,\\n        bytes32 name,\\n        uint16 resource\\n    ) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xbfe8e6da16dd47f33ca22216d10e9a94225cc35475875e6409cee28b42928616\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IDNSZoneResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IDNSZoneResolver {\\n    // DNSZonehashChanged is emitted whenever a given node's zone hash is updated.\\n    event DNSZonehashChanged(\\n        bytes32 indexed node,\\n        bytes lastzonehash,\\n        bytes zonehash\\n    );\\n\\n    /**\\n     * zonehash obtains the hash for the zone.\\n     * @param node The FNS node to query.\\n     * @return The associated contenthash.\\n     */\\n    function zonehash(bytes32 node) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x56cb34c7aab6284b6bd1f8ade8c5d1611e313eb9730135416cb2a906c3ee85f6\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IExtendedResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IExtendedResolver {\\n    function resolve(\\n        bytes memory name,\\n        bytes memory data\\n    ) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x1a2d3c378d19872162fa312f5e4c3bd9698412171b13a1fdd532a87bd2358861\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IInterfaceResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IInterfaceResolver {\\n    event InterfaceChanged(\\n        bytes32 indexed node,\\n        bytes4 indexed interfaceID,\\n        address implementer\\n    );\\n\\n    /**\\n     * Returns the address of a contract that implements the specified interface for this name.\\n     * If an implementer has not been set for this interfaceID and name, the resolver will query\\n     * the contract at `addr()`. If `addr()` is set, a contract exists at that address, and that\\n     * contract implements EIP165 and returns `true` for the specified interfaceID, its address\\n     * will be returned.\\n     * @param node The FNS node to query.\\n     * @param interfaceID The EIP 165 interface ID to check for.\\n     * @return The address that implements this interface, or 0 if the interface is unsupported.\\n     */\\n    function interfaceImplementer(\\n        bytes32 node,\\n        bytes4 interfaceID\\n    ) external view returns (address);\\n}\\n\",\"keccak256\":\"0xc366c7fd8f61adfacbccc08c207f877bf717d24c6a54d15c85f4799b76a834a4\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/INameResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface INameResolver {\\n    event NameChanged(bytes32 indexed node, string name);\\n\\n    /**\\n     * Returns the name associated with an FNS node, for reverse records.\\n     * Defined in EIP181.\\n     * @param node The FNS node to query.\\n     * @return The associated name.\\n     */\\n    function name(bytes32 node) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xaefe2a252ad3c44effe953265786f2217499027f3b0fbdf35e936793d474594f\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IPubkeyResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IPubkeyResolver {\\n    event PubkeyChanged(bytes32 indexed node, bytes32 x, bytes32 y);\\n\\n    /**\\n     * Returns the SECP256k1 public key associated with an FNS node.\\n     * Defined in EIP 619.\\n     * @param node The FNS node to query\\n     * @return x The X coordinate of the curve point for the public key.\\n     * @return y The Y coordinate of the curve point for the public key.\\n     */\\n    function pubkey(bytes32 node) external view returns (bytes32 x, bytes32 y);\\n}\\n\",\"keccak256\":\"0x521b7af848d0bcb57b078ccb6a485883007b8e624b5de3ffb2b97d1e5d23a384\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/ITextResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface ITextResolver {\\n    event TextChanged(\\n        bytes32 indexed node,\\n        string indexed indexedKey,\\n        string key,\\n        string value\\n    );\\n\\n    /**\\n     * Returns the text data associated with an FNS node and key.\\n     * @param node The FNS node to query.\\n     * @param key The text data key to query.\\n     * @return The associated text data.\\n     */\\n    function text(\\n        bytes32 node,\\n        string calldata key\\n    ) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x9a27422a7f2e72af119d172023122b0f37fdb7db418ee346dbc403def54d364a\",\"license\":\"MIT\"},\"contracts/utils/HexUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nlibrary HexUtils {\\n    /**\\n     * @dev Attempts to parse bytes32 from a hex string\\n     * @param str The string to parse\\n     * @param idx The offset to start parsing at\\n     * @param lastIdx The (exclusive) last index in `str` to consider. Use `str.length` to scan the whole string.\\n     */\\n    function hexStringToBytes32(\\n        bytes memory str,\\n        uint256 idx,\\n        uint256 lastIdx\\n    ) internal pure returns (bytes32 r, bool valid) {\\n        valid = true;\\n        assembly {\\n            // check that the index to read to is not past the end of the string\\n            if gt(lastIdx, mload(str)) {\\n                revert(0, 0)\\n            }\\n\\n            function getHex(c) -> ascii {\\n                // chars 48-57: 0-9\\n                if and(gt(c, 47), lt(c, 58)) {\\n                    ascii := sub(c, 48)\\n                    leave\\n                }\\n                // chars 65-70: A-F\\n                if and(gt(c, 64), lt(c, 71)) {\\n                    ascii := add(sub(c, 65), 10)\\n                    leave\\n                }\\n                // chars 97-102: a-f\\n                if and(gt(c, 96), lt(c, 103)) {\\n                    ascii := add(sub(c, 97), 10)\\n                    leave\\n                }\\n                // invalid char\\n                ascii := 0xff\\n            }\\n\\n            let ptr := add(str, 32)\\n            for {\\n                let i := idx\\n            } lt(i, lastIdx) {\\n                i := add(i, 2)\\n            } {\\n                let byte1 := getHex(byte(0, mload(add(ptr, i))))\\n                let byte2 := getHex(byte(0, mload(add(ptr, add(i, 1)))))\\n                // if either byte is invalid, set invalid and break loop\\n                if or(eq(byte1, 0xff), eq(byte2, 0xff)) {\\n                    valid := false\\n                    break\\n                }\\n                let combined := or(shl(4, byte1), byte2)\\n                r := or(shl(8, r), combined)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to parse an address from a hex string\\n     * @param str The string to parse\\n     * @param idx The offset to start parsing at\\n     * @param lastIdx The (exclusive) last index in `str` to consider. Use `str.length` to scan the whole string.\\n     */\\n    function hexToAddress(\\n        bytes memory str,\\n        uint256 idx,\\n        uint256 lastIdx\\n    ) internal pure returns (address, bool) {\\n        if (lastIdx - idx < 40) return (address(0x0), false);\\n        (bytes32 r, bool valid) = hexStringToBytes32(str, idx, lastIdx);\\n        return (address(uint160(uint256(r))), valid);\\n    }\\n}\\n\",\"keccak256\":\"0xc4315674424f4f8e838ac23e65aa6aa7184d43dc59afe6a188071c09eac1a7b1\",\"license\":\"MIT\"},\"contracts/utils/LowLevelCallUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nlibrary LowLevelCallUtils {\\n    using Address for address;\\n\\n    /**\\n     * @dev Makes a static call to the specified `target` with `data`. Return data can be fetched with\\n     *      `returnDataSize` and `readReturnData`.\\n     * @param target The address to staticcall.\\n     * @param data The data to pass to the call.\\n     * @return success True if the call succeeded, or false if it reverts.\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data\\n    ) internal view returns (bool success) {\\n        require(\\n            target.isContract(),\\n            \\\"LowLevelCallUtils: static call to non-contract\\\"\\n        );\\n        assembly {\\n            success := staticcall(\\n                gas(),\\n                target,\\n                add(data, 32),\\n                mload(data),\\n                0,\\n                0\\n            )\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the size of the return data of the most recent external call.\\n     */\\n    function returnDataSize() internal pure returns (uint256 len) {\\n        assembly {\\n            len := returndatasize()\\n        }\\n    }\\n\\n    /**\\n     * @dev Reads return data from the most recent external call.\\n     * @param offset Offset into the return data.\\n     * @param length Number of bytes to return.\\n     */\\n    function readReturnData(\\n        uint256 offset,\\n        uint256 length\\n    ) internal pure returns (bytes memory data) {\\n        data = new bytes(length);\\n        assembly {\\n            returndatacopy(add(data, 32), offset, length)\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with the return data from the most recent external call.\\n     */\\n    function propagateRevert() internal pure {\\n        assembly {\\n            returndatacopy(0, 0, returndatasize())\\n            revert(0, returndatasize())\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6fa6959fa88bdc1cb3aa7a1dd4f6c27593948c0a7ee617f95ac7701464901918\",\"license\":\"MIT\"},\"contracts/utils/NameEncoder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport {BytesUtils} from \\\"../wrapper/BytesUtils.sol\\\";\\n\\nlibrary NameEncoder {\\n    using BytesUtils for bytes;\\n\\n    function dnsEncodeName(\\n        string memory name\\n    ) internal pure returns (bytes memory dnsName, bytes32 node) {\\n        uint8 labelLength = 0;\\n        bytes memory bytesName = bytes(name);\\n        uint256 length = bytesName.length;\\n        dnsName = new bytes(length + 2);\\n        node = 0;\\n        if (length == 0) {\\n            dnsName[0] = 0;\\n            return (dnsName, node);\\n        }\\n\\n        // use unchecked to save gas since we check for an underflow\\n        // and we check for the length before the loop\\n        unchecked {\\n            for (uint256 i = length - 1; i >= 0; i--) {\\n                if (bytesName[i] == \\\".\\\") {\\n                    dnsName[i + 1] = bytes1(labelLength);\\n                    node = keccak256(\\n                        abi.encodePacked(\\n                            node,\\n                            bytesName.keccak(i + 1, labelLength)\\n                        )\\n                    );\\n                    labelLength = 0;\\n                } else {\\n                    labelLength += 1;\\n                    dnsName[i + 1] = bytesName[i];\\n                }\\n                if (i == 0) {\\n                    break;\\n                }\\n            }\\n        }\\n\\n        node = keccak256(\\n            abi.encodePacked(node, bytesName.keccak(0, labelLength))\\n        );\\n\\n        dnsName[0] = bytes1(labelLength);\\n        return (dnsName, node);\\n    }\\n}\\n\",\"keccak256\":\"0x0675ce78bb00fbf0221bc17ae32256f3b43aef91d0c11c8821d04c53168dc0d0\",\"license\":\"MIT\"},\"contracts/utils/UniversalResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.17 <0.9.0;\\n\\nimport {ERC165} from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {LowLevelCallUtils} from \\\"./LowLevelCallUtils.sol\\\";\\nimport {FNS} from \\\"../registry/FNS.sol\\\";\\nimport {IExtendedResolver} from \\\"../resolvers/profiles/IExtendedResolver.sol\\\";\\nimport {Resolver, INameResolver, IAddrResolver} from \\\"../resolvers/Resolver.sol\\\";\\nimport {NameEncoder} from \\\"./NameEncoder.sol\\\";\\nimport {BytesUtils} from \\\"../wrapper/BytesUtils.sol\\\";\\nimport {HexUtils} from \\\"./HexUtils.sol\\\";\\n\\nerror OffchainLookup(\\n    address sender,\\n    string[] urls,\\n    bytes callData,\\n    bytes4 callbackFunction,\\n    bytes extraData\\n);\\n\\nstruct MulticallData {\\n    bytes name;\\n    bytes[] data;\\n    string[] gateways;\\n    bytes4 callbackFunction;\\n    address resolver;\\n    bytes metaData;\\n    bool[] failures;\\n}\\n\\nstruct OffchainLookupCallData {\\n    address sender;\\n    string[] urls;\\n    bytes callData;\\n}\\n\\nstruct OffchainLookupExtraData {\\n    bytes4 callbackFunction;\\n    bytes data;\\n}\\n\\ninterface BatchGateway {\\n    function query(\\n        OffchainLookupCallData[] memory data\\n    ) external returns (bool[] memory failures, bytes[] memory responses);\\n}\\n\\n/**\\n * The Universal Resolver is a contract that handles the work of resolving a name entirely onchain,\\n * making it possible to make a single smart contract call to resolve an FNS name.\\n */\\ncontract UniversalResolver is ERC165, Ownable {\\n    using Address for address;\\n    using NameEncoder for string;\\n    using BytesUtils for bytes;\\n    using HexUtils for bytes;\\n\\n    string[] public batchGatewayURLs;\\n    FNS public immutable registry;\\n\\n    constructor(address _registry, string[] memory _urls) {\\n        registry = FNS(_registry);\\n        batchGatewayURLs = _urls;\\n    }\\n\\n    function setGatewayURLs(string[] memory _urls) public onlyOwner {\\n        batchGatewayURLs = _urls;\\n    }\\n\\n    /**\\n     * @dev Performs FNS name resolution for the supplied name and resolution data.\\n     * @param name The name to resolve, in normalised and DNS-encoded form.\\n     * @param data The resolution data, as specified in ENSIP-10.\\n     * @return The result of resolving the name.\\n     */\\n    function resolve(\\n        bytes calldata name,\\n        bytes memory data\\n    ) external view returns (bytes memory, address) {\\n        return\\n            _resolveSingle(\\n                name,\\n                data,\\n                batchGatewayURLs,\\n                this.resolveSingleCallback.selector,\\n                \\\"\\\"\\n            );\\n    }\\n\\n    function resolve(\\n        bytes calldata name,\\n        bytes[] memory data\\n    ) external view returns (bytes[] memory, address) {\\n        return resolve(name, data, batchGatewayURLs);\\n    }\\n\\n    function resolve(\\n        bytes calldata name,\\n        bytes memory data,\\n        string[] memory gateways\\n    ) external view returns (bytes memory, address) {\\n        return\\n            _resolveSingle(\\n                name,\\n                data,\\n                gateways,\\n                this.resolveSingleCallback.selector,\\n                \\\"\\\"\\n            );\\n    }\\n\\n    function resolve(\\n        bytes calldata name,\\n        bytes[] memory data,\\n        string[] memory gateways\\n    ) public view returns (bytes[] memory, address) {\\n        return\\n            _resolve(name, data, gateways, this.resolveCallback.selector, \\\"\\\");\\n    }\\n\\n    function _resolveSingle(\\n        bytes calldata name,\\n        bytes memory data,\\n        string[] memory gateways,\\n        bytes4 callbackFunction,\\n        bytes memory metaData\\n    ) public view returns (bytes memory, address) {\\n        bytes[] memory dataArr = new bytes[](1);\\n        dataArr[0] = data;\\n        (bytes[] memory results, address resolver) = _resolve(\\n            name,\\n            dataArr,\\n            gateways,\\n            callbackFunction,\\n            metaData\\n        );\\n        return (results[0], resolver);\\n    }\\n\\n    function _resolve(\\n        bytes calldata name,\\n        bytes[] memory data,\\n        string[] memory gateways,\\n        bytes4 callbackFunction,\\n        bytes memory metaData\\n    ) internal view returns (bytes[] memory results, address resolverAddress) {\\n        (Resolver resolver, ) = findResolver(name);\\n        resolverAddress = address(resolver);\\n        if (resolverAddress == address(0)) {\\n            return (results, address(0));\\n        }\\n\\n        results = _multicall(\\n            MulticallData(\\n                name,\\n                data,\\n                gateways,\\n                callbackFunction,\\n                resolverAddress,\\n                metaData,\\n                new bool[](data.length)\\n            )\\n        );\\n    }\\n\\n    function reverse(\\n        bytes calldata reverseName\\n    ) external view returns (string memory, address, address, address) {\\n        return reverse(reverseName, batchGatewayURLs);\\n    }\\n\\n    /**\\n     * @dev Performs FNS name reverse resolution for the supplied reverse name.\\n     * @param reverseName The reverse name to resolve, in normalised and DNS-encoded form. e.g. b6E040C9ECAaE172a89bD561c5F73e1C48d28cd9.addr.reverse\\n     * @return The resolved name, the resolved address, the reverse resolver address, and the resolver address.\\n     */\\n    function reverse(\\n        bytes calldata reverseName,\\n        string[] memory gateways\\n    ) public view returns (string memory, address, address, address) {\\n        bytes memory encodedCall = abi.encodeCall(\\n            INameResolver.name,\\n            reverseName.namehash(0)\\n        );\\n        (\\n            bytes memory resolvedReverseData,\\n            address reverseResolverAddress\\n        ) = _resolveSingle(\\n                reverseName,\\n                encodedCall,\\n                gateways,\\n                this.reverseCallback.selector,\\n                \\\"\\\"\\n            );\\n\\n        return\\n            getForwardDataFromReverse(\\n                resolvedReverseData,\\n                reverseResolverAddress,\\n                gateways\\n            );\\n    }\\n\\n    function getForwardDataFromReverse(\\n        bytes memory resolvedReverseData,\\n        address reverseResolverAddress,\\n        string[] memory gateways\\n    ) internal view returns (string memory, address, address, address) {\\n        string memory resolvedName = abi.decode(resolvedReverseData, (string));\\n\\n        (bytes memory encodedName, bytes32 namehash) = resolvedName\\n            .dnsEncodeName();\\n\\n        bytes memory encodedCall = abi.encodeCall(IAddrResolver.addr, namehash);\\n        bytes memory metaData = abi.encode(\\n            resolvedName,\\n            reverseResolverAddress\\n        );\\n        (bytes memory resolvedData, address resolverAddress) = this\\n            ._resolveSingle(\\n                encodedName,\\n                encodedCall,\\n                gateways,\\n                this.reverseCallback.selector,\\n                metaData\\n            );\\n\\n        address resolvedAddress = abi.decode(resolvedData, (address));\\n\\n        return (\\n            resolvedName,\\n            resolvedAddress,\\n            reverseResolverAddress,\\n            resolverAddress\\n        );\\n    }\\n\\n    function resolveSingleCallback(\\n        bytes calldata response,\\n        bytes calldata extraData\\n    ) external view returns (bytes memory, address) {\\n        (bytes[] memory results, address resolver, , ) = _resolveCallback(\\n            response,\\n            extraData,\\n            this.resolveSingleCallback.selector\\n        );\\n        return (results[0], resolver);\\n    }\\n\\n    function resolveCallback(\\n        bytes calldata response,\\n        bytes calldata extraData\\n    ) external view returns (bytes[] memory, address) {\\n        (bytes[] memory results, address resolver, , ) = _resolveCallback(\\n            response,\\n            extraData,\\n            this.resolveCallback.selector\\n        );\\n        return (results, resolver);\\n    }\\n\\n    function reverseCallback(\\n        bytes calldata response,\\n        bytes calldata extraData\\n    ) external view returns (string memory, address, address, address) {\\n        (\\n            bytes[] memory resolvedData,\\n            address resolverAddress,\\n            string[] memory gateways,\\n            bytes memory metaData\\n        ) = _resolveCallback(\\n                response,\\n                extraData,\\n                this.reverseCallback.selector\\n            );\\n\\n        if (metaData.length > 0) {\\n            (string memory resolvedName, address reverseResolverAddress) = abi\\n                .decode(metaData, (string, address));\\n            address resolvedAddress = abi.decode(resolvedData[0], (address));\\n            return (\\n                resolvedName,\\n                resolvedAddress,\\n                reverseResolverAddress,\\n                resolverAddress\\n            );\\n        }\\n\\n        return\\n            getForwardDataFromReverse(\\n                resolvedData[0],\\n                resolverAddress,\\n                gateways\\n            );\\n    }\\n\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override returns (bool) {\\n        return\\n            interfaceId == type(IExtendedResolver).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    function _resolveCallback(\\n        bytes calldata response,\\n        bytes calldata extraData,\\n        bytes4 callbackFunction\\n    )\\n        internal\\n        view\\n        returns (bytes[] memory, address, string[] memory, bytes memory)\\n    {\\n        MulticallData memory multicallData;\\n        multicallData.callbackFunction = callbackFunction;\\n        (bool[] memory failures, bytes[] memory responses) = abi.decode(\\n            response,\\n            (bool[], bytes[])\\n        );\\n        OffchainLookupExtraData[] memory extraDatas;\\n        (\\n            multicallData.resolver,\\n            multicallData.gateways,\\n            multicallData.metaData,\\n            extraDatas\\n        ) = abi.decode(\\n            extraData,\\n            (address, string[], bytes, OffchainLookupExtraData[])\\n        );\\n        require(responses.length <= extraDatas.length);\\n        multicallData.data = new bytes[](extraDatas.length);\\n        multicallData.failures = new bool[](extraDatas.length);\\n        uint256 offchainCount = 0;\\n        for (uint256 i = 0; i < extraDatas.length; i++) {\\n            if (extraDatas[i].callbackFunction == bytes4(0)) {\\n                // This call did not require an offchain lookup; use the previous input data.\\n                multicallData.data[i] = extraDatas[i].data;\\n            } else {\\n                if (failures[offchainCount]) {\\n                    multicallData.failures[i] = true;\\n                    multicallData.data[i] = responses[offchainCount];\\n                } else {\\n                    multicallData.data[i] = abi.encodeWithSelector(\\n                        extraDatas[i].callbackFunction,\\n                        responses[offchainCount],\\n                        extraDatas[i].data\\n                    );\\n                }\\n                offchainCount = offchainCount + 1;\\n            }\\n        }\\n\\n        return (\\n            _multicall(multicallData),\\n            multicallData.resolver,\\n            multicallData.gateways,\\n            multicallData.metaData\\n        );\\n    }\\n\\n    /**\\n     * @dev Makes a call to `target` with `data`. If the call reverts with an `OffchainLookup` error, wraps\\n     *      the error with the data necessary to continue the request where it left off.\\n     * @param target The address to call.\\n     * @param data The data to call `target` with.\\n     * @return offchain Whether the call reverted with an `OffchainLookup` error.\\n     * @return returnData If `target` did not revert, contains the return data from the call to `target`. Otherwise, contains a `OffchainLookupCallData` struct.\\n     * @return extraData If `target` did not revert, is empty. Otherwise, contains a `OffchainLookupExtraData` struct.\\n     * @return result Whether the call succeeded.\\n     */\\n    function callWithOffchainLookupPropagation(\\n        address target,\\n        bytes memory data\\n    )\\n        internal\\n        view\\n        returns (\\n            bool offchain,\\n            bytes memory returnData,\\n            OffchainLookupExtraData memory extraData,\\n            bool result\\n        )\\n    {\\n        result = LowLevelCallUtils.functionStaticCall(address(target), data);\\n        uint256 size = LowLevelCallUtils.returnDataSize();\\n\\n        if (result) {\\n            return (\\n                false,\\n                LowLevelCallUtils.readReturnData(0, size),\\n                extraData,\\n                true\\n            );\\n        }\\n\\n        // Failure\\n        if (size >= 4) {\\n            bytes memory errorId = LowLevelCallUtils.readReturnData(0, 4);\\n            // Offchain lookup. Decode the revert message and create our own that nests it.\\n            bytes memory revertData = LowLevelCallUtils.readReturnData(\\n                4,\\n                size - 4\\n            );\\n            if (bytes4(errorId) == OffchainLookup.selector) {\\n                (\\n                    address wrappedSender,\\n                    string[] memory wrappedUrls,\\n                    bytes memory wrappedCallData,\\n                    bytes4 wrappedCallbackFunction,\\n                    bytes memory wrappedExtraData\\n                ) = abi.decode(\\n                        revertData,\\n                        (address, string[], bytes, bytes4, bytes)\\n                    );\\n                if (wrappedSender == target) {\\n                    returnData = abi.encode(\\n                        OffchainLookupCallData(\\n                            wrappedSender,\\n                            wrappedUrls,\\n                            wrappedCallData\\n                        )\\n                    );\\n                    extraData = OffchainLookupExtraData(\\n                        wrappedCallbackFunction,\\n                        wrappedExtraData\\n                    );\\n                    return (true, returnData, extraData, false);\\n                }\\n            } else {\\n                returnData = revertData;\\n                return (false, returnData, extraData, false);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Finds a resolver by recursively querying the registry, starting at the longest name and progressively\\n     *      removing labels until it finds a result.\\n     * @param name The name to resolve, in DNS-encoded and normalised form.\\n     * @return The Resolver responsible for this name, and the namehash of the full name.\\n     */\\n    function findResolver(\\n        bytes calldata name\\n    ) public view returns (Resolver, bytes32) {\\n        (address resolver, bytes32 labelhash) = findResolver(name, 0);\\n        return (Resolver(resolver), labelhash);\\n    }\\n\\n    function findResolver(\\n        bytes calldata name,\\n        uint256 offset\\n    ) internal view returns (address, bytes32) {\\n        uint256 labelLength = uint256(uint8(name[offset]));\\n        if (labelLength == 0) {\\n            return (address(0), bytes32(0));\\n        }\\n        uint256 nextLabel = offset + labelLength + 1;\\n        bytes32 labelHash;\\n        if (\\n            labelLength == 66 &&\\n            // 0x5b == '['\\n            name[offset + 1] == 0x5b &&\\n            // 0x5d == ']'\\n            name[nextLabel - 1] == 0x5d\\n        ) {\\n            // Encrypted label\\n            (labelHash, ) = bytes(name[offset + 2:nextLabel - 1])\\n                .hexStringToBytes32(0, 64);\\n        } else {\\n            labelHash = keccak256(name[offset + 1:nextLabel]);\\n        }\\n        (address parentresolver, bytes32 parentnode) = findResolver(\\n            name,\\n            nextLabel\\n        );\\n        bytes32 node = keccak256(abi.encodePacked(parentnode, labelHash));\\n        address resolver = registry.resolver(node);\\n        if (resolver != address(0)) {\\n            return (resolver, node);\\n        }\\n        return (parentresolver, node);\\n    }\\n\\n    function _hasExtendedResolver(\\n        address resolver\\n    ) internal view returns (bool) {\\n        try\\n            Resolver(resolver).supportsInterface(\\n                type(IExtendedResolver).interfaceId\\n            )\\n        returns (bool supported) {\\n            return supported;\\n        } catch {\\n            return false;\\n        }\\n    }\\n\\n    function _multicall(\\n        MulticallData memory multicallData\\n    ) internal view returns (bytes[] memory results) {\\n        uint256 length = multicallData.data.length;\\n        uint256 offchainCount = 0;\\n        OffchainLookupCallData[]\\n            memory callDatas = new OffchainLookupCallData[](length);\\n        OffchainLookupExtraData[]\\n            memory extraDatas = new OffchainLookupExtraData[](length);\\n        results = new bytes[](length);\\n        bool isCallback = multicallData.name.length == 0;\\n        bool hasExtendedResolver = _hasExtendedResolver(multicallData.resolver);\\n\\n        for (uint256 i = 0; i < length; i++) {\\n            bytes memory item = multicallData.data[i];\\n            bool failure = multicallData.failures[i];\\n            if (failure) {\\n                results[i] = item;\\n                continue;\\n            }\\n            if (!isCallback && hasExtendedResolver) {\\n                item = abi.encodeCall(\\n                    IExtendedResolver.resolve,\\n                    (multicallData.name, item)\\n                );\\n            }\\n            (\\n                bool offchain,\\n                bytes memory returnData,\\n                OffchainLookupExtraData memory extraData,\\n                bool success\\n            ) = callWithOffchainLookupPropagation(multicallData.resolver, item);\\n\\n            if (offchain) {\\n                callDatas[offchainCount] = abi.decode(\\n                    returnData,\\n                    (OffchainLookupCallData)\\n                );\\n                extraDatas[i] = extraData;\\n                offchainCount += 1;\\n                continue;\\n            }\\n\\n            if (success && hasExtendedResolver) {\\n                // if this is a successful resolve() call, unwrap the result\\n                returnData = abi.decode(returnData, (bytes));\\n            }\\n            results[i] = returnData;\\n            extraDatas[i].data = multicallData.data[i];\\n        }\\n\\n        if (offchainCount == 0) {\\n            return results;\\n        }\\n\\n        // Trim callDatas if offchain data exists\\n        assembly {\\n            mstore(callDatas, offchainCount)\\n        }\\n\\n        revert OffchainLookup(\\n            address(this),\\n            multicallData.gateways,\\n            abi.encodeWithSelector(BatchGateway.query.selector, callDatas),\\n            multicallData.callbackFunction,\\n            abi.encode(\\n                multicallData.resolver,\\n                multicallData.gateways,\\n                multicallData.metaData,\\n                extraDatas\\n            )\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x40f76d22f69d075a45decb05d05875f178401a5e0d948d26db97d578ab50bc09\",\"license\":\"MIT\"},\"contracts/wrapper/BytesUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ~0.8.17;\\n\\nlibrary BytesUtils {\\n    /*\\n     * @dev Returns the keccak-256 hash of a byte range.\\n     * @param self The byte string to hash.\\n     * @param offset The position to start hashing at.\\n     * @param len The number of bytes to hash.\\n     * @return The hash of the byte range.\\n     */\\n    function keccak(\\n        bytes memory self,\\n        uint256 offset,\\n        uint256 len\\n    ) internal pure returns (bytes32 ret) {\\n        require(offset + len <= self.length);\\n        assembly {\\n            ret := keccak256(add(add(self, 32), offset), len)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the FNS namehash of a DNS-encoded name.\\n     * @param self The DNS-encoded name to hash.\\n     * @param offset The offset at which to start hashing.\\n     * @return The namehash of the name.\\n     */\\n    function namehash(\\n        bytes memory self,\\n        uint256 offset\\n    ) internal pure returns (bytes32) {\\n        (bytes32 labelhash, uint256 newOffset) = readLabel(self, offset);\\n        if (labelhash == bytes32(0)) {\\n            require(offset == self.length - 1, \\\"namehash: Junk at end of name\\\");\\n            return bytes32(0);\\n        }\\n        return\\n            keccak256(abi.encodePacked(namehash(self, newOffset), labelhash));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak-256 hash of a DNS-encoded label, and the offset to the start of the next label.\\n     * @param self The byte string to read a label from.\\n     * @param idx The index to read a label at.\\n     * @return labelhash The hash of the label at the specified index, or 0 if it is the last label.\\n     * @return newIdx The index of the start of the next label.\\n     */\\n    function readLabel(\\n        bytes memory self,\\n        uint256 idx\\n    ) internal pure returns (bytes32 labelhash, uint256 newIdx) {\\n        require(idx < self.length, \\\"readLabel: Index out of bounds\\\");\\n        uint256 len = uint256(uint8(self[idx]));\\n        if (len > 0) {\\n            labelhash = keccak(self, idx + 1, len);\\n        } else {\\n            labelhash = bytes32(0);\\n        }\\n        newIdx = idx + len + 1;\\n    }\\n}\\n\",\"keccak256\":\"0x2da8ae9fc8146d3a179b9d7a83acf99f3c0d7dc3c248ee5aa739fedcaeb16ad0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200373a3803806200373a8339810160408190526200003491620001da565b6200003f336200006a565b6001600160a01b038216608052805162000061906001906020840190620000ba565b5050506200049c565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b82805482825590600052602060002090810192821562000105579160200282015b82811115620001055782518290620000f49082620003d0565b5091602001919060010190620000db565b506200011392915062000117565b5090565b80821115620001135760006200012e828262000138565b5060010162000117565b508054620001469062000341565b6000825580601f1062000157575050565b601f0160209004906000526020600020908101906200017791906200017a565b50565b5b808211156200011357600081556001016200017b565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715620001d257620001d262000191565b604052919050565b6000806040808486031215620001ef57600080fd5b83516001600160a01b03811681146200020757600080fd5b602085810151919450906001600160401b03808211156200022757600080fd5b8187019150601f88818401126200023d57600080fd5b82518281111562000252576200025262000191565b8060051b62000263868201620001a7565b918252848101860191868101908c8411156200027e57600080fd5b87870192505b838310156200032e578251868111156200029e5760008081fd5b8701603f81018e13620002b15760008081fd5b8881015187811115620002c857620002c862000191565b620002db818801601f19168b01620001a7565b8181528f8c838501011115620002f15760008081fd5b60005b8281101562000311578381018d01518282018d01528b01620002f4565b5060009181018b0191909152835250918701919087019062000284565b8099505050505050505050509250929050565b600181811c908216806200035657607f821691505b6020821081036200037757634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620003cb57600081815260208120601f850160051c81016020861015620003a65750805b601f850160051c820191505b81811015620003c757828155600101620003b2565b5050505b505050565b81516001600160401b03811115620003ec57620003ec62000191565b6200040481620003fd845462000341565b846200037d565b602080601f8311600181146200043c5760008415620004235750858301515b600019600386901b1c1916600185901b178555620003c7565b600085815260208120601f198616915b828110156200046d578886015182559484019460019091019084016200044c565b50858210156200048c5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60805161327b620004bf600039600081816101ea01526113b9015261327b6000f3fe608060405234801561001057600080fd5b50600436106101365760003560e01c80638e5ea8df116100b2578063b241d0d311610081578063e0a8541211610066578063e0a85412146102e6578063ec11c823146102f9578063f2fde38b1461030c57600080fd5b8063b241d0d3146102c0578063b4a85801146102d357600080fd5b80638e5ea8df146102485780639061b9231461025b578063a1cbcbaf1461026e578063a6b16419146102a057600080fd5b8063715018a6116101095780637b103999116100ee5780637b103999146101e55780638da5cb5b146102245780638e25a0f31461023557600080fd5b8063715018a6146101c857806376286c00146101d257600080fd5b806301ffc9a71461013b5780630667cfea14610163578063206c74c9146101845780636dc4fb73146101a5575b600080fd5b61014e610149366004612091565b61031f565b60405190151581526020015b60405180910390f35b6101766101713660046122b1565b610356565b60405161015a92919061238f565b61019761019236600461243a565b61038b565b60405161015a9291906124a3565b6101b86101b3366004612518565b610479565b60405161015a9493929190612584565b6101d0610546565b005b6101976101e03660046125c0565b61055a565b61020c7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161015a565b6000546001600160a01b031661020c565b61017661024336600461261f565b610582565b6101d06102563660046126e5565b610618565b610176610269366004612722565b610637565b61028161027c366004612781565b610730565b604080516001600160a01b03909316835260208301919091520161015a565b6102b36102ae3660046127c3565b610751565b60405161015a91906127dc565b6101b86102ce3660046127ef565b6107fd565b6101976102e1366004612518565b6108ee565b6101766102f4366004612518565b610932565b6101b8610307366004612781565b610996565b6101d061031a366004612863565b610a8b565b60006001600160e01b03198216639061b92360e01b148061035057506301ffc9a760e01b6001600160e01b03198316145b92915050565b6060600061037e8686868663e0a8541260e01b60405180602001604052806000815250610582565b9150915094509492505050565b6060600061046c8585856001805480602002602001604051908101604052809291908181526020016000905b828210156104635783829060005260206000200180546103d690612880565b80601f016020809104026020016040519081016040528092919081815260200182805461040290612880565b801561044f5780601f106104245761010080835404028352916020019161044f565b820191906000526020600020905b81548152906001019060200180831161043257829003601f168201915b5050505050815260200190600101906103b7565b5050505061055a565b915091505b935093915050565b606060008080808080806104978c8c8c8c636dc4fb7360e01b610b20565b935093509350935060008151111561050957600080828060200190518101906104c091906128ff565b915091506000866000815181106104d9576104d9612951565b60200260200101518060200190518101906104f49190612967565b929a50919850965092945061053b9350505050565b61052e8460008151811061051f5761051f612951565b60200260200101518484610e94565b9750975097509750505050505b945094509450949050565b61054e610ff5565b610558600061104f565b565b6060600061037e8686868663b4a8580160e01b604051806020016040528060008152506110b7565b6040805160018082528183019092526060916000918291816020015b606081526020019060019003908161059e57905050905086816000815181106105c9576105c9612951565b60200260200101819052506000806105e58b8b858b8b8b6110b7565b91509150816000815181106105fc576105fc612951565b602002602001015181945094505050505b965096945050505050565b610620610ff5565b8051610633906001906020840190611fbe565b5050565b6060600061046c8585856001805480602002602001604051908101604052809291908181526020016000905b8282101561070f57838290600052602060002001805461068290612880565b80601f01602080910402602001604051908101604052809291908181526020018280546106ae90612880565b80156106fb5780601f106106d0576101008083540402835291602001916106fb565b820191906000526020600020905b8154815290600101906020018083116106de57829003601f168201915b505050505081526020019060010190610663565b5050505063e0a8541260e01b60405180602001604052806000815250610582565b600080600080610742868660006111ba565b909450925050505b9250929050565b6001818154811061076157600080fd5b90600052602060002001600091509050805461077c90612880565b80601f01602080910402602001604051908101604052809291908181526020018280546107a890612880565b80156107f55780601f106107ca576101008083540402835291602001916107f5565b820191906000526020600020905b8154815290600101906020018083116107d857829003601f168201915b505050505081565b6060600080600080610849600089898080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092939250506114569050565b60405160240161085b91815260200190565b60408051601f19818403018152918152602080830180516001600160e01b03167f691f3431000000000000000000000000000000000000000000000000000000001790528151908101909152600080825291925081906108cb908b908b9086908c90636dc4fb7360e01b90610582565b915091506108da82828a610e94565b965096509650965050505093509350935093565b606060008080610921888888887fb4a8580100000000000000000000000000000000000000000000000000000000610b20565b50919a909950975050505050505050565b606060008080610965888888887fe0a8541200000000000000000000000000000000000000000000000000000000610b20565b5050915091508160008151811061097e5761097e612951565b60200260200101518193509350505094509492505050565b60606000806000610a7986866001805480602002602001604051908101604052809291908181526020016000905b82821015610a705783829060005260206000200180546109e390612880565b80601f0160208091040260200160405190810160405280929190818152602001828054610a0f90612880565b8015610a5c5780601f10610a3157610100808354040283529160200191610a5c565b820191906000526020600020905b815481529060010190602001808311610a3f57829003601f168201915b5050505050815260200190600101906109c4565b505050506107fd565b93509350935093505b92959194509250565b610a93610ff5565b6001600160a01b038116610b145760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b610b1d8161104f565b50565b60606000606080610b7a6040518060e0016040528060608152602001606081526020016060815260200160006001600160e01b031916815260200160006001600160a01b0316815260200160608152602001606081525090565b6001600160e01b031986166060820152600080610b998b8d018d612992565b90925090506060610bac8a8c018c612a4a565b60a088019190915260408701919091526001600160a01b039091166080860152805183519192501015610bde57600080fd5b805167ffffffffffffffff811115610bf857610bf86120f7565b604051908082528060200260200182016040528015610c2b57816020015b6060815260200190600190039081610c165790505b506020850152805167ffffffffffffffff811115610c4b57610c4b6120f7565b604051908082528060200260200182016040528015610c74578160200160208202803683370190505b5060c08501526000805b8251811015610e62578251600090849083908110610c9e57610c9e612951565b6020026020010151600001516001600160e01b03191603610cfd57828181518110610ccb57610ccb612951565b60200260200101516020015186602001518281518110610ced57610ced612951565b6020026020010181905250610e50565b848281518110610d0f57610d0f612951565b602002602001015115610d865760018660c001518281518110610d3457610d34612951565b602002602001019015159081151581525050838281518110610d5857610d58612951565b602002602001015186602001518281518110610d7657610d76612951565b6020026020010181905250610e42565b828181518110610d9857610d98612951565b602002602001015160000151848381518110610db657610db6612951565b6020026020010151848381518110610dd057610dd0612951565b602002602001015160200151604051602401610ded929190612ba9565b604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b03838183161783525050505086602001518281518110610e3657610e36612951565b60200260200101819052505b610e4d826001612bed565b91505b80610e5a81612c00565b915050610c7e565b50610e6c85611515565b856080015186604001518760a001519850985098509850505050505095509550955095915050565b606060008060008087806020019051810190610eb09190612c19565b9050600080610ebe83611913565b91509150600081604051602401610ed791815260200190565b60408051601f19818403018152918152602080830180516001600160e01b03167f3b3b57de000000000000000000000000000000000000000000000000000000001790529051919250600091610f319187918e910161238f565b6040516020818303038152906040529050600080306001600160a01b0316638e25a0f387868f636dc4fb7360e01b886040518663ffffffff1660e01b8152600401610f80959493929190612ca3565b600060405180830381865afa158015610f9d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610fc591908101906128ff565b91509150600082806020019051810190610fdf9190612967565b979f979e50909b50959950505050505050505050565b6000546001600160a01b031633146105585760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610b0b565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60606000806110c68989610730565b5091508190506001600160a01b0381166110e457506000905061060d565b604080516101006020601f8c01819004028201810190925260e081018a81526111ac928291908d908d9081908501838280828437600092019190915250505090825250602081018a9052604081018990526001600160e01b0319881660608201526001600160a01b038516608082015260a08101879052895160c09091019067ffffffffffffffff81111561117b5761117b6120f7565b6040519080825280602002602001820160405280156111a4578160200160208202803683370190505b509052611515565b925050965096945050505050565b60008060008585858181106111d1576111d1612951565b919091013560f81c91505060008190036111f2575060009150819050610471565b60006111fe8286612bed565b611209906001612bed565b9050600082604214801561124f57508787611225886001612bed565b81811061123457611234612951565b9050013560f81c60f81b6001600160f81b031916605b60f81b145b801561128d57508787611263600185612d0c565b81811061127257611272612951565b9050013560f81c60f81b6001600160f81b031916605d60f81b145b15611305576112fd600060408a8a6112a68b6002612bed565b906112b2600189612d0c565b926112bf93929190612d1f565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929493925050611b3c9050565b509050611337565b8787611312886001612bed565b61131e92859290612d1f565b60405161132c929190612d49565b604051809103902090505b6000806113458a8a866111ba565b9150915060008184604051602001611367929190918252602082015260400190565b60408051601f198184030181529082905280516020909101207f0178b8bf0000000000000000000000000000000000000000000000000000000082526004820181905291506000906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690630178b8bf90602401602060405180830381865afa158015611400573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114249190612967565b90506001600160a01b038116156114445797509550610471945050505050565b50919a91995090975050505050505050565b60008060006114658585611c0d565b9092509050816114d7576001855161147d9190612d0c565b84146114cb5760405162461bcd60e51b815260206004820152601d60248201527f6e616d65686173683a204a756e6b20617420656e64206f66206e616d650000006044820152606401610b0b565b50600091506103509050565b6114e18582611456565b6040805160208101929092528101839052606001604051602081830303815290604052805190602001209250505092915050565b6020810151516060906000808267ffffffffffffffff81111561153a5761153a6120f7565b60405190808252806020026020018201604052801561159857816020015b611585604051806060016040528060006001600160a01b0316815260200160608152602001606081525090565b8152602001906001900390816115585790505b50905060008367ffffffffffffffff8111156115b6576115b66120f7565b6040519080825280602002602001820160405280156115fc57816020015b6040805180820190915260008152606060208201528152602001906001900390816115d45790505b5090508367ffffffffffffffff811115611618576116186120f7565b60405190808252806020026020018201604052801561164b57816020015b60608152602001906001900390816116365790505b508651516080880151919650159060009061166590611cc4565b905060005b868110156118575760008960200151828151811061168a5761168a612951565b6020026020010151905060008a60c0015183815181106116ac576116ac612951565b6020026020010151905080156116e157818a84815181106116cf576116cf612951565b60200260200101819052505050611845565b841580156116ec5750835b15611732578a5160405161170591908490602401612ba9565b60408051601f198184030181529190526020810180516001600160e01b0316639061b92360e01b17905291505b6000806000806117468f6080015187611d3a565b935093509350935083156117bb57828060200190518101906117689190612dd9565b8b8d8151811061177a5761177a612951565b6020026020010181905250818a888151811061179857611798612951565b60209081029190910101526117ae60018d612bed565b9b50505050505050611845565b8080156117c55750875b156117e157828060200190518101906117de9190612c19565b92505b828e88815181106117f4576117f4612951565b60200260200101819052508e60200151878151811061181557611815612951565b60200260200101518a888151811061182f5761182f612951565b6020026020010151602001819052505050505050505b8061184f81612c00565b91505061166a565b508460000361186b57505050505050919050565b84845230886040015163a780bab660e01b8660405160240161188d9190612ed4565b604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b0383818316178352505050508a606001518b608001518c604001518d60a00151896040516020016118e89493929190612f36565b60408051601f1981840301815290829052630556f18360e41b8252610b0b9594939291600401612fea565b80516060906000908190849061192a816002612bed565b67ffffffffffffffff811115611942576119426120f7565b6040519080825280601f01601f19166020018201604052801561196c576020820181803683370190505b509450600093508084036119b157600060f81b8560008151811061199257611992612951565b60200101906001600160f81b031916908160001a905350505050915091565b60001981015b8281815181106119c9576119c9612951565b01602001517fff00000000000000000000000000000000000000000000000000000000000000167f2e0000000000000000000000000000000000000000000000000000000000000003611a8b578360f81b868260010181518110611a2f57611a2f612951565b60200101906001600160f81b031916908160001a90535084611a58846001840160ff8816611eb3565b60408051602081019390935282015260600160405160208183030381529060405280519060200120945060009350611adb565b600184019350828181518110611aa357611aa3612951565b602001015160f81c60f81b868260010181518110611ac357611ac3612951565b60200101906001600160f81b031916908160001a9053505b8015611aea57600019016119b7565b5083611afb83600060ff8716611eb3565b6040805160208101939093528201526060016040516020818303038152906040528051906020012093508260f81b8560008151811061199257611992612951565b8251600090600190831115611b5057600080fd5b611ba1565b6000603a8210602f83111615611b6d5750602f190190565b60478210604083111615611b8357506036190190565b60678210606083111615611b9957506056190190565b5060ff919050565b60208501845b84811015611c0357611bbe8183015160001a611b55565b611bd06001830184015160001a611b55565b60ff811460ff83141715611be957600094505050611c03565b60049190911b1760089490941b9390931792600201611ba7565b5050935093915050565b60008083518310611c605760405162461bcd60e51b815260206004820152601e60248201527f726561644c6162656c3a20496e646578206f7574206f6620626f756e647300006044820152606401610b0b565b6000848481518110611c7457611c74612951565b016020015160f81c90508015611ca057611c9985611c93866001612bed565b83611eb3565b9250611ca5565b600092505b611caf8185612bed565b611cba906001612bed565b9150509250929050565b6040516301ffc9a760e01b8152639061b92360e01b60048201526000906001600160a01b038316906301ffc9a790602401602060405180830381865afa925050508015611d2e575060408051601f3d908101601f19168201909252611d2b9181019061301e565b60015b61035057506000919050565b60408051808201909152600080825260606020830181905290916000611d608686611ed7565b90503d8115611d86576000611d76600083611f69565b909550935060019150610a829050565b60048110611ea9576000611d9c60006004611f69565b90506000611db46004611daf8186612d0c565b611f69565b9050630556f18360e41b611dc78361303b565b6001600160e01b03191603611e9557600080600080600085806020019051810190611df29190613073565b945094509450945094508d6001600160a01b0316856001600160a01b031603611e8b576040518060600160405280866001600160a01b0316815260200185815260200184815250604051602001611e499190613123565b60408051601f198184030181528282019091526001600160e01b03199093168152602081019190915260019b50909950975060009650610a8295505050505050565b5050505050611ea6565b600096509450859250610a82915050565b50505b5092959194509250565b8251600090611ec28385612bed565b1115611ecd57600080fd5b5091016020012090565b60006001600160a01b0383163b611f565760405162461bcd60e51b815260206004820152602e60248201527f4c6f774c6576656c43616c6c5574696c733a207374617469632063616c6c207460448201527f6f206e6f6e2d636f6e74726163740000000000000000000000000000000000006064820152608401610b0b565b600080835160208501865afa9392505050565b60608167ffffffffffffffff811115611f8457611f846120f7565b6040519080825280601f01601f191660200182016040528015611fae576020820181803683370190505b5090508183602083013e92915050565b828054828255906000526020600020908101928215612004579160200282015b828111156120045782518290611ff49082613185565b5091602001919060010190611fde565b50612010929150612014565b5090565b808211156120105760006120288282612031565b50600101612014565b50805461203d90612880565b6000825580601f1061204d575050565b601f016020900490600052602060002090810190610b1d91905b808211156120105760008155600101612067565b6001600160e01b031981168114610b1d57600080fd5b6000602082840312156120a357600080fd5b81356120ae8161207b565b9392505050565b60008083601f8401126120c757600080fd5b50813567ffffffffffffffff8111156120df57600080fd5b60208301915083602082850101111561074a57600080fd5b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff81118282101715612130576121306120f7565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561215f5761215f6120f7565b604052919050565b600067ffffffffffffffff821115612181576121816120f7565b50601f01601f191660200190565b60006121a261219d84612167565b612136565b90508281528383830111156121b657600080fd5b828260208301376000602084830101529392505050565b600082601f8301126121de57600080fd5b6120ae8383356020850161218f565b600067ffffffffffffffff821115612207576122076120f7565b5060051b60200190565b600082601f83011261222257600080fd5b8135602061223261219d836121ed565b82815260059290921b8401810191818101908684111561225157600080fd5b8286015b848110156122a657803567ffffffffffffffff8111156122755760008081fd5b8701603f810189136122875760008081fd5b61229889868301356040840161218f565b845250918301918301612255565b509695505050505050565b600080600080606085870312156122c757600080fd5b843567ffffffffffffffff808211156122df57600080fd5b6122eb888389016120b5565b9096509450602087013591508082111561230457600080fd5b612310888389016121cd565b9350604087013591508082111561232657600080fd5b5061233387828801612211565b91505092959194509250565b60005b8381101561235a578181015183820152602001612342565b50506000910152565b6000815180845261237b81602086016020860161233f565b601f01601f19169290920160200192915050565b6040815260006123a26040830185612363565b90506001600160a01b03831660208301529392505050565b600082601f8301126123cb57600080fd5b813560206123db61219d836121ed565b82815260059290921b840181019181810190868411156123fa57600080fd5b8286015b848110156122a657803567ffffffffffffffff81111561241e5760008081fd5b61242c8986838b01016121cd565b8452509183019183016123fe565b60008060006040848603121561244f57600080fd5b833567ffffffffffffffff8082111561246757600080fd5b612473878388016120b5565b9095509350602086013591508082111561248c57600080fd5b50612499868287016123ba565b9150509250925092565b6000604082016040835280855180835260608501915060608160051b8601019250602080880160005b838110156124fa57605f198887030185526124e8868351612363565b955093820193908201906001016124cc565b50508394506001600160a01b03871681870152505050509392505050565b6000806000806040858703121561252e57600080fd5b843567ffffffffffffffff8082111561254657600080fd5b612552888389016120b5565b9096509450602087013591508082111561256b57600080fd5b50612578878288016120b5565b95989497509550505050565b6080815260006125976080830187612363565b6001600160a01b0395861660208401529385166040830152509216606090920191909152919050565b600080600080606085870312156125d657600080fd5b843567ffffffffffffffff808211156125ee57600080fd5b6125fa888389016120b5565b9096509450602087013591508082111561261357600080fd5b612310888389016123ba565b60008060008060008060a0878903121561263857600080fd5b863567ffffffffffffffff8082111561265057600080fd5b61265c8a838b016120b5565b9098509650602089013591508082111561267557600080fd5b6126818a838b016121cd565b9550604089013591508082111561269757600080fd5b6126a38a838b01612211565b9450606089013591506126b58261207b565b909250608088013590808211156126cb57600080fd5b506126d889828a016121cd565b9150509295509295509295565b6000602082840312156126f757600080fd5b813567ffffffffffffffff81111561270e57600080fd5b61271a84828501612211565b949350505050565b60008060006040848603121561273757600080fd5b833567ffffffffffffffff8082111561274f57600080fd5b61275b878388016120b5565b9095509350602086013591508082111561277457600080fd5b50612499868287016121cd565b6000806020838503121561279457600080fd5b823567ffffffffffffffff8111156127ab57600080fd5b6127b7858286016120b5565b90969095509350505050565b6000602082840312156127d557600080fd5b5035919050565b6020815260006120ae6020830184612363565b60008060006040848603121561280457600080fd5b833567ffffffffffffffff8082111561281c57600080fd5b612828878388016120b5565b9095509350602086013591508082111561284157600080fd5b5061249986828701612211565b6001600160a01b0381168114610b1d57600080fd5b60006020828403121561287557600080fd5b81356120ae8161284e565b600181811c9082168061289457607f821691505b6020821081036128b457634e487b7160e01b600052602260045260246000fd5b50919050565b600082601f8301126128cb57600080fd5b81516128d961219d82612167565b8181528460208386010111156128ee57600080fd5b61271a82602083016020870161233f565b6000806040838503121561291257600080fd5b825167ffffffffffffffff81111561292957600080fd5b612935858286016128ba565b92505060208301516129468161284e565b809150509250929050565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561297957600080fd5b81516120ae8161284e565b8015158114610b1d57600080fd5b600080604083850312156129a557600080fd5b823567ffffffffffffffff808211156129bd57600080fd5b818501915085601f8301126129d157600080fd5b813560206129e161219d836121ed565b82815260059290921b84018101918181019089841115612a0057600080fd5b948201945b83861015612a27578535612a1881612984565b82529482019490820190612a05565b96505086013592505080821115612a3d57600080fd5b50611cba858286016123ba565b60008060008060808587031215612a6057600080fd5b612a6a853561284e565b84359350602085013567ffffffffffffffff80821115612a8957600080fd5b612a9588838901612211565b94506040870135915080821115612aab57600080fd5b612ab7888389016121cd565b93506060870135915080821115612acd57600080fd5b818701915087601f830112612ae157600080fd5b8135612aef61219d826121ed565b8082825260208201915060208360051b86010192508a831115612b1157600080fd5b602085015b83811015612b99578481351115612b2c57600080fd5b803586016040818e03601f19011215612b4457600080fd5b612b4c61210d565b6020820135612b5a8161207b565b8152604082013587811115612b6e57600080fd5b612b7d8f6020838601016121cd565b6020830152508085525050602083019250602081019050612b16565b50979a9699509497505050505050565b604081526000612bbc6040830185612363565b8281036020840152612bce8185612363565b95945050505050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561035057610350612bd7565b600060018201612c1257612c12612bd7565b5060010190565b600060208284031215612c2b57600080fd5b815167ffffffffffffffff811115612c4257600080fd5b61271a848285016128ba565b600081518084526020808501808196508360051b8101915082860160005b85811015612c96578284038952612c84848351612363565b98850198935090840190600101612c6c565b5091979650505050505050565b60a081526000612cb660a0830188612363565b8281036020840152612cc88188612363565b90508281036040840152612cdc8187612c4e565b90506001600160e01b0319851660608401528281036080840152612d008185612363565b98975050505050505050565b8181038181111561035057610350612bd7565b60008085851115612d2f57600080fd5b83861115612d3c57600080fd5b5050820193919092039150565b8183823760009101908152919050565b600082601f830112612d6a57600080fd5b81516020612d7a61219d836121ed565b82815260059290921b84018101918181019086841115612d9957600080fd5b8286015b848110156122a657805167ffffffffffffffff811115612dbd5760008081fd5b612dcb8986838b01016128ba565b845250918301918301612d9d565b600060208284031215612deb57600080fd5b815167ffffffffffffffff80821115612e0357600080fd5b9083019060608286031215612e1757600080fd5b604051606081018181108382111715612e3257612e326120f7565b6040528251612e408161284e565b8152602083015182811115612e5457600080fd5b612e6087828601612d59565b602083015250604083015182811115612e7857600080fd5b612e84878286016128ba565b60408301525095945050505050565b6001600160a01b0381511682526000602082015160606020850152612ebb6060850182612c4e565b905060408301518482036040860152612bce8282612363565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015612f2957603f19888603018452612f17858351612e93565b94509285019290850190600101612efb565b5092979650505050505050565b6001600160a01b038516815260006020608081840152612f596080840187612c4e565b604084820381860152612f6c8288612363565b915084820360608601528186518084528484019150848160051b85010185890160005b83811015612fd857868303601f19018552815180516001600160e01b0319168452880151888401879052612fc587850182612363565b9589019593505090870190600101612f8f565b50909c9b505050505050505050505050565b6001600160a01b038616815260a06020820152600061300c60a0830187612c4e565b8281036040840152612cdc8187612363565b60006020828403121561303057600080fd5b81516120ae81612984565b6000815160208301516001600160e01b03198082169350600483101561306b5780818460040360031b1b83161693505b505050919050565b600080600080600060a0868803121561308b57600080fd5b85516130968161284e565b602087015190955067ffffffffffffffff808211156130b457600080fd5b6130c089838a01612d59565b955060408801519150808211156130d657600080fd5b6130e289838a016128ba565b9450606088015191506130f48261207b565b60808801519193508082111561310957600080fd5b50613116888289016128ba565b9150509295509295909350565b6020815260006120ae6020830184612e93565b601f82111561318057600081815260208120601f850160051c8101602086101561315d5750805b601f850160051c820191505b8181101561317c57828155600101613169565b5050505b505050565b815167ffffffffffffffff81111561319f5761319f6120f7565b6131b3816131ad8454612880565b84613136565b602080601f8311600181146131e857600084156131d05750858301515b600019600386901b1c1916600185901b17855561317c565b600085815260208120601f198616915b82811015613217578886015182559484019460019091019084016131f8565b50858210156132355787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056fea26469706673582212202da8a09bfcae76cf7a30d4c09b860eebb48b33576ee87b9963c96c0279db820064736f6c63430008110033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "findResolver(bytes)": {
        "details": "Finds a resolver by recursively querying the registry, starting at the longest name and progressively      removing labels until it finds a result.",
        "params": {
          "name": "The name to resolve, in DNS-encoded and normalised form."
        },
        "returns": {
          "_0": "The Resolver responsible for this name, and the namehash of the full name."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "resolve(bytes,bytes)": {
        "details": "Performs FNS name resolution for the supplied name and resolution data.",
        "params": {
          "data": "The resolution data, as specified in ENSIP-10.",
          "name": "The name to resolve, in normalised and DNS-encoded form."
        },
        "returns": {
          "_0": "The result of resolving the name."
        }
      },
      "reverse(bytes,string[])": {
        "details": "Performs FNS name reverse resolution for the supplied reverse name.",
        "params": {
          "reverseName": "The reverse name to resolve, in normalised and DNS-encoded form. e.g. b6E040C9ECAaE172a89bD561c5F73e1C48d28cd9.addr.reverse"
        },
        "returns": {
          "_0": "The resolved name, the resolved address, the reverse resolver address, and the resolver address."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "The Universal Resolver is a contract that handles the work of resolving a name entirely onchain, making it possible to make a single smart contract call to resolve an FNS name.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/utils/UniversalResolver.sol:UniversalResolver",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 24418,
        "contract": "contracts/utils/UniversalResolver.sol:UniversalResolver",
        "label": "batchGatewayURLs",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_string_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      }
    }
  }
}